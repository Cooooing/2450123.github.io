{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/keep/source/css/APlayer.min.css","path":"css/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/childTop1.jpg","path":"images/childTop1.jpg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/childTop2.jpg","path":"images/childTop2.jpg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/keep/source/images/friend_404.gif","path":"images/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/keep/source/images/head.jpg","path":"images/head.jpg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/lsy_head.jpg","path":"images/lsy_head.jpg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/mainTop1.jpg","path":"images/mainTop1.jpg","modified":0,"renderable":1},{"_id":"themes/keep/source/images/upyun.png","path":"images/upyun.png","modified":0,"renderable":1},{"_id":"themes/keep/source/js/APlayer.min.js","path":"js/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/code-copy.js","path":"js/code-copy.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/lifeTime.js","path":"js/lifeTime.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/myself/mouse.styl","path":"css/myself/mouse.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","path":"css/common/codeblock/copy-code.styl","modified":0,"renderable":1},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":0,"renderable":1},{"_id":"source/images/APlayer和MetingJS的使用/长岛.mp3","path":"images/APlayer和MetingJS的使用/长岛.mp3","modified":0,"renderable":0},{"_id":"source/images/APlayer和MetingJS的使用/长岛封面.png","path":"images/APlayer和MetingJS的使用/长岛封面.png","modified":0,"renderable":0},{"_id":"source/images/FastDFS笔记/传统存放方式.png","path":"images/FastDFS笔记/传统存放方式.png","modified":0,"renderable":0},{"_id":"source/images/FastDFS笔记/启动成功.png","path":"images/FastDFS笔记/启动成功.png","modified":0,"renderable":0},{"_id":"source/images/FastDFS笔记/分布式文件存储.png","path":"images/FastDFS笔记/分布式文件存储.png","modified":0,"renderable":0},{"_id":"source/images/FastDFS笔记/拓展模块执行流程.png","path":"images/FastDFS笔记/拓展模块执行流程.png","modified":0,"renderable":0},{"_id":"source/images/FastDFS笔记/集群的访问流程.png","path":"images/FastDFS笔记/集群的访问流程.png","modified":0,"renderable":0},{"_id":"source/images/FastDFS笔记/集群结构.png","path":"images/FastDFS笔记/集群结构.png","modified":0,"renderable":0},{"_id":"source/images/Markdown语法/分割线.png","path":"images/Markdown语法/分割线.png","modified":0,"renderable":0},{"_id":"source/images/Markdown语法/删除线和下划线.png","path":"images/Markdown语法/删除线和下划线.png","modified":0,"renderable":0},{"_id":"source/images/Markdown语法/列表嵌套.png","path":"images/Markdown语法/列表嵌套.png","modified":0,"renderable":0},{"_id":"source/images/Markdown语法/区块.png","path":"images/Markdown语法/区块.png","modified":0,"renderable":0},{"_id":"source/images/Markdown语法/字体.png","path":"images/Markdown语法/字体.png","modified":0,"renderable":0},{"_id":"source/images/Markdown语法/有序列表.png","path":"images/Markdown语法/有序列表.png","modified":0,"renderable":0},{"_id":"source/images/Nginx笔记/nginx欢迎页面.png","path":"images/Nginx笔记/nginx欢迎页面.png","modified":0,"renderable":0},{"_id":"source/images/Nginx笔记/nginx进程.png","path":"images/Nginx笔记/nginx进程.png","modified":0,"renderable":0},{"_id":"source/images/Markdown语法/无序列表.png","path":"images/Markdown语法/无序列表.png","modified":0,"renderable":0},{"_id":"source/images/Nginx笔记/动静分离架构.png","path":"images/Nginx笔记/动静分离架构.png","modified":0,"renderable":0},{"_id":"source/images/Nginx笔记/反向代理.png","path":"images/Nginx笔记/反向代理.png","modified":0,"renderable":0},{"_id":"source/images/Markdown语法/标题1.png","path":"images/Markdown语法/标题1.png","modified":0,"renderable":0},{"_id":"source/images/RabbitMQ笔记/AMQP协议机制.png","path":"images/RabbitMQ笔记/AMQP协议机制.png","modified":0,"renderable":0},{"_id":"source/images/Markdown语法/标题2.png","path":"images/Markdown语法/标题2.png","modified":0,"renderable":0},{"_id":"source/images/RabbitMQ笔记/direct交换器.png","path":"images/RabbitMQ笔记/direct交换器.png","modified":0,"renderable":0},{"_id":"source/images/RabbitMQ笔记/topic交换器.png","path":"images/RabbitMQ笔记/topic交换器.png","modified":0,"renderable":0},{"_id":"source/images/RabbitMQ笔记/fanout交换器.png","path":"images/RabbitMQ笔记/fanout交换器.png","modified":0,"renderable":0},{"_id":"source/images/RabbitMQ笔记/查看erlang版本.png","path":"images/RabbitMQ笔记/查看erlang版本.png","modified":0,"renderable":0},{"_id":"source/images/RabbitMQ笔记/浏览器访问管控台.png","path":"images/RabbitMQ笔记/浏览器访问管控台.png","modified":0,"renderable":0},{"_id":"source/images/SpringBoot笔记/SpringBoot目录结构.png","path":"images/SpringBoot笔记/SpringBoot目录结构.png","modified":0,"renderable":0},{"_id":"source/images/docker笔记/阿里云容器服务.png","path":"images/docker笔记/阿里云容器服务.png","modified":0,"renderable":0},{"_id":"source/images/docker笔记/docker安装.png","path":"images/docker笔记/docker安装.png","modified":0,"renderable":0},{"_id":"source/images/使用hexo框架在github-io上搭建博客网站/githubSSHKey.png","path":"images/使用hexo框架在github-io上搭建博客网站/githubSSHKey.png","modified":0,"renderable":0},{"_id":"source/images/使用hexo框架在github-io上搭建博客网站/index.png","path":"images/使用hexo框架在github-io上搭建博客网站/index.png","modified":0,"renderable":0},{"_id":"source/images/使用hexo框架在github-io上搭建博客网站/ssh.png","path":"images/使用hexo框架在github-io上搭建博客网站/ssh.png","modified":0,"renderable":0},{"_id":"source/images/关于健康码识别的网站开发进度记录/大体需求.png","path":"images/关于健康码识别的网站开发进度记录/大体需求.png","modified":0,"renderable":0},{"_id":"source/images/关于健康码识别的网站开发进度记录/数据库er图.png","path":"images/关于健康码识别的网站开发进度记录/数据库er图.png","modified":0,"renderable":0},{"_id":"source/images/其他/404.jpg","path":"images/其他/404.jpg","modified":0,"renderable":0},{"_id":"source/images/其他/childTop1.jpg","path":"images/其他/childTop1.jpg","modified":0,"renderable":0},{"_id":"source/images/其他/childTop2.jpg","path":"images/其他/childTop2.jpg","modified":0,"renderable":0},{"_id":"source/images/其他/favicon.png","path":"images/其他/favicon.png","modified":0,"renderable":0},{"_id":"source/images/其他/friend_404.gif","path":"images/其他/friend_404.gif","modified":0,"renderable":0},{"_id":"source/images/其他/head.jpg","path":"images/其他/head.jpg","modified":0,"renderable":0},{"_id":"source/images/其他/lsy_head.jpg","path":"images/其他/lsy_head.jpg","modified":0,"renderable":0},{"_id":"source/images/其他/mainTop1.jpg","path":"images/其他/mainTop1.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/0.jpg","path":"images/南京总统府/0.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/1.jpg","path":"images/南京总统府/1.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/10.jpg","path":"images/南京总统府/10.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/11.jpg","path":"images/南京总统府/11.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/12.jpg","path":"images/南京总统府/12.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/13.jpg","path":"images/南京总统府/13.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/14.jpg","path":"images/南京总统府/14.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/15.jpg","path":"images/南京总统府/15.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/16.jpg","path":"images/南京总统府/16.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/17.jpg","path":"images/南京总统府/17.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/19.jpg","path":"images/南京总统府/19.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/18.jpg","path":"images/南京总统府/18.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/2.jpg","path":"images/南京总统府/2.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/20.jpg","path":"images/南京总统府/20.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/21.jpg","path":"images/南京总统府/21.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/22.jpg","path":"images/南京总统府/22.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/23.jpg","path":"images/南京总统府/23.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/24.jpg","path":"images/南京总统府/24.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/25.jpg","path":"images/南京总统府/25.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/26.jpg","path":"images/南京总统府/26.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/27.jpg","path":"images/南京总统府/27.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/28.jpg","path":"images/南京总统府/28.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/29.jpg","path":"images/南京总统府/29.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/3.jpg","path":"images/南京总统府/3.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/30.jpg","path":"images/南京总统府/30.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/31.jpg","path":"images/南京总统府/31.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/32.jpg","path":"images/南京总统府/32.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/33.jpg","path":"images/南京总统府/33.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/34.jpg","path":"images/南京总统府/34.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/35.jpg","path":"images/南京总统府/35.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/36.jpg","path":"images/南京总统府/36.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/37.jpg","path":"images/南京总统府/37.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/38.jpg","path":"images/南京总统府/38.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/39.jpg","path":"images/南京总统府/39.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/4.jpg","path":"images/南京总统府/4.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/40.jpg","path":"images/南京总统府/40.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/41.jpg","path":"images/南京总统府/41.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/43.jpg","path":"images/南京总统府/43.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/42.jpg","path":"images/南京总统府/42.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/44.jpg","path":"images/南京总统府/44.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/45.jpg","path":"images/南京总统府/45.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/46.jpg","path":"images/南京总统府/46.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/47.jpg","path":"images/南京总统府/47.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/48.jpg","path":"images/南京总统府/48.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/49.jpg","path":"images/南京总统府/49.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/5.jpg","path":"images/南京总统府/5.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/50.jpg","path":"images/南京总统府/50.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/51.jpg","path":"images/南京总统府/51.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/52.jpg","path":"images/南京总统府/52.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/53.jpg","path":"images/南京总统府/53.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/54.jpg","path":"images/南京总统府/54.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/55.jpg","path":"images/南京总统府/55.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/56.jpg","path":"images/南京总统府/56.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/57.jpg","path":"images/南京总统府/57.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/58.jpg","path":"images/南京总统府/58.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/59.jpg","path":"images/南京总统府/59.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/6.jpg","path":"images/南京总统府/6.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/60.jpg","path":"images/南京总统府/60.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/61.jpg","path":"images/南京总统府/61.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/62.jpg","path":"images/南京总统府/62.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/63.jpg","path":"images/南京总统府/63.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/64.jpg","path":"images/南京总统府/64.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/65.jpg","path":"images/南京总统府/65.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/66.jpg","path":"images/南京总统府/66.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/67.jpg","path":"images/南京总统府/67.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/68.jpg","path":"images/南京总统府/68.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/69.jpg","path":"images/南京总统府/69.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/7.jpg","path":"images/南京总统府/7.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/70.jpg","path":"images/南京总统府/70.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/71.jpg","path":"images/南京总统府/71.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/72.jpg","path":"images/南京总统府/72.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/73.jpg","path":"images/南京总统府/73.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/74.jpg","path":"images/南京总统府/74.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/75.jpg","path":"images/南京总统府/75.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/8.jpg","path":"images/南京总统府/8.jpg","modified":0,"renderable":0},{"_id":"source/images/南京总统府/9.jpg","path":"images/南京总统府/9.jpg","modified":0,"renderable":0},{"_id":"source/images/计算机组成/主存储器的基本组成.png","path":"images/计算机组成/主存储器的基本组成.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/控制器的基本组成.png","path":"images/计算机组成/控制器的基本组成.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/早期冯诺依曼机.png","path":"images/计算机组成/早期冯诺依曼机.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/现代计算机结构.png","path":"images/计算机组成/现代计算机结构.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/现代计算机结构2.png","path":"images/计算机组成/现代计算机结构2.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/运算器基本组成.png","path":"images/计算机组成/运算器基本组成.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/三种级别的语言.png","path":"images/计算机组成/三种级别的语言.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/计算机系统的层次结构.png","path":"images/计算机组成/计算机系统的层次结构.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/ASCII码表.png","path":"images/计算机组成/ASCII码表.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/BCD码.png","path":"images/计算机组成/BCD码.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/大小端模式.png","path":"images/计算机组成/大小端模式.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/映射关系.png","path":"images/计算机组成/映射关系.png","modified":0,"renderable":0},{"_id":"source/images/计算机组成/汉字表示与编码.png","path":"images/计算机组成/汉字表示与编码.png","modified":0,"renderable":0},{"_id":"source/images/SSM源码学习笔记/类加载器.png","path":"images/SSM源码学习笔记/类加载器.png","modified":0,"renderable":0},{"_id":"source/images/单链表环问题/环.png","path":"images/单链表环问题/环.png","modified":0,"renderable":0},{"_id":"source/images/daily/2021-12-28-1.jpg","path":"images/daily/2021-12-28-1.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2021-12-28-2.jpg","path":"images/daily/2021-12-28-2.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-01-1.jpg","path":"images/daily/2022-09-01-1.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-01-2.jpg","path":"images/daily/2022-09-01-2.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-02.jpg","path":"images/daily/2022-09-02.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-05.jpg","path":"images/daily/2022-09-05.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-09-1.jpg","path":"images/daily/2022-09-09-1.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-09-3.jpg","path":"images/daily/2022-09-09-3.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-09-2.jpg","path":"images/daily/2022-09-09-2.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-10.jpg","path":"images/daily/2022-09-10.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-12.jpg","path":"images/daily/2022-09-12.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-21.jpg","path":"images/daily/2022-09-21.jpg","modified":0,"renderable":0},{"_id":"source/images/布隆过滤器/布隆过滤器初始状态.png","path":"images/布隆过滤器/布隆过滤器初始状态.png","modified":0,"renderable":0},{"_id":"source/images/布隆过滤器/布隆过滤器示例.png","path":"images/布隆过滤器/布隆过滤器示例.png","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-27-1.jpg","path":"images/daily/2022-09-27-1.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-27-2.jpg","path":"images/daily/2022-09-27-2.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-27-3.jpg","path":"images/daily/2022-09-27-3.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-29-1.jpg","path":"images/daily/2022-09-29-1.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-09-29-2.jpg","path":"images/daily/2022-09-29-2.jpg","modified":0,"renderable":0},{"_id":"source/images/daily/2022-10-01.png","path":"images/daily/2022-10-01.png","modified":0,"renderable":0},{"_id":"source/images/KMP和Manacher算法/回文模型1.png","path":"images/KMP和Manacher算法/回文模型1.png","modified":0,"renderable":0},{"_id":"source/images/设计模式/类的表示方式.png","path":"images/设计模式/类的表示方式.png","modified":0,"renderable":0},{"_id":"source/images/设计模式/聚合关系.png","path":"images/设计模式/聚合关系.png","modified":0,"renderable":0},{"_id":"source/images/设计模式/组合关系.png","path":"images/设计模式/组合关系.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_data/link.yml","hash":"3342a942c7673c2e21d86b8a097853d7c568d09a","modified":1660237136978},{"_id":"source/_data/links.yml","hash":"d5f652c99475f330c1870f8afca109db4e97a6d0","modified":1660312069574},{"_id":"source/_posts/APlayer和MetingJS的使用.md","hash":"bd928572ac28dc7c88783fe55ccb27add77fcd5e","modified":1660552672546},{"_id":"source/_posts/Nginx笔记.md","hash":"7539bfad77d099b0834f3be023488b9343e52045","modified":1660552855523},{"_id":"source/_posts/Docker笔记.md","hash":"16f84bd50327dccd3a3000996a66f81c6fadac49","modified":1660552787879},{"_id":"source/_posts/Markdown语法.md","hash":"8a8fcb81fd368a20917ba14050fcedb5b2bf15ab","modified":1660552855557},{"_id":"source/_posts/FastDFS笔记.md","hash":"fbcccb13ebc82db7c2021034f1b6188b33156b6e","modified":1660898089266},{"_id":"source/_posts/Redis笔记.md","hash":"4686dcc98c504e730d759130db616090ad2c2b6c","modified":1660552855507},{"_id":"source/_posts/RabbitMQ笔记.md","hash":"bfd533d0148703fb9fb722601f3eef0b68b8630a","modified":1661418853787},{"_id":"source/_posts/SpringBoot笔记.md","hash":"d450cc06f6d2d66949b3bf18117821ffe6444ec6","modified":1660552855572},{"_id":"source/_posts/unity笔记.md","hash":"8fd65b4fa6c8574927deb60ebd5c9d5a5649b532","modified":1662887277567},{"_id":"source/_posts/SpringSession笔记.md","hash":"87d2f089e21ecc4cea0e00487b6ec3a1d204b8ff","modified":1660552855492},{"_id":"source/_posts/Vuejs笔记.md","hash":"6cb7d41f4c87bb7aa602e8a6fe36756d46a7d1d4","modified":1662887277573},{"_id":"source/_posts/关于Schiphalast注册功能开发中的bug.md","hash":"b0759a1d5b190e254cf671cf32006040420744e6","modified":1660552802371},{"_id":"source/_posts/南京总统府.md","hash":"545a21a15e0d941951158238cb10a0b535394a5c","modified":1661587213320},{"_id":"source/_posts/使用hexo框架在github-io上搭建博客网站.md","hash":"c1c566f0ece08d2b35779922fa0fefa2dbe00431","modified":1660552802375},{"_id":"source/_posts/关于健康码识别的网站开发进度.md","hash":"980c1d9f63f916021034a52097e0179f5afde1bd","modified":1660999054289},{"_id":"source/about/index.md","hash":"e0be0870d6cb9440f323fc1d380bd7c80591fe95","modified":1660236438578},{"_id":"source/_posts/睡觉排序.md","hash":"bdd2d129ec7246ed282e581423fc6ca6ab653921","modified":1663287656571},{"_id":"source/_posts/猴子排序.md","hash":"760d7f26b41daba134f7c0c99310f3066def784f","modified":1663287656582},{"_id":"source/_posts/计算机组成.md","hash":"dab0a61f1aa38f542f47957ad77304a6b9c9cfc7","modified":1662887277578},{"_id":"source/link/index.md","hash":"cd262cf347cc3c680981c4efed41bdf2469bc1fd","modified":1660237139837},{"_id":"source/categories/index.md","hash":"95ed7922ca8e6fd9a7b47a7bd2e802bf78a131fe","modified":1660236279680},{"_id":"source/daily/index.md","hash":"5b530a28e5084e530ea659d6d3bcc6fea6c90f53","modified":1665035260571},{"_id":"source/tags/index.md","hash":"535ca41a8486d549c5639c906e93f81b0ab97d1a","modified":1660236257281},{"_id":"source/images/FastDFS笔记/启动成功.png","hash":"7030212ba84e755b55b0a2b4e4c3df0d23bc842d","modified":1660057955750},{"_id":"source/images/Markdown语法/删除线和下划线.png","hash":"fd4a84b0c0b6b4ff7f5bc5030daf0068fa459601","modified":1658643599987},{"_id":"source/images/Markdown语法/列表嵌套.png","hash":"eb631a8443cf1fa09445a961051b9a57e496a2ca","modified":1658643599987},{"_id":"source/images/Markdown语法/分割线.png","hash":"c2e94d184e012601452c2bc2f55a97c602e9312f","modified":1658643599986},{"_id":"source/images/Markdown语法/区块.png","hash":"0d3bcc22a09aaf6ab97159b5b36b33d853110127","modified":1658643599988},{"_id":"source/images/Markdown语法/有序列表.png","hash":"087ee8bf9bc24b2f83e259d64dc8102cabec5a67","modified":1658643599989},{"_id":"source/images/Markdown语法/字体.png","hash":"30e2df3b8229d55e6fd44e3e63cca6029fe39c42","modified":1658643599988},{"_id":"source/images/Nginx笔记/nginx欢迎页面.png","hash":"34356fe14d32dbe08dee73fe590ecc71aa6214aa","modified":1658643599990},{"_id":"source/images/Markdown语法/无序列表.png","hash":"940481306f718bb5426f2566eff0dc714176a3ee","modified":1658643599988},{"_id":"source/images/Nginx笔记/nginx进程.png","hash":"e6eeb99e547873c15576a322bbf39d3c00524a1a","modified":1658643599991},{"_id":"source/images/Nginx笔记/动静分离架构.png","hash":"6b63ea97dbf0bb1943bde9dc70a090058641e540","modified":1658643599991},{"_id":"source/images/Markdown语法/标题1.png","hash":"743160189bb397cb884d75360f252e006a717d4c","modified":1658643599989},{"_id":"source/images/RabbitMQ笔记/AMQP协议机制.png","hash":"ef93462c490014bd470e57398862a6033f09dc74","modified":1661071021872},{"_id":"source/images/Markdown语法/标题2.png","hash":"b76d978e249f44eff28cae40af70dd4195e3fb68","modified":1658643599990},{"_id":"source/images/RabbitMQ笔记/查看erlang版本.png","hash":"a997adc3d4d214f1d0a19fa13a1e1a92214dc490","modified":1660980826052},{"_id":"source/images/RabbitMQ笔记/浏览器访问管控台.png","hash":"3fe1bf0d6cca2b0c4990956122c17a9b6cd6886d","modified":1660982357692},{"_id":"source/images/docker笔记/docker安装.png","hash":"836a257af5d3acb9689180d3e398007fa075973e","modified":1658643599994},{"_id":"source/images/docker笔记/阿里云容器服务.png","hash":"cd8a520a510987d4bd5be12b8530c49438598748","modified":1658741277029},{"_id":"source/images/使用hexo框架在github-io上搭建博客网站/githubSSHKey.png","hash":"16997470c56a3706e89a5b93c5e2c1cd9281a406","modified":1658643599995},{"_id":"source/images/使用hexo框架在github-io上搭建博客网站/index.png","hash":"7dc1cf34652819e21bbaaa8b557a2e9e2792cd16","modified":1658643599995},{"_id":"source/images/使用hexo框架在github-io上搭建博客网站/ssh.png","hash":"38b8137cedbe88338b330b710b625d39babd49d8","modified":1658643599996},{"_id":"source/images/关于健康码识别的网站开发进度记录/数据库er图.png","hash":"ed9c6f6c9fbe7086fc21318c7b328ce14d486a03","modified":1658643599997},{"_id":"source/images/关于健康码识别的网站开发进度记录/大体需求.png","hash":"5e62b48c4f89dc5a07c9ff206c55dd1e0ebc2ee7","modified":1658643599997},{"_id":"source/images/其他/favicon.png","hash":"a994d701b472742a8532ce2778c7830f5da4f967","modified":1658643600006},{"_id":"source/images/其他/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1658643599998},{"_id":"source/images/其他/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1658643600008},{"_id":"source/images/其他/head.jpg","hash":"8209838b2166bb90d5ed812302b0df99c66e7544","modified":1658643600009},{"_id":"source/images/FastDFS笔记/传统存放方式.png","hash":"e324bc7a0e1c510d53d54f3b78864107b9aade54","modified":1660023185336},{"_id":"source/images/Nginx笔记/反向代理.png","hash":"b8abf86899d70d730c341312c546a284ee060491","modified":1658643599992},{"_id":"source/images/sunset/2022-09-02.jpg","hash":"87430007de933f6fe748e653353f0055d0953131","modified":1662118930991},{"_id":"source/images/sunset/2022-09-01-1.jpg","hash":"43ae8db2528f6c30cbf8e8a0cc6aec36f42cd52c","modified":1662029309564},{"_id":"source/images/南京总统府/29.jpg","hash":"26edaea1cf25a1c74547be3522bfd8dd4be17b5b","modified":1642760371000},{"_id":"source/images/南京总统府/57.jpg","hash":"25729e0481797a2c96922d114469eb58afb73cfc","modified":1642760373000},{"_id":"source/images/南京总统府/66.jpg","hash":"50826be7506fa6c0df24c53ffc89c2f243740e03","modified":1642760374000},{"_id":"source/images/计算机组成/现代计算机结构.png","hash":"8f896c701e247b6e09b12d076bfddd419c14a866","modified":1661933895097},{"_id":"source/images/计算机组成/现代计算机结构2.png","hash":"a4ca03fcf65915f93496bfccaab2a4d62ab00a0f","modified":1661934105389},{"_id":"source/images/FastDFS笔记/拓展模块执行流程.png","hash":"9325faf3dc599fc02b3067b3d9c822d070096041","modified":1660542234371},{"_id":"source/images/FastDFS笔记/分布式文件存储.png","hash":"a8b23283263db158a8d65680411e81162834dfef","modified":1660024216779},{"_id":"source/images/FastDFS笔记/集群的访问流程.png","hash":"429c38cc41349cd5ec3251d86c3eeab79cd3af76","modified":1660895115768},{"_id":"source/images/FastDFS笔记/集群结构.png","hash":"bf3a8a8ba2e5bf2ca8de3f90b62d7675f058aae4","modified":1660895217740},{"_id":"source/images/RabbitMQ笔记/direct交换器.png","hash":"d2f0a149e23bda3be93a0c07bb4ebc7a03e4aaf7","modified":1661072648376},{"_id":"source/images/SpringBoot笔记/SpringBoot目录结构.png","hash":"c203cbef70bb34637ad9850d3f1f3dace4f17cc6","modified":1658643599993},{"_id":"source/images/南京总统府/12.jpg","hash":"de9fcfbb776b71eb73e9008974fb33136cc6a7d9","modified":1642760383000},{"_id":"source/images/南京总统府/16.jpg","hash":"c227898bec835be24dd7214ee89c8069117a60db","modified":1642760380000},{"_id":"source/images/南京总统府/21.jpg","hash":"eacc583a3747ae609d509e087e3184269ab31de5","modified":1642760370000},{"_id":"source/images/南京总统府/26.jpg","hash":"fb949db95c72c8363bd626b05e1442a274a55a4b","modified":1642760374000},{"_id":"source/images/南京总统府/23.jpg","hash":"33e1cb0c34cf60f5a94c71ce6de9a6cf31561c20","modified":1642760374000},{"_id":"source/images/南京总统府/27.jpg","hash":"84b160ea6da81d5c18053a4c6eae6ac7beec1458","modified":1642760380000},{"_id":"source/images/南京总统府/30.jpg","hash":"0323841b14536050992c186384a9d14b679d917f","modified":1642760381000},{"_id":"source/images/南京总统府/34.jpg","hash":"f742f7d26601375034ab61ddccb0399bb0e632a0","modified":1642760380000},{"_id":"source/images/南京总统府/49.jpg","hash":"57101a21c2a1b13fe6c9c403f29ebc9fe5f232ad","modified":1642760370000},{"_id":"source/images/南京总统府/50.jpg","hash":"e57e602764425e980a2472bff0ed37eebdb2beb2","modified":1642760381000},{"_id":"source/images/南京总统府/46.jpg","hash":"3714f664631c59710b3ed84d372ae1376ccf1d92","modified":1642760377000},{"_id":"source/images/南京总统府/68.jpg","hash":"4b79b58e32502eaaaf0fe6638bfa8062a1780b52","modified":1642760378000},{"_id":"source/images/南京总统府/9.jpg","hash":"a018d37c90c381b664972cde134758dab3bd8672","modified":1642760378000},{"_id":"source/images/RabbitMQ笔记/topic交换器.png","hash":"9df1709c234f4563666d21a1985f6b5635b66f53","modified":1661073880430},{"_id":"source/images/RabbitMQ笔记/fanout交换器.png","hash":"118e058fc2fa1b29c64f679d8359b1d827ff1a87","modified":1661073212878},{"_id":"source/images/sunset/2022-09-01-2.jpg","hash":"700c5b17762fbf2b4bd9f55b619f1248b35b1e49","modified":1662031199003},{"_id":"source/images/其他/lsy_head.jpg","hash":"9011c234ada50326dbcd9cf74b7845c9bb0be5ab","modified":1658643600011},{"_id":"source/images/南京总统府/15.jpg","hash":"b43ee3f9bc56438fcf0cc99446ed4969a548d352","modified":1642760371000},{"_id":"source/images/南京总统府/33.jpg","hash":"917e8f4a2983f04eb80282aebcd072416b9d715b","modified":1642760375000},{"_id":"source/images/南京总统府/4.jpg","hash":"8dfe366d9081feb285f68c848a7928b58a209fe6","modified":1642760375000},{"_id":"source/images/南京总统府/37.jpg","hash":"c18e9a579b5b7a0ebf3ade7c8f51b254e89c7703","modified":1642760372000},{"_id":"source/images/南京总统府/43.jpg","hash":"02e9ce6947af86cb7f8a9e445424eee4a2d57ed4","modified":1642760377000},{"_id":"source/images/南京总统府/47.jpg","hash":"9e03060bff65a54729cd7d039aa6e09173255093","modified":1642760380000},{"_id":"source/images/南京总统府/54.jpg","hash":"d9723da8fd7cdb13269fb1b49f97fab53693dc6b","modified":1642760370000},{"_id":"source/images/南京总统府/60.jpg","hash":"52ccace7ee754142d8a2c91ff02d1793c4443a97","modified":1642760383000},{"_id":"source/images/南京总统府/7.jpg","hash":"c1e1b507ad1ddc72bca0b9c4bad1f0db07533db9","modified":1642760382000},{"_id":"source/images/南京总统府/72.jpg","hash":"1f341c74b54e1c33c7e5ab0a0efb5b2fd17078f6","modified":1661586506126},{"_id":"source/images/南京总统府/73.jpg","hash":"55ce082b0005a3b7cf8fe70ae125bbc4bb220462","modified":1661586505253},{"_id":"source/images/南京总统府/8.jpg","hash":"9d526c9717085cbd8dbbbe835570bfe68d2c78b2","modified":1642760380000},{"_id":"source/images/计算机组成/早期冯诺依曼机.png","hash":"338faa67070912fcc8b5f57ad4f53791ac48ffe4","modified":1661933262135},{"_id":"source/images/计算机组成/控制器的基本组成.png","hash":"ba824be492cf184952f1e368eb176d5cb7d94efb","modified":1661935314319},{"_id":"source/images/南京总统府/14.jpg","hash":"cd4c01083a8d228413d9fb110efd0f396889a718","modified":1642760373000},{"_id":"source/images/南京总统府/17.jpg","hash":"767fc0c8bbcc1a9a51d3103d32f3bcd2861656ff","modified":1642760371000},{"_id":"source/images/南京总统府/25.jpg","hash":"8dc4b4d9d6e34c50af2429d95df3e9eecd9a579e","modified":1642760379000},{"_id":"source/images/南京总统府/45.jpg","hash":"add7a704c1da1d4d6f831d7f6a4b6f8e472fb2c3","modified":1642760371000},{"_id":"source/images/南京总统府/48.jpg","hash":"ba0844b57900089c1c31406ac0c7b61a265e131b","modified":1642760376000},{"_id":"source/images/南京总统府/44.jpg","hash":"fd398e8a5cdc76725a5f586b0f0eadc013d7ec2d","modified":1642760382000},{"_id":"source/images/南京总统府/56.jpg","hash":"1119415be13ce41d644535568a2a601d7e439896","modified":1642760372000},{"_id":"source/images/南京总统府/63.jpg","hash":"d500726e94e547b211b0b27dcec10207f5dc93d2","modified":1642760377000},{"_id":"source/images/南京总统府/67.jpg","hash":"e7d7a5a2f2402614586dbe354c3677b58e939ba8","modified":1642760374000},{"_id":"source/images/南京总统府/69.jpg","hash":"c0375a4340015cb8ab0a77a8e4b28d97acae73ae","modified":1642760379000},{"_id":"source/images/南京总统府/70.jpg","hash":"323e0da055da9299b15e45ddca5e6aa2904c317e","modified":1642760382000},{"_id":"source/images/计算机组成/主存储器的基本组成.png","hash":"925315493ae08db611bcd0fc94e47417629cc278","modified":1661935033218},{"_id":"source/images/计算机组成/运算器基本组成.png","hash":"57724e832c9bd5b5599392e53ec1b66467d3d21a","modified":1661935219042},{"_id":"source/images/南京总统府/11.jpg","hash":"f32e10a6d286025b9e9292da732c5d5a520e18b9","modified":1642760375000},{"_id":"source/images/南京总统府/1.jpg","hash":"6a03ba72f8c932ff19bef06cbd5a7b02666376a1","modified":1642760380000},{"_id":"source/images/南京总统府/20.jpg","hash":"ae0259b4b2490552f0622e1cdfce33ae208e23c0","modified":1642760382000},{"_id":"source/images/南京总统府/32.jpg","hash":"04110caddf1d0cc49c9df6563bcf07814c6d2550","modified":1642760372000},{"_id":"source/images/南京总统府/42.jpg","hash":"b5c3096827a8e677babcf23c9a7e5c8b4b362c99","modified":1642760382000},{"_id":"source/images/南京总统府/5.jpg","hash":"a63b96a34eb47ce634c96c464a20fecef7d4e347","modified":1642760373000},{"_id":"source/images/南京总统府/53.jpg","hash":"012f52c147a7e7628e19f451d313a31d5994e57f","modified":1642760374000},{"_id":"source/images/南京总统府/52.jpg","hash":"d0f34f6af9231281b59640dd2619d822cfaead15","modified":1642760383000},{"_id":"source/images/南京总统府/65.jpg","hash":"1b2c090799e76a84d1c95b73692ed8226e9a9a43","modified":1642760381000},{"_id":"source/images/南京总统府/2.jpg","hash":"baf4b563eb8d249c215f3935f1198be6841a0df0","modified":1642760381000},{"_id":"source/images/南京总统府/36.jpg","hash":"6c092ab5511aeedc3935debf08bbcf8044e5b602","modified":1642760384000},{"_id":"source/images/南京总统府/39.jpg","hash":"f739e80f5ef8685e791c4fb06f52f60b9a61b9a5","modified":1642760376000},{"_id":"source/images/南京总统府/61.jpg","hash":"155c40f6961d50876de5d661283939ebcf0b104a","modified":1642760373000},{"_id":"source/images/南京总统府/10.jpg","hash":"40bca0ee569ebe069cc53c3d6b08e63de2112ca4","modified":1642760373000},{"_id":"source/images/南京总统府/18.jpg","hash":"94c913bf9e78240f87b966940cf43128f8711657","modified":1642760383000},{"_id":"source/images/南京总统府/3.jpg","hash":"9c7253bfb26116e3abf540fa64d76c052f445bc9","modified":1642760379000},{"_id":"source/images/南京总统府/40.jpg","hash":"8e8befbeff7dd2da086233df2c7ce374fbb548ee","modified":1642760370000},{"_id":"source/images/南京总统府/75.jpg","hash":"2f4c09185f5bc6044724fe70627a483e406e9d38","modified":1661586500762},{"_id":"source/images/南京总统府/22.jpg","hash":"aa47a1c7ff577b813cb304e34710e8c453c083db","modified":1642760377000},{"_id":"source/images/南京总统府/24.jpg","hash":"327ff120f3e6ae63032d051ac7309c21627abc1f","modified":1642760370000},{"_id":"source/images/南京总统府/28.jpg","hash":"5bca80ae3f7af11bb1d91c4caea90027f02f1f05","modified":1642760372000},{"_id":"source/images/南京总统府/55.jpg","hash":"8e007ada5a6d2faa584bc8748092be2a6ac28f13","modified":1642760372000},{"_id":"source/images/南京总统府/59.jpg","hash":"8ded5537e37ad2b168b45f23d1534091824b24b2","modified":1642760378000},{"_id":"source/images/南京总统府/74.jpg","hash":"850f8391ce91b9d1bf1cc5f388825ee689d67744","modified":1661586504137},{"_id":"source/images/APlayer和MetingJS的使用/长岛封面.png","hash":"16f02c96ab89291abf38e13a8f8ebf2e51c8c467","modified":1660550201379},{"_id":"source/images/其他/childTop2.jpg","hash":"7ebb62616a1ae8912973123f5940a8aec3cfad45","modified":1658643600006},{"_id":"source/images/南京总统府/13.jpg","hash":"5f6dcbc0a72265d455d73367259282d5ad585781","modified":1642760377000},{"_id":"source/images/南京总统府/19.jpg","hash":"4f2282afa26ae00af58673b467122c5e7e6d4881","modified":1642760370000},{"_id":"source/images/南京总统府/41.jpg","hash":"41ce25718c0f4ab9adf7c33b996e6f6dfbb3bd62","modified":1642760376000},{"_id":"source/images/南京总统府/6.jpg","hash":"fcb66ed3e3ac9b5366b43c480de0b3ccd32e5b31","modified":1642760369000},{"_id":"source/images/南京总统府/71.jpg","hash":"b69713a5b745a6dabe79002244531e0bea80080b","modified":1661586508178},{"_id":"source/images/南京总统府/0.jpg","hash":"7f67ede7caae1c656503c99bf7b18ee8be8edb95","modified":1642760381000},{"_id":"source/images/南京总统府/58.jpg","hash":"df79dd7a6d16090d65c54eff07e85d538aa6af4b","modified":1642760377000},{"_id":"themes/keep/.editorconfig","hash":"26a27140a04ad1873639b19f8240fb2bae367878","modified":1660226742982},{"_id":"themes/keep/.gitignore","hash":"9f5eebec6128f0029691c28190673d959cb0f234","modified":1660226742983},{"_id":"themes/keep/.npmignore","hash":"48eee50624f0ad4ed5b37ae81e95f5e5cb4c7f7f","modified":1660226742983},{"_id":"themes/keep/README_zh-CN.md","hash":"d3bfa4f8720b73455d9e77f3e918de60daca01d7","modified":1660226742984},{"_id":"themes/keep/README.md","hash":"06ef53a5daecd42cfe7d653f9331e5ea66f1f590","modified":1660226742984},{"_id":"themes/keep/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1660226742984},{"_id":"themes/keep/package.json","hash":"a3be00d629d52f6cadde16fea48a0f68c288da07","modified":1660226742997},{"_id":"themes/keep/README_zh-TW.md","hash":"9913cf385c568a516055b27a9c944cc95263b3bc","modified":1660226742985},{"_id":"themes/keep/languages/en.yml","hash":"11902f5813fc994a0620580d3caecad0bd4f4bec","modified":1660226742985},{"_id":"themes/keep/_config.yml","hash":"0a11d2dfeb91cf58e6609e7fae7efc596f697433","modified":1662539679774},{"_id":"themes/keep/layout/archive-content.ejs","hash":"89e256133a128858702f3bd0a6cf8330f5a8f2f7","modified":1660226742994},{"_id":"themes/keep/languages/zh-CN.yml","hash":"f8b9da63093739b5b7a555e8d1aa0f30d38171dc","modified":1660226742986},{"_id":"themes/keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1660226742994},{"_id":"themes/keep/layout/category-list.ejs","hash":"17ea257cb28fb63c1e1650c157541d90a4f7fba5","modified":1660226742996},{"_id":"themes/keep/languages/zh-TW.yml","hash":"428b304a3ad542072bb578ed312bb06794a654e1","modified":1660226742986},{"_id":"themes/keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1662539297573},{"_id":"themes/keep/layout/category-content.ejs","hash":"9293aba389c0664335b3308cbb343e603ff1f24f","modified":1660226742995},{"_id":"themes/keep/layout/tag-content.ejs","hash":"379fad48764e11d7962f7cec730b0a6e932ef4a3","modified":1660226742997},{"_id":"themes/keep/layout/index.ejs","hash":"d04b5608fc801f00e247e7355c89a8643dc76914","modified":1660226742996},{"_id":"themes/keep/layout/article-content.ejs","hash":"9597d26784b62b0060950e8af2f71322013d3828","modified":1660226742995},{"_id":"themes/keep/layout/home-content.ejs","hash":"c6897b9a1f88f157bf9cb935fba43a13911871eb","modified":1660226742996},{"_id":"themes/keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1660226742997},{"_id":"themes/keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1660226742997},{"_id":"themes/keep/layout/layout.ejs","hash":"a6bdee77d82971ee6d20f415196341568ad10e42","modified":1660546905542},{"_id":"themes/keep/scripts/use-source-data.js","hash":"0dcab564f400e1775af8e839d9f1a219d0c003bb","modified":1660226742999},{"_id":"themes/keep/layout/page.ejs","hash":"ad0d0452ee61277805ac30c8d97b9bdd3d09cf89","modified":1662539411216},{"_id":"themes/keep/layout/_partial/article-copyright-info.ejs","hash":"2fec371f5b6f97cc6fc242aced9baacce93a6f86","modified":1660226742987},{"_id":"themes/keep/layout/_partial/archive-list.ejs","hash":"c51a44fd234c7bc5e265f6c0afe3b4c9ca665b0c","modified":1660226742987},{"_id":"themes/keep/layout/_partial/first-screen.ejs","hash":"e28d781dd6868b08e9007393495fae75c6e502aa","modified":1660226742990},{"_id":"themes/keep/layout/_partial/article-meta-info.ejs","hash":"fb04ac78cfee23b5f73b8721925e9c7fc168e2aa","modified":1660226742988},{"_id":"themes/keep/layout/_partial/footer.ejs","hash":"dc25f743fd0187bee9e67febf4bae0f2413a50bf","modified":1661564009639},{"_id":"themes/keep/layout/_partial/friends-link.ejs","hash":"e659c6a12c80ebf0cbe9f38a58425248702f8d2f","modified":1660226742990},{"_id":"themes/keep/layout/_partial/image-viewer.ejs","hash":"c30d3f046035b6c63ee90fc961f67cbc2d6073af","modified":1660226742992},{"_id":"themes/keep/layout/_partial/header.ejs","hash":"bb57e24ef7005175824f19ff4cb8537ce4771590","modified":1660545246096},{"_id":"themes/keep/layout/_partial/home-article-meta-info.ejs","hash":"f26d28c92ca79287d45cf20da6fdb0f68815c655","modified":1660226742991},{"_id":"themes/keep/layout/_partial/paginator.ejs","hash":"4183e4991a30132010d6428c9b2c51d198d268d8","modified":1660226742992},{"_id":"themes/keep/layout/_partial/head.ejs","hash":"77c3ac2a5b544cb7edf99cf75c1d06aa9075e472","modified":1661563791911},{"_id":"themes/keep/layout/_partial/post-tools.ejs","hash":"44a271ffbfb3af5c715ab25777cc58ddf9f62f82","modified":1660226742993},{"_id":"themes/keep/layout/_partial/local-search.ejs","hash":"747cd0ac75f31c9837abcbf5e06eac5501089d96","modified":1660226742992},{"_id":"themes/keep/layout/_partial/progress-bar.ejs","hash":"791c78e36e4191f5a738964d4fba545be2649cea","modified":1660226742993},{"_id":"themes/keep/layout/_partial/page-template.ejs","hash":"adec4312027a76b5969e78a2dd245563e4e6333f","modified":1660226742992},{"_id":"themes/keep/layout/_partial/tagcloud.ejs","hash":"3c1f80ec34a4db4d242b8b1c024ffa8de0ddac78","modified":1660226742994},{"_id":"themes/keep/scripts/filters/lazyload-handle.js","hash":"c62dc757815b23c04bfd9112136d39a7deb5709a","modified":1660226742998},{"_id":"themes/keep/layout/_partial/toc.ejs","hash":"27844ed7c138d907c25d0e198f5425fe0c0299b2","modified":1660226742994},{"_id":"themes/keep/layout/_partial/scripts.ejs","hash":"ea08752ab79d3c61e31fae9dd49afc0feff6f36a","modified":1660546749872},{"_id":"themes/keep/scripts/filters/link-handle.js","hash":"4c8fd067eaf4cce4776413abe90a9ea3f1f04bc7","modified":1660226742998},{"_id":"themes/keep/scripts/helpers/export-config.js","hash":"9099191029226a04aa7e633920dc3458fef940e7","modified":1660226742999},{"_id":"themes/keep/scripts/helpers/helper.js","hash":"9b149793aac46a1d7550ca2db49e215feffe1178","modified":1660226742999},{"_id":"themes/keep/layout/_partial/side-tools.ejs","hash":"3439e47a03651a3540541ba85d9ab0c9b456fc04","modified":1660226742994},{"_id":"themes/keep/source/css/style.styl","hash":"5a0a0249893a7f479b7847ed99cb270948c10cc4","modified":1660239621482},{"_id":"themes/keep/source/css/font-awesome.min.css","hash":"2c2236d61417d354b5cbbc907dfc9c0eb1325a7f","modified":1660226743003},{"_id":"themes/keep/source/css/APlayer.min.css","hash":"18aa12d3784d756ecf28bcefa9154fb7971472ae","modified":1661434052542},{"_id":"themes/keep/source/images/avatar.svg","hash":"ff6709064f40ce3d683eb2673cc918009fb5684c","modified":1660226743013},{"_id":"themes/keep/source/images/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1658643600089},{"_id":"themes/keep/source/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1660226743013},{"_id":"themes/keep/source/images/favicon.png","hash":"a994d701b472742a8532ce2778c7830f5da4f967","modified":1658643600095},{"_id":"themes/keep/source/images/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1658643600097},{"_id":"themes/keep/source/images/loading.svg","hash":"7689011e66c78998d91784ae5abe680f76772589","modified":1660226743013},{"_id":"themes/keep/source/images/logo.svg","hash":"509c25b6e51d435b3acd6b0a85b823daf9a48363","modified":1660226743014},{"_id":"themes/keep/source/images/head.jpg","hash":"8209838b2166bb90d5ed812302b0df99c66e7544","modified":1658643600098},{"_id":"themes/keep/source/images/upyun.png","hash":"f014175dd78c3ed5249e69c91603e20a3efcd330","modified":1660226743014},{"_id":"themes/keep/source/js/back2top.js","hash":"4be3dfc5ea5d134de22dddce950204c3fc05a659","modified":1660226743014},{"_id":"themes/keep/source/js/code-copy.js","hash":"0fa4f5c6b1b4fa2dd059a3fabd975cb5236aa68e","modified":1660226743015},{"_id":"themes/keep/source/js/dark-light-toggle.js","hash":"3941485684abdc9170f68b536c7cab57f03d68db","modified":1660226743015},{"_id":"themes/keep/source/js/header-shrink.js","hash":"5a95ba1079638342689aa31ae331b0ad29423cfb","modified":1660226743015},{"_id":"themes/keep/source/js/left-side-toggle.js","hash":"2396af1662b0cc8bf525c7cfed2f212a752a3b20","modified":1660226743016},{"_id":"themes/keep/source/js/lazyload.js","hash":"9b1d7be063feff3a4268190575959a81604cef95","modified":1660226743015},{"_id":"themes/keep/source/js/lifeTime.js","hash":"1221239641ffe7bd3a31a563eb4d54b0cccc6544","modified":1660239423838},{"_id":"themes/keep/source/js/toc.js","hash":"089573f669c7eaae7b3b88a1f4b94c630983f520","modified":1660226743018},{"_id":"themes/keep/source/js/local-search.js","hash":"a76838dbc9b3dc683b7653d0e60c2a824316d598","modified":1660226743017},{"_id":"themes/keep/source/js/utils.js","hash":"356c23107a336b682a7101dfc856fa6e0e6cdb76","modified":1660226743018},{"_id":"themes/keep/source/js/main.js","hash":"52f9e2ccb2b93399bf2480aac989c702484b8aec","modified":1660226743018},{"_id":"themes/keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1660226743030},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1660226743032},{"_id":"themes/keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1660226743033},{"_id":"themes/keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1660226743032},{"_id":"themes/keep/layout/_partial/comment/comment.ejs","hash":"3567cb1acb984e13cf7b6ac047467298cd6e98e3","modified":1660226742989},{"_id":"themes/keep/layout/_partial/comment/gitalk.ejs","hash":"cff08caa0a70bf276500ccdbf2965865399d985b","modified":1660226742989},{"_id":"themes/keep/layout/_partial/comment/valine.ejs","hash":"1c58eb3e1f0bf06758787ff91c56924210de6665","modified":1660226742989},{"_id":"themes/keep/layout/_partial/comment/twikoo.ejs","hash":"5d75b54edfcfb6112ac2c50fa7f4040e3716261d","modified":1660226742989},{"_id":"themes/keep/source/css/common/animated.styl","hash":"064493c99c4d1d19803fc544251f4fbc491e7a1d","modified":1660226743000},{"_id":"themes/keep/source/css/common/basic.styl","hash":"2ecd4b0d469038a0753ad2de3eb2ba8c20f809db","modified":1660226743000},{"_id":"themes/keep/source/css/common/markdown.styl","hash":"73a96b2e7bdbaa1e98fd2a9928a05c56763d9064","modified":1660226743002},{"_id":"themes/keep/layout/_partial/pjax/pjax.ejs","hash":"db76ce10f71e0aed717c4734ef2efbdc4b860c16","modified":1661563109110},{"_id":"themes/keep/source/css/layout/archive-content.styl","hash":"67ab564a1c22e6b2b7e8f91351a5754f25f1ec88","modified":1660312877181},{"_id":"themes/keep/source/css/common/keep-theme.styl","hash":"48acc1b0b18b5c34d758118bad135b7cea18b5a1","modified":1660226743002},{"_id":"themes/keep/source/css/layout/category-content.styl","hash":"b1dc01fed4f4094db97f7c04629d3d0726740f15","modified":1660312727846},{"_id":"themes/keep/source/css/common/variables.styl","hash":"db80d2ad6d99267bbc13abe7b11660cae04cc023","modified":1660226743002},{"_id":"themes/keep/source/css/layout/article-content.styl","hash":"3e851fd1157bd3bb34cabaf4b8576fb5ba4c8a0e","modified":1660312595407},{"_id":"themes/keep/source/css/layout/category-list.styl","hash":"f8596d69382745d339450c3e6e8609d8ea429c10","modified":1660312747997},{"_id":"themes/keep/source/css/layout/tag-content.styl","hash":"a2e328dfdabca10b85488c47b47208ef785d3054","modified":1660312774628},{"_id":"themes/keep/source/css/layout/home-content.styl","hash":"c93dee51a3219656319478f46d3e0e4c7cbf691a","modified":1660312332561},{"_id":"themes/keep/source/css/myself/mouse.styl","hash":"4db30feb4880f5429c514ce89cfa684a1f178bfc","modified":1660239621497},{"_id":"themes/keep/source/css/layout/page.styl","hash":"a9c955d097179ca81fdc92f734d44273bc3a08ee","modified":1660313149379},{"_id":"themes/keep/source/css/common/codeblock/code-theme.styl","hash":"8b6131af54382b7959c255d58c52474564c91bf8","modified":1660226743000},{"_id":"themes/keep/source/js/libs/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1660226743016},{"_id":"themes/keep/source/css/common/codeblock/copy-code.styl","hash":"eac367ec543527a7533490fa19b451a452684614","modified":1660226743001},{"_id":"themes/keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1661564040186},{"_id":"themes/keep/source/css/common/codeblock/highlight.styl","hash":"081f08ed399c4fc6227ab15109595a211693462b","modified":1660226743001},{"_id":"themes/keep/source/css/layout/_partial/archive-list.styl","hash":"e85adfdd6fd83d2529988da644df51ddffbc87f5","modified":1660226743004},{"_id":"themes/keep/source/css/layout/_partial/footer.styl","hash":"0610a37f2eba1b6ee2ed138e3367d80be55c9d7d","modified":1660226743007},{"_id":"themes/keep/source/css/layout/_partial/article-meta-info.styl","hash":"8ca83a4fe1afbb15669becebcde3ed0e12ac07bb","modified":1660226743005},{"_id":"themes/keep/source/css/layout/_partial/first-screen.styl","hash":"9422e7d052f9e8a81d5a9acf12af9670fe2c41bb","modified":1660226743007},{"_id":"themes/keep/source/css/layout/_partial/article-copyright-info.styl","hash":"ae286cb8c7e788a7d393774c9e9c394352e48e72","modified":1660226743005},{"_id":"themes/keep/source/css/layout/_partial/paginator.styl","hash":"7c6dbcd044710eac77d27af70ed8b290fcf6f8da","modified":1660319576870},{"_id":"themes/keep/source/css/layout/_partial/image-viewer.styl","hash":"fb82ac6589304cf1e3ed7ff2904108641882ddbc","modified":1660226743008},{"_id":"themes/keep/source/css/layout/_partial/local-search.styl","hash":"a381afa2de855d968810c4f6680436fd31c63d55","modified":1660226743008},{"_id":"themes/keep/source/css/layout/_partial/page-template.styl","hash":"02dbf90ae86cda899e3c580c9fa580d68c5e7d4e","modified":1660312904960},{"_id":"themes/keep/source/css/layout/_partial/post-tools.styl","hash":"7c642dfdd54ed60aadb2f162e25c4fc5720716b7","modified":1660226743009},{"_id":"themes/keep/source/css/layout/_partial/header.styl","hash":"64cb572b854e237ceca4b1e0937ade55171efd22","modified":1660312314495},{"_id":"themes/keep/source/css/layout/_partial/tagcloud.styl","hash":"78096e998ac0b2ec83490fbc25e418328f0ac343","modified":1660312877172},{"_id":"themes/keep/source/css/layout/_partial/progress-bar.styl","hash":"c2b9474d130df3605578b77d76c604234a2b0f6f","modified":1660226743009},{"_id":"themes/keep/source/css/layout/_partial/side-tools.styl","hash":"1ef3abeec9d429f502b240450f6ffdb89eef3f2f","modified":1660319668225},{"_id":"themes/keep/source/css/layout/_partial/toc.styl","hash":"c19d5833234c510ac1b8358cfcb7e33af29c3f6d","modified":1660226743010},{"_id":"themes/keep/source/css/layout/_partial/comment/comment.styl","hash":"9874482d9a8bf623abc28f8fa9c2bbfeb55067a6","modified":1660226743005},{"_id":"source/images/其他/childTop1.jpg","hash":"b2bf0d8f847d43f24125531450ea2ea5d28f7416","modified":1658643600002},{"_id":"themes/keep/source/css/layout/_partial/comment/valine.styl","hash":"dbff6bc6ecb6a20068047e6f7532e1d2df627929","modified":1660226743006},{"_id":"themes/keep/source/css/layout/_partial/comment/gitalk.styl","hash":"09d223d23c8f032da4f156efebab46102b15942d","modified":1660226743006},{"_id":"themes/keep/source/css/layout/_partial/comment/twikoo.styl","hash":"8225224a5c6d688e4ecd2e5557e8b2c5c43e2cf4","modified":1660226743006},{"_id":"themes/keep/source/js/APlayer.min.js","hash":"66367fc417f67a9b14cb017b3eb644657527fbec","modified":1661434089174},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1660226743029},{"_id":"themes/keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1660226743029},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1660226743045},{"_id":"themes/keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1660226743046},{"_id":"source/images/南京总统府/31.jpg","hash":"cc3e3e41dd4937c36ff299cbae81c50224c8e02d","modified":1642760371000},{"_id":"source/images/南京总统府/51.jpg","hash":"d9100e886dbf6ac077dd60fed5bbae02889fd809","modified":1642760378000},{"_id":"source/images/南京总统府/64.jpg","hash":"b6677fb0bba43ac8c31dba8b6dc05cfe6a3ba435","modified":1642760379000},{"_id":"themes/keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1660226743021},{"_id":"themes/keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1660226743028},{"_id":"themes/keep/source/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1660226743031},{"_id":"source/images/南京总统府/38.jpg","hash":"48d49a07a6ae1b2c95bf55a1e283c31e2bb9423a","modified":1642760376000},{"_id":"themes/keep/source/images/lsy_head.jpg","hash":"9011c234ada50326dbcd9cf74b7845c9bb0be5ab","modified":1658643600099},{"_id":"themes/keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1660226743035},{"_id":"themes/keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1660226743044},{"_id":"source/images/南京总统府/62.jpg","hash":"2a2f009592bafbc280efaf6f12afd9511c0eeb36","modified":1642760378000},{"_id":"source/images/其他/mainTop1.jpg","hash":"1cc7a39636ea7577ec870451cdb7ff120362b526","modified":1658643600015},{"_id":"source/images/南京总统府/35.jpg","hash":"f71f24162f9d8036f1c8f2e58c391c3cc86b287b","modified":1642760370000},{"_id":"themes/keep/source/images/childTop2.jpg","hash":"7ebb62616a1ae8912973123f5940a8aec3cfad45","modified":1658643600095},{"_id":"themes/keep/source/images/childTop1.jpg","hash":"b2bf0d8f847d43f24125531450ea2ea5d28f7416","modified":1658643600092},{"_id":"themes/keep/source/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1660226743026},{"_id":"themes/keep/source/images/mainTop1.jpg","hash":"1cc7a39636ea7577ec870451cdb7ff120362b526","modified":1658643600103},{"_id":"themes/keep/source/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1660226743042},{"_id":"source/images/APlayer和MetingJS的使用/长岛.mp3","hash":"3310a4f219e70aa370d763cef3bfabb9e3b0ab54","modified":1645942447194},{"_id":"source/images/sunset/2021-12-28-2.jpg","hash":"c21c5bfce4995a5ca9dfd29847f5ff21fb5ea3a0","modified":1640679325000},{"_id":"source/images/sunset/2021-12-28-1.jpg","hash":"e75bb66ea4f8386a3ca626dd94bf9b0f713290d6","modified":1640677814000},{"_id":"source/images/sunset/2022-09-05.jpg","hash":"a2958a36cee23894334aa7967297fd2bc6720d1a","modified":1662381782949},{"_id":"source/images/计算机组成/计算机系统的层次结构.png","hash":"27a9a3f9c1892ac8a96f39937e235858fe13452a","modified":1662273413951},{"_id":"source/images/计算机组成/三种级别的语言.png","hash":"7b2e0c989b5c9013bcfa37f07c7f36ba5fe80bf6","modified":1662273703984},{"_id":"source/images/计算机组成/BCD码.png","hash":"613978cfaf5cb96f0b922591363a0b650457a838","modified":1662392240576},{"_id":"source/images/计算机组成/汉字表示与编码.png","hash":"ebc57a737705740cd5f63b6f5bd040e97f244043","modified":1662530899784},{"_id":"source/images/计算机组成/映射关系.png","hash":"23c1c432e757218883761138197c7d70727a2119","modified":1662392099896},{"_id":"source/images/计算机组成/大小端模式.png","hash":"35ee910b65a6b954fc49dd832545166b3062e03e","modified":1662531037959},{"_id":"source/images/计算机组成/ASCII码表.png","hash":"eb2addc7065da807e76ed6be2541626d7b193548","modified":1662392496018},{"_id":"themes/keep/layout/broadcast.ejs","hash":"1d80f0ad3cc9b249516239c8a3ed5011021b1f37","modified":1662538699023},{"_id":"source/images/sunset/2022-09-09-1.jpg","hash":"341098e0965ea22ef0ff7379c63a82d5c3c4caab","modified":1662721753874},{"_id":"source/images/sunset/2022-09-09-3.jpg","hash":"d2def9da6354401c5645c85e1e8eadc80b737f17","modified":1662721757203},{"_id":"source/images/sunset/2022-09-09-2.jpg","hash":"704313c77b59e572aae7d12b71ab1e9427247a6e","modified":1662721755294},{"_id":"source/images/sunset/2022-09-10.jpg","hash":"e8fd4831599678f922246ea7b67aa203b30f0a22","modified":1662822178657},{"_id":"source/_posts/SSM源码学习笔记.md","hash":"1cb1e920547a24f2eabaf1d08c4ae5fea9092946","modified":1662887277582},{"_id":"source/images/SSM源码学习笔记/类加载器.png","hash":"ca2a6ef0dbb3800edeea4b23ab6044b1a6fe8534","modified":1662881806507},{"_id":"source/_posts/经典排序算法.md","hash":"6100ec2c2289fe2db01367cb964c2cf32d7bd6da","modified":1663292018991},{"_id":"source/images/sunset/2022-09-12.jpg","hash":"636742c62a65ff4863466cb99261d4f4940abd33","modified":1662982450861},{"_id":"source/_posts/单链表环问题.md","hash":"60b4700acc723fd2d247aa32e9e03df251f98237","modified":1663504916945},{"_id":"source/images/单链表环问题/环.png","hash":"6980c712028ac9eecbc93d16f1c140f99be73b7c","modified":1663307396933},{"_id":"source/images/daily/2022-09-01-1.jpg","hash":"43ae8db2528f6c30cbf8e8a0cc6aec36f42cd52c","modified":1662029309564},{"_id":"source/images/daily/2022-09-02.jpg","hash":"87430007de933f6fe748e653353f0055d0953131","modified":1662118930991},{"_id":"source/images/daily/2022-09-05.jpg","hash":"a2958a36cee23894334aa7967297fd2bc6720d1a","modified":1662381782949},{"_id":"source/images/daily/2022-09-10.jpg","hash":"e8fd4831599678f922246ea7b67aa203b30f0a22","modified":1662822178657},{"_id":"source/images/daily/2022-09-12.jpg","hash":"636742c62a65ff4863466cb99261d4f4940abd33","modified":1662982450861},{"_id":"source/images/daily/2022-09-01-2.jpg","hash":"700c5b17762fbf2b4bd9f55b619f1248b35b1e49","modified":1662031199003},{"_id":"source/images/daily/2022-09-09-1.jpg","hash":"341098e0965ea22ef0ff7379c63a82d5c3c4caab","modified":1662721753874},{"_id":"source/images/daily/2022-09-09-3.jpg","hash":"d2def9da6354401c5645c85e1e8eadc80b737f17","modified":1662721757203},{"_id":"source/images/daily/2022-09-09-2.jpg","hash":"704313c77b59e572aae7d12b71ab1e9427247a6e","modified":1662721755294},{"_id":"source/images/daily/2021-12-28-2.jpg","hash":"c21c5bfce4995a5ca9dfd29847f5ff21fb5ea3a0","modified":1640679325000},{"_id":"source/images/daily/2021-12-28-1.jpg","hash":"e75bb66ea4f8386a3ca626dd94bf9b0f713290d6","modified":1640677814000},{"_id":"source/_posts/布隆过滤器.md","hash":"e5446c763cc3b319da0de4b8e9d5f72122bb7792","modified":1664033783500},{"_id":"source/images/布隆过滤器/布隆过滤器初始状态.png","hash":"5dcc174ca3cec85d53e2dd5b03346536aeb18bab","modified":1664029194900},{"_id":"source/images/daily/2022-09-21.jpg","hash":"9146fce718235840c1ecf42c5c3ab2a89bf0352b","modified":1663772528317},{"_id":"source/_posts/并查集.md","hash":"e181bddb78b3c8cdc504f5de3a503c2853e428f1","modified":1664118834831},{"_id":"source/images/布隆过滤器/布隆过滤器示例.png","hash":"9f502f0d44687abf7b732139544c970ec052d4dd","modified":1664029360005},{"_id":"source/images/daily/2022-09-27-1.jpg","hash":"0c405b720d356f66026fd97eaa33086bcc739f4f","modified":1664288811111},{"_id":"source/images/daily/2022-09-27-2.jpg","hash":"79e420aaa1100f86d9d6d0c2336ec78734e09a90","modified":1664280470511},{"_id":"source/images/daily/2022-09-27-3.png","hash":"bcd9874de9793105991e9473d1996add53ac09ed","modified":1664289008979},{"_id":"source/images/daily/2022-09-27-3.jpg","hash":"bcd9874de9793105991e9473d1996add53ac09ed","modified":1664289008979},{"_id":"source/_posts/KMP和Manacher算法.md","hash":"5e4da63ccf211d8dbce059df9efc873231535ec2","modified":1664720468366},{"_id":"source/images/daily/2022-09-29-1.jpg","hash":"c8ddd60bdec4c6968d80befb48412886a9a85e57","modified":1664459582589},{"_id":"source/images/daily/2022-09-29-2.jpg","hash":"236805b82e86c309dfff86327eb015ccfe90e7d8","modified":1664461173637},{"_id":"source/images/daily/2022-10-01.png","hash":"26cb42fb93bf79ae2dfea7a6c1a692b4a7c1ca69","modified":1664640224504},{"_id":"source/_posts/设计模式.md","hash":"420c1e3b7d0c439d5649bfa094e6183560e9e168","modified":1665496381162},{"_id":"source/images/KMP和Manacher算法/回文模型1.png","hash":"5dc8aca17103d4b2e5098a6f508ccb59221854fc","modified":1664703652292},{"_id":"source/images/设计模式/聚合关系.png","hash":"45a014c4f0db9417664414d4b5d7833f24ed1423","modified":1665495861939},{"_id":"source/images/设计模式/类的表示方式.png","hash":"49177dddd1c0bab35e4f71a56b751afd4b94de53","modified":1665408256303},{"_id":"source/images/设计模式/组合关系.png","hash":"b05cebe4169a171503609df3530d31bf9246fe07","modified":1665496058243}],"Category":[{"name":"学习笔记","_id":"cl7ketbdc0004o8ttf47f5rct"},{"name":"学习记录","_id":"cl7ketbdh000co8tt258j00cs"},{"name":"编程记录","_id":"cl7ketbdo000ro8tt60wsbnu0"},{"name":"记录生活","_id":"cl7ketbdw001qo8ttheg567a8"},{"name":"算法练习","_id":"cl7ketbdy001xo8ttgxvh4fg7"}],"Data":[{"_id":"link","data":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}]},{"_id":"links","data":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}],"Page":[{"title":"关于","date":"2022-04-27T14:16:36.000Z","type":"about","top_img":"https://dev.iw233.cn/api.php?sort=pc&type=jpg&4","_content":"\n性别：男  \n年龄：00后  \n坐标：江苏\n\n目前大学在读，以后大概率会是一名程序员。~~应该会是java吧~~    \n数学系转计算机系，毕竟想学很久了。  \n最早接触的编程语言是c。但现在主要写Java，也会一点python。  \n接触Java并把他当作主语言是因为Minecraft。  \n从1.6.2版本开始接触，之后便想自己写插件和mod。  \n但直到它的版本更新到了1.16我才写出了spigot端的一个登陆插件。~~还有bug~~  \nJava学着学着就学成了后端。~~所以是为什么啊~~  \n\n喜欢玩游戏，却玩得很少。  \n想写游戏，毛星云大佬的书却没看多少。（逐梦旅程，c++）  \n想使用linux作为主力系统，换了deepin系统，终究因为软件生态只能装在虚拟机中。\n喜欢看动漫，现在也越看越少。  \n喜欢画画，但素描却没有坚持学下去。  \n也许以后会养只猫吧。  \n\n虽然有很多事我都没有做到\n但也有坚持下去的事情。比如Java 或者说是编程  \n\n最后，谢谢你能看到这。   \n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2022-04-27 22:16:36\ntype: \"about\"\ntop_img: https://dev.iw233.cn/api.php?sort=pc&type=jpg&4\n---\n\n性别：男  \n年龄：00后  \n坐标：江苏\n\n目前大学在读，以后大概率会是一名程序员。~~应该会是java吧~~    \n数学系转计算机系，毕竟想学很久了。  \n最早接触的编程语言是c。但现在主要写Java，也会一点python。  \n接触Java并把他当作主语言是因为Minecraft。  \n从1.6.2版本开始接触，之后便想自己写插件和mod。  \n但直到它的版本更新到了1.16我才写出了spigot端的一个登陆插件。~~还有bug~~  \nJava学着学着就学成了后端。~~所以是为什么啊~~  \n\n喜欢玩游戏，却玩得很少。  \n想写游戏，毛星云大佬的书却没看多少。（逐梦旅程，c++）  \n想使用linux作为主力系统，换了deepin系统，终究因为软件生态只能装在虚拟机中。\n喜欢看动漫，现在也越看越少。  \n喜欢画画，但素描却没有坚持学下去。  \n也许以后会养只猫吧。  \n\n虽然有很多事我都没有做到\n但也有坚持下去的事情。比如Java 或者说是编程  \n\n最后，谢谢你能看到这。   \n\n\n","updated":"2022-08-11T16:47:18.578Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl7ketbd50000o8tt0r7r5xk3","content":"<p>性别：男<br>年龄：00后<br>坐标：江苏</p>\n<p>目前大学在读，以后大概率会是一名程序员。<del>应该会是java吧</del><br>数学系转计算机系，毕竟想学很久了。<br>最早接触的编程语言是c。但现在主要写Java，也会一点python。<br>接触Java并把他当作主语言是因为Minecraft。<br>从1.6.2版本开始接触，之后便想自己写插件和mod。<br>但直到它的版本更新到了1.16我才写出了spigot端的一个登陆插件。<del>还有bug</del><br>Java学着学着就学成了后端。<del>所以是为什么啊</del>  </p>\n<p>喜欢玩游戏，却玩得很少。<br>想写游戏，毛星云大佬的书却没看多少。（逐梦旅程，c++）<br>想使用linux作为主力系统，换了deepin系统，终究因为软件生态只能装在虚拟机中。<br>喜欢看动漫，现在也越看越少。<br>喜欢画画，但素描却没有坚持学下去。<br>也许以后会养只猫吧。  </p>\n<p>虽然有很多事我都没有做到<br>但也有坚持下去的事情。比如Java 或者说是编程  </p>\n<p>最后，谢谢你能看到这。   </p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<p>性别：男<br>年龄：00后<br>坐标：江苏</p>\n<p>目前大学在读，以后大概率会是一名程序员。<del>应该会是java吧</del><br>数学系转计算机系，毕竟想学很久了。<br>最早接触的编程语言是c。但现在主要写Java，也会一点python。<br>接触Java并把他当作主语言是因为Minecraft。<br>从1.6.2版本开始接触，之后便想自己写插件和mod。<br>但直到它的版本更新到了1.16我才写出了spigot端的一个登陆插件。<del>还有bug</del><br>Java学着学着就学成了后端。<del>所以是为什么啊</del>  </p>\n<p>喜欢玩游戏，却玩得很少。<br>想写游戏，毛星云大佬的书却没看多少。（逐梦旅程，c++）<br>想使用linux作为主力系统，换了deepin系统，终究因为软件生态只能装在虚拟机中。<br>喜欢看动漫，现在也越看越少。<br>喜欢画画，但素描却没有坚持学下去。<br>也许以后会养只猫吧。  </p>\n<p>虽然有很多事我都没有做到<br>但也有坚持下去的事情。比如Java 或者说是编程  </p>\n<p>最后，谢谢你能看到这。   </p>\n"},{"title":"categories","date":"2022-04-27T14:06:06.000Z","type":"categories","top_img":"https://dev.iw233.cn/api.php?sort=pc&type=jpg$2","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-04-27 22:06:06\ntype: \"categories\"\ntop_img: https://dev.iw233.cn/api.php?sort=pc&type=jpg$2\n---\n","updated":"2022-08-11T16:44:39.680Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl7ketbda0002o8tt3a6bboov","content":"","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":""},{"title":"日常","date":"2022-04-27T14:16:36.000Z","type":"daily","top_img":"https://dev.iw233.cn/api.php?sort=pc&type=jpg&5","_content":"\n# 日常\n\n## 2022-10-06\n\n怎么会有人在宿舍吃螺蛳粉啊？\n算法有点看不下去了。\n\n> 有人相爱\n> 有人夜里开车看海\n> 有人leetcode第一题都做不出来\n\nどして？どうしよう？\n\n## 2022-10-01\n\n还得是崔佛 ~~（真男人从不回头看爆炸）~~\n![2022-10-01](../images/daily/2022-10-01.png)\n\n## 2022-09-29\n\n晚上跑完步被一觉睡到晚上没吃晚饭的凡，拉去买夜宵。\n我还没白名单出不去学校，在门口等了好久。\n![2022-09-29-1](../images/daily/2022-09-29-1.jpg)\n夜市还挺热闹（指因为城管在校门口，而在另一个十字路口摆摊）\n![2022-09-29-2](../images/daily/2022-09-29-2.jpg)\n好小子，还给我带了杯柠檬茶 ~~（还想带鸭屎香的？）~~\n看在这杯柠檬茶的份上，就浅浅的写一下吧。\n\n## 2022-09-27\n\n今天的天气非常好！如图：\n![2022-09-27-1](../images/daily/2022-09-27-1.jpg)\n\n另外就是急救课了，因为问了个问题而被喊去趴在地上做示范的凡。\n**惨 凡 惨**\n![2022-09-27-2](../images/daily/2022-09-27-2.jpg)\n![2022-09-27-3](../images/daily/2022-09-27-3.jpg)\n\n## 2022-09-26\n\n> 你每天会忘记上千件事,何不把这件事也忘记?\n> You forget a thousand things every day，How about you make sure this is one of them?\n\n## 2022-09-21\n\n下午去跑步，跑完休息的时候来了个四岁半的小孩子。\n东问问西问问，真可爱。~~是吧，凡~~\n![2022-09-21](../images/daily/2022-09-21.jpg)\n然后，关于死去的童年回忆（~~丢手绢~~）开始攻击我\n最后，今天打印店晚上人有点小多。坏消息是我九点半才关门下班，好消息是那半个小时算工时。\n\n## 2022-09-19\n\n今天的天气非常好！（但今天是大一新生军训的第二天。~~看来学长学姐们太阳种的不错~~\n今天也是操作系统线下的第一节课，zcy老师也算是我目前遇到的最有个性的老师了。课堂氛围还是很好的，除了课讲得有点慢？或许是因为ppt没有成功在电脑上方出来吧~~（学校啊，多少年的老电脑了，该换了~~\n唯一让人受不了的就是新的体育打卡软件，从各大软件商店的诸多差评可见一斑，不多说。\n由于上个学期一整个学期都没来学校，我的键盘很脏很脏。这几天给清洗了下（126键拆装是真的考验耐心。另外，黑爵的蜻蜓点水是真得好看！\n刚知道了灯光的调法（fn+home、end附近的六个键），真好看。\n图晚点附上。\n\n## 2022-09-14\n\n今天下了一天的雨，晚上还有台风。一整天都闷闷的，不是很舒服（除了自由的实验课\n也是第一次碰matlab，处理图片也许蛮好的（但是交互不太行，甚至没有代码提示。~~没有代码提示不会敲代码~~\n另外强烈谴责中午坐在我对面吃螺蛳粉的两个人，我不理解。\n我不理解为什么会有人喜欢吃螺蛳粉。\n计组有点看不下去了，去看看算法。然后最近会有关于算法的文章吧（也许。~~当然是简单的算法~~\n\n## 2022-09-12\n\n今天有彩虹！但是拍的不好，就不放了。\n![2022-09-12](../images/daily/2022-09-12.jpg)\n\n## 2022-09-10\n\n中秋快乐！\n中秋节和教师节在一起捏\n很帅的月亮（~~虽然不是我拍的~~）\n![2022-09-10](../images/daily/2022-09-10.jpg)\n\n## 2022-09-09\n\n今天傍晚的云，有一朵像鱼一样！\n![2022-09-09-1](../images/daily/2022-09-09-1.jpg)\n打印店璐姐做的月饼！\n![2022-09-09-2](../images/daily/2022-09-09-2.jpg)\n以及，舍友送的五仁月饼（doge）\n![2022-09-09-3](../images/daily/2022-09-09-3.jpg)\n\n## 2022-09-05\n\n今天是去学校打印店兼职的第一天\n啥也不会干，不过最后算是学会怎么打印身份证、用ps弄身份证图片以及排一寸（2.5cm*3.5cm，分辨率300）照片\n后面找个人少的时候，练练怎么用裁照片切刀。（虽然说是对齐就行了\n失误就是给人黑白打成彩色的了，pdf全选后打印没有设置选项，直接就开始打了（35页，也不知道打印店会不会亏）\n![2022-09-05](../images/daily/2022-09-05.jpg)\n\n## 2022-09-02\n\n![2021-09-02](../images/daily/2022-09-02.jpg)\n\n## 2022-09-01\n\n傍晚的操场\n![2021-12-28-1](../images/daily/2022-09-01-1.jpg)\n![2021-12-28-2](../images/daily/2022-09-01-2.jpg)\n\n\n## 2021-12-28\n\n这是小米云文件夹中翻到的从前的落日\n\n回学校的公交车上\n![2021-12-28-1](../images/daily/2021-12-28-1.jpg)\n学校东门往北一小段路，小河的出口处\n![2021-12-28-2](../images/daily/2021-12-28-2.jpg)","source":"daily/index.md","raw":"---\ntitle: 日常\ndate: 2022-04-27 22:16:36\ntype: \"daily\"\ntop_img: https://dev.iw233.cn/api.php?sort=pc&type=jpg&5\n---\n\n# 日常\n\n## 2022-10-06\n\n怎么会有人在宿舍吃螺蛳粉啊？\n算法有点看不下去了。\n\n> 有人相爱\n> 有人夜里开车看海\n> 有人leetcode第一题都做不出来\n\nどして？どうしよう？\n\n## 2022-10-01\n\n还得是崔佛 ~~（真男人从不回头看爆炸）~~\n![2022-10-01](../images/daily/2022-10-01.png)\n\n## 2022-09-29\n\n晚上跑完步被一觉睡到晚上没吃晚饭的凡，拉去买夜宵。\n我还没白名单出不去学校，在门口等了好久。\n![2022-09-29-1](../images/daily/2022-09-29-1.jpg)\n夜市还挺热闹（指因为城管在校门口，而在另一个十字路口摆摊）\n![2022-09-29-2](../images/daily/2022-09-29-2.jpg)\n好小子，还给我带了杯柠檬茶 ~~（还想带鸭屎香的？）~~\n看在这杯柠檬茶的份上，就浅浅的写一下吧。\n\n## 2022-09-27\n\n今天的天气非常好！如图：\n![2022-09-27-1](../images/daily/2022-09-27-1.jpg)\n\n另外就是急救课了，因为问了个问题而被喊去趴在地上做示范的凡。\n**惨 凡 惨**\n![2022-09-27-2](../images/daily/2022-09-27-2.jpg)\n![2022-09-27-3](../images/daily/2022-09-27-3.jpg)\n\n## 2022-09-26\n\n> 你每天会忘记上千件事,何不把这件事也忘记?\n> You forget a thousand things every day，How about you make sure this is one of them?\n\n## 2022-09-21\n\n下午去跑步，跑完休息的时候来了个四岁半的小孩子。\n东问问西问问，真可爱。~~是吧，凡~~\n![2022-09-21](../images/daily/2022-09-21.jpg)\n然后，关于死去的童年回忆（~~丢手绢~~）开始攻击我\n最后，今天打印店晚上人有点小多。坏消息是我九点半才关门下班，好消息是那半个小时算工时。\n\n## 2022-09-19\n\n今天的天气非常好！（但今天是大一新生军训的第二天。~~看来学长学姐们太阳种的不错~~\n今天也是操作系统线下的第一节课，zcy老师也算是我目前遇到的最有个性的老师了。课堂氛围还是很好的，除了课讲得有点慢？或许是因为ppt没有成功在电脑上方出来吧~~（学校啊，多少年的老电脑了，该换了~~\n唯一让人受不了的就是新的体育打卡软件，从各大软件商店的诸多差评可见一斑，不多说。\n由于上个学期一整个学期都没来学校，我的键盘很脏很脏。这几天给清洗了下（126键拆装是真的考验耐心。另外，黑爵的蜻蜓点水是真得好看！\n刚知道了灯光的调法（fn+home、end附近的六个键），真好看。\n图晚点附上。\n\n## 2022-09-14\n\n今天下了一天的雨，晚上还有台风。一整天都闷闷的，不是很舒服（除了自由的实验课\n也是第一次碰matlab，处理图片也许蛮好的（但是交互不太行，甚至没有代码提示。~~没有代码提示不会敲代码~~\n另外强烈谴责中午坐在我对面吃螺蛳粉的两个人，我不理解。\n我不理解为什么会有人喜欢吃螺蛳粉。\n计组有点看不下去了，去看看算法。然后最近会有关于算法的文章吧（也许。~~当然是简单的算法~~\n\n## 2022-09-12\n\n今天有彩虹！但是拍的不好，就不放了。\n![2022-09-12](../images/daily/2022-09-12.jpg)\n\n## 2022-09-10\n\n中秋快乐！\n中秋节和教师节在一起捏\n很帅的月亮（~~虽然不是我拍的~~）\n![2022-09-10](../images/daily/2022-09-10.jpg)\n\n## 2022-09-09\n\n今天傍晚的云，有一朵像鱼一样！\n![2022-09-09-1](../images/daily/2022-09-09-1.jpg)\n打印店璐姐做的月饼！\n![2022-09-09-2](../images/daily/2022-09-09-2.jpg)\n以及，舍友送的五仁月饼（doge）\n![2022-09-09-3](../images/daily/2022-09-09-3.jpg)\n\n## 2022-09-05\n\n今天是去学校打印店兼职的第一天\n啥也不会干，不过最后算是学会怎么打印身份证、用ps弄身份证图片以及排一寸（2.5cm*3.5cm，分辨率300）照片\n后面找个人少的时候，练练怎么用裁照片切刀。（虽然说是对齐就行了\n失误就是给人黑白打成彩色的了，pdf全选后打印没有设置选项，直接就开始打了（35页，也不知道打印店会不会亏）\n![2022-09-05](../images/daily/2022-09-05.jpg)\n\n## 2022-09-02\n\n![2021-09-02](../images/daily/2022-09-02.jpg)\n\n## 2022-09-01\n\n傍晚的操场\n![2021-12-28-1](../images/daily/2022-09-01-1.jpg)\n![2021-12-28-2](../images/daily/2022-09-01-2.jpg)\n\n\n## 2021-12-28\n\n这是小米云文件夹中翻到的从前的落日\n\n回学校的公交车上\n![2021-12-28-1](../images/daily/2021-12-28-1.jpg)\n学校东门往北一小段路，小河的出口处\n![2021-12-28-2](../images/daily/2021-12-28-2.jpg)","updated":"2022-10-06T05:47:40.571Z","path":"daily/index.html","_id":"cl7ketbde0006o8ttchg92gbx","comments":1,"layout":"page","content":"<h1 id=\"日常\"><a href=\"#日常\" class=\"headerlink\" title=\"日常\"></a>日常</h1><h2 id=\"2022-10-06\"><a href=\"#2022-10-06\" class=\"headerlink\" title=\"2022-10-06\"></a>2022-10-06</h2><p>怎么会有人在宿舍吃螺蛳粉啊？<br>算法有点看不下去了。</p>\n<blockquote>\n<p>有人相爱<br>有人夜里开车看海<br>有人leetcode第一题都做不出来</p>\n</blockquote>\n<p>どして？どうしよう？</p>\n<h2 id=\"2022-10-01\"><a href=\"#2022-10-01\" class=\"headerlink\" title=\"2022-10-01\"></a>2022-10-01</h2><p>还得是崔佛 <del>（真男人从不回头看爆炸）</del><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-10-01.png\"\n                      alt=\"2022-10-01\"\n                ></p>\n<h2 id=\"2022-09-29\"><a href=\"#2022-09-29\" class=\"headerlink\" title=\"2022-09-29\"></a>2022-09-29</h2><p>晚上跑完步被一觉睡到晚上没吃晚饭的凡，拉去买夜宵。<br>我还没白名单出不去学校，在门口等了好久。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-29-1.jpg\"\n                      alt=\"2022-09-29-1\"\n                ><br>夜市还挺热闹（指因为城管在校门口，而在另一个十字路口摆摊）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-29-2.jpg\"\n                      alt=\"2022-09-29-2\"\n                ><br>好小子，还给我带了杯柠檬茶 <del>（还想带鸭屎香的？）</del><br>看在这杯柠檬茶的份上，就浅浅的写一下吧。</p>\n<h2 id=\"2022-09-27\"><a href=\"#2022-09-27\" class=\"headerlink\" title=\"2022-09-27\"></a>2022-09-27</h2><p>今天的天气非常好！如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-27-1.jpg\"\n                      alt=\"2022-09-27-1\"\n                ></p>\n<p>另外就是急救课了，因为问了个问题而被喊去趴在地上做示范的凡。<br><strong>惨 凡 惨</strong><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-27-2.jpg\"\n                      alt=\"2022-09-27-2\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-27-3.jpg\"\n                      alt=\"2022-09-27-3\"\n                ></p>\n<h2 id=\"2022-09-26\"><a href=\"#2022-09-26\" class=\"headerlink\" title=\"2022-09-26\"></a>2022-09-26</h2><blockquote>\n<p>你每天会忘记上千件事,何不把这件事也忘记?<br>You forget a thousand things every day，How about you make sure this is one of them?</p>\n</blockquote>\n<h2 id=\"2022-09-21\"><a href=\"#2022-09-21\" class=\"headerlink\" title=\"2022-09-21\"></a>2022-09-21</h2><p>下午去跑步，跑完休息的时候来了个四岁半的小孩子。<br>东问问西问问，真可爱。<del>是吧，凡</del><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-21.jpg\"\n                      alt=\"2022-09-21\"\n                ><br>然后，关于死去的童年回忆（<del>丢手绢</del>）开始攻击我<br>最后，今天打印店晚上人有点小多。坏消息是我九点半才关门下班，好消息是那半个小时算工时。</p>\n<h2 id=\"2022-09-19\"><a href=\"#2022-09-19\" class=\"headerlink\" title=\"2022-09-19\"></a>2022-09-19</h2><p>今天的天气非常好！（但今天是大一新生军训的第二天。<del>看来学长学姐们太阳种的不错</del><br>今天也是操作系统线下的第一节课，zcy老师也算是我目前遇到的最有个性的老师了。课堂氛围还是很好的，除了课讲得有点慢？或许是因为ppt没有成功在电脑上方出来吧<del>（学校啊，多少年的老电脑了，该换了</del><br>唯一让人受不了的就是新的体育打卡软件，从各大软件商店的诸多差评可见一斑，不多说。<br>由于上个学期一整个学期都没来学校，我的键盘很脏很脏。这几天给清洗了下（126键拆装是真的考验耐心。另外，黑爵的蜻蜓点水是真得好看！<br>刚知道了灯光的调法（fn+home、end附近的六个键），真好看。<br>图晚点附上。</p>\n<h2 id=\"2022-09-14\"><a href=\"#2022-09-14\" class=\"headerlink\" title=\"2022-09-14\"></a>2022-09-14</h2><p>今天下了一天的雨，晚上还有台风。一整天都闷闷的，不是很舒服（除了自由的实验课<br>也是第一次碰matlab，处理图片也许蛮好的（但是交互不太行，甚至没有代码提示。<del>没有代码提示不会敲代码</del><br>另外强烈谴责中午坐在我对面吃螺蛳粉的两个人，我不理解。<br>我不理解为什么会有人喜欢吃螺蛳粉。<br>计组有点看不下去了，去看看算法。然后最近会有关于算法的文章吧（也许。<del>当然是简单的算法</del></p>\n<h2 id=\"2022-09-12\"><a href=\"#2022-09-12\" class=\"headerlink\" title=\"2022-09-12\"></a>2022-09-12</h2><p>今天有彩虹！但是拍的不好，就不放了。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-12.jpg\"\n                      alt=\"2022-09-12\"\n                ></p>\n<h2 id=\"2022-09-10\"><a href=\"#2022-09-10\" class=\"headerlink\" title=\"2022-09-10\"></a>2022-09-10</h2><p>中秋快乐！<br>中秋节和教师节在一起捏<br>很帅的月亮（<del>虽然不是我拍的</del>）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-10.jpg\"\n                      alt=\"2022-09-10\"\n                ></p>\n<h2 id=\"2022-09-09\"><a href=\"#2022-09-09\" class=\"headerlink\" title=\"2022-09-09\"></a>2022-09-09</h2><p>今天傍晚的云，有一朵像鱼一样！<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-09-1.jpg\"\n                      alt=\"2022-09-09-1\"\n                ><br>打印店璐姐做的月饼！<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-09-2.jpg\"\n                      alt=\"2022-09-09-2\"\n                ><br>以及，舍友送的五仁月饼（doge）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-09-3.jpg\"\n                      alt=\"2022-09-09-3\"\n                ></p>\n<h2 id=\"2022-09-05\"><a href=\"#2022-09-05\" class=\"headerlink\" title=\"2022-09-05\"></a>2022-09-05</h2><p>今天是去学校打印店兼职的第一天<br>啥也不会干，不过最后算是学会怎么打印身份证、用ps弄身份证图片以及排一寸（2.5cm*3.5cm，分辨率300）照片<br>后面找个人少的时候，练练怎么用裁照片切刀。（虽然说是对齐就行了<br>失误就是给人黑白打成彩色的了，pdf全选后打印没有设置选项，直接就开始打了（35页，也不知道打印店会不会亏）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-05.jpg\"\n                      alt=\"2022-09-05\"\n                ></p>\n<h2 id=\"2022-09-02\"><a href=\"#2022-09-02\" class=\"headerlink\" title=\"2022-09-02\"></a>2022-09-02</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-02.jpg\"\n                      alt=\"2021-09-02\"\n                ></p>\n<h2 id=\"2022-09-01\"><a href=\"#2022-09-01\" class=\"headerlink\" title=\"2022-09-01\"></a>2022-09-01</h2><p>傍晚的操场<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-01-1.jpg\"\n                      alt=\"2021-12-28-1\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-01-2.jpg\"\n                      alt=\"2021-12-28-2\"\n                ></p>\n<h2 id=\"2021-12-28\"><a href=\"#2021-12-28\" class=\"headerlink\" title=\"2021-12-28\"></a>2021-12-28</h2><p>这是小米云文件夹中翻到的从前的落日</p>\n<p>回学校的公交车上<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2021-12-28-1.jpg\"\n                      alt=\"2021-12-28-1\"\n                ><br>学校东门往北一小段路，小河的出口处<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2021-12-28-2.jpg\"\n                      alt=\"2021-12-28-2\"\n                ></p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h1 id=\"日常\"><a href=\"#日常\" class=\"headerlink\" title=\"日常\"></a>日常</h1><h2 id=\"2022-10-06\"><a href=\"#2022-10-06\" class=\"headerlink\" title=\"2022-10-06\"></a>2022-10-06</h2><p>怎么会有人在宿舍吃螺蛳粉啊？<br>算法有点看不下去了。</p>\n<blockquote>\n<p>有人相爱<br>有人夜里开车看海<br>有人leetcode第一题都做不出来</p>\n</blockquote>\n<p>どして？どうしよう？</p>\n<h2 id=\"2022-10-01\"><a href=\"#2022-10-01\" class=\"headerlink\" title=\"2022-10-01\"></a>2022-10-01</h2><p>还得是崔佛 <del>（真男人从不回头看爆炸）</del><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-10-01.png\"\n                      alt=\"2022-10-01\"\n                ></p>\n<h2 id=\"2022-09-29\"><a href=\"#2022-09-29\" class=\"headerlink\" title=\"2022-09-29\"></a>2022-09-29</h2><p>晚上跑完步被一觉睡到晚上没吃晚饭的凡，拉去买夜宵。<br>我还没白名单出不去学校，在门口等了好久。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-29-1.jpg\"\n                      alt=\"2022-09-29-1\"\n                ><br>夜市还挺热闹（指因为城管在校门口，而在另一个十字路口摆摊）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-29-2.jpg\"\n                      alt=\"2022-09-29-2\"\n                ><br>好小子，还给我带了杯柠檬茶 <del>（还想带鸭屎香的？）</del><br>看在这杯柠檬茶的份上，就浅浅的写一下吧。</p>\n<h2 id=\"2022-09-27\"><a href=\"#2022-09-27\" class=\"headerlink\" title=\"2022-09-27\"></a>2022-09-27</h2><p>今天的天气非常好！如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-27-1.jpg\"\n                      alt=\"2022-09-27-1\"\n                ></p>\n<p>另外就是急救课了，因为问了个问题而被喊去趴在地上做示范的凡。<br><strong>惨 凡 惨</strong><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-27-2.jpg\"\n                      alt=\"2022-09-27-2\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-27-3.jpg\"\n                      alt=\"2022-09-27-3\"\n                ></p>\n<h2 id=\"2022-09-26\"><a href=\"#2022-09-26\" class=\"headerlink\" title=\"2022-09-26\"></a>2022-09-26</h2><blockquote>\n<p>你每天会忘记上千件事,何不把这件事也忘记?<br>You forget a thousand things every day，How about you make sure this is one of them?</p>\n</blockquote>\n<h2 id=\"2022-09-21\"><a href=\"#2022-09-21\" class=\"headerlink\" title=\"2022-09-21\"></a>2022-09-21</h2><p>下午去跑步，跑完休息的时候来了个四岁半的小孩子。<br>东问问西问问，真可爱。<del>是吧，凡</del><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-21.jpg\"\n                      alt=\"2022-09-21\"\n                ><br>然后，关于死去的童年回忆（<del>丢手绢</del>）开始攻击我<br>最后，今天打印店晚上人有点小多。坏消息是我九点半才关门下班，好消息是那半个小时算工时。</p>\n<h2 id=\"2022-09-19\"><a href=\"#2022-09-19\" class=\"headerlink\" title=\"2022-09-19\"></a>2022-09-19</h2><p>今天的天气非常好！（但今天是大一新生军训的第二天。<del>看来学长学姐们太阳种的不错</del><br>今天也是操作系统线下的第一节课，zcy老师也算是我目前遇到的最有个性的老师了。课堂氛围还是很好的，除了课讲得有点慢？或许是因为ppt没有成功在电脑上方出来吧<del>（学校啊，多少年的老电脑了，该换了</del><br>唯一让人受不了的就是新的体育打卡软件，从各大软件商店的诸多差评可见一斑，不多说。<br>由于上个学期一整个学期都没来学校，我的键盘很脏很脏。这几天给清洗了下（126键拆装是真的考验耐心。另外，黑爵的蜻蜓点水是真得好看！<br>刚知道了灯光的调法（fn+home、end附近的六个键），真好看。<br>图晚点附上。</p>\n<h2 id=\"2022-09-14\"><a href=\"#2022-09-14\" class=\"headerlink\" title=\"2022-09-14\"></a>2022-09-14</h2><p>今天下了一天的雨，晚上还有台风。一整天都闷闷的，不是很舒服（除了自由的实验课<br>也是第一次碰matlab，处理图片也许蛮好的（但是交互不太行，甚至没有代码提示。<del>没有代码提示不会敲代码</del><br>另外强烈谴责中午坐在我对面吃螺蛳粉的两个人，我不理解。<br>我不理解为什么会有人喜欢吃螺蛳粉。<br>计组有点看不下去了，去看看算法。然后最近会有关于算法的文章吧（也许。<del>当然是简单的算法</del></p>\n<h2 id=\"2022-09-12\"><a href=\"#2022-09-12\" class=\"headerlink\" title=\"2022-09-12\"></a>2022-09-12</h2><p>今天有彩虹！但是拍的不好，就不放了。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-12.jpg\"\n                      alt=\"2022-09-12\"\n                ></p>\n<h2 id=\"2022-09-10\"><a href=\"#2022-09-10\" class=\"headerlink\" title=\"2022-09-10\"></a>2022-09-10</h2><p>中秋快乐！<br>中秋节和教师节在一起捏<br>很帅的月亮（<del>虽然不是我拍的</del>）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-10.jpg\"\n                      alt=\"2022-09-10\"\n                ></p>\n<h2 id=\"2022-09-09\"><a href=\"#2022-09-09\" class=\"headerlink\" title=\"2022-09-09\"></a>2022-09-09</h2><p>今天傍晚的云，有一朵像鱼一样！<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-09-1.jpg\"\n                      alt=\"2022-09-09-1\"\n                ><br>打印店璐姐做的月饼！<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-09-2.jpg\"\n                      alt=\"2022-09-09-2\"\n                ><br>以及，舍友送的五仁月饼（doge）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-09-3.jpg\"\n                      alt=\"2022-09-09-3\"\n                ></p>\n<h2 id=\"2022-09-05\"><a href=\"#2022-09-05\" class=\"headerlink\" title=\"2022-09-05\"></a>2022-09-05</h2><p>今天是去学校打印店兼职的第一天<br>啥也不会干，不过最后算是学会怎么打印身份证、用ps弄身份证图片以及排一寸（2.5cm*3.5cm，分辨率300）照片<br>后面找个人少的时候，练练怎么用裁照片切刀。（虽然说是对齐就行了<br>失误就是给人黑白打成彩色的了，pdf全选后打印没有设置选项，直接就开始打了（35页，也不知道打印店会不会亏）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-05.jpg\"\n                      alt=\"2022-09-05\"\n                ></p>\n<h2 id=\"2022-09-02\"><a href=\"#2022-09-02\" class=\"headerlink\" title=\"2022-09-02\"></a>2022-09-02</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-02.jpg\"\n                      alt=\"2021-09-02\"\n                ></p>\n<h2 id=\"2022-09-01\"><a href=\"#2022-09-01\" class=\"headerlink\" title=\"2022-09-01\"></a>2022-09-01</h2><p>傍晚的操场<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-01-1.jpg\"\n                      alt=\"2021-12-28-1\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2022-09-01-2.jpg\"\n                      alt=\"2021-12-28-2\"\n                ></p>\n<h2 id=\"2021-12-28\"><a href=\"#2021-12-28\" class=\"headerlink\" title=\"2021-12-28\"></a>2021-12-28</h2><p>这是小米云文件夹中翻到的从前的落日</p>\n<p>回学校的公交车上<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2021-12-28-1.jpg\"\n                      alt=\"2021-12-28-1\"\n                ><br>学校东门往北一小段路，小河的出口处<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/daily/2021-12-28-2.jpg\"\n                      alt=\"2021-12-28-2\"\n                ></p>\n"},{"title":"友情链接","date":"2022-04-27T14:06:17.000Z","type":"link","top_img":"https://dev.iw233.cn/api.php?sort=pc&type=jpg%3","_content":"\n以下是我的信息\n添加友链可以发送邮件，不定期添加。\n~~~yml\n- name: 咕咕咕\n  link: https://cooooing.github.io/\n  avatar: https://s1.ax1x.com/2022/03/13/bqyIpT.jpg\n  descr: 路漫漫其修远兮，吾将上下而求索。\n~~~","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2022-04-27 22:06:17\ntype: \"link\"\ntop_img: https://dev.iw233.cn/api.php?sort=pc&type=jpg%3\n---\n\n以下是我的信息\n添加友链可以发送邮件，不定期添加。\n~~~yml\n- name: 咕咕咕\n  link: https://cooooing.github.io/\n  avatar: https://s1.ax1x.com/2022/03/13/bqyIpT.jpg\n  descr: 路漫漫其修远兮，吾将上下而求索。\n~~~","updated":"2022-08-11T16:58:59.837Z","path":"link/index.html","comments":1,"layout":"page","_id":"cl7ketbdf0008o8ttedlu5rao","content":"<p>以下是我的信息<br>添加友链可以发送邮件，不定期添加。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">咕咕咕</span></span><br><span class=\"line\">  <span class=\"attr\">link:</span> <span class=\"string\">https://cooooing.github.io/</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://s1.ax1x.com/2022/03/13/bqyIpT.jpg</span></span><br><span class=\"line\">  <span class=\"attr\">descr:</span> <span class=\"string\">路漫漫其修远兮，吾将上下而求索。</span></span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<p>以下是我的信息<br>添加友链可以发送邮件，不定期添加。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">咕咕咕</span></span><br><span class=\"line\">  <span class=\"attr\">link:</span> <span class=\"string\">https://cooooing.github.io/</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://s1.ax1x.com/2022/03/13/bqyIpT.jpg</span></span><br><span class=\"line\">  <span class=\"attr\">descr:</span> <span class=\"string\">路漫漫其修远兮，吾将上下而求索。</span></span><br></pre></td></tr></table></figure>"},{"title":"tags","date":"2022-04-27T14:05:42.000Z","type":"tags","top_img":"https://dev.iw233.cn/api.php?sort=pc&type=jpg&1","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-04-27 22:05:42\ntype: \"tags\"\ntop_img: https://dev.iw233.cn/api.php?sort=pc&type=jpg&1\n---\n","updated":"2022-08-11T16:44:17.281Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl7ketbdg000ao8ttcwyeb0g5","content":"","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":""}],"Post":[{"title":"docker笔记","date":"2022-07-23T11:40:00.000Z","_content":"\n## 简介\n\n### 虚拟化\n\n虚拟化是一种计算机资源管理技术。  \n指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。  \n\n虚拟化分类（略，因为过于复杂，了解即可）  \n\n优点：一台物理机可以虚拟化多个服务器，让计算机资源利用更充分。  \n缺点：\n1. 每个虚拟机都会创建一个操作系统，会增加资源的消耗。\n2. 环境兼容问题。  \n\n### 容器技术\n\n运行在操作系统之上的虚拟化技术，模拟的运行在一个操作系统上的多个不同进程，封装在容器中。  \n\ndocker发布于2013年，基于LXC技术。\nLXC是linux Container，是一种内核虚拟化技术。提供轻量级的虚拟化，以便隔离进程和资源。与宿主机使用同一内核，性能损耗小。\n\ndocker是开源的应用容器引擎，基于go语言实现。\n[docker官网](https://www.docker.com/)\ndocker技术可以让开发者将开发好的应用和依赖包打包到容器中，以便可以运行在任意linux服务器上，解决开发环境与运维环境不同的问题。  \ndocker本省不是容器，是管理容器的引擎。  \n\n## 环境搭建\n\n### 安装\n\ndocker支持CentOS6及以上版本。  \nCentOS7可以使用`yum install docker -y`直接安装。  \n\n![docker安装](../images/docker笔记/docker安装.png)\n\n### 服务启动关闭等\n\n启动：`systemctl start docker`或者`service docker start`\n停止：`systemctl stop docker`或者`service docker stop`\n重启：`systemctl restart docker`或者`service docker restart`\n查看运行状态：`systemctl status docker`或者`service docker status`\n\n查看docker系统信息：`docker info`\n查看docker所有帮助信息：`docker`\n查看某个命令帮助信息：`docker commond --help`\n\n### docker运行机制\n\n启动服务-->下载镜像-->启动该镜像得到一个容器-->容器里运行应用\n\n1. 启动服务\n2. 下载镜像，如果本地没有对应镜像，则会从镜像仓库下载，[默认仓库](https://hub.docker.com)  \n搜索镜像：`docker search tomcat`\n下载镜像：`docker pull tomcat`\n运行镜像：`docker run tomcat` 后台运行：`docker run -d tomcat`\n-p 参数映射端口\n显示本地已有镜像：`docker images`\n\n### 进入docker容器\n\n进入容器：`docker exec -it 容器id bash`  \ni表示交互式的，即保持标准输入流打开  \nt表示虚拟控制台  \n退出容器：`exit`\n\n从客户机访问容器，需要有端口映射，docker容器默认采用桥接模式与宿主机通信，需要将宿主机ip端口映射到容器ip端口上。  \n停止容器：`docker stop 容器id/名称`  \n启动容器：`docker run -d -p 8080:8080 tomcat`\n\n## docker核心组件\n\ndocker是客户端-服务器（C/S）加厚，通过远程API来管理和创建容器。  \ndocker通过镜像来创建容器。  \n\n### 镜像\n\n镜像是一个只读的模板，用于创建容器。\n\n镜像由许多层文件系统构成  \n第一层是引导文件系统bootfs  \n第二层是root文件系统rootfs，root文件系统通常是某种操作系统  \nroot系统之上又有很多层文件系统，这些文件系统叠加在一起，构成docker中的镜像\n\n进入容器：`docker exit -it 镜像id bash`\n删除镜像：`docker rmi 镜像名`，rm是删除容器\n\n### 容器\n\n通过镜像启动容器：`docker run -d 镜像名`\n查看运行中的容器：`docker ps`\n查看所有的容器：`docker ps -a`\n停止容器：`docker stop 容器id/名称`\n开启容器：`docker start 容器id/名称`\n删除容器：`docker rm 容器id/名称` 删除容器时，容器必须是静止状态，否则会报错\n查看容器更多信息：`docker inspect 容器id/名称`\n停止全部运行中的容器：`docker stop $(docker ps -q)`\n删除全部容器：`docker rm $(docker ps -aq)`\n\n### 仓库\n\n仓库是集中存放镜像文件的地方。仓库分为公开仓库和私有仓库。\n最大的公开仓库是[Docker Hub](https://hub.docker.com/)\n\n[阿里云镜像](https://dev.aliyun.com)\n\n查找官方镜像：`docker search 镜像名`\n下载镜像：`docker pull 镜像名`\n\n## 自定义镜像\n\ndockerfile用于构建docker镜像，有一行行命令语句构成，基于这些命令可以构建一个镜像。  \n\ndockerfile分为四部分\n1. 基础镜像信息\n2. 维护者信息\n3. 镜像操作命令\n4. 容器启动时执行指令\n\n### 指令\n\n1. FROM\n`FROM <images> / FROM <images>:<tag> / FROM <images>:<digest>`\n用于指定所使用的基础镜像\n> FROM必须是dockerfile第一条非注释指令  \n> FROM可以出现多次，用于在一个dockerfile中创建多个镜像  \n> tag/digest是可选的，默认latest版本基础镜像\n2. MAINTAINER\n`MAINTAINER <name>`\n指定维护者信息\n3. ENV\n`ENV <key> <value> / ENV <key1>=<value1> <key2>=<value2>...`\n设置环境变量，会被后续RUN指令使用，并在容器运行时保持。\n4. COPY\n`ADD <源路径>... <目标路径> / ADD [\"<源路径>\",... \"<目标路径>\"]`\n复制指定文件到容器中指定位置。\n> 源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。\n5. ADD\n`ADD <源路径>... <目标路径> / ADD [\"<源路径>\",... \"<目标路径>\"]`\n复制指定文件到容器中指定位置，与COPY格式基本一致，但比COPY增加了一些功能。如源路径可以是url\n> 如果 docker 发现文件内容被改变，则接下来的指令都不会再使用缓存。\n6. RUN\n~~~shell\n#shell格式\nRUN <command>\n#exec格式\nRUN [\"executable\", \"param1\", \"param2\"]\n~~~\n用于构建过程中，执行特定命令，并生成一个中间镜像。  \n> RUN 指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定 --no-cache 参数，如：docker build --no-cache。\n7. CMD\n~~~shell\nCMD [\"executable\",\"param1\",\"param2\"]\nCMD [\"param1\",\"param2\"]\nCMD command param1 param2\n~~~\n用于指定容器启动时命令。\n> 与 RUN 指令的区别：RUN 在构建的时候执行，并生成一个新的镜像，CMD 在容器运行的时候执行，在构建时不进行任何操作。\n> 每个dockerfile只能有一条CMD命令。如果有多条，只有最后一条会被执行。\n> 如果用户启动时指定了运行的命令，则会覆盖CMD指定的命令。\n8. EXPOSE\n`EXPOSE <port> [<port>...]`\n为构建的镜像设置监听端口，使容器运行时监听\n\n\n### 自定义镜像\n\n1. JDK镜像\n创建Dockerfile文件\n~~~shell\nFROM centos\nMAINTAINER root\nADD jdk-8u121-linux-x64.tar.gz /usr/local\nENV JAVA_HOME /usr/local/java/jdk1.8.0_121\nENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nENV PATH $PATH:$JAVA_HOME/bin\nCMD java -version\n~~~\n构建镜像：`docker build -t root_jdk1.8.0_121 .`\n\n2. tomcat镜像\n   创建Dockerfile文件\n~~~shell\nFROM root_jdk1.8.0_121\nMAINTAINER root\nADD apache-tomcat-8.5.24.tar.gz /usr/local\nENV CATALINA_HOME /usr/local/apache-tomcat-8.5.24\nENV PATH $PATH:$CATALINA_HOME/lib:$CATALINA_HOME/bin\nEXPOSE 8080\nCMD /usr/local/apache-tomcat-8.5.24/bin/catalina.sh run\n~~~\n构建镜像：`docker build -t root_tomcat-8.5.24 .`\n\n\n### 镜像发布到仓库\n\n省略\n在阿里云注册账号，容器镜像服务有详细文档。\n![阿里云容器服务](../images/docker笔记/阿里云容器服务.png)\n\n### Docker Hub 镜像加速\n\n/etc/docker/daemon.json\n`{\"registry-mirrors\": [\"阿里云提供的网址\"]}`\n\n## docker应用部署\n\n1. 将开发好的程序打成jar包或war包\n2. 将打包好的文件上传至服务器\n3. 定义Dockerfile文件，用于创建项目镜像\n\n定义jar包程序Dockerfile文件\n~~~shell\nFROM java\nMAINTAINER root\nADD springboot-web.jar /opt\nRUN chmod +x /opt/springboot-web.jar\nCMD java -jar /opt/springboot-web.jar\n~~~\n构建镜像：`docker build -t springboot-web.jar .`\n\n定义war包程序Dockerfile文件\n~~~shell\nFROM root_tomcat-8.5.24\nMAINTAINER root\nADD springboot-web.war /usr/local/apache-tomcat-8.5.24/webapps\nEXPOSE 8080\nCMD /usr/local/apache-tomcat-8.5.24/bin/catalina.sh run\n~~~\n构建镜像：`docker build -t springboot-web.war .`\n\n修改容器保存：`docker commit 容器id 镜像名`\n容器内有新的数据，可以保存为新的镜像。\n\n## 总结\n\n主要是一些命令，但花了挺长时间。\n主要碰到了两个问题。\n\n第一个问题：\n无法启动tomcat\n~~~text\nCannot find /usr/local/tomcat/bin/setclasspath.sh\nThis file is needed to run this program\n~~~\n我不知道出现问题的原因是什么，但是找到了[解决方案](https://www.5axxw.com/questions/content/fypkh1)  \n我将tomcat的版本降低后，解决了这个问题。\n\n第二个问题：\n也是无法启动tomcat\n~~~text\n/usr/bin/docker-current: Error response from daemon: driver failed programming external connectivity on endpoint affectionate_leakey (31afb261a3eead766cd87d85a7d0b12d048379e3b8715f28367a61e27b228456): Error starting userland proxy: listen tcp 0.0.0.0:8080: bind: address already in use.\nERRO[0000] error getting events from daemon: net/http: request canceled\n~~~\n这个是因为端口占用，而导致的报错。\n解决方案：kill占用的程序。\n> 查看端口使用情况：`netstat -anp`\n> 查看8080端口使用情况：`netstat -anp|grep 8080`\n\n","source":"_posts/Docker笔记.md","raw":"---\ntitle: docker笔记\ndate: 2022-07-23 19:40:00\ntags:\n- docker\ncategories:\n- 学习笔记\n---\n\n## 简介\n\n### 虚拟化\n\n虚拟化是一种计算机资源管理技术。  \n指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。  \n\n虚拟化分类（略，因为过于复杂，了解即可）  \n\n优点：一台物理机可以虚拟化多个服务器，让计算机资源利用更充分。  \n缺点：\n1. 每个虚拟机都会创建一个操作系统，会增加资源的消耗。\n2. 环境兼容问题。  \n\n### 容器技术\n\n运行在操作系统之上的虚拟化技术，模拟的运行在一个操作系统上的多个不同进程，封装在容器中。  \n\ndocker发布于2013年，基于LXC技术。\nLXC是linux Container，是一种内核虚拟化技术。提供轻量级的虚拟化，以便隔离进程和资源。与宿主机使用同一内核，性能损耗小。\n\ndocker是开源的应用容器引擎，基于go语言实现。\n[docker官网](https://www.docker.com/)\ndocker技术可以让开发者将开发好的应用和依赖包打包到容器中，以便可以运行在任意linux服务器上，解决开发环境与运维环境不同的问题。  \ndocker本省不是容器，是管理容器的引擎。  \n\n## 环境搭建\n\n### 安装\n\ndocker支持CentOS6及以上版本。  \nCentOS7可以使用`yum install docker -y`直接安装。  \n\n![docker安装](../images/docker笔记/docker安装.png)\n\n### 服务启动关闭等\n\n启动：`systemctl start docker`或者`service docker start`\n停止：`systemctl stop docker`或者`service docker stop`\n重启：`systemctl restart docker`或者`service docker restart`\n查看运行状态：`systemctl status docker`或者`service docker status`\n\n查看docker系统信息：`docker info`\n查看docker所有帮助信息：`docker`\n查看某个命令帮助信息：`docker commond --help`\n\n### docker运行机制\n\n启动服务-->下载镜像-->启动该镜像得到一个容器-->容器里运行应用\n\n1. 启动服务\n2. 下载镜像，如果本地没有对应镜像，则会从镜像仓库下载，[默认仓库](https://hub.docker.com)  \n搜索镜像：`docker search tomcat`\n下载镜像：`docker pull tomcat`\n运行镜像：`docker run tomcat` 后台运行：`docker run -d tomcat`\n-p 参数映射端口\n显示本地已有镜像：`docker images`\n\n### 进入docker容器\n\n进入容器：`docker exec -it 容器id bash`  \ni表示交互式的，即保持标准输入流打开  \nt表示虚拟控制台  \n退出容器：`exit`\n\n从客户机访问容器，需要有端口映射，docker容器默认采用桥接模式与宿主机通信，需要将宿主机ip端口映射到容器ip端口上。  \n停止容器：`docker stop 容器id/名称`  \n启动容器：`docker run -d -p 8080:8080 tomcat`\n\n## docker核心组件\n\ndocker是客户端-服务器（C/S）加厚，通过远程API来管理和创建容器。  \ndocker通过镜像来创建容器。  \n\n### 镜像\n\n镜像是一个只读的模板，用于创建容器。\n\n镜像由许多层文件系统构成  \n第一层是引导文件系统bootfs  \n第二层是root文件系统rootfs，root文件系统通常是某种操作系统  \nroot系统之上又有很多层文件系统，这些文件系统叠加在一起，构成docker中的镜像\n\n进入容器：`docker exit -it 镜像id bash`\n删除镜像：`docker rmi 镜像名`，rm是删除容器\n\n### 容器\n\n通过镜像启动容器：`docker run -d 镜像名`\n查看运行中的容器：`docker ps`\n查看所有的容器：`docker ps -a`\n停止容器：`docker stop 容器id/名称`\n开启容器：`docker start 容器id/名称`\n删除容器：`docker rm 容器id/名称` 删除容器时，容器必须是静止状态，否则会报错\n查看容器更多信息：`docker inspect 容器id/名称`\n停止全部运行中的容器：`docker stop $(docker ps -q)`\n删除全部容器：`docker rm $(docker ps -aq)`\n\n### 仓库\n\n仓库是集中存放镜像文件的地方。仓库分为公开仓库和私有仓库。\n最大的公开仓库是[Docker Hub](https://hub.docker.com/)\n\n[阿里云镜像](https://dev.aliyun.com)\n\n查找官方镜像：`docker search 镜像名`\n下载镜像：`docker pull 镜像名`\n\n## 自定义镜像\n\ndockerfile用于构建docker镜像，有一行行命令语句构成，基于这些命令可以构建一个镜像。  \n\ndockerfile分为四部分\n1. 基础镜像信息\n2. 维护者信息\n3. 镜像操作命令\n4. 容器启动时执行指令\n\n### 指令\n\n1. FROM\n`FROM <images> / FROM <images>:<tag> / FROM <images>:<digest>`\n用于指定所使用的基础镜像\n> FROM必须是dockerfile第一条非注释指令  \n> FROM可以出现多次，用于在一个dockerfile中创建多个镜像  \n> tag/digest是可选的，默认latest版本基础镜像\n2. MAINTAINER\n`MAINTAINER <name>`\n指定维护者信息\n3. ENV\n`ENV <key> <value> / ENV <key1>=<value1> <key2>=<value2>...`\n设置环境变量，会被后续RUN指令使用，并在容器运行时保持。\n4. COPY\n`ADD <源路径>... <目标路径> / ADD [\"<源路径>\",... \"<目标路径>\"]`\n复制指定文件到容器中指定位置。\n> 源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。\n5. ADD\n`ADD <源路径>... <目标路径> / ADD [\"<源路径>\",... \"<目标路径>\"]`\n复制指定文件到容器中指定位置，与COPY格式基本一致，但比COPY增加了一些功能。如源路径可以是url\n> 如果 docker 发现文件内容被改变，则接下来的指令都不会再使用缓存。\n6. RUN\n~~~shell\n#shell格式\nRUN <command>\n#exec格式\nRUN [\"executable\", \"param1\", \"param2\"]\n~~~\n用于构建过程中，执行特定命令，并生成一个中间镜像。  \n> RUN 指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定 --no-cache 参数，如：docker build --no-cache。\n7. CMD\n~~~shell\nCMD [\"executable\",\"param1\",\"param2\"]\nCMD [\"param1\",\"param2\"]\nCMD command param1 param2\n~~~\n用于指定容器启动时命令。\n> 与 RUN 指令的区别：RUN 在构建的时候执行，并生成一个新的镜像，CMD 在容器运行的时候执行，在构建时不进行任何操作。\n> 每个dockerfile只能有一条CMD命令。如果有多条，只有最后一条会被执行。\n> 如果用户启动时指定了运行的命令，则会覆盖CMD指定的命令。\n8. EXPOSE\n`EXPOSE <port> [<port>...]`\n为构建的镜像设置监听端口，使容器运行时监听\n\n\n### 自定义镜像\n\n1. JDK镜像\n创建Dockerfile文件\n~~~shell\nFROM centos\nMAINTAINER root\nADD jdk-8u121-linux-x64.tar.gz /usr/local\nENV JAVA_HOME /usr/local/java/jdk1.8.0_121\nENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nENV PATH $PATH:$JAVA_HOME/bin\nCMD java -version\n~~~\n构建镜像：`docker build -t root_jdk1.8.0_121 .`\n\n2. tomcat镜像\n   创建Dockerfile文件\n~~~shell\nFROM root_jdk1.8.0_121\nMAINTAINER root\nADD apache-tomcat-8.5.24.tar.gz /usr/local\nENV CATALINA_HOME /usr/local/apache-tomcat-8.5.24\nENV PATH $PATH:$CATALINA_HOME/lib:$CATALINA_HOME/bin\nEXPOSE 8080\nCMD /usr/local/apache-tomcat-8.5.24/bin/catalina.sh run\n~~~\n构建镜像：`docker build -t root_tomcat-8.5.24 .`\n\n\n### 镜像发布到仓库\n\n省略\n在阿里云注册账号，容器镜像服务有详细文档。\n![阿里云容器服务](../images/docker笔记/阿里云容器服务.png)\n\n### Docker Hub 镜像加速\n\n/etc/docker/daemon.json\n`{\"registry-mirrors\": [\"阿里云提供的网址\"]}`\n\n## docker应用部署\n\n1. 将开发好的程序打成jar包或war包\n2. 将打包好的文件上传至服务器\n3. 定义Dockerfile文件，用于创建项目镜像\n\n定义jar包程序Dockerfile文件\n~~~shell\nFROM java\nMAINTAINER root\nADD springboot-web.jar /opt\nRUN chmod +x /opt/springboot-web.jar\nCMD java -jar /opt/springboot-web.jar\n~~~\n构建镜像：`docker build -t springboot-web.jar .`\n\n定义war包程序Dockerfile文件\n~~~shell\nFROM root_tomcat-8.5.24\nMAINTAINER root\nADD springboot-web.war /usr/local/apache-tomcat-8.5.24/webapps\nEXPOSE 8080\nCMD /usr/local/apache-tomcat-8.5.24/bin/catalina.sh run\n~~~\n构建镜像：`docker build -t springboot-web.war .`\n\n修改容器保存：`docker commit 容器id 镜像名`\n容器内有新的数据，可以保存为新的镜像。\n\n## 总结\n\n主要是一些命令，但花了挺长时间。\n主要碰到了两个问题。\n\n第一个问题：\n无法启动tomcat\n~~~text\nCannot find /usr/local/tomcat/bin/setclasspath.sh\nThis file is needed to run this program\n~~~\n我不知道出现问题的原因是什么，但是找到了[解决方案](https://www.5axxw.com/questions/content/fypkh1)  \n我将tomcat的版本降低后，解决了这个问题。\n\n第二个问题：\n也是无法启动tomcat\n~~~text\n/usr/bin/docker-current: Error response from daemon: driver failed programming external connectivity on endpoint affectionate_leakey (31afb261a3eead766cd87d85a7d0b12d048379e3b8715f28367a61e27b228456): Error starting userland proxy: listen tcp 0.0.0.0:8080: bind: address already in use.\nERRO[0000] error getting events from daemon: net/http: request canceled\n~~~\n这个是因为端口占用，而导致的报错。\n解决方案：kill占用的程序。\n> 查看端口使用情况：`netstat -anp`\n> 查看8080端口使用情况：`netstat -anp|grep 8080`\n\n","slug":"Docker笔记","published":1,"updated":"2022-08-15T08:39:47.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbd70001o8tt2aov6uqm","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"虚拟化\"><a href=\"#虚拟化\" class=\"headerlink\" title=\"虚拟化\"></a>虚拟化</h3><p>虚拟化是一种计算机资源管理技术。<br>指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。  </p>\n<p>虚拟化分类（略，因为过于复杂，了解即可）  </p>\n<p>优点：一台物理机可以虚拟化多个服务器，让计算机资源利用更充分。<br>缺点：</p>\n<ol>\n<li>每个虚拟机都会创建一个操作系统，会增加资源的消耗。</li>\n<li>环境兼容问题。  </li>\n</ol>\n<h3 id=\"容器技术\"><a href=\"#容器技术\" class=\"headerlink\" title=\"容器技术\"></a>容器技术</h3><p>运行在操作系统之上的虚拟化技术，模拟的运行在一个操作系统上的多个不同进程，封装在容器中。  </p>\n<p>docker发布于2013年，基于LXC技术。<br>LXC是linux Container，是一种内核虚拟化技术。提供轻量级的虚拟化，以便隔离进程和资源。与宿主机使用同一内核，性能损耗小。</p>\n<p>docker是开源的应用容器引擎，基于go语言实现。<br><a class=\"link\"   href=\"https://www.docker.com/\" >docker官网<i class=\"fas fa-external-link-alt\"></i></a><br>docker技术可以让开发者将开发好的应用和依赖包打包到容器中，以便可以运行在任意linux服务器上，解决开发环境与运维环境不同的问题。<br>docker本省不是容器，是管理容器的引擎。  </p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>docker支持CentOS6及以上版本。<br>CentOS7可以使用<code>yum install docker -y</code>直接安装。  </p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/docker%E7%AC%94%E8%AE%B0/docker%E5%AE%89%E8%A3%85.png\"\n                      alt=\"docker安装\"\n                ></p>\n<h3 id=\"服务启动关闭等\"><a href=\"#服务启动关闭等\" class=\"headerlink\" title=\"服务启动关闭等\"></a>服务启动关闭等</h3><p>启动：<code>systemctl start docker</code>或者<code>service docker start</code><br>停止：<code>systemctl stop docker</code>或者<code>service docker stop</code><br>重启：<code>systemctl restart docker</code>或者<code>service docker restart</code><br>查看运行状态：<code>systemctl status docker</code>或者<code>service docker status</code></p>\n<p>查看docker系统信息：<code>docker info</code><br>查看docker所有帮助信息：<code>docker</code><br>查看某个命令帮助信息：<code>docker commond --help</code></p>\n<h3 id=\"docker运行机制\"><a href=\"#docker运行机制\" class=\"headerlink\" title=\"docker运行机制\"></a>docker运行机制</h3><p>启动服务–&gt;下载镜像–&gt;启动该镜像得到一个容器–&gt;容器里运行应用</p>\n<ol>\n<li>启动服务</li>\n<li>下载镜像，如果本地没有对应镜像，则会从镜像仓库下载，<a class=\"link\"   href=\"https://hub.docker.com/\" >默认仓库<i class=\"fas fa-external-link-alt\"></i></a><br>搜索镜像：<code>docker search tomcat</code><br>下载镜像：<code>docker pull tomcat</code><br>运行镜像：<code>docker run tomcat</code> 后台运行：<code>docker run -d tomcat</code></li>\n</ol>\n<p>-p 参数映射端口<br>显示本地已有镜像：<code>docker images</code></p>\n<h3 id=\"进入docker容器\"><a href=\"#进入docker容器\" class=\"headerlink\" title=\"进入docker容器\"></a>进入docker容器</h3><p>进入容器：<code>docker exec -it 容器id bash</code><br>i表示交互式的，即保持标准输入流打开<br>t表示虚拟控制台<br>退出容器：<code>exit</code></p>\n<p>从客户机访问容器，需要有端口映射，docker容器默认采用桥接模式与宿主机通信，需要将宿主机ip端口映射到容器ip端口上。<br>停止容器：<code>docker stop 容器id/名称</code><br>启动容器：<code>docker run -d -p 8080:8080 tomcat</code></p>\n<h2 id=\"docker核心组件\"><a href=\"#docker核心组件\" class=\"headerlink\" title=\"docker核心组件\"></a>docker核心组件</h2><p>docker是客户端-服务器（C/S）加厚，通过远程API来管理和创建容器。<br>docker通过镜像来创建容器。  </p>\n<h3 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h3><p>镜像是一个只读的模板，用于创建容器。</p>\n<p>镜像由许多层文件系统构成<br>第一层是引导文件系统bootfs<br>第二层是root文件系统rootfs，root文件系统通常是某种操作系统<br>root系统之上又有很多层文件系统，这些文件系统叠加在一起，构成docker中的镜像</p>\n<p>进入容器：<code>docker exit -it 镜像id bash</code><br>删除镜像：<code>docker rmi 镜像名</code>，rm是删除容器</p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><p>通过镜像启动容器：<code>docker run -d 镜像名</code><br>查看运行中的容器：<code>docker ps</code><br>查看所有的容器：<code>docker ps -a</code><br>停止容器：<code>docker stop 容器id/名称</code><br>开启容器：<code>docker start 容器id/名称</code><br>删除容器：<code>docker rm 容器id/名称</code> 删除容器时，容器必须是静止状态，否则会报错<br>查看容器更多信息：<code>docker inspect 容器id/名称</code><br>停止全部运行中的容器：<code>docker stop $(docker ps -q)</code><br>删除全部容器：<code>docker rm $(docker ps -aq)</code></p>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><p>仓库是集中存放镜像文件的地方。仓库分为公开仓库和私有仓库。<br>最大的公开仓库是<a class=\"link\"   href=\"https://hub.docker.com/\" >Docker Hub<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://dev.aliyun.com/\" >阿里云镜像<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>查找官方镜像：<code>docker search 镜像名</code><br>下载镜像：<code>docker pull 镜像名</code></p>\n<h2 id=\"自定义镜像\"><a href=\"#自定义镜像\" class=\"headerlink\" title=\"自定义镜像\"></a>自定义镜像</h2><p>dockerfile用于构建docker镜像，有一行行命令语句构成，基于这些命令可以构建一个镜像。  </p>\n<p>dockerfile分为四部分</p>\n<ol>\n<li>基础镜像信息</li>\n<li>维护者信息</li>\n<li>镜像操作命令</li>\n<li>容器启动时执行指令</li>\n</ol>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><ol>\n<li>FROM<br><code>FROM &lt;images&gt; / FROM &lt;images&gt;:&lt;tag&gt; / FROM &lt;images&gt;:&lt;digest&gt;</code><br>用于指定所使用的基础镜像<blockquote>\n<p>FROM必须是dockerfile第一条非注释指令<br>FROM可以出现多次，用于在一个dockerfile中创建多个镜像<br>tag/digest是可选的，默认latest版本基础镜像</p>\n</blockquote>\n</li>\n<li>MAINTAINER<br><code>MAINTAINER &lt;name&gt;</code><br>指定维护者信息</li>\n<li>ENV<br><code>ENV &lt;key&gt; &lt;value&gt; / ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code><br>设置环境变量，会被后续RUN指令使用，并在容器运行时保持。</li>\n<li>COPY<br><code>ADD &lt;源路径&gt;... &lt;目标路径&gt; / ADD [&quot;&lt;源路径&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code><br>复制指定文件到容器中指定位置。<blockquote>\n<p>源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。</p>\n</blockquote>\n</li>\n<li>ADD<br><code>ADD &lt;源路径&gt;... &lt;目标路径&gt; / ADD [&quot;&lt;源路径&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code><br>复制指定文件到容器中指定位置，与COPY格式基本一致，但比COPY增加了一些功能。如源路径可以是url<blockquote>\n<p>如果 docker 发现文件内容被改变，则接下来的指令都不会再使用缓存。</p>\n</blockquote>\n</li>\n<li>RUN<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">shell格式</span></span><br><span class=\"line\">RUN &lt;command&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"built_in\">exec</span>格式</span></span><br><span class=\"line\">RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br></pre></td></tr></table></figure>\n用于构建过程中，执行特定命令，并生成一个中间镜像。  <blockquote>\n<p>RUN 指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定 –no-cache 参数，如：docker build –no-cache。</p>\n</blockquote>\n</li>\n<li>CMD<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class=\"line\">CMD [&quot;param1&quot;,&quot;param2&quot;]</span><br><span class=\"line\">CMD command param1 param2</span><br></pre></td></tr></table></figure>\n用于指定容器启动时命令。<blockquote>\n<p>与 RUN 指令的区别：RUN 在构建的时候执行，并生成一个新的镜像，CMD 在容器运行的时候执行，在构建时不进行任何操作。<br>每个dockerfile只能有一条CMD命令。如果有多条，只有最后一条会被执行。<br>如果用户启动时指定了运行的命令，则会覆盖CMD指定的命令。</p>\n</blockquote>\n</li>\n<li>EXPOSE<br><code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code><br>为构建的镜像设置监听端口，使容器运行时监听</li>\n</ol>\n<h3 id=\"自定义镜像-1\"><a href=\"#自定义镜像-1\" class=\"headerlink\" title=\"自定义镜像\"></a>自定义镜像</h3><ol>\n<li><p>JDK镜像<br>创建Dockerfile文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">MAINTAINER root</span><br><span class=\"line\">ADD jdk-8u121-linux-x64.tar.gz /usr/local</span><br><span class=\"line\">ENV JAVA_HOME /usr/local/java/jdk1.8.0_121</span><br><span class=\"line\">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin</span><br><span class=\"line\">CMD java -version</span><br></pre></td></tr></table></figure>\n<p>构建镜像：<code>docker build -t root_jdk1.8.0_121 .</code></p>\n</li>\n<li><p>tomcat镜像<br>创建Dockerfile文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM root_jdk1.8.0_121</span><br><span class=\"line\">MAINTAINER root</span><br><span class=\"line\">ADD apache-tomcat-8.5.24.tar.gz /usr/local</span><br><span class=\"line\">ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.24</span><br><span class=\"line\">ENV PATH $PATH:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">CMD /usr/local/apache-tomcat-8.5.24/bin/catalina.sh run</span><br></pre></td></tr></table></figure>\n<p>构建镜像：<code>docker build -t root_tomcat-8.5.24 .</code></p>\n</li>\n</ol>\n<h3 id=\"镜像发布到仓库\"><a href=\"#镜像发布到仓库\" class=\"headerlink\" title=\"镜像发布到仓库\"></a>镜像发布到仓库</h3><p>省略<br>在阿里云注册账号，容器镜像服务有详细文档。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/docker%E7%AC%94%E8%AE%B0/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1.png\"\n                      alt=\"阿里云容器服务\"\n                ></p>\n<h3 id=\"Docker-Hub-镜像加速\"><a href=\"#Docker-Hub-镜像加速\" class=\"headerlink\" title=\"Docker Hub 镜像加速\"></a>Docker Hub 镜像加速</h3><p>/etc/docker/daemon.json<br><code>&#123;&quot;registry-mirrors&quot;: [&quot;阿里云提供的网址&quot;]&#125;</code></p>\n<h2 id=\"docker应用部署\"><a href=\"#docker应用部署\" class=\"headerlink\" title=\"docker应用部署\"></a>docker应用部署</h2><ol>\n<li>将开发好的程序打成jar包或war包</li>\n<li>将打包好的文件上传至服务器</li>\n<li>定义Dockerfile文件，用于创建项目镜像</li>\n</ol>\n<p>定义jar包程序Dockerfile文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java</span><br><span class=\"line\">MAINTAINER root</span><br><span class=\"line\">ADD springboot-web.jar /opt</span><br><span class=\"line\">RUN chmod +x /opt/springboot-web.jar</span><br><span class=\"line\">CMD java -jar /opt/springboot-web.jar</span><br></pre></td></tr></table></figure>\n<p>构建镜像：<code>docker build -t springboot-web.jar .</code></p>\n<p>定义war包程序Dockerfile文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM root_tomcat-8.5.24</span><br><span class=\"line\">MAINTAINER root</span><br><span class=\"line\">ADD springboot-web.war /usr/local/apache-tomcat-8.5.24/webapps</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">CMD /usr/local/apache-tomcat-8.5.24/bin/catalina.sh run</span><br></pre></td></tr></table></figure>\n<p>构建镜像：<code>docker build -t springboot-web.war .</code></p>\n<p>修改容器保存：<code>docker commit 容器id 镜像名</code><br>容器内有新的数据，可以保存为新的镜像。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>主要是一些命令，但花了挺长时间。<br>主要碰到了两个问题。</p>\n<p>第一个问题：<br>无法启动tomcat</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot find /usr/local/tomcat/bin/setclasspath.sh</span><br><span class=\"line\">This file is needed to run this program</span><br></pre></td></tr></table></figure>\n<p>我不知道出现问题的原因是什么，但是找到了<a class=\"link\"   href=\"https://www.5axxw.com/questions/content/fypkh1\" >解决方案<i class=\"fas fa-external-link-alt\"></i></a><br>我将tomcat的版本降低后，解决了这个问题。</p>\n<p>第二个问题：<br>也是无法启动tomcat</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/docker-current: Error response from daemon: driver failed programming external connectivity on endpoint affectionate_leakey (31afb261a3eead766cd87d85a7d0b12d048379e3b8715f28367a61e27b228456): Error starting userland proxy: listen tcp 0.0.0.0:8080: bind: address already in use.</span><br><span class=\"line\">ERRO[0000] error getting events from daemon: net/http: request canceled</span><br></pre></td></tr></table></figure>\n<p>这个是因为端口占用，而导致的报错。<br>解决方案：kill占用的程序。</p>\n<blockquote>\n<p>查看端口使用情况：<code>netstat -anp</code><br>查看8080端口使用情况：<code>netstat -anp|grep 8080</code></p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"虚拟化\"><a href=\"#虚拟化\" class=\"headerlink\" title=\"虚拟化\"></a>虚拟化</h3><p>虚拟化是一种计算机资源管理技术。<br>指通过虚拟化技术将一台计算机虚拟为多台逻辑计算机。在一台计算机上同时运行多个逻辑计算机，每个逻辑计算机可运行不同的操作系统，并且应用程序都可以在相互独立的空间内运行而互不影响，从而显著提高计算机的工作效率。  </p>\n<p>虚拟化分类（略，因为过于复杂，了解即可）  </p>\n<p>优点：一台物理机可以虚拟化多个服务器，让计算机资源利用更充分。<br>缺点：</p>\n<ol>\n<li>每个虚拟机都会创建一个操作系统，会增加资源的消耗。</li>\n<li>环境兼容问题。  </li>\n</ol>\n<h3 id=\"容器技术\"><a href=\"#容器技术\" class=\"headerlink\" title=\"容器技术\"></a>容器技术</h3><p>运行在操作系统之上的虚拟化技术，模拟的运行在一个操作系统上的多个不同进程，封装在容器中。  </p>\n<p>docker发布于2013年，基于LXC技术。<br>LXC是linux Container，是一种内核虚拟化技术。提供轻量级的虚拟化，以便隔离进程和资源。与宿主机使用同一内核，性能损耗小。</p>\n<p>docker是开源的应用容器引擎，基于go语言实现。<br><a class=\"link\"   href=\"https://www.docker.com/\" >docker官网<i class=\"fas fa-external-link-alt\"></i></a><br>docker技术可以让开发者将开发好的应用和依赖包打包到容器中，以便可以运行在任意linux服务器上，解决开发环境与运维环境不同的问题。<br>docker本省不是容器，是管理容器的引擎。  </p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>docker支持CentOS6及以上版本。<br>CentOS7可以使用<code>yum install docker -y</code>直接安装。  </p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/docker%E7%AC%94%E8%AE%B0/docker%E5%AE%89%E8%A3%85.png\"\n                      alt=\"docker安装\"\n                ></p>\n<h3 id=\"服务启动关闭等\"><a href=\"#服务启动关闭等\" class=\"headerlink\" title=\"服务启动关闭等\"></a>服务启动关闭等</h3><p>启动：<code>systemctl start docker</code>或者<code>service docker start</code><br>停止：<code>systemctl stop docker</code>或者<code>service docker stop</code><br>重启：<code>systemctl restart docker</code>或者<code>service docker restart</code><br>查看运行状态：<code>systemctl status docker</code>或者<code>service docker status</code></p>\n<p>查看docker系统信息：<code>docker info</code><br>查看docker所有帮助信息：<code>docker</code><br>查看某个命令帮助信息：<code>docker commond --help</code></p>\n<h3 id=\"docker运行机制\"><a href=\"#docker运行机制\" class=\"headerlink\" title=\"docker运行机制\"></a>docker运行机制</h3><p>启动服务–&gt;下载镜像–&gt;启动该镜像得到一个容器–&gt;容器里运行应用</p>\n<ol>\n<li>启动服务</li>\n<li>下载镜像，如果本地没有对应镜像，则会从镜像仓库下载，<a class=\"link\"   href=\"https://hub.docker.com/\" >默认仓库<i class=\"fas fa-external-link-alt\"></i></a><br>搜索镜像：<code>docker search tomcat</code><br>下载镜像：<code>docker pull tomcat</code><br>运行镜像：<code>docker run tomcat</code> 后台运行：<code>docker run -d tomcat</code></li>\n</ol>\n<p>-p 参数映射端口<br>显示本地已有镜像：<code>docker images</code></p>\n<h3 id=\"进入docker容器\"><a href=\"#进入docker容器\" class=\"headerlink\" title=\"进入docker容器\"></a>进入docker容器</h3><p>进入容器：<code>docker exec -it 容器id bash</code><br>i表示交互式的，即保持标准输入流打开<br>t表示虚拟控制台<br>退出容器：<code>exit</code></p>\n<p>从客户机访问容器，需要有端口映射，docker容器默认采用桥接模式与宿主机通信，需要将宿主机ip端口映射到容器ip端口上。<br>停止容器：<code>docker stop 容器id/名称</code><br>启动容器：<code>docker run -d -p 8080:8080 tomcat</code></p>\n<h2 id=\"docker核心组件\"><a href=\"#docker核心组件\" class=\"headerlink\" title=\"docker核心组件\"></a>docker核心组件</h2><p>docker是客户端-服务器（C/S）加厚，通过远程API来管理和创建容器。<br>docker通过镜像来创建容器。  </p>\n<h3 id=\"镜像\"><a href=\"#镜像\" class=\"headerlink\" title=\"镜像\"></a>镜像</h3><p>镜像是一个只读的模板，用于创建容器。</p>\n<p>镜像由许多层文件系统构成<br>第一层是引导文件系统bootfs<br>第二层是root文件系统rootfs，root文件系统通常是某种操作系统<br>root系统之上又有很多层文件系统，这些文件系统叠加在一起，构成docker中的镜像</p>\n<p>进入容器：<code>docker exit -it 镜像id bash</code><br>删除镜像：<code>docker rmi 镜像名</code>，rm是删除容器</p>\n<h3 id=\"容器\"><a href=\"#容器\" class=\"headerlink\" title=\"容器\"></a>容器</h3><p>通过镜像启动容器：<code>docker run -d 镜像名</code><br>查看运行中的容器：<code>docker ps</code><br>查看所有的容器：<code>docker ps -a</code><br>停止容器：<code>docker stop 容器id/名称</code><br>开启容器：<code>docker start 容器id/名称</code><br>删除容器：<code>docker rm 容器id/名称</code> 删除容器时，容器必须是静止状态，否则会报错<br>查看容器更多信息：<code>docker inspect 容器id/名称</code><br>停止全部运行中的容器：<code>docker stop $(docker ps -q)</code><br>删除全部容器：<code>docker rm $(docker ps -aq)</code></p>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><p>仓库是集中存放镜像文件的地方。仓库分为公开仓库和私有仓库。<br>最大的公开仓库是<a class=\"link\"   href=\"https://hub.docker.com/\" >Docker Hub<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://dev.aliyun.com/\" >阿里云镜像<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>查找官方镜像：<code>docker search 镜像名</code><br>下载镜像：<code>docker pull 镜像名</code></p>\n<h2 id=\"自定义镜像\"><a href=\"#自定义镜像\" class=\"headerlink\" title=\"自定义镜像\"></a>自定义镜像</h2><p>dockerfile用于构建docker镜像，有一行行命令语句构成，基于这些命令可以构建一个镜像。  </p>\n<p>dockerfile分为四部分</p>\n<ol>\n<li>基础镜像信息</li>\n<li>维护者信息</li>\n<li>镜像操作命令</li>\n<li>容器启动时执行指令</li>\n</ol>\n<h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><ol>\n<li>FROM<br><code>FROM &lt;images&gt; / FROM &lt;images&gt;:&lt;tag&gt; / FROM &lt;images&gt;:&lt;digest&gt;</code><br>用于指定所使用的基础镜像<blockquote>\n<p>FROM必须是dockerfile第一条非注释指令<br>FROM可以出现多次，用于在一个dockerfile中创建多个镜像<br>tag/digest是可选的，默认latest版本基础镜像</p>\n</blockquote>\n</li>\n<li>MAINTAINER<br><code>MAINTAINER &lt;name&gt;</code><br>指定维护者信息</li>\n<li>ENV<br><code>ENV &lt;key&gt; &lt;value&gt; / ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code><br>设置环境变量，会被后续RUN指令使用，并在容器运行时保持。</li>\n<li>COPY<br><code>ADD &lt;源路径&gt;... &lt;目标路径&gt; / ADD [&quot;&lt;源路径&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code><br>复制指定文件到容器中指定位置。<blockquote>\n<p>源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。</p>\n</blockquote>\n</li>\n<li>ADD<br><code>ADD &lt;源路径&gt;... &lt;目标路径&gt; / ADD [&quot;&lt;源路径&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code><br>复制指定文件到容器中指定位置，与COPY格式基本一致，但比COPY增加了一些功能。如源路径可以是url<blockquote>\n<p>如果 docker 发现文件内容被改变，则接下来的指令都不会再使用缓存。</p>\n</blockquote>\n</li>\n<li>RUN<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">shell格式</span></span><br><span class=\"line\">RUN &lt;command&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"built_in\">exec</span>格式</span></span><br><span class=\"line\">RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br></pre></td></tr></table></figure>\n用于构建过程中，执行特定命令，并生成一个中间镜像。  <blockquote>\n<p>RUN 指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定 –no-cache 参数，如：docker build –no-cache。</p>\n</blockquote>\n</li>\n<li>CMD<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class=\"line\">CMD [&quot;param1&quot;,&quot;param2&quot;]</span><br><span class=\"line\">CMD command param1 param2</span><br></pre></td></tr></table></figure>\n用于指定容器启动时命令。<blockquote>\n<p>与 RUN 指令的区别：RUN 在构建的时候执行，并生成一个新的镜像，CMD 在容器运行的时候执行，在构建时不进行任何操作。<br>每个dockerfile只能有一条CMD命令。如果有多条，只有最后一条会被执行。<br>如果用户启动时指定了运行的命令，则会覆盖CMD指定的命令。</p>\n</blockquote>\n</li>\n<li>EXPOSE<br><code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code><br>为构建的镜像设置监听端口，使容器运行时监听</li>\n</ol>\n<h3 id=\"自定义镜像-1\"><a href=\"#自定义镜像-1\" class=\"headerlink\" title=\"自定义镜像\"></a>自定义镜像</h3><ol>\n<li><p>JDK镜像<br>创建Dockerfile文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM centos</span><br><span class=\"line\">MAINTAINER root</span><br><span class=\"line\">ADD jdk-8u121-linux-x64.tar.gz /usr/local</span><br><span class=\"line\">ENV JAVA_HOME /usr/local/java/jdk1.8.0_121</span><br><span class=\"line\">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">ENV PATH $PATH:$JAVA_HOME/bin</span><br><span class=\"line\">CMD java -version</span><br></pre></td></tr></table></figure>\n<p>构建镜像：<code>docker build -t root_jdk1.8.0_121 .</code></p>\n</li>\n<li><p>tomcat镜像<br>创建Dockerfile文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM root_jdk1.8.0_121</span><br><span class=\"line\">MAINTAINER root</span><br><span class=\"line\">ADD apache-tomcat-8.5.24.tar.gz /usr/local</span><br><span class=\"line\">ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.24</span><br><span class=\"line\">ENV PATH $PATH:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">CMD /usr/local/apache-tomcat-8.5.24/bin/catalina.sh run</span><br></pre></td></tr></table></figure>\n<p>构建镜像：<code>docker build -t root_tomcat-8.5.24 .</code></p>\n</li>\n</ol>\n<h3 id=\"镜像发布到仓库\"><a href=\"#镜像发布到仓库\" class=\"headerlink\" title=\"镜像发布到仓库\"></a>镜像发布到仓库</h3><p>省略<br>在阿里云注册账号，容器镜像服务有详细文档。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/docker%E7%AC%94%E8%AE%B0/%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%B9%E5%99%A8%E6%9C%8D%E5%8A%A1.png\"\n                      alt=\"阿里云容器服务\"\n                ></p>\n<h3 id=\"Docker-Hub-镜像加速\"><a href=\"#Docker-Hub-镜像加速\" class=\"headerlink\" title=\"Docker Hub 镜像加速\"></a>Docker Hub 镜像加速</h3><p>/etc/docker/daemon.json<br><code>&#123;&quot;registry-mirrors&quot;: [&quot;阿里云提供的网址&quot;]&#125;</code></p>\n<h2 id=\"docker应用部署\"><a href=\"#docker应用部署\" class=\"headerlink\" title=\"docker应用部署\"></a>docker应用部署</h2><ol>\n<li>将开发好的程序打成jar包或war包</li>\n<li>将打包好的文件上传至服务器</li>\n<li>定义Dockerfile文件，用于创建项目镜像</li>\n</ol>\n<p>定义jar包程序Dockerfile文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM java</span><br><span class=\"line\">MAINTAINER root</span><br><span class=\"line\">ADD springboot-web.jar /opt</span><br><span class=\"line\">RUN chmod +x /opt/springboot-web.jar</span><br><span class=\"line\">CMD java -jar /opt/springboot-web.jar</span><br></pre></td></tr></table></figure>\n<p>构建镜像：<code>docker build -t springboot-web.jar .</code></p>\n<p>定义war包程序Dockerfile文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM root_tomcat-8.5.24</span><br><span class=\"line\">MAINTAINER root</span><br><span class=\"line\">ADD springboot-web.war /usr/local/apache-tomcat-8.5.24/webapps</span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\">CMD /usr/local/apache-tomcat-8.5.24/bin/catalina.sh run</span><br></pre></td></tr></table></figure>\n<p>构建镜像：<code>docker build -t springboot-web.war .</code></p>\n<p>修改容器保存：<code>docker commit 容器id 镜像名</code><br>容器内有新的数据，可以保存为新的镜像。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>主要是一些命令，但花了挺长时间。<br>主要碰到了两个问题。</p>\n<p>第一个问题：<br>无法启动tomcat</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot find /usr/local/tomcat/bin/setclasspath.sh</span><br><span class=\"line\">This file is needed to run this program</span><br></pre></td></tr></table></figure>\n<p>我不知道出现问题的原因是什么，但是找到了<a class=\"link\"   href=\"https://www.5axxw.com/questions/content/fypkh1\" >解决方案<i class=\"fas fa-external-link-alt\"></i></a><br>我将tomcat的版本降低后，解决了这个问题。</p>\n<p>第二个问题：<br>也是无法启动tomcat</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/docker-current: Error response from daemon: driver failed programming external connectivity on endpoint affectionate_leakey (31afb261a3eead766cd87d85a7d0b12d048379e3b8715f28367a61e27b228456): Error starting userland proxy: listen tcp 0.0.0.0:8080: bind: address already in use.</span><br><span class=\"line\">ERRO[0000] error getting events from daemon: net/http: request canceled</span><br></pre></td></tr></table></figure>\n<p>这个是因为端口占用，而导致的报错。<br>解决方案：kill占用的程序。</p>\n<blockquote>\n<p>查看端口使用情况：<code>netstat -anp</code><br>查看8080端口使用情况：<code>netstat -anp|grep 8080</code></p>\n</blockquote>\n"},{"title":"APlayer和MetingJS的使用","date":"2022-08-15T07:25:36.000Z","_content":"\n## 简介\n\nAPlayer是一个可爱的HTML5音乐播放器。\nMetingJS给APlayer播放器加入网易云等支持。\n\n[APlayer项目地址](https://github.com/DIYgod/APlayer)\n[MetingJS项目地址](https://github.com/metowolf/MetingJS)\n[APlayer官方文档](https://aplayer.js.org/#/home)\n\n## 配置\n\n使用cdn调用\n在 <head> 里面插入：\n~~~javascript\n<link href=\"https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css\" rel=\"stylesheet\">\n<script src=\"https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js\"></script>\n~~~\n在 footer 里面插入：\n~~~javascript\n<script src=\"https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js\"></script>\n~~~\n当然，也可以将原文件下载至本地进行调用。\n\n## 使用\n\n### Aplayer原生用法\n\n例如：\n<div id=\"aplayer_1\"></div>\n<script type=\"text/javascript\">\n    const ap = new APlayer({\n        container: document.getElementById('aplayer_1'),\n        audio: [{\n            name: '长岛',\n            artist: '花粥',\n            url: '../../images/APlayer和MetingJS的使用/长岛.mp3',\n            cover: '../../images/APlayer和MetingJS的使用/长岛封面.png'\n        }]\n    });\n</script>\n\n使用音乐播放器加载音乐，url可以是本地资源也可以是http链接。\n代码：\n~~~html\n<div id=\"aplayer_1\"></div>\n<script type=\"text/javascript\">\n    const ap = new APlayer({\n        container: document.getElementById('aplayer_1'),\n        audio: [{\n            name: '长岛',\n            artist: '花粥',\n            url: '../../images/APlayer和MetingJS的使用/长岛.mp3',\n            cover: '../../images/APlayer和MetingJS的使用/长岛封面.png'\n        }]\n    });\n</script>\n~~~\n\n> 更多的用法，比如多个音乐组成的列表模式、节省空间的迷你模式等可以参考[APlayer官方文档](https://aplayer.js.org/#/home)\n\n### 使用MetingJs载入网易云等其他音乐网站的音乐\n\n例如：\n<meting-js\n    server=\"netease\"\n    type=\"song\"\n    id=\"536622304\">\n</meting-js>\n\n代码：\n~~~html\n<meting-js\n    server=\"netease\"\n    type=\"song\"\n    id=\"536622304\">\n</meting-js>\n~~~\n\n可以看出MetingJS的代码也更简洁。\n有三个必要参数：\n1. `id` 指定歌曲 ID / 播放列表 ID / 专辑 ID / 搜索关键字\n2. `server` 指定音乐平台： netease tencent kugou xiami baidu\n3. `type` 指定调用类型：song playlist album search artist\n> 还有许多其他的参数可以参看[MetingJS官方文档](https://github.com/metowolf/MetingJS#option)\n\n播放列表（`type=\"playlist\"`）：\n<meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    id=\"7345595717\">\n</meting-js>\n\n固定播放器（`fixed=\"true\"`），像页面左下角那个一样\n迷你播放器（`mini=\"true\"`）：\n<meting-js\n    server=\"netease\"\n    type=\"song\"\n    id=\"536622304\"\n    mini=\"true\">\n</meting-js>\n\n更多的参数就不介绍了。\n\n## 总结\n\n之前使用butterfly主题时，主题内置了MetingJS。只需要在配置中改几个配置项，加一个div便可实现全盘吸底的APlayer。\n但是本文的方法是通用的，在主题中使用的话，需要找header、footer等文件，在其中修改。\n~~啊，我怎么又在改博客。~~","source":"_posts/APlayer和MetingJS的使用.md","raw":"---\ntitle: APlayer和MetingJS的使用\ndate: 2022-08-15 15:25:36\ntags:\n- APlayer\n- MetingJS\ncategories:\n- 学习记录\n---\n\n## 简介\n\nAPlayer是一个可爱的HTML5音乐播放器。\nMetingJS给APlayer播放器加入网易云等支持。\n\n[APlayer项目地址](https://github.com/DIYgod/APlayer)\n[MetingJS项目地址](https://github.com/metowolf/MetingJS)\n[APlayer官方文档](https://aplayer.js.org/#/home)\n\n## 配置\n\n使用cdn调用\n在 <head> 里面插入：\n~~~javascript\n<link href=\"https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css\" rel=\"stylesheet\">\n<script src=\"https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js\"></script>\n~~~\n在 footer 里面插入：\n~~~javascript\n<script src=\"https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js\"></script>\n~~~\n当然，也可以将原文件下载至本地进行调用。\n\n## 使用\n\n### Aplayer原生用法\n\n例如：\n<div id=\"aplayer_1\"></div>\n<script type=\"text/javascript\">\n    const ap = new APlayer({\n        container: document.getElementById('aplayer_1'),\n        audio: [{\n            name: '长岛',\n            artist: '花粥',\n            url: '../../images/APlayer和MetingJS的使用/长岛.mp3',\n            cover: '../../images/APlayer和MetingJS的使用/长岛封面.png'\n        }]\n    });\n</script>\n\n使用音乐播放器加载音乐，url可以是本地资源也可以是http链接。\n代码：\n~~~html\n<div id=\"aplayer_1\"></div>\n<script type=\"text/javascript\">\n    const ap = new APlayer({\n        container: document.getElementById('aplayer_1'),\n        audio: [{\n            name: '长岛',\n            artist: '花粥',\n            url: '../../images/APlayer和MetingJS的使用/长岛.mp3',\n            cover: '../../images/APlayer和MetingJS的使用/长岛封面.png'\n        }]\n    });\n</script>\n~~~\n\n> 更多的用法，比如多个音乐组成的列表模式、节省空间的迷你模式等可以参考[APlayer官方文档](https://aplayer.js.org/#/home)\n\n### 使用MetingJs载入网易云等其他音乐网站的音乐\n\n例如：\n<meting-js\n    server=\"netease\"\n    type=\"song\"\n    id=\"536622304\">\n</meting-js>\n\n代码：\n~~~html\n<meting-js\n    server=\"netease\"\n    type=\"song\"\n    id=\"536622304\">\n</meting-js>\n~~~\n\n可以看出MetingJS的代码也更简洁。\n有三个必要参数：\n1. `id` 指定歌曲 ID / 播放列表 ID / 专辑 ID / 搜索关键字\n2. `server` 指定音乐平台： netease tencent kugou xiami baidu\n3. `type` 指定调用类型：song playlist album search artist\n> 还有许多其他的参数可以参看[MetingJS官方文档](https://github.com/metowolf/MetingJS#option)\n\n播放列表（`type=\"playlist\"`）：\n<meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    id=\"7345595717\">\n</meting-js>\n\n固定播放器（`fixed=\"true\"`），像页面左下角那个一样\n迷你播放器（`mini=\"true\"`）：\n<meting-js\n    server=\"netease\"\n    type=\"song\"\n    id=\"536622304\"\n    mini=\"true\">\n</meting-js>\n\n更多的参数就不介绍了。\n\n## 总结\n\n之前使用butterfly主题时，主题内置了MetingJS。只需要在配置中改几个配置项，加一个div便可实现全盘吸底的APlayer。\n但是本文的方法是通用的，在主题中使用的话，需要找header、footer等文件，在其中修改。\n~~啊，我怎么又在改博客。~~","slug":"APlayer和MetingJS的使用","published":1,"updated":"2022-08-15T08:37:52.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbdb0003o8tt4kxkfwki","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>APlayer是一个可爱的HTML5音乐播放器。<br>MetingJS给APlayer播放器加入网易云等支持。</p>\n<p><a class=\"link\"   href=\"https://github.com/DIYgod/APlayer\" >APlayer项目地址<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://github.com/metowolf/MetingJS\" >MetingJS项目地址<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://aplayer.js.org/#/home\" >APlayer官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>使用cdn调用<br>在 <head> 里面插入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=<span class=\"string\">&quot;https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css&quot;</span> rel=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>在 footer 里面插入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>当然，也可以将原文件下载至本地进行调用。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"Aplayer原生用法\"><a href=\"#Aplayer原生用法\" class=\"headerlink\" title=\"Aplayer原生用法\"></a>Aplayer原生用法</h3><p>例如：</p>\n<div id=\"aplayer_1\"></div>\n<script type=\"text/javascript\">\n    const ap = new APlayer({\n        container: document.getElementById('aplayer_1'),\n        audio: [{\n            name: '长岛',\n            artist: '花粥',\n            url: '../../images/APlayer和MetingJS的使用/长岛.mp3',\n            cover: '../../images/APlayer和MetingJS的使用/长岛封面.png'\n        }]\n    });\n</script>\n\n<p>使用音乐播放器加载音乐，url可以是本地资源也可以是http链接。<br>代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;aplayer_1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> ap = <span class=\"keyword\">new</span> <span class=\"title class_\">APlayer</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">container</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;aplayer_1&#x27;</span>),</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">audio</span>: [&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;长岛&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">artist</span>: <span class=\"string\">&#x27;花粥&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">url</span>: <span class=\"string\">&#x27;../../images/APlayer和MetingJS的使用/长岛.mp3&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">cover</span>: <span class=\"string\">&#x27;../../images/APlayer和MetingJS的使用/长岛封面.png&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>更多的用法，比如多个音乐组成的列表模式、节省空间的迷你模式等可以参考<a class=\"link\"   href=\"https://aplayer.js.org/#/home\" >APlayer官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h3 id=\"使用MetingJs载入网易云等其他音乐网站的音乐\"><a href=\"#使用MetingJs载入网易云等其他音乐网站的音乐\" class=\"headerlink\" title=\"使用MetingJs载入网易云等其他音乐网站的音乐\"></a>使用MetingJs载入网易云等其他音乐网站的音乐</h3><p>例如：<br><meting-js\n    server=\"netease\"\n    type=\"song\"\n    id=\"536622304\"><br></meting-js></p>\n<p>代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meting-js</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">server</span>=<span class=\"string\">&quot;netease&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;song&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">&quot;536622304&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">meting-js</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出MetingJS的代码也更简洁。<br>有三个必要参数：</p>\n<ol>\n<li><code>id</code> 指定歌曲 ID / 播放列表 ID / 专辑 ID / 搜索关键字</li>\n<li><code>server</code> 指定音乐平台： netease tencent kugou xiami baidu</li>\n<li><code>type</code> 指定调用类型：song playlist album search artist<blockquote>\n<p>还有许多其他的参数可以参看<a class=\"link\"   href=\"https://github.com/metowolf/MetingJS#option\" >MetingJS官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n</li>\n</ol>\n<p>播放列表（<code>type=&quot;playlist&quot;</code>）：<br><meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    id=\"7345595717\"><br></meting-js></p>\n<p>固定播放器（<code>fixed=&quot;true&quot;</code>），像页面左下角那个一样<br>迷你播放器（<code>mini=&quot;true&quot;</code>）：<br><meting-js\n    server=\"netease\"\n    type=\"song\"\n    id=\"536622304\"\n    mini=\"true\"><br></meting-js></p>\n<p>更多的参数就不介绍了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>之前使用butterfly主题时，主题内置了MetingJS。只需要在配置中改几个配置项，加一个div便可实现全盘吸底的APlayer。<br>但是本文的方法是通用的，在主题中使用的话，需要找header、footer等文件，在其中修改。<br><del>啊，我怎么又在改博客。</del></p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>APlayer是一个可爱的HTML5音乐播放器。<br>MetingJS给APlayer播放器加入网易云等支持。</p>\n<p><a class=\"link\"   href=\"https://github.com/DIYgod/APlayer\" >APlayer项目地址<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://github.com/metowolf/MetingJS\" >MetingJS项目地址<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://aplayer.js.org/#/home\" >APlayer官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>使用cdn调用<br>在 <head> 里面插入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=<span class=\"string\">&quot;https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css&quot;</span> rel=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>在 footer 里面插入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>当然，也可以将原文件下载至本地进行调用。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"Aplayer原生用法\"><a href=\"#Aplayer原生用法\" class=\"headerlink\" title=\"Aplayer原生用法\"></a>Aplayer原生用法</h3><p>例如：</p>\n<div id=\"aplayer_1\"></div>\n<script type=\"text/javascript\">\n    const ap = new APlayer({\n        container: document.getElementById('aplayer_1'),\n        audio: [{\n            name: '长岛',\n            artist: '花粥',\n            url: '../../images/APlayer和MetingJS的使用/长岛.mp3',\n            cover: '../../images/APlayer和MetingJS的使用/长岛封面.png'\n        }]\n    });\n</script>\n\n<p>使用音乐播放器加载音乐，url可以是本地资源也可以是http链接。<br>代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;aplayer_1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> ap = <span class=\"keyword\">new</span> <span class=\"title class_\">APlayer</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">container</span>: <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;aplayer_1&#x27;</span>),</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">audio</span>: [&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;长岛&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">artist</span>: <span class=\"string\">&#x27;花粥&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">url</span>: <span class=\"string\">&#x27;../../images/APlayer和MetingJS的使用/长岛.mp3&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">cover</span>: <span class=\"string\">&#x27;../../images/APlayer和MetingJS的使用/长岛封面.png&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>更多的用法，比如多个音乐组成的列表模式、节省空间的迷你模式等可以参考<a class=\"link\"   href=\"https://aplayer.js.org/#/home\" >APlayer官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h3 id=\"使用MetingJs载入网易云等其他音乐网站的音乐\"><a href=\"#使用MetingJs载入网易云等其他音乐网站的音乐\" class=\"headerlink\" title=\"使用MetingJs载入网易云等其他音乐网站的音乐\"></a>使用MetingJs载入网易云等其他音乐网站的音乐</h3><p>例如：<br><meting-js\n    server=\"netease\"\n    type=\"song\"\n    id=\"536622304\"><br></meting-js></p>\n<p>代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meting-js</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">server</span>=<span class=\"string\">&quot;netease&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">type</span>=<span class=\"string\">&quot;song&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">id</span>=<span class=\"string\">&quot;536622304&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">meting-js</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出MetingJS的代码也更简洁。<br>有三个必要参数：</p>\n<ol>\n<li><code>id</code> 指定歌曲 ID / 播放列表 ID / 专辑 ID / 搜索关键字</li>\n<li><code>server</code> 指定音乐平台： netease tencent kugou xiami baidu</li>\n<li><code>type</code> 指定调用类型：song playlist album search artist<blockquote>\n<p>还有许多其他的参数可以参看<a class=\"link\"   href=\"https://github.com/metowolf/MetingJS#option\" >MetingJS官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n</li>\n</ol>\n<p>播放列表（<code>type=&quot;playlist&quot;</code>）：<br><meting-js\n    server=\"netease\"\n    type=\"playlist\"\n    id=\"7345595717\"><br></meting-js></p>\n<p>固定播放器（<code>fixed=&quot;true&quot;</code>），像页面左下角那个一样<br>迷你播放器（<code>mini=&quot;true&quot;</code>）：<br><meting-js\n    server=\"netease\"\n    type=\"song\"\n    id=\"536622304\"\n    mini=\"true\"><br></meting-js></p>\n<p>更多的参数就不介绍了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>之前使用butterfly主题时，主题内置了MetingJS。只需要在配置中改几个配置项，加一个div便可实现全盘吸底的APlayer。<br>但是本文的方法是通用的，在主题中使用的话，需要找header、footer等文件，在其中修改。<br><del>啊，我怎么又在改博客。</del></p>\n"},{"title":"FastDFS笔记","date":"2022-08-09T05:24:08.000Z","_content":"\n## 简介\n\n### 分布式文件系统\n\n分布式文件系统（Distributed File System，DFS）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点（可简单的理解为一台计算机）相连；或是若干不同的逻辑磁盘分区或卷标组合在一起而形成的完整的有层次的文件系统。DFS为分布在网络上任意位置的资源提供一个逻辑上的树形文件系统结构，从而使用户访问分布在网络上的共享文件更加简便。单独的 DFS共享文件夹的作用是相对于通过网络上的其他共享文件夹的访问点。  \n常见的分布式文件系统有：FastDFS、GFS、HDFS、Lustre、Ceph、GridFS、mogileFS、TFS等。\n\n传统存放方式：\n![传统存放方式](../images/FastDFS笔记/传统存放方式.png)\n\n分布式文件存储：\n![分布式文件存储](../images/FastDFS笔记/分布式文件存储.png)\n\n### FastDFS\n\nFastDFS是开源的轻量级分布式文件系统，为互联网应用定制，简单、灵活、高效。\n采用c语言开发，由阿里巴巴开发并开源。\nFastDFS对文件进行管理，功能包括：文件存储、文件同步（上传、下载、删除）等，解决大容量文件存储问题，特别适合以文件为载体的在线服务。比如文档网站、图片网址、视频网址等\nFastDFS充分考虑了冗余备份、线性扩容等级制，并注重高可用、高性能等指标，使用它很容易搭建一套高性能的文件服务器集群提供文件上传下载等服务。\n\n~~看起来做个人云盘什么的很不错~~\n\n[FastDFS开源地址](https://github.com/happyfish100/fastdfs)\n\n### FastDFS整体架构\n\nFastDFS由客户端和服务端构成\n客户端通常是我们的程序，比如用java去连接FastDFS、操作FastDFS。它提供了专有的api访问\n服务端由跟踪器（tracker）和存储节点（storage）构成\n跟踪器主要做调度工作，在内存中记录集群中存储节点storage的状态信息，是前端Client和后端存储节点storage的枢纽。因为相关信息存储在内存中，所以tracker server的性能非常高。\n存储节点用于存储文件，包括文件和文件属性（meta data）都保存到存储服务器磁盘上，完成文件管理的所有功能：存储、同步、访问等\n\n## 环境搭建\n\n### 安装\n\n旧版本 FastDFS 说明：\nFastDFS有一部分是网络通信功能，旧版本FastDFS（FastDFS2.0之前版本）没有直接使用 epoll 实现，而是通过libevent实现（libevent是一个用C语言编写的、轻量级的开源高性能网络库），但是最新版的FastDFS最终网络IO这部分重新用epoll实现\n所以如果是FastDFS 是 2.0 之前的版本，请先安装好 libevent 环境（新版本不需要安装）\n\n安装前准备:\n检查linux是否安装了gcc、libevent、libevent-devel\n~~~shell\nyum list installed|grep gcc\nyum list installed|grep libevent\nyum list installed|grep libevent-devel\n~~~\n安装\n~~~shell\nyum install gcc libevent libevent-devel -y\n~~~\n\n安装libfastcommon：\n~~~shell\ngit clone https://github.com/happyfish100/libfastcommon.git\ncd libfastcommon/\n./make.sh\nsudo ./make.sh install\n~~~\n> 头文件安装在/usr/include/fastcommon目录下\n> 动态库安装在/usr/lib64/和/usr/lib/目录下\n\n安装fastdfs\n~~~shell\ngit clone https://github.com/happyfish100/fastdfs.git\ncd fastdfs\n./make.sh\nsudo ./make.sh install\n~~~\n> 工具安装在/usr/bin/目录下：(无需配置环境变量，直接使用)\n> fdfs_delete_file：删除文件\n> fdfs_download_file：下载文件\n> fdfs_upload_file：上传文件\n> fdfs_trackerd：启动tracker服务\n> fdfs_storaged：启动storage服务\n> fdfs_file_info：用来检查一个文件的信息，参数传递一个FastDFS文件\n\n> 配置文件默认安装在/etc/fdfs/目录下：\n> client.conf.sample：客户端默认配置文件\n> storage.conf.sample：storage服务默认配置文件\n> storage_ids.conf.sample：\n> tracker.conf.sample：tracker服务默认配置文件\n\n### 启动与关闭\n\n启动：\n`fdfs_trackerd /etc/fdfs/tracker.conf`\n`fdfs_storaged /etc/fdfs/storage.conf`\n\n启动成功会有两个服务\n![启动成功](../images/FastDFS笔记/启动成功.png)\n\n重启：\n`fdfs_trackerd /etc/fdfs/tracker.conf restart`\n`fdfs_storaged /etc/fdfs/storage.conf restart`\n\n关闭：\n`fdfs_trackerd /etc/fdfs/tracker.conf stop`\n`fdfs_storaged /etc/fdfs/storage.conf stop`\n\n> 可以使用kill关闭，但不建议，因为可能会导致文件信息不同步问题\n\n### 测试上传\n\n上传测试：\n`fdfs_test /etc/fdfs/client.conf upload 文件路径`\n示例：\n`fdfs_test /etc/fdfs/client.conf upload /root/test.txt`\n返回信息：\n~~~text\ntracker_query_storage_store_list_without_group:\n        server 1. group_name=, ip_addr=127.0.0.1, port=23000\n\ngroup_name=group1, ip_addr=127.0.0.1, port=23000\nstorage_upload_by_filename\ngroup_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt\nsource ip address: 127.0.0.1\nfile timestamp=2022-08-09 23:51:47\nfile size=26\nfile crc32=459240585\nexample file url: http://127.0.0.1/group1/M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt\nstorage_upload_slave_by_filename\ngroup_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt\nsource ip address: 127.0.0.1\nfile timestamp=2022-08-09 23:51:47\nfile size=26\nfile crc32=459240585\nexample file url: http://127.0.0.1/group1/M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt\n~~~\n\n> 其中\n> group_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt\n> group1 为 组名、M00 为 磁盘、/00/00/ 为 目录、最后是文件名\n\n上传后的文件\n~~~shell\n(base) [root@VM-16-9-centos 00]# ll\ntotal 16\n-rw-r--r-- 1 root root 26 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt\n-rw-r--r-- 1 root root 49 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt-m\n-rw-r--r-- 1 root root 26 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt\n-rw-r--r-- 1 root root 49 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt-m\n~~~\n> _big是备份文件，与没有的文件存储内容一样\n> -m是文件的属性文件\n\n### 测试下载\n\n上传测试：\n`fdfs_test /etc/fdfs/client.conf download 组名 远程文件路径`\n示例：\n`fdfs_test /etc/fdfs/client.conf download group1 M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt`\n返回信息：\n~~~text\nstorage=127.0.0.1:23000\ndownload file success, file size=26, file save to fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt\n~~~\n\n删除文件测试：\n`fdfs_test /etc/fdfs/client.conf delete 组名 远程文件路径`\n\n## FastDFS的http访问\n\n### 概述\n\n文件上传成功的提示信息中说，我们可以通过某个路径访问上传的文件，但直接访问这个路径是访问不了的。\nFastDFS提供了一个Nginx扩展模块，利用这个模块，可以通过nginx访问已经上传到FastDFS上的文件。\n\n[FastDFS-nginx扩展模块](https://github.com/happyfish100/fastdfs-nginx-module)\n\n### 安装nginx并添加扩展模块\n\n解压缩扩展模块。\n\n配置nginx\n使用`./configure --prefix=/usr/local/nginx_fdfs --add-model=扩展模块的src目录`添加拓展模块\n配置完成后`make`\n然后`make install`安装nginx\n\n### 配置nginx\n\nFastDFS配置(mod_fastdfs.conf)\n\n基础路径\n`base_path=...`\ntracker_server地址\n`tracker_server=...:22122`\n请求中需要包含组名\n`url_have_group_name = true`\n有几个磁盘存储路径\n`store_path_count=1`\n文件存储路径\n`store_path0=...`\n\nnginx配置(nginx.conf)\n\n拦截请求路径中包含 /group[1-9]/M0[0-9] 的请求，用fastdfs的nginx模块进行转发\n~~~conf\nlocation ~/group[1-9]/M0[0-9]{\n    ngx_fastdfs_model;\n}\n~~~\n\n启动失败可能的原因：\n1. mod_fastdfs.conf没有放到/etc/fdfs目录中\n2. 配置文件中有错误。比如基础路径不存在\n\n### 拓展模块执行流程\n\n![拓展模块执行流程](../images/FastDFS笔记/拓展模块执行流程.png)\n\n## 使用Java程序对FastDFS进行操作\n\n[fastdfs-client-java 项目地址](https://github.com/happyfish100/fastdfs-client-java)\n\nmaven依赖\n~~~xml\n<!--\n    引入FastDFS的maven依赖包\n    这个依赖包不在maven的中央库中，需要对源码进行编译，将客户端代码编译到maven本地库中或直接拷贝依赖包文件到maven库中。\n-->\n    <dependency>\n        <groupId>org.csource</groupId>\n        <artifactId>fastdfs-client-java</artifactId>\n        <version>1.29-SNAPSHOT</version>\n    </dependency>\n~~~\n\n创建配置文件（fastdfs.conf）\n~~~conf\ntracker_server=127.0.0.1:22122\n~~~\n\n文件上传：\n~~~java\npublic static void upload() {\n    TrackerServer ts = null;\n    StorageServer ss = null;\n    try {\n        //读取配置文件，用于将所有的tracker的地址读取到内存中\n        ClientGlobal.init(\"fastdfs.conf\");\n        TrackerClient tc = new TrackerClient();\n        ts = tc.getTrackerServer();\n        ss = tc.getStoreStorage(ts);\n        //定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。\n        StorageClient sc = new StorageClient(ts, ss);\n        /*\n        文件上传\n        参数1 需要上传文件的绝对路径\n        参数2 需要上传文件的拓展名\n        参数3 为文件的属性文件，通常不上传\n        返回一个string数组，需妥善保管\n        数组中第一个元素为文件所在组名，第二个元素为文件所在的远程路径名称\n         */\n        String[] result = sc.upload_file(\"\", \"\", null);\n        \n    } catch (IOException | MyException e) {\n        e.printStackTrace();\n    }\n}\n~~~\n\n文件下载：\n~~~java\npublic static void download() {\n    TrackerServer ts = null;\n    StorageServer ss = null;\n    try {\n        //读取配置文件，用于将所有的tracker的地址读取到内存中\n        ClientGlobal.init(\"fastdfs.conf\");\n        TrackerClient tc = new TrackerClient();\n        ts = tc.getTrackerServer();\n        ss = tc.getStoreStorage(ts);\n        //定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。\n        StorageClient sc = new StorageClient(ts, ss);\n        /*\n        文件下载\n        参数1 需要下载的文件的组名\n        参数2 需要下载文件的远程文件名\n        参数3 需要保存的本地文件名\n        返回一个int类型的数据。返回0 表示文件下载成功，其他值表示文件下载失败\n         */\n        int result = sc.download_file(\"\", \"\", \"\");\n    } catch (MyException | IOException e) {\n        e.printStackTrace();\n    }\n}\n~~~\n\n文件删除：\n~~~java\npublic static void delete(){\n    TrackerServer ts = null;\n    StorageServer ss = null;\n    try {\n        //读取配置文件，用于将所有的tracker的地址读取到内存中\n        ClientGlobal.init(\"fastdfs.conf\");\n        TrackerClient tc = new TrackerClient();\n        ts = tc.getTrackerServer();\n        ss = tc.getStoreStorage(ts);\n        //定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。\n        StorageClient sc = new StorageClient(ts, ss);\n        /*\n        文件下载\n        参数1 需要删除的文件的组名\n        参数2 需要删除文件的远程文件名\n        返回一个int类型的数据。返回0 表示文件删除成功，其他值表示文件删除失败\n         */\n        int result = sc.delete_file(\"\", \"\");\n    } catch (MyException | IOException e) {\n        e.printStackTrace();\n    }\n}\n~~~\n\nspringboot中关于上传文件大小的配置\n~~~properties\n#设置springMVC允许上传的单个文件大小 默认值为1MB\nspring.servlet.multipart.max-file-size=1MB\n#设置springMVC允许的表单中请求中允许上传文件总大小 默认值为10MB\nspring.servlet.multipart.max-request-size=10MB\n~~~\n\n## 集群的访问流程\n\n集群结构：\n![集群结构](../images/FastDFS笔记/集群结构.png)\n\n访问流程：\n![集群的访问流程](../images/FastDFS笔记/集群的访问流程.png)\n\n## 总结\n\n部署分布式的部分省略了。咕\n这部分用了快十天，划水划了挺久。不过总算结束了。\n","source":"_posts/FastDFS笔记.md","raw":"---\ntitle: FastDFS笔记\ndate: 2022-08-09 13:24:08\ntags:\n- FastDFS\ncategories:\n- 学习笔记\n---\n\n## 简介\n\n### 分布式文件系统\n\n分布式文件系统（Distributed File System，DFS）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点（可简单的理解为一台计算机）相连；或是若干不同的逻辑磁盘分区或卷标组合在一起而形成的完整的有层次的文件系统。DFS为分布在网络上任意位置的资源提供一个逻辑上的树形文件系统结构，从而使用户访问分布在网络上的共享文件更加简便。单独的 DFS共享文件夹的作用是相对于通过网络上的其他共享文件夹的访问点。  \n常见的分布式文件系统有：FastDFS、GFS、HDFS、Lustre、Ceph、GridFS、mogileFS、TFS等。\n\n传统存放方式：\n![传统存放方式](../images/FastDFS笔记/传统存放方式.png)\n\n分布式文件存储：\n![分布式文件存储](../images/FastDFS笔记/分布式文件存储.png)\n\n### FastDFS\n\nFastDFS是开源的轻量级分布式文件系统，为互联网应用定制，简单、灵活、高效。\n采用c语言开发，由阿里巴巴开发并开源。\nFastDFS对文件进行管理，功能包括：文件存储、文件同步（上传、下载、删除）等，解决大容量文件存储问题，特别适合以文件为载体的在线服务。比如文档网站、图片网址、视频网址等\nFastDFS充分考虑了冗余备份、线性扩容等级制，并注重高可用、高性能等指标，使用它很容易搭建一套高性能的文件服务器集群提供文件上传下载等服务。\n\n~~看起来做个人云盘什么的很不错~~\n\n[FastDFS开源地址](https://github.com/happyfish100/fastdfs)\n\n### FastDFS整体架构\n\nFastDFS由客户端和服务端构成\n客户端通常是我们的程序，比如用java去连接FastDFS、操作FastDFS。它提供了专有的api访问\n服务端由跟踪器（tracker）和存储节点（storage）构成\n跟踪器主要做调度工作，在内存中记录集群中存储节点storage的状态信息，是前端Client和后端存储节点storage的枢纽。因为相关信息存储在内存中，所以tracker server的性能非常高。\n存储节点用于存储文件，包括文件和文件属性（meta data）都保存到存储服务器磁盘上，完成文件管理的所有功能：存储、同步、访问等\n\n## 环境搭建\n\n### 安装\n\n旧版本 FastDFS 说明：\nFastDFS有一部分是网络通信功能，旧版本FastDFS（FastDFS2.0之前版本）没有直接使用 epoll 实现，而是通过libevent实现（libevent是一个用C语言编写的、轻量级的开源高性能网络库），但是最新版的FastDFS最终网络IO这部分重新用epoll实现\n所以如果是FastDFS 是 2.0 之前的版本，请先安装好 libevent 环境（新版本不需要安装）\n\n安装前准备:\n检查linux是否安装了gcc、libevent、libevent-devel\n~~~shell\nyum list installed|grep gcc\nyum list installed|grep libevent\nyum list installed|grep libevent-devel\n~~~\n安装\n~~~shell\nyum install gcc libevent libevent-devel -y\n~~~\n\n安装libfastcommon：\n~~~shell\ngit clone https://github.com/happyfish100/libfastcommon.git\ncd libfastcommon/\n./make.sh\nsudo ./make.sh install\n~~~\n> 头文件安装在/usr/include/fastcommon目录下\n> 动态库安装在/usr/lib64/和/usr/lib/目录下\n\n安装fastdfs\n~~~shell\ngit clone https://github.com/happyfish100/fastdfs.git\ncd fastdfs\n./make.sh\nsudo ./make.sh install\n~~~\n> 工具安装在/usr/bin/目录下：(无需配置环境变量，直接使用)\n> fdfs_delete_file：删除文件\n> fdfs_download_file：下载文件\n> fdfs_upload_file：上传文件\n> fdfs_trackerd：启动tracker服务\n> fdfs_storaged：启动storage服务\n> fdfs_file_info：用来检查一个文件的信息，参数传递一个FastDFS文件\n\n> 配置文件默认安装在/etc/fdfs/目录下：\n> client.conf.sample：客户端默认配置文件\n> storage.conf.sample：storage服务默认配置文件\n> storage_ids.conf.sample：\n> tracker.conf.sample：tracker服务默认配置文件\n\n### 启动与关闭\n\n启动：\n`fdfs_trackerd /etc/fdfs/tracker.conf`\n`fdfs_storaged /etc/fdfs/storage.conf`\n\n启动成功会有两个服务\n![启动成功](../images/FastDFS笔记/启动成功.png)\n\n重启：\n`fdfs_trackerd /etc/fdfs/tracker.conf restart`\n`fdfs_storaged /etc/fdfs/storage.conf restart`\n\n关闭：\n`fdfs_trackerd /etc/fdfs/tracker.conf stop`\n`fdfs_storaged /etc/fdfs/storage.conf stop`\n\n> 可以使用kill关闭，但不建议，因为可能会导致文件信息不同步问题\n\n### 测试上传\n\n上传测试：\n`fdfs_test /etc/fdfs/client.conf upload 文件路径`\n示例：\n`fdfs_test /etc/fdfs/client.conf upload /root/test.txt`\n返回信息：\n~~~text\ntracker_query_storage_store_list_without_group:\n        server 1. group_name=, ip_addr=127.0.0.1, port=23000\n\ngroup_name=group1, ip_addr=127.0.0.1, port=23000\nstorage_upload_by_filename\ngroup_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt\nsource ip address: 127.0.0.1\nfile timestamp=2022-08-09 23:51:47\nfile size=26\nfile crc32=459240585\nexample file url: http://127.0.0.1/group1/M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt\nstorage_upload_slave_by_filename\ngroup_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt\nsource ip address: 127.0.0.1\nfile timestamp=2022-08-09 23:51:47\nfile size=26\nfile crc32=459240585\nexample file url: http://127.0.0.1/group1/M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt\n~~~\n\n> 其中\n> group_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt\n> group1 为 组名、M00 为 磁盘、/00/00/ 为 目录、最后是文件名\n\n上传后的文件\n~~~shell\n(base) [root@VM-16-9-centos 00]# ll\ntotal 16\n-rw-r--r-- 1 root root 26 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt\n-rw-r--r-- 1 root root 49 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt-m\n-rw-r--r-- 1 root root 26 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt\n-rw-r--r-- 1 root root 49 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt-m\n~~~\n> _big是备份文件，与没有的文件存储内容一样\n> -m是文件的属性文件\n\n### 测试下载\n\n上传测试：\n`fdfs_test /etc/fdfs/client.conf download 组名 远程文件路径`\n示例：\n`fdfs_test /etc/fdfs/client.conf download group1 M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt`\n返回信息：\n~~~text\nstorage=127.0.0.1:23000\ndownload file success, file size=26, file save to fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt\n~~~\n\n删除文件测试：\n`fdfs_test /etc/fdfs/client.conf delete 组名 远程文件路径`\n\n## FastDFS的http访问\n\n### 概述\n\n文件上传成功的提示信息中说，我们可以通过某个路径访问上传的文件，但直接访问这个路径是访问不了的。\nFastDFS提供了一个Nginx扩展模块，利用这个模块，可以通过nginx访问已经上传到FastDFS上的文件。\n\n[FastDFS-nginx扩展模块](https://github.com/happyfish100/fastdfs-nginx-module)\n\n### 安装nginx并添加扩展模块\n\n解压缩扩展模块。\n\n配置nginx\n使用`./configure --prefix=/usr/local/nginx_fdfs --add-model=扩展模块的src目录`添加拓展模块\n配置完成后`make`\n然后`make install`安装nginx\n\n### 配置nginx\n\nFastDFS配置(mod_fastdfs.conf)\n\n基础路径\n`base_path=...`\ntracker_server地址\n`tracker_server=...:22122`\n请求中需要包含组名\n`url_have_group_name = true`\n有几个磁盘存储路径\n`store_path_count=1`\n文件存储路径\n`store_path0=...`\n\nnginx配置(nginx.conf)\n\n拦截请求路径中包含 /group[1-9]/M0[0-9] 的请求，用fastdfs的nginx模块进行转发\n~~~conf\nlocation ~/group[1-9]/M0[0-9]{\n    ngx_fastdfs_model;\n}\n~~~\n\n启动失败可能的原因：\n1. mod_fastdfs.conf没有放到/etc/fdfs目录中\n2. 配置文件中有错误。比如基础路径不存在\n\n### 拓展模块执行流程\n\n![拓展模块执行流程](../images/FastDFS笔记/拓展模块执行流程.png)\n\n## 使用Java程序对FastDFS进行操作\n\n[fastdfs-client-java 项目地址](https://github.com/happyfish100/fastdfs-client-java)\n\nmaven依赖\n~~~xml\n<!--\n    引入FastDFS的maven依赖包\n    这个依赖包不在maven的中央库中，需要对源码进行编译，将客户端代码编译到maven本地库中或直接拷贝依赖包文件到maven库中。\n-->\n    <dependency>\n        <groupId>org.csource</groupId>\n        <artifactId>fastdfs-client-java</artifactId>\n        <version>1.29-SNAPSHOT</version>\n    </dependency>\n~~~\n\n创建配置文件（fastdfs.conf）\n~~~conf\ntracker_server=127.0.0.1:22122\n~~~\n\n文件上传：\n~~~java\npublic static void upload() {\n    TrackerServer ts = null;\n    StorageServer ss = null;\n    try {\n        //读取配置文件，用于将所有的tracker的地址读取到内存中\n        ClientGlobal.init(\"fastdfs.conf\");\n        TrackerClient tc = new TrackerClient();\n        ts = tc.getTrackerServer();\n        ss = tc.getStoreStorage(ts);\n        //定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。\n        StorageClient sc = new StorageClient(ts, ss);\n        /*\n        文件上传\n        参数1 需要上传文件的绝对路径\n        参数2 需要上传文件的拓展名\n        参数3 为文件的属性文件，通常不上传\n        返回一个string数组，需妥善保管\n        数组中第一个元素为文件所在组名，第二个元素为文件所在的远程路径名称\n         */\n        String[] result = sc.upload_file(\"\", \"\", null);\n        \n    } catch (IOException | MyException e) {\n        e.printStackTrace();\n    }\n}\n~~~\n\n文件下载：\n~~~java\npublic static void download() {\n    TrackerServer ts = null;\n    StorageServer ss = null;\n    try {\n        //读取配置文件，用于将所有的tracker的地址读取到内存中\n        ClientGlobal.init(\"fastdfs.conf\");\n        TrackerClient tc = new TrackerClient();\n        ts = tc.getTrackerServer();\n        ss = tc.getStoreStorage(ts);\n        //定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。\n        StorageClient sc = new StorageClient(ts, ss);\n        /*\n        文件下载\n        参数1 需要下载的文件的组名\n        参数2 需要下载文件的远程文件名\n        参数3 需要保存的本地文件名\n        返回一个int类型的数据。返回0 表示文件下载成功，其他值表示文件下载失败\n         */\n        int result = sc.download_file(\"\", \"\", \"\");\n    } catch (MyException | IOException e) {\n        e.printStackTrace();\n    }\n}\n~~~\n\n文件删除：\n~~~java\npublic static void delete(){\n    TrackerServer ts = null;\n    StorageServer ss = null;\n    try {\n        //读取配置文件，用于将所有的tracker的地址读取到内存中\n        ClientGlobal.init(\"fastdfs.conf\");\n        TrackerClient tc = new TrackerClient();\n        ts = tc.getTrackerServer();\n        ss = tc.getStoreStorage(ts);\n        //定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。\n        StorageClient sc = new StorageClient(ts, ss);\n        /*\n        文件下载\n        参数1 需要删除的文件的组名\n        参数2 需要删除文件的远程文件名\n        返回一个int类型的数据。返回0 表示文件删除成功，其他值表示文件删除失败\n         */\n        int result = sc.delete_file(\"\", \"\");\n    } catch (MyException | IOException e) {\n        e.printStackTrace();\n    }\n}\n~~~\n\nspringboot中关于上传文件大小的配置\n~~~properties\n#设置springMVC允许上传的单个文件大小 默认值为1MB\nspring.servlet.multipart.max-file-size=1MB\n#设置springMVC允许的表单中请求中允许上传文件总大小 默认值为10MB\nspring.servlet.multipart.max-request-size=10MB\n~~~\n\n## 集群的访问流程\n\n集群结构：\n![集群结构](../images/FastDFS笔记/集群结构.png)\n\n访问流程：\n![集群的访问流程](../images/FastDFS笔记/集群的访问流程.png)\n\n## 总结\n\n部署分布式的部分省略了。咕\n这部分用了快十天，划水划了挺久。不过总算结束了。\n","slug":"FastDFS笔记","published":1,"updated":"2022-08-19T08:34:49.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbde0007o8tt4lloe0rf","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"分布式文件系统\"><a href=\"#分布式文件系统\" class=\"headerlink\" title=\"分布式文件系统\"></a>分布式文件系统</h3><p>分布式文件系统（Distributed File System，DFS）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点（可简单的理解为一台计算机）相连；或是若干不同的逻辑磁盘分区或卷标组合在一起而形成的完整的有层次的文件系统。DFS为分布在网络上任意位置的资源提供一个逻辑上的树形文件系统结构，从而使用户访问分布在网络上的共享文件更加简便。单独的 DFS共享文件夹的作用是相对于通过网络上的其他共享文件夹的访问点。<br>常见的分布式文件系统有：FastDFS、GFS、HDFS、Lustre、Ceph、GridFS、mogileFS、TFS等。</p>\n<p>传统存放方式：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F.png\"\n                      alt=\"传统存放方式\"\n                ></p>\n<p>分布式文件存储：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8.png\"\n                      alt=\"分布式文件存储\"\n                ></p>\n<h3 id=\"FastDFS\"><a href=\"#FastDFS\" class=\"headerlink\" title=\"FastDFS\"></a>FastDFS</h3><p>FastDFS是开源的轻量级分布式文件系统，为互联网应用定制，简单、灵活、高效。<br>采用c语言开发，由阿里巴巴开发并开源。<br>FastDFS对文件进行管理，功能包括：文件存储、文件同步（上传、下载、删除）等，解决大容量文件存储问题，特别适合以文件为载体的在线服务。比如文档网站、图片网址、视频网址等<br>FastDFS充分考虑了冗余备份、线性扩容等级制，并注重高可用、高性能等指标，使用它很容易搭建一套高性能的文件服务器集群提供文件上传下载等服务。</p>\n<p><del>看起来做个人云盘什么的很不错</del></p>\n<p><a class=\"link\"   href=\"https://github.com/happyfish100/fastdfs\" >FastDFS开源地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"FastDFS整体架构\"><a href=\"#FastDFS整体架构\" class=\"headerlink\" title=\"FastDFS整体架构\"></a>FastDFS整体架构</h3><p>FastDFS由客户端和服务端构成<br>客户端通常是我们的程序，比如用java去连接FastDFS、操作FastDFS。它提供了专有的api访问<br>服务端由跟踪器（tracker）和存储节点（storage）构成<br>跟踪器主要做调度工作，在内存中记录集群中存储节点storage的状态信息，是前端Client和后端存储节点storage的枢纽。因为相关信息存储在内存中，所以tracker server的性能非常高。<br>存储节点用于存储文件，包括文件和文件属性（meta data）都保存到存储服务器磁盘上，完成文件管理的所有功能：存储、同步、访问等</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>旧版本 FastDFS 说明：<br>FastDFS有一部分是网络通信功能，旧版本FastDFS（FastDFS2.0之前版本）没有直接使用 epoll 实现，而是通过libevent实现（libevent是一个用C语言编写的、轻量级的开源高性能网络库），但是最新版的FastDFS最终网络IO这部分重新用epoll实现<br>所以如果是FastDFS 是 2.0 之前的版本，请先安装好 libevent 环境（新版本不需要安装）</p>\n<p>安装前准备:<br>检查linux是否安装了gcc、libevent、libevent-devel</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list installed|grep gcc</span><br><span class=\"line\">yum list installed|grep libevent</span><br><span class=\"line\">yum list installed|grep libevent-devel</span><br></pre></td></tr></table></figure>\n<p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc libevent libevent-devel -y</span><br></pre></td></tr></table></figure>\n\n<p>安装libfastcommon：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/happyfish100/libfastcommon.git</span><br><span class=\"line\">cd libfastcommon/</span><br><span class=\"line\">./make.sh</span><br><span class=\"line\">sudo ./make.sh install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>头文件安装在/usr/include/fastcommon目录下<br>动态库安装在/usr/lib64/和/usr/lib/目录下</p>\n</blockquote>\n<p>安装fastdfs</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/happyfish100/fastdfs.git</span><br><span class=\"line\">cd fastdfs</span><br><span class=\"line\">./make.sh</span><br><span class=\"line\">sudo ./make.sh install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>工具安装在/usr/bin/目录下：(无需配置环境变量，直接使用)<br>fdfs_delete_file：删除文件<br>fdfs_download_file：下载文件<br>fdfs_upload_file：上传文件<br>fdfs_trackerd：启动tracker服务<br>fdfs_storaged：启动storage服务<br>fdfs_file_info：用来检查一个文件的信息，参数传递一个FastDFS文件</p>\n</blockquote>\n<blockquote>\n<p>配置文件默认安装在/etc/fdfs/目录下：<br>client.conf.sample：客户端默认配置文件<br>storage.conf.sample：storage服务默认配置文件<br>storage_ids.conf.sample：<br>tracker.conf.sample：tracker服务默认配置文件</p>\n</blockquote>\n<h3 id=\"启动与关闭\"><a href=\"#启动与关闭\" class=\"headerlink\" title=\"启动与关闭\"></a>启动与关闭</h3><p>启动：<br><code>fdfs_trackerd /etc/fdfs/tracker.conf</code><br><code>fdfs_storaged /etc/fdfs/storage.conf</code></p>\n<p>启动成功会有两个服务<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png\"\n                      alt=\"启动成功\"\n                ></p>\n<p>重启：<br><code>fdfs_trackerd /etc/fdfs/tracker.conf restart</code><br><code>fdfs_storaged /etc/fdfs/storage.conf restart</code></p>\n<p>关闭：<br><code>fdfs_trackerd /etc/fdfs/tracker.conf stop</code><br><code>fdfs_storaged /etc/fdfs/storage.conf stop</code></p>\n<blockquote>\n<p>可以使用kill关闭，但不建议，因为可能会导致文件信息不同步问题</p>\n</blockquote>\n<h3 id=\"测试上传\"><a href=\"#测试上传\" class=\"headerlink\" title=\"测试上传\"></a>测试上传</h3><p>上传测试：<br><code>fdfs_test /etc/fdfs/client.conf upload 文件路径</code><br>示例：<br><code>fdfs_test /etc/fdfs/client.conf upload /root/test.txt</code><br>返回信息：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tracker_query_storage_store_list_without_group:</span><br><span class=\"line\">        server 1. group_name=, ip_addr=127.0.0.1, port=23000</span><br><span class=\"line\"></span><br><span class=\"line\">group_name=group1, ip_addr=127.0.0.1, port=23000</span><br><span class=\"line\">storage_upload_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt</span><br><span class=\"line\">source ip address: 127.0.0.1</span><br><span class=\"line\">file timestamp=2022-08-09 23:51:47</span><br><span class=\"line\">file size=26</span><br><span class=\"line\">file crc32=459240585</span><br><span class=\"line\">example file url: http://127.0.0.1/group1/M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt</span><br><span class=\"line\">storage_upload_slave_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt</span><br><span class=\"line\">source ip address: 127.0.0.1</span><br><span class=\"line\">file timestamp=2022-08-09 23:51:47</span><br><span class=\"line\">file size=26</span><br><span class=\"line\">file crc32=459240585</span><br><span class=\"line\">example file url: http://127.0.0.1/group1/M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中<br>group_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt<br>group1 为 组名、M00 为 磁盘、/00/00/ 为 目录、最后是文件名</p>\n</blockquote>\n<p>上传后的文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base) [root@VM-16-9-centos 00]# ll</span><br><span class=\"line\">total 16</span><br><span class=\"line\">-rw-r--r-- 1 root root 26 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 49 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt-m</span><br><span class=\"line\">-rw-r--r-- 1 root root 26 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 49 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt-m</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>_big是备份文件，与没有的文件存储内容一样<br>-m是文件的属性文件</p>\n</blockquote>\n<h3 id=\"测试下载\"><a href=\"#测试下载\" class=\"headerlink\" title=\"测试下载\"></a>测试下载</h3><p>上传测试：<br><code>fdfs_test /etc/fdfs/client.conf download 组名 远程文件路径</code><br>示例：<br><code>fdfs_test /etc/fdfs/client.conf download group1 M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt</code><br>返回信息：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storage=127.0.0.1:23000</span><br><span class=\"line\">download file success, file size=26, file save to fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt</span><br></pre></td></tr></table></figure>\n\n<p>删除文件测试：<br><code>fdfs_test /etc/fdfs/client.conf delete 组名 远程文件路径</code></p>\n<h2 id=\"FastDFS的http访问\"><a href=\"#FastDFS的http访问\" class=\"headerlink\" title=\"FastDFS的http访问\"></a>FastDFS的http访问</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>文件上传成功的提示信息中说，我们可以通过某个路径访问上传的文件，但直接访问这个路径是访问不了的。<br>FastDFS提供了一个Nginx扩展模块，利用这个模块，可以通过nginx访问已经上传到FastDFS上的文件。</p>\n<p><a class=\"link\"   href=\"https://github.com/happyfish100/fastdfs-nginx-module\" >FastDFS-nginx扩展模块<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"安装nginx并添加扩展模块\"><a href=\"#安装nginx并添加扩展模块\" class=\"headerlink\" title=\"安装nginx并添加扩展模块\"></a>安装nginx并添加扩展模块</h3><p>解压缩扩展模块。</p>\n<p>配置nginx<br>使用<code>./configure --prefix=/usr/local/nginx_fdfs --add-model=扩展模块的src目录</code>添加拓展模块<br>配置完成后<code>make</code><br>然后<code>make install</code>安装nginx</p>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><p>FastDFS配置(mod_fastdfs.conf)</p>\n<p>基础路径<br><code>base_path=...</code><br>tracker_server地址<br><code>tracker_server=...:22122</code><br>请求中需要包含组名<br><code>url_have_group_name = true</code><br>有几个磁盘存储路径<br><code>store_path_count=1</code><br>文件存储路径<br><code>store_path0=...</code></p>\n<p>nginx配置(nginx.conf)</p>\n<p>拦截请求路径中包含 /group[1-9]/M0[0-9] 的请求，用fastdfs的nginx模块进行转发</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~/group[1-9]/M0[0-9]&#123;</span><br><span class=\"line\">    ngx_fastdfs_model;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动失败可能的原因：</p>\n<ol>\n<li>mod_fastdfs.conf没有放到/etc/fdfs目录中</li>\n<li>配置文件中有错误。比如基础路径不存在</li>\n</ol>\n<h3 id=\"拓展模块执行流程\"><a href=\"#拓展模块执行流程\" class=\"headerlink\" title=\"拓展模块执行流程\"></a>拓展模块执行流程</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E6%8B%93%E5%B1%95%E6%A8%A1%E5%9D%97%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png\"\n                      alt=\"拓展模块执行流程\"\n                ></p>\n<h2 id=\"使用Java程序对FastDFS进行操作\"><a href=\"#使用Java程序对FastDFS进行操作\" class=\"headerlink\" title=\"使用Java程序对FastDFS进行操作\"></a>使用Java程序对FastDFS进行操作</h2><p><a class=\"link\"   href=\"https://github.com/happyfish100/fastdfs-client-java\" >fastdfs-client-java 项目地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    引入FastDFS的maven依赖包</span></span><br><span class=\"line\"><span class=\"comment\">    这个依赖包不在maven的中央库中，需要对源码进行编译，将客户端代码编译到maven本地库中或直接拷贝依赖包文件到maven库中。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.csource<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastdfs-client-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.29-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建配置文件（fastdfs.conf）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tracker_server=127.0.0.1:22122</span><br></pre></td></tr></table></figure>\n\n<p>文件上传：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TrackerServer</span> <span class=\"variable\">ts</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">StorageServer</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取配置文件，用于将所有的tracker的地址读取到内存中</span></span><br><span class=\"line\">        ClientGlobal.init(<span class=\"string\">&quot;fastdfs.conf&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TrackerClient</span> <span class=\"variable\">tc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrackerClient</span>();</span><br><span class=\"line\">        ts = tc.getTrackerServer();</span><br><span class=\"line\">        ss = tc.getStoreStorage(ts);</span><br><span class=\"line\">        <span class=\"comment\">//定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。</span></span><br><span class=\"line\">        <span class=\"type\">StorageClient</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StorageClient</span>(ts, ss);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        文件上传</span></span><br><span class=\"line\"><span class=\"comment\">        参数1 需要上传文件的绝对路径</span></span><br><span class=\"line\"><span class=\"comment\">        参数2 需要上传文件的拓展名</span></span><br><span class=\"line\"><span class=\"comment\">        参数3 为文件的属性文件，通常不上传</span></span><br><span class=\"line\"><span class=\"comment\">        返回一个string数组，需妥善保管</span></span><br><span class=\"line\"><span class=\"comment\">        数组中第一个元素为文件所在组名，第二个元素为文件所在的远程路径名称</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        String[] result = sc.upload_file(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException | MyException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件下载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">download</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TrackerServer</span> <span class=\"variable\">ts</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">StorageServer</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取配置文件，用于将所有的tracker的地址读取到内存中</span></span><br><span class=\"line\">        ClientGlobal.init(<span class=\"string\">&quot;fastdfs.conf&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TrackerClient</span> <span class=\"variable\">tc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrackerClient</span>();</span><br><span class=\"line\">        ts = tc.getTrackerServer();</span><br><span class=\"line\">        ss = tc.getStoreStorage(ts);</span><br><span class=\"line\">        <span class=\"comment\">//定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。</span></span><br><span class=\"line\">        <span class=\"type\">StorageClient</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StorageClient</span>(ts, ss);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        文件下载</span></span><br><span class=\"line\"><span class=\"comment\">        参数1 需要下载的文件的组名</span></span><br><span class=\"line\"><span class=\"comment\">        参数2 需要下载文件的远程文件名</span></span><br><span class=\"line\"><span class=\"comment\">        参数3 需要保存的本地文件名</span></span><br><span class=\"line\"><span class=\"comment\">        返回一个int类型的数据。返回0 表示文件下载成功，其他值表示文件下载失败</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> sc.download_file(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MyException | IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件删除：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">TrackerServer</span> <span class=\"variable\">ts</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">StorageServer</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取配置文件，用于将所有的tracker的地址读取到内存中</span></span><br><span class=\"line\">        ClientGlobal.init(<span class=\"string\">&quot;fastdfs.conf&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TrackerClient</span> <span class=\"variable\">tc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrackerClient</span>();</span><br><span class=\"line\">        ts = tc.getTrackerServer();</span><br><span class=\"line\">        ss = tc.getStoreStorage(ts);</span><br><span class=\"line\">        <span class=\"comment\">//定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。</span></span><br><span class=\"line\">        <span class=\"type\">StorageClient</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StorageClient</span>(ts, ss);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        文件下载</span></span><br><span class=\"line\"><span class=\"comment\">        参数1 需要删除的文件的组名</span></span><br><span class=\"line\"><span class=\"comment\">        参数2 需要删除文件的远程文件名</span></span><br><span class=\"line\"><span class=\"comment\">        返回一个int类型的数据。返回0 表示文件删除成功，其他值表示文件删除失败</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> sc.delete_file(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MyException | IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>springboot中关于上传文件大小的配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置springMVC允许上传的单个文件大小 默认值为1MB</span></span><br><span class=\"line\"><span class=\"attr\">spring.servlet.multipart.max-file-size</span>=<span class=\"string\">1MB</span></span><br><span class=\"line\"><span class=\"comment\">#设置springMVC允许的表单中请求中允许上传文件总大小 默认值为10MB</span></span><br><span class=\"line\"><span class=\"attr\">spring.servlet.multipart.max-request-size</span>=<span class=\"string\">10MB</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集群的访问流程\"><a href=\"#集群的访问流程\" class=\"headerlink\" title=\"集群的访问流程\"></a>集群的访问流程</h2><p>集群结构：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E9%9B%86%E7%BE%A4%E7%BB%93%E6%9E%84.png\"\n                      alt=\"集群结构\"\n                ></p>\n<p>访问流程：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E9%9B%86%E7%BE%A4%E7%9A%84%E8%AE%BF%E9%97%AE%E6%B5%81%E7%A8%8B.png\"\n                      alt=\"集群的访问流程\"\n                ></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>部署分布式的部分省略了。咕<br>这部分用了快十天，划水划了挺久。不过总算结束了。</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"分布式文件系统\"><a href=\"#分布式文件系统\" class=\"headerlink\" title=\"分布式文件系统\"></a>分布式文件系统</h3><p>分布式文件系统（Distributed File System，DFS）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点（可简单的理解为一台计算机）相连；或是若干不同的逻辑磁盘分区或卷标组合在一起而形成的完整的有层次的文件系统。DFS为分布在网络上任意位置的资源提供一个逻辑上的树形文件系统结构，从而使用户访问分布在网络上的共享文件更加简便。单独的 DFS共享文件夹的作用是相对于通过网络上的其他共享文件夹的访问点。<br>常见的分布式文件系统有：FastDFS、GFS、HDFS、Lustre、Ceph、GridFS、mogileFS、TFS等。</p>\n<p>传统存放方式：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E4%BC%A0%E7%BB%9F%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F.png\"\n                      alt=\"传统存放方式\"\n                ></p>\n<p>分布式文件存储：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8.png\"\n                      alt=\"分布式文件存储\"\n                ></p>\n<h3 id=\"FastDFS\"><a href=\"#FastDFS\" class=\"headerlink\" title=\"FastDFS\"></a>FastDFS</h3><p>FastDFS是开源的轻量级分布式文件系统，为互联网应用定制，简单、灵活、高效。<br>采用c语言开发，由阿里巴巴开发并开源。<br>FastDFS对文件进行管理，功能包括：文件存储、文件同步（上传、下载、删除）等，解决大容量文件存储问题，特别适合以文件为载体的在线服务。比如文档网站、图片网址、视频网址等<br>FastDFS充分考虑了冗余备份、线性扩容等级制，并注重高可用、高性能等指标，使用它很容易搭建一套高性能的文件服务器集群提供文件上传下载等服务。</p>\n<p><del>看起来做个人云盘什么的很不错</del></p>\n<p><a class=\"link\"   href=\"https://github.com/happyfish100/fastdfs\" >FastDFS开源地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"FastDFS整体架构\"><a href=\"#FastDFS整体架构\" class=\"headerlink\" title=\"FastDFS整体架构\"></a>FastDFS整体架构</h3><p>FastDFS由客户端和服务端构成<br>客户端通常是我们的程序，比如用java去连接FastDFS、操作FastDFS。它提供了专有的api访问<br>服务端由跟踪器（tracker）和存储节点（storage）构成<br>跟踪器主要做调度工作，在内存中记录集群中存储节点storage的状态信息，是前端Client和后端存储节点storage的枢纽。因为相关信息存储在内存中，所以tracker server的性能非常高。<br>存储节点用于存储文件，包括文件和文件属性（meta data）都保存到存储服务器磁盘上，完成文件管理的所有功能：存储、同步、访问等</p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>旧版本 FastDFS 说明：<br>FastDFS有一部分是网络通信功能，旧版本FastDFS（FastDFS2.0之前版本）没有直接使用 epoll 实现，而是通过libevent实现（libevent是一个用C语言编写的、轻量级的开源高性能网络库），但是最新版的FastDFS最终网络IO这部分重新用epoll实现<br>所以如果是FastDFS 是 2.0 之前的版本，请先安装好 libevent 环境（新版本不需要安装）</p>\n<p>安装前准备:<br>检查linux是否安装了gcc、libevent、libevent-devel</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list installed|grep gcc</span><br><span class=\"line\">yum list installed|grep libevent</span><br><span class=\"line\">yum list installed|grep libevent-devel</span><br></pre></td></tr></table></figure>\n<p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc libevent libevent-devel -y</span><br></pre></td></tr></table></figure>\n\n<p>安装libfastcommon：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/happyfish100/libfastcommon.git</span><br><span class=\"line\">cd libfastcommon/</span><br><span class=\"line\">./make.sh</span><br><span class=\"line\">sudo ./make.sh install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>头文件安装在/usr/include/fastcommon目录下<br>动态库安装在/usr/lib64/和/usr/lib/目录下</p>\n</blockquote>\n<p>安装fastdfs</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/happyfish100/fastdfs.git</span><br><span class=\"line\">cd fastdfs</span><br><span class=\"line\">./make.sh</span><br><span class=\"line\">sudo ./make.sh install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>工具安装在/usr/bin/目录下：(无需配置环境变量，直接使用)<br>fdfs_delete_file：删除文件<br>fdfs_download_file：下载文件<br>fdfs_upload_file：上传文件<br>fdfs_trackerd：启动tracker服务<br>fdfs_storaged：启动storage服务<br>fdfs_file_info：用来检查一个文件的信息，参数传递一个FastDFS文件</p>\n</blockquote>\n<blockquote>\n<p>配置文件默认安装在/etc/fdfs/目录下：<br>client.conf.sample：客户端默认配置文件<br>storage.conf.sample：storage服务默认配置文件<br>storage_ids.conf.sample：<br>tracker.conf.sample：tracker服务默认配置文件</p>\n</blockquote>\n<h3 id=\"启动与关闭\"><a href=\"#启动与关闭\" class=\"headerlink\" title=\"启动与关闭\"></a>启动与关闭</h3><p>启动：<br><code>fdfs_trackerd /etc/fdfs/tracker.conf</code><br><code>fdfs_storaged /etc/fdfs/storage.conf</code></p>\n<p>启动成功会有两个服务<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png\"\n                      alt=\"启动成功\"\n                ></p>\n<p>重启：<br><code>fdfs_trackerd /etc/fdfs/tracker.conf restart</code><br><code>fdfs_storaged /etc/fdfs/storage.conf restart</code></p>\n<p>关闭：<br><code>fdfs_trackerd /etc/fdfs/tracker.conf stop</code><br><code>fdfs_storaged /etc/fdfs/storage.conf stop</code></p>\n<blockquote>\n<p>可以使用kill关闭，但不建议，因为可能会导致文件信息不同步问题</p>\n</blockquote>\n<h3 id=\"测试上传\"><a href=\"#测试上传\" class=\"headerlink\" title=\"测试上传\"></a>测试上传</h3><p>上传测试：<br><code>fdfs_test /etc/fdfs/client.conf upload 文件路径</code><br>示例：<br><code>fdfs_test /etc/fdfs/client.conf upload /root/test.txt</code><br>返回信息：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tracker_query_storage_store_list_without_group:</span><br><span class=\"line\">        server 1. group_name=, ip_addr=127.0.0.1, port=23000</span><br><span class=\"line\"></span><br><span class=\"line\">group_name=group1, ip_addr=127.0.0.1, port=23000</span><br><span class=\"line\">storage_upload_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt</span><br><span class=\"line\">source ip address: 127.0.0.1</span><br><span class=\"line\">file timestamp=2022-08-09 23:51:47</span><br><span class=\"line\">file size=26</span><br><span class=\"line\">file crc32=459240585</span><br><span class=\"line\">example file url: http://127.0.0.1/group1/M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt</span><br><span class=\"line\">storage_upload_slave_by_filename</span><br><span class=\"line\">group_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt</span><br><span class=\"line\">source ip address: 127.0.0.1</span><br><span class=\"line\">file timestamp=2022-08-09 23:51:47</span><br><span class=\"line\">file size=26</span><br><span class=\"line\">file crc32=459240585</span><br><span class=\"line\">example file url: http://127.0.0.1/group1/M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其中<br>group_name=group1, remote_filename=M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt<br>group1 为 组名、M00 为 磁盘、/00/00/ 为 目录、最后是文件名</p>\n</blockquote>\n<p>上传后的文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base) [root@VM-16-9-centos 00]# ll</span><br><span class=\"line\">total 16</span><br><span class=\"line\">-rw-r--r-- 1 root root 26 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 49 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672_big.txt-m</span><br><span class=\"line\">-rw-r--r-- 1 root root 26 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 49 Aug  9 23:51 fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt-m</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>_big是备份文件，与没有的文件存储内容一样<br>-m是文件的属性文件</p>\n</blockquote>\n<h3 id=\"测试下载\"><a href=\"#测试下载\" class=\"headerlink\" title=\"测试下载\"></a>测试下载</h3><p>上传测试：<br><code>fdfs_test /etc/fdfs/client.conf download 组名 远程文件路径</code><br>示例：<br><code>fdfs_test /etc/fdfs/client.conf download group1 M00/00/00/fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt</code><br>返回信息：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storage=127.0.0.1:23000</span><br><span class=\"line\">download file success, file size=26, file save to fwAAAWLygpOAUo-DAAAAGhtfdIk672.txt</span><br></pre></td></tr></table></figure>\n\n<p>删除文件测试：<br><code>fdfs_test /etc/fdfs/client.conf delete 组名 远程文件路径</code></p>\n<h2 id=\"FastDFS的http访问\"><a href=\"#FastDFS的http访问\" class=\"headerlink\" title=\"FastDFS的http访问\"></a>FastDFS的http访问</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>文件上传成功的提示信息中说，我们可以通过某个路径访问上传的文件，但直接访问这个路径是访问不了的。<br>FastDFS提供了一个Nginx扩展模块，利用这个模块，可以通过nginx访问已经上传到FastDFS上的文件。</p>\n<p><a class=\"link\"   href=\"https://github.com/happyfish100/fastdfs-nginx-module\" >FastDFS-nginx扩展模块<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"安装nginx并添加扩展模块\"><a href=\"#安装nginx并添加扩展模块\" class=\"headerlink\" title=\"安装nginx并添加扩展模块\"></a>安装nginx并添加扩展模块</h3><p>解压缩扩展模块。</p>\n<p>配置nginx<br>使用<code>./configure --prefix=/usr/local/nginx_fdfs --add-model=扩展模块的src目录</code>添加拓展模块<br>配置完成后<code>make</code><br>然后<code>make install</code>安装nginx</p>\n<h3 id=\"配置nginx\"><a href=\"#配置nginx\" class=\"headerlink\" title=\"配置nginx\"></a>配置nginx</h3><p>FastDFS配置(mod_fastdfs.conf)</p>\n<p>基础路径<br><code>base_path=...</code><br>tracker_server地址<br><code>tracker_server=...:22122</code><br>请求中需要包含组名<br><code>url_have_group_name = true</code><br>有几个磁盘存储路径<br><code>store_path_count=1</code><br>文件存储路径<br><code>store_path0=...</code></p>\n<p>nginx配置(nginx.conf)</p>\n<p>拦截请求路径中包含 /group[1-9]/M0[0-9] 的请求，用fastdfs的nginx模块进行转发</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~/group[1-9]/M0[0-9]&#123;</span><br><span class=\"line\">    ngx_fastdfs_model;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动失败可能的原因：</p>\n<ol>\n<li>mod_fastdfs.conf没有放到/etc/fdfs目录中</li>\n<li>配置文件中有错误。比如基础路径不存在</li>\n</ol>\n<h3 id=\"拓展模块执行流程\"><a href=\"#拓展模块执行流程\" class=\"headerlink\" title=\"拓展模块执行流程\"></a>拓展模块执行流程</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E6%8B%93%E5%B1%95%E6%A8%A1%E5%9D%97%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png\"\n                      alt=\"拓展模块执行流程\"\n                ></p>\n<h2 id=\"使用Java程序对FastDFS进行操作\"><a href=\"#使用Java程序对FastDFS进行操作\" class=\"headerlink\" title=\"使用Java程序对FastDFS进行操作\"></a>使用Java程序对FastDFS进行操作</h2><p><a class=\"link\"   href=\"https://github.com/happyfish100/fastdfs-client-java\" >fastdfs-client-java 项目地址<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    引入FastDFS的maven依赖包</span></span><br><span class=\"line\"><span class=\"comment\">    这个依赖包不在maven的中央库中，需要对源码进行编译，将客户端代码编译到maven本地库中或直接拷贝依赖包文件到maven库中。</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.csource<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastdfs-client-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.29-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>创建配置文件（fastdfs.conf）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tracker_server=127.0.0.1:22122</span><br></pre></td></tr></table></figure>\n\n<p>文件上传：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upload</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TrackerServer</span> <span class=\"variable\">ts</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">StorageServer</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取配置文件，用于将所有的tracker的地址读取到内存中</span></span><br><span class=\"line\">        ClientGlobal.init(<span class=\"string\">&quot;fastdfs.conf&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TrackerClient</span> <span class=\"variable\">tc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrackerClient</span>();</span><br><span class=\"line\">        ts = tc.getTrackerServer();</span><br><span class=\"line\">        ss = tc.getStoreStorage(ts);</span><br><span class=\"line\">        <span class=\"comment\">//定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。</span></span><br><span class=\"line\">        <span class=\"type\">StorageClient</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StorageClient</span>(ts, ss);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        文件上传</span></span><br><span class=\"line\"><span class=\"comment\">        参数1 需要上传文件的绝对路径</span></span><br><span class=\"line\"><span class=\"comment\">        参数2 需要上传文件的拓展名</span></span><br><span class=\"line\"><span class=\"comment\">        参数3 为文件的属性文件，通常不上传</span></span><br><span class=\"line\"><span class=\"comment\">        返回一个string数组，需妥善保管</span></span><br><span class=\"line\"><span class=\"comment\">        数组中第一个元素为文件所在组名，第二个元素为文件所在的远程路径名称</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        String[] result = sc.upload_file(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException | MyException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件下载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">download</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TrackerServer</span> <span class=\"variable\">ts</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">StorageServer</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取配置文件，用于将所有的tracker的地址读取到内存中</span></span><br><span class=\"line\">        ClientGlobal.init(<span class=\"string\">&quot;fastdfs.conf&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TrackerClient</span> <span class=\"variable\">tc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrackerClient</span>();</span><br><span class=\"line\">        ts = tc.getTrackerServer();</span><br><span class=\"line\">        ss = tc.getStoreStorage(ts);</span><br><span class=\"line\">        <span class=\"comment\">//定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。</span></span><br><span class=\"line\">        <span class=\"type\">StorageClient</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StorageClient</span>(ts, ss);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        文件下载</span></span><br><span class=\"line\"><span class=\"comment\">        参数1 需要下载的文件的组名</span></span><br><span class=\"line\"><span class=\"comment\">        参数2 需要下载文件的远程文件名</span></span><br><span class=\"line\"><span class=\"comment\">        参数3 需要保存的本地文件名</span></span><br><span class=\"line\"><span class=\"comment\">        返回一个int类型的数据。返回0 表示文件下载成功，其他值表示文件下载失败</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> sc.download_file(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MyException | IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件删除：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">TrackerServer</span> <span class=\"variable\">ts</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">StorageServer</span> <span class=\"variable\">ss</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取配置文件，用于将所有的tracker的地址读取到内存中</span></span><br><span class=\"line\">        ClientGlobal.init(<span class=\"string\">&quot;fastdfs.conf&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">TrackerClient</span> <span class=\"variable\">tc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TrackerClient</span>();</span><br><span class=\"line\">        ts = tc.getTrackerServer();</span><br><span class=\"line\">        ss = tc.getStoreStorage(ts);</span><br><span class=\"line\">        <span class=\"comment\">//定义Storage的客户端对象，需要用这个对象来完成文件上传、下载、删除操作。</span></span><br><span class=\"line\">        <span class=\"type\">StorageClient</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StorageClient</span>(ts, ss);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        文件下载</span></span><br><span class=\"line\"><span class=\"comment\">        参数1 需要删除的文件的组名</span></span><br><span class=\"line\"><span class=\"comment\">        参数2 需要删除文件的远程文件名</span></span><br><span class=\"line\"><span class=\"comment\">        返回一个int类型的数据。返回0 表示文件删除成功，其他值表示文件删除失败</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> sc.delete_file(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MyException | IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>springboot中关于上传文件大小的配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置springMVC允许上传的单个文件大小 默认值为1MB</span></span><br><span class=\"line\"><span class=\"attr\">spring.servlet.multipart.max-file-size</span>=<span class=\"string\">1MB</span></span><br><span class=\"line\"><span class=\"comment\">#设置springMVC允许的表单中请求中允许上传文件总大小 默认值为10MB</span></span><br><span class=\"line\"><span class=\"attr\">spring.servlet.multipart.max-request-size</span>=<span class=\"string\">10MB</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集群的访问流程\"><a href=\"#集群的访问流程\" class=\"headerlink\" title=\"集群的访问流程\"></a>集群的访问流程</h2><p>集群结构：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E9%9B%86%E7%BE%A4%E7%BB%93%E6%9E%84.png\"\n                      alt=\"集群结构\"\n                ></p>\n<p>访问流程：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/FastDFS%E7%AC%94%E8%AE%B0/%E9%9B%86%E7%BE%A4%E7%9A%84%E8%AE%BF%E9%97%AE%E6%B5%81%E7%A8%8B.png\"\n                      alt=\"集群的访问流程\"\n                ></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>部署分布式的部分省略了。咕<br>这部分用了快十天，划水划了挺久。不过总算结束了。</p>\n"},{"title":"Markdown语法","date":"2022-03-19T14:23:35.000Z","_content":"\n## 关于Markdown\n\nMarkdown 是轻量级的标记语言，可用于在纯文本文档中添加格式化元素。  \nMarkdown 由 John Gruber 于 2004 年创建。  \n专注于文字内容  \n纯文本，方便读写，且兼容性良好  \n语法简单，学习成本低  \n不适用于对排版要求高的场景\n\n## Markdown的工作原理\n\n在使用 Markdown 格式书写时，文本内容存储在 .md 或 .markdown 拓展名的纯文本文件中。  \nMarkdown 应用程序使用一种称为 Markdown 处理器（也通常称为“解析器”或“实现”）的东西将获取到的 Markdown 格式的文本输出为 HTML 格式。  \n这时，便可以在 Web 浏览器中查看这篇文档。  \n所以 Markdown 语法是兼容 HTML 语言的，所以在 Markdown 中可以直接使用 HTML 标签，来实现各种样式。  \n比如下文 4.4 中下划线的实现便使用了`<u>`标签\n\n## 标题\n\n### 底线表示\n\n~~~markdown\n一级标题\n===\n二级标题\n---\n~~~\n\n效果如图：  \n![标题1](../images/Markdown语法/标题1.png)\n说明：\n\n1. 底线是`=`表示一级标题\n2. 底线是`-`表示二级标题\n3. 底线符号**至少2个**才可以表示标题\n4. 这种语法**只支持这两级标题**\n\n### #表示\n\n~~~markdown\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n~~~\n\n效果如图：  \n![标题2](../images/Markdown语法/标题2.png)  \n说明：\n\n1. 在`行首`插入#可标记标题\n2. `#`的个数表示标题的等级\n3. 建议在#后加一个空格\n4. Markdown最多支持前六级标题\n\n### 建议\n\n1. **使用`#`标记标题**，而不是`===`或者`---`，因为后者不便于阅读和理解，不简洁明了。\n2. **保持间距**，标题前后空一行，#与文本间也空一格。\n3. **不要有多余的空格**，标题开头和结尾不要有多余的空格\n4. **标题的结尾不要有标点符号**\n5. **标题要简短**\n\n## 段落格式\n\n### 段落\n\n行与行之间没有空行（什么都没有，或者只有空格和制表符），将会被视为同一段落。有空行则会被视为不同段落。  \n段内换行，在**行末添加2个或以上空格**。\n\n### 字体\n\n~~~markdown\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n~~~\n\n效果如图：  \n![字体](../images/Markdown语法/字体.png)\n\n建议\n\n1. 粗体使用`**`包裹，斜体使用`*`包裹\n2. 语法标记内不要有空格。\n\n### 分割线\n\n~~~markdown\n***\n* * *\n*****\n- - -\n___\n_ _ _\n~~~\n\n效果如图：（本分割线有主题样式，并非Markdown原生）  \n![字体](../images/Markdown语法/分割线.png)  \n说明：\n\n1. 分割线使用3个或以上的`*`或`-`或`_`标记\n2. 行内不能有其他字符，除了空格。\n\n### 删除线 和 下划线\n\n~~~markdown\n~~删除线~~\n<u>下划线</u>\n~~~\n\n效果如图：  \n![删除线和下划线](../images/Markdown语法/删除线和下划线.png)\n\n## 列表\n\n### 无序列表\n\n~~~markdown\n## 使用*\n\n* 第一项\n* 第二项\n* 第三项\n\n## 使用+\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n## 使用-\n\n- 第一项\n- 第二项\n- 第三项\n~~~\n\n效果如图：  \n![无序列表](../images/Markdown语法/无序列表.png)\n\n### 有序列表\n\n~~~markdown\n1. 第一项\n2. 第二项\n3. 第三项\n~~~\n\n效果如图：  \n![有序列表](../images/Markdown语法/有序列表.png)\n\n### 列表嵌套\n\n~~~markdown\n1. 一层列表\n    * 二层列表\n        1. 三层列表\n            * 四层列表\n~~~\n\n效果如图：  \n![列表嵌套](../images/Markdown语法/列表嵌套.png)\n\n## 区块\n\n~~~markdown\n> 大佬说过的话\n>> 第一点！\n>>> 认真听！\n\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n> * 第一项\n> * 第二项\n\n* 列表中使用区块\n  > 第一项\n  > 第二项\n* 第二项\n~~~\n\n效果如图：（这里区块样式也并非Markdown原生）  \n![区块](../images/Markdown语法/区块.png)\n\n## 图片\n\n~~~markdown\n![文本](图片链接)\n~~~\n\n效果…上文中所以引用图片就是效果。  \n说明：\n\n1. 图片链接，可以是本地图片，也可以是网络图片。\n2. 本地图片可以使用相对路径，也可以使用绝对路径。  \n   （建议使用相对路径，当项目迁移时，文档不会加载不出图片。当然，这得建立在有一个好地整理习惯的前提下）\n\n## 链接\n\n~~~markdown\n[文本](链接)\n[博客首页](https://2450123.github.io)\n\n<链接>\n<https://2450123.github.io>\n\n这是[引用链接]。\n[引用链接]: https://2450123.github.io\n~~~\n\n效果如下：  \n[博客首页](https://2450123.github.io/)  \n[https://2450123.github.io](https://2450123.github.io/)  \n引用链接这里用不了，所以不做演示。  \n它相当于定义了一个变量，可以重复引用。  \n说明：\n\n1. 网络链接要写全，比如 [https://2450123.github.io](https://2450123.github.io/) ，否则会被识别问本地地址。\n2. 定义的链接可以放在文件任意位置，建议放在文末。\n3. 引用链接不区分大小写\n4. 链接标记可以有数字、字母、空格和标点。\n\n## 表格\n\n~~~markdown\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n~~~\n\n效果如下：\n\n| 左对齐 | 右对齐 | 居中对齐 | \n| :-- | --: | :-: |\n| 单元格 | 单元格 | 单元格 | \n| 单元格 | 单元格 | 单元格 | \n| 说明： | | |\n\n1. 使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。\n2. \\-: 设置内容和标题栏居右对齐。\n3. :- 设置内容和标题栏居左对齐。\n4. :-: 设置内容和标题栏居中对齐。\n\n## 代码\n\n~~~\n这是代码块\n~~~\n\n`这是行内代码`  \n说明：\n\n1. 代码块使用 ~~~ 包裹\n2. 行内代码使用 \\` 包裹\n\n## 总结\n\n写这篇的本意是让刚开始使用Markdown的我熟悉一下Markdown的语法格式，更加熟练的使用他来写博客。  \n我在这里列出了他的基础语法，他还有很多插件，可以实现各种各样的功能，比如数学公式和注脚等等。  \n但是Markdown的开发者John Gruber说：\n\n> Markdown 格式化语法设计的目的就是为了**易读**，而且 Markdown 应该可以直接使用纯文本进行发布，无需标签或者是一些格式化命令。\n\n简单来说，Markdown就是为了**让我们专注于内容，而不是关注他的排版。**  \n所以，我觉得如果过于在意他的语法，有些买椟还珠的意味。  \n所以本篇就列举一些基础的语法，其他高阶的用法就不罗列了。  \n这里也是为了方便我后续来看，不过还是那句话，应该注重内容，而不是排版。","source":"_posts/Markdown语法.md","raw":"---\ntitle: Markdown语法 \ndate: 2022-03-19 22:23:35 \ntags:\n    - markdown \ncategories: \n    - 学习笔记\n---\n\n## 关于Markdown\n\nMarkdown 是轻量级的标记语言，可用于在纯文本文档中添加格式化元素。  \nMarkdown 由 John Gruber 于 2004 年创建。  \n专注于文字内容  \n纯文本，方便读写，且兼容性良好  \n语法简单，学习成本低  \n不适用于对排版要求高的场景\n\n## Markdown的工作原理\n\n在使用 Markdown 格式书写时，文本内容存储在 .md 或 .markdown 拓展名的纯文本文件中。  \nMarkdown 应用程序使用一种称为 Markdown 处理器（也通常称为“解析器”或“实现”）的东西将获取到的 Markdown 格式的文本输出为 HTML 格式。  \n这时，便可以在 Web 浏览器中查看这篇文档。  \n所以 Markdown 语法是兼容 HTML 语言的，所以在 Markdown 中可以直接使用 HTML 标签，来实现各种样式。  \n比如下文 4.4 中下划线的实现便使用了`<u>`标签\n\n## 标题\n\n### 底线表示\n\n~~~markdown\n一级标题\n===\n二级标题\n---\n~~~\n\n效果如图：  \n![标题1](../images/Markdown语法/标题1.png)\n说明：\n\n1. 底线是`=`表示一级标题\n2. 底线是`-`表示二级标题\n3. 底线符号**至少2个**才可以表示标题\n4. 这种语法**只支持这两级标题**\n\n### #表示\n\n~~~markdown\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n~~~\n\n效果如图：  \n![标题2](../images/Markdown语法/标题2.png)  \n说明：\n\n1. 在`行首`插入#可标记标题\n2. `#`的个数表示标题的等级\n3. 建议在#后加一个空格\n4. Markdown最多支持前六级标题\n\n### 建议\n\n1. **使用`#`标记标题**，而不是`===`或者`---`，因为后者不便于阅读和理解，不简洁明了。\n2. **保持间距**，标题前后空一行，#与文本间也空一格。\n3. **不要有多余的空格**，标题开头和结尾不要有多余的空格\n4. **标题的结尾不要有标点符号**\n5. **标题要简短**\n\n## 段落格式\n\n### 段落\n\n行与行之间没有空行（什么都没有，或者只有空格和制表符），将会被视为同一段落。有空行则会被视为不同段落。  \n段内换行，在**行末添加2个或以上空格**。\n\n### 字体\n\n~~~markdown\n*斜体文本*\n_斜体文本_\n**粗体文本**\n__粗体文本__\n***粗斜体文本***\n___粗斜体文本___\n~~~\n\n效果如图：  \n![字体](../images/Markdown语法/字体.png)\n\n建议\n\n1. 粗体使用`**`包裹，斜体使用`*`包裹\n2. 语法标记内不要有空格。\n\n### 分割线\n\n~~~markdown\n***\n* * *\n*****\n- - -\n___\n_ _ _\n~~~\n\n效果如图：（本分割线有主题样式，并非Markdown原生）  \n![字体](../images/Markdown语法/分割线.png)  \n说明：\n\n1. 分割线使用3个或以上的`*`或`-`或`_`标记\n2. 行内不能有其他字符，除了空格。\n\n### 删除线 和 下划线\n\n~~~markdown\n~~删除线~~\n<u>下划线</u>\n~~~\n\n效果如图：  \n![删除线和下划线](../images/Markdown语法/删除线和下划线.png)\n\n## 列表\n\n### 无序列表\n\n~~~markdown\n## 使用*\n\n* 第一项\n* 第二项\n* 第三项\n\n## 使用+\n\n+ 第一项\n+ 第二项\n+ 第三项\n\n## 使用-\n\n- 第一项\n- 第二项\n- 第三项\n~~~\n\n效果如图：  \n![无序列表](../images/Markdown语法/无序列表.png)\n\n### 有序列表\n\n~~~markdown\n1. 第一项\n2. 第二项\n3. 第三项\n~~~\n\n效果如图：  \n![有序列表](../images/Markdown语法/有序列表.png)\n\n### 列表嵌套\n\n~~~markdown\n1. 一层列表\n    * 二层列表\n        1. 三层列表\n            * 四层列表\n~~~\n\n效果如图：  \n![列表嵌套](../images/Markdown语法/列表嵌套.png)\n\n## 区块\n\n~~~markdown\n> 大佬说过的话\n>> 第一点！\n>>> 认真听！\n\n> 区块中使用列表\n> 1. 第一项\n> 2. 第二项\n> * 第一项\n> * 第二项\n\n* 列表中使用区块\n  > 第一项\n  > 第二项\n* 第二项\n~~~\n\n效果如图：（这里区块样式也并非Markdown原生）  \n![区块](../images/Markdown语法/区块.png)\n\n## 图片\n\n~~~markdown\n![文本](图片链接)\n~~~\n\n效果…上文中所以引用图片就是效果。  \n说明：\n\n1. 图片链接，可以是本地图片，也可以是网络图片。\n2. 本地图片可以使用相对路径，也可以使用绝对路径。  \n   （建议使用相对路径，当项目迁移时，文档不会加载不出图片。当然，这得建立在有一个好地整理习惯的前提下）\n\n## 链接\n\n~~~markdown\n[文本](链接)\n[博客首页](https://2450123.github.io)\n\n<链接>\n<https://2450123.github.io>\n\n这是[引用链接]。\n[引用链接]: https://2450123.github.io\n~~~\n\n效果如下：  \n[博客首页](https://2450123.github.io/)  \n[https://2450123.github.io](https://2450123.github.io/)  \n引用链接这里用不了，所以不做演示。  \n它相当于定义了一个变量，可以重复引用。  \n说明：\n\n1. 网络链接要写全，比如 [https://2450123.github.io](https://2450123.github.io/) ，否则会被识别问本地地址。\n2. 定义的链接可以放在文件任意位置，建议放在文末。\n3. 引用链接不区分大小写\n4. 链接标记可以有数字、字母、空格和标点。\n\n## 表格\n\n~~~markdown\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n~~~\n\n效果如下：\n\n| 左对齐 | 右对齐 | 居中对齐 | \n| :-- | --: | :-: |\n| 单元格 | 单元格 | 单元格 | \n| 单元格 | 单元格 | 单元格 | \n| 说明： | | |\n\n1. 使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。\n2. \\-: 设置内容和标题栏居右对齐。\n3. :- 设置内容和标题栏居左对齐。\n4. :-: 设置内容和标题栏居中对齐。\n\n## 代码\n\n~~~\n这是代码块\n~~~\n\n`这是行内代码`  \n说明：\n\n1. 代码块使用 ~~~ 包裹\n2. 行内代码使用 \\` 包裹\n\n## 总结\n\n写这篇的本意是让刚开始使用Markdown的我熟悉一下Markdown的语法格式，更加熟练的使用他来写博客。  \n我在这里列出了他的基础语法，他还有很多插件，可以实现各种各样的功能，比如数学公式和注脚等等。  \n但是Markdown的开发者John Gruber说：\n\n> Markdown 格式化语法设计的目的就是为了**易读**，而且 Markdown 应该可以直接使用纯文本进行发布，无需标签或者是一些格式化命令。\n\n简单来说，Markdown就是为了**让我们专注于内容，而不是关注他的排版。**  \n所以，我觉得如果过于在意他的语法，有些买椟还珠的意味。  \n所以本篇就列举一些基础的语法，其他高阶的用法就不罗列了。  \n这里也是为了方便我后续来看，不过还是那句话，应该注重内容，而不是排版。","slug":"Markdown语法","published":1,"updated":"2022-08-15T08:40:55.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbdf0009o8tteg4bgsyd","content":"<h2 id=\"关于Markdown\"><a href=\"#关于Markdown\" class=\"headerlink\" title=\"关于Markdown\"></a>关于Markdown</h2><p>Markdown 是轻量级的标记语言，可用于在纯文本文档中添加格式化元素。<br>Markdown 由 John Gruber 于 2004 年创建。<br>专注于文字内容<br>纯文本，方便读写，且兼容性良好<br>语法简单，学习成本低<br>不适用于对排版要求高的场景</p>\n<h2 id=\"Markdown的工作原理\"><a href=\"#Markdown的工作原理\" class=\"headerlink\" title=\"Markdown的工作原理\"></a>Markdown的工作原理</h2><p>在使用 Markdown 格式书写时，文本内容存储在 .md 或 .markdown 拓展名的纯文本文件中。<br>Markdown 应用程序使用一种称为 Markdown 处理器（也通常称为“解析器”或“实现”）的东西将获取到的 Markdown 格式的文本输出为 HTML 格式。<br>这时，便可以在 Web 浏览器中查看这篇文档。<br>所以 Markdown 语法是兼容 HTML 语言的，所以在 Markdown 中可以直接使用 HTML 标签，来实现各种样式。<br>比如下文 4.4 中下划线的实现便使用了<code>&lt;u&gt;</code>标签</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><h3 id=\"底线表示\"><a href=\"#底线表示\" class=\"headerlink\" title=\"底线表示\"></a>底线表示</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">一级标题</span></span><br><span class=\"line\"><span class=\"section\">===</span></span><br><span class=\"line\"><span class=\"section\">二级标题</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E6%A0%87%E9%A2%981.png\"\n                      alt=\"标题1\"\n                ><br>说明：</p>\n<ol>\n<li>底线是<code>=</code>表示一级标题</li>\n<li>底线是<code>-</code>表示二级标题</li>\n<li>底线符号<strong>至少2个</strong>才可以表示标题</li>\n<li>这种语法<strong>只支持这两级标题</strong></li>\n</ol>\n<h3 id=\"表示\"><a href=\"#表示\" class=\"headerlink\" title=\"#表示\"></a>#表示</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E6%A0%87%E9%A2%982.png\"\n                      alt=\"标题2\"\n                ><br>说明：</p>\n<ol>\n<li>在<code>行首</code>插入#可标记标题</li>\n<li><code>#</code>的个数表示标题的等级</li>\n<li>建议在#后加一个空格</li>\n<li>Markdown最多支持前六级标题</li>\n</ol>\n<h3 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h3><ol>\n<li><strong>使用<code>#</code>标记标题</strong>，而不是<code>===</code>或者<code>---</code>，因为后者不便于阅读和理解，不简洁明了。</li>\n<li><strong>保持间距</strong>，标题前后空一行，#与文本间也空一格。</li>\n<li><strong>不要有多余的空格</strong>，标题开头和结尾不要有多余的空格</li>\n<li><strong>标题的结尾不要有标点符号</strong></li>\n<li><strong>标题要简短</strong></li>\n</ol>\n<h2 id=\"段落格式\"><a href=\"#段落格式\" class=\"headerlink\" title=\"段落格式\"></a>段落格式</h2><h3 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h3><p>行与行之间没有空行（什么都没有，或者只有空格和制表符），将会被视为同一段落。有空行则会被视为不同段落。<br>段内换行，在<strong>行末添加2个或以上空格</strong>。</p>\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文本*</span></span><br><span class=\"line\"><span class=\"emphasis\">_斜体文本_</span></span><br><span class=\"line\"><span class=\"strong\">**粗体文本**</span></span><br><span class=\"line\"><span class=\"strong\">__粗体文本__</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文本*</span>**</span></span><br><span class=\"line\"><span class=\"strong\">__<span class=\"emphasis\">_粗斜体文本_</span>__</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E5%AD%97%E4%BD%93.png\"\n                      alt=\"字体\"\n                ></p>\n<p>建议</p>\n<ol>\n<li>粗体使用<code>**</code>包裹，斜体使用<code>*</code>包裹</li>\n<li>语法标记内不要有空格。</li>\n</ol>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">*</span> <span class=\"emphasis\">* *</span></span></span><br><span class=\"line\"><span class=\"strong\">**</span><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">- - -</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">___</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">_ _ _</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：（本分割线有主题样式，并非Markdown原生）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E5%88%86%E5%89%B2%E7%BA%BF.png\"\n                      alt=\"字体\"\n                ><br>说明：</p>\n<ol>\n<li>分割线使用3个或以上的<code>*</code>或<code>-</code>或<code>_</code>标记</li>\n<li>行内不能有其他字符，除了空格。</li>\n</ol>\n<h3 id=\"删除线-和-下划线\"><a href=\"#删除线-和-下划线\" class=\"headerlink\" title=\"删除线 和 下划线\"></a>删除线 和 下划线</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除线~~</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span></span>下划线<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E5%88%A0%E9%99%A4%E7%BA%BF%E5%92%8C%E4%B8%8B%E5%88%92%E7%BA%BF.png\"\n                      alt=\"删除线和下划线\"\n                ></p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## 使用<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">*</span> 第一项</span></span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 使用+</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 使用-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8.png\"\n                      alt=\"无序列表\"\n                ></p>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8.png\"\n                      alt=\"有序列表\"\n                ></p>\n<h3 id=\"列表嵌套\"><a href=\"#列表嵌套\" class=\"headerlink\" title=\"列表嵌套\"></a>列表嵌套</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 一层列表</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 二层列表</span><br><span class=\"line\"><span class=\"bullet\">        1.</span> 三层列表</span><br><span class=\"line\"><span class=\"bullet\">            *</span> 四层列表</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E5%88%97%E8%A1%A8%E5%B5%8C%E5%A5%97.png\"\n                      alt=\"列表嵌套\"\n                ></p>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 大佬说过的话</span></span><br><span class=\"line\">&gt;&gt; 第一点！</span><br><span class=\"line\">&gt;&gt;&gt; 认真听！</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; 区块中使用列表</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 1. 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 2. 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt; <span class=\"emphasis\">* 第一项</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"quote\">&gt; *</span> 第二项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*</span> 列表中使用区块</span><br><span class=\"line\">  &gt; 第一项</span><br><span class=\"line\">  &gt; 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：（这里区块样式也并非Markdown原生）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E5%8C%BA%E5%9D%97.png\"\n                      alt=\"区块\"\n                ></p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">文本</span>](<span class=\"link\">图片链接</span>)</span><br></pre></td></tr></table></figure>\n\n<p>效果…上文中所以引用图片就是效果。<br>说明：</p>\n<ol>\n<li>图片链接，可以是本地图片，也可以是网络图片。</li>\n<li>本地图片可以使用相对路径，也可以使用绝对路径。<br>（建议使用相对路径，当项目迁移时，文档不会加载不出图片。当然，这得建立在有一个好地整理习惯的前提下）</li>\n</ol>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">文本</span>](<span class=\"link\">链接</span>)</span><br><span class=\"line\">[<span class=\"string\">博客首页</span>](<span class=\"link\">https://2450123.github.io</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;链接&gt;</span><br><span class=\"line\"><span class=\"language-xml\">&lt;https://2450123.github.io&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">这是[引用链接]。</span><br><span class=\"line\">[<span class=\"symbol\">引用链接</span>]: <span class=\"link\">https://2450123.github.io</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：<br><a class=\"link\"   href=\"https://2450123.github.io/\" >博客首页<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://2450123.github.io/\" >https://2450123.github.io<i class=\"fas fa-external-link-alt\"></i></a><br>引用链接这里用不了，所以不做演示。<br>它相当于定义了一个变量，可以重复引用。<br>说明：</p>\n<ol>\n<li>网络链接要写全，比如 <a class=\"link\"   href=\"https://2450123.github.io/\" >https://2450123.github.io<i class=\"fas fa-external-link-alt\"></i></a> ，否则会被识别问本地地址。</li>\n<li>定义的链接可以放在文件任意位置，建议放在文末。</li>\n<li>引用链接不区分大小写</li>\n<li>链接标记可以有数字、字母、空格和标点。</li>\n</ol>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class=\"line\">| :-----| ----: | :----: |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">左对齐</th>\n<th align=\"right\">右对齐</th>\n<th align=\"center\">居中对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n<tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n<tr>\n<td align=\"left\">说明：</td>\n<td align=\"right\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<ol>\n<li>使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</li>\n<li>-: 设置内容和标题栏居右对齐。</li>\n<li>:- 设置内容和标题栏居左对齐。</li>\n<li>:-: 设置内容和标题栏居中对齐。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是代码块</span><br></pre></td></tr></table></figure>\n\n<p><code>这是行内代码</code><br>说明：</p>\n<ol>\n<li>代码块使用 ~~~ 包裹</li>\n<li>行内代码使用 ` 包裹</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>写这篇的本意是让刚开始使用Markdown的我熟悉一下Markdown的语法格式，更加熟练的使用他来写博客。<br>我在这里列出了他的基础语法，他还有很多插件，可以实现各种各样的功能，比如数学公式和注脚等等。<br>但是Markdown的开发者John Gruber说：</p>\n<blockquote>\n<p>Markdown 格式化语法设计的目的就是为了<strong>易读</strong>，而且 Markdown 应该可以直接使用纯文本进行发布，无需标签或者是一些格式化命令。</p>\n</blockquote>\n<p>简单来说，Markdown就是为了<strong>让我们专注于内容，而不是关注他的排版。</strong><br>所以，我觉得如果过于在意他的语法，有些买椟还珠的意味。<br>所以本篇就列举一些基础的语法，其他高阶的用法就不罗列了。<br>这里也是为了方便我后续来看，不过还是那句话，应该注重内容，而不是排版。</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"关于Markdown\"><a href=\"#关于Markdown\" class=\"headerlink\" title=\"关于Markdown\"></a>关于Markdown</h2><p>Markdown 是轻量级的标记语言，可用于在纯文本文档中添加格式化元素。<br>Markdown 由 John Gruber 于 2004 年创建。<br>专注于文字内容<br>纯文本，方便读写，且兼容性良好<br>语法简单，学习成本低<br>不适用于对排版要求高的场景</p>\n<h2 id=\"Markdown的工作原理\"><a href=\"#Markdown的工作原理\" class=\"headerlink\" title=\"Markdown的工作原理\"></a>Markdown的工作原理</h2><p>在使用 Markdown 格式书写时，文本内容存储在 .md 或 .markdown 拓展名的纯文本文件中。<br>Markdown 应用程序使用一种称为 Markdown 处理器（也通常称为“解析器”或“实现”）的东西将获取到的 Markdown 格式的文本输出为 HTML 格式。<br>这时，便可以在 Web 浏览器中查看这篇文档。<br>所以 Markdown 语法是兼容 HTML 语言的，所以在 Markdown 中可以直接使用 HTML 标签，来实现各种样式。<br>比如下文 4.4 中下划线的实现便使用了<code>&lt;u&gt;</code>标签</p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><h3 id=\"底线表示\"><a href=\"#底线表示\" class=\"headerlink\" title=\"底线表示\"></a>底线表示</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">一级标题</span></span><br><span class=\"line\"><span class=\"section\">===</span></span><br><span class=\"line\"><span class=\"section\">二级标题</span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E6%A0%87%E9%A2%981.png\"\n                      alt=\"标题1\"\n                ><br>说明：</p>\n<ol>\n<li>底线是<code>=</code>表示一级标题</li>\n<li>底线是<code>-</code>表示二级标题</li>\n<li>底线符号<strong>至少2个</strong>才可以表示标题</li>\n<li>这种语法<strong>只支持这两级标题</strong></li>\n</ol>\n<h3 id=\"表示\"><a href=\"#表示\" class=\"headerlink\" title=\"#表示\"></a>#表示</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 一级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 二级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 三级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">#### 四级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">##### 五级标题</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">###### 六级标题</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E6%A0%87%E9%A2%982.png\"\n                      alt=\"标题2\"\n                ><br>说明：</p>\n<ol>\n<li>在<code>行首</code>插入#可标记标题</li>\n<li><code>#</code>的个数表示标题的等级</li>\n<li>建议在#后加一个空格</li>\n<li>Markdown最多支持前六级标题</li>\n</ol>\n<h3 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h3><ol>\n<li><strong>使用<code>#</code>标记标题</strong>，而不是<code>===</code>或者<code>---</code>，因为后者不便于阅读和理解，不简洁明了。</li>\n<li><strong>保持间距</strong>，标题前后空一行，#与文本间也空一格。</li>\n<li><strong>不要有多余的空格</strong>，标题开头和结尾不要有多余的空格</li>\n<li><strong>标题的结尾不要有标点符号</strong></li>\n<li><strong>标题要简短</strong></li>\n</ol>\n<h2 id=\"段落格式\"><a href=\"#段落格式\" class=\"headerlink\" title=\"段落格式\"></a>段落格式</h2><h3 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h3><p>行与行之间没有空行（什么都没有，或者只有空格和制表符），将会被视为同一段落。有空行则会被视为不同段落。<br>段内换行，在<strong>行末添加2个或以上空格</strong>。</p>\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"emphasis\">*斜体文本*</span></span><br><span class=\"line\"><span class=\"emphasis\">_斜体文本_</span></span><br><span class=\"line\"><span class=\"strong\">**粗体文本**</span></span><br><span class=\"line\"><span class=\"strong\">__粗体文本__</span></span><br><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*粗斜体文本*</span>**</span></span><br><span class=\"line\"><span class=\"strong\">__<span class=\"emphasis\">_粗斜体文本_</span>__</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E5%AD%97%E4%BD%93.png\"\n                      alt=\"字体\"\n                ></p>\n<p>建议</p>\n<ol>\n<li>粗体使用<code>**</code>包裹，斜体使用<code>*</code>包裹</li>\n<li>语法标记内不要有空格。</li>\n</ol>\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">*</span> <span class=\"emphasis\">* *</span></span></span><br><span class=\"line\"><span class=\"strong\">**</span><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">- - -</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">___</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\">_ _ _</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：（本分割线有主题样式，并非Markdown原生）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E5%88%86%E5%89%B2%E7%BA%BF.png\"\n                      alt=\"字体\"\n                ><br>说明：</p>\n<ol>\n<li>分割线使用3个或以上的<code>*</code>或<code>-</code>或<code>_</code>标记</li>\n<li>行内不能有其他字符，除了空格。</li>\n</ol>\n<h3 id=\"删除线-和-下划线\"><a href=\"#删除线-和-下划线\" class=\"headerlink\" title=\"删除线 和 下划线\"></a>删除线 和 下划线</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除线~~</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">u</span>&gt;</span></span>下划线<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E5%88%A0%E9%99%A4%E7%BA%BF%E5%92%8C%E4%B8%8B%E5%88%92%E7%BA%BF.png\"\n                      alt=\"删除线和下划线\"\n                ></p>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## 使用<span class=\"emphasis\">*</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">*</span> 第一项</span></span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 使用+</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">+</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">+</span> 第三项</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 使用-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">-</span> 第三项</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E6%97%A0%E5%BA%8F%E5%88%97%E8%A1%A8.png\"\n                      alt=\"无序列表\"\n                ></p>\n<h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一项</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 第二项</span><br><span class=\"line\"><span class=\"bullet\">3.</span> 第三项</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8.png\"\n                      alt=\"有序列表\"\n                ></p>\n<h3 id=\"列表嵌套\"><a href=\"#列表嵌套\" class=\"headerlink\" title=\"列表嵌套\"></a>列表嵌套</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 一层列表</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 二层列表</span><br><span class=\"line\"><span class=\"bullet\">        1.</span> 三层列表</span><br><span class=\"line\"><span class=\"bullet\">            *</span> 四层列表</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E5%88%97%E8%A1%A8%E5%B5%8C%E5%A5%97.png\"\n                      alt=\"列表嵌套\"\n                ></p>\n<h2 id=\"区块\"><a href=\"#区块\" class=\"headerlink\" title=\"区块\"></a>区块</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 大佬说过的话</span></span><br><span class=\"line\">&gt;&gt; 第一点！</span><br><span class=\"line\">&gt;&gt;&gt; 认真听！</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"quote\">&gt; 区块中使用列表</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 1. 第一项</span></span><br><span class=\"line\"><span class=\"quote\">&gt; 2. 第二项</span></span><br><span class=\"line\"><span class=\"quote\">&gt; <span class=\"emphasis\">* 第一项</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"quote\">&gt; *</span> 第二项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*</span> 列表中使用区块</span><br><span class=\"line\">  &gt; 第一项</span><br><span class=\"line\">  &gt; 第二项</span><br><span class=\"line\"><span class=\"bullet\">*</span> 第二项</span><br></pre></td></tr></table></figure>\n\n<p>效果如图：（这里区块样式也并非Markdown原生）<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Markdown%E8%AF%AD%E6%B3%95/%E5%8C%BA%E5%9D%97.png\"\n                      alt=\"区块\"\n                ></p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">文本</span>](<span class=\"link\">图片链接</span>)</span><br></pre></td></tr></table></figure>\n\n<p>效果…上文中所以引用图片就是效果。<br>说明：</p>\n<ol>\n<li>图片链接，可以是本地图片，也可以是网络图片。</li>\n<li>本地图片可以使用相对路径，也可以使用绝对路径。<br>（建议使用相对路径，当项目迁移时，文档不会加载不出图片。当然，这得建立在有一个好地整理习惯的前提下）</li>\n</ol>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">文本</span>](<span class=\"link\">链接</span>)</span><br><span class=\"line\">[<span class=\"string\">博客首页</span>](<span class=\"link\">https://2450123.github.io</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;链接&gt;</span><br><span class=\"line\"><span class=\"language-xml\">&lt;https://2450123.github.io&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">这是[引用链接]。</span><br><span class=\"line\">[<span class=\"symbol\">引用链接</span>]: <span class=\"link\">https://2450123.github.io</span></span><br></pre></td></tr></table></figure>\n\n<p>效果如下：<br><a class=\"link\"   href=\"https://2450123.github.io/\" >博客首页<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://2450123.github.io/\" >https://2450123.github.io<i class=\"fas fa-external-link-alt\"></i></a><br>引用链接这里用不了，所以不做演示。<br>它相当于定义了一个变量，可以重复引用。<br>说明：</p>\n<ol>\n<li>网络链接要写全，比如 <a class=\"link\"   href=\"https://2450123.github.io/\" >https://2450123.github.io<i class=\"fas fa-external-link-alt\"></i></a> ，否则会被识别问本地地址。</li>\n<li>定义的链接可以放在文件任意位置，建议放在文末。</li>\n<li>引用链接不区分大小写</li>\n<li>链接标记可以有数字、字母、空格和标点。</li>\n</ol>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class=\"line\">| :-----| ----: | :----: |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br><span class=\"line\">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">左对齐</th>\n<th align=\"right\">右对齐</th>\n<th align=\"center\">居中对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n<tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n<tr>\n<td align=\"left\">说明：</td>\n<td align=\"right\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<ol>\n<li>使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</li>\n<li>-: 设置内容和标题栏居右对齐。</li>\n<li>:- 设置内容和标题栏居左对齐。</li>\n<li>:-: 设置内容和标题栏居中对齐。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是代码块</span><br></pre></td></tr></table></figure>\n\n<p><code>这是行内代码</code><br>说明：</p>\n<ol>\n<li>代码块使用 ~~~ 包裹</li>\n<li>行内代码使用 ` 包裹</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>写这篇的本意是让刚开始使用Markdown的我熟悉一下Markdown的语法格式，更加熟练的使用他来写博客。<br>我在这里列出了他的基础语法，他还有很多插件，可以实现各种各样的功能，比如数学公式和注脚等等。<br>但是Markdown的开发者John Gruber说：</p>\n<blockquote>\n<p>Markdown 格式化语法设计的目的就是为了<strong>易读</strong>，而且 Markdown 应该可以直接使用纯文本进行发布，无需标签或者是一些格式化命令。</p>\n</blockquote>\n<p>简单来说，Markdown就是为了<strong>让我们专注于内容，而不是关注他的排版。</strong><br>所以，我觉得如果过于在意他的语法，有些买椟还珠的意味。<br>所以本篇就列举一些基础的语法，其他高阶的用法就不罗列了。<br>这里也是为了方便我后续来看，不过还是那句话，应该注重内容，而不是排版。</p>\n"},{"title":"Nginx笔记","date":"2022-06-24T11:28:18.000Z","_content":"\n## 关于Nginx\n\nNginx是一个轻量的web服务器/反向代理服务器/电子邮件代理服务器，占用内存少，并发能力强。  \nnginx是由c语言开发的。  \n\n### 反向代理\n\n反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。  \n![反向代理](../images/Nginx笔记/反向代理.png)  \n\n反向代理隐藏了真正的服务端。\n\n### 正向代理\n\n是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。  \n比如vpn。  \n\n## 环境搭建\n\n### 安装\n\n[nginx官网](http://nginx.org/)  \nnginx安装需要相关的依赖库，否则配置和编译会出现错误。  \ngcc编译器、openssl库、pcre库、zlib库  \n一次安装命令：\n`yum install gcc openssl-devel pcre pcre-devel zlib zlib-devel -y`\n\n然后解压缩官网下载的nginx压缩包。  \n配置安装目录\n`./configure --prefix=/安装目录`\n编译\n`make`\n安装\n`make install`\n\n### 普通启动\n\n运行sbin目录下的nginx文件  \n`./nginx`\nnginx由master进程和worker进程组成。  \nmaster进程读取配置文件，并维护worker进程，而worker进程则对请求进行实际处理。\n![nginx进程](../images/Nginx笔记/nginx进程.png)\n\n启动成功后，访问80端口便会出现如下欢迎页面：\n![nginx欢迎页面](../images/Nginx笔记/nginx欢迎页面.png)\n\n### 通过配置文件启动\n\n-c 参数指定配置文件绝对路径\n`./nginx -c nginx.conf配置文件绝对路径`\n\n### 关闭\n\n1. 优雅的关闭\n找出进程号，执行下面的命令\n`kill -QUIT 主pid`\npid是主进程号，即master process。其他worker process为子进程。  \n这种关闭方式会使nginx不再接受新的请求，等待nginx处理完请求后再关闭。\n\n2. 快速关闭\n`kill -TERM 主pid`\n直接关闭，比较暴力。  \n或者直接kill。  \n\n### 重启\n\n一般用于修改配置，重启服务器。 \n`./nginx -s reload`\n\n### 其他\n\n在启动命令后加 -t 会检查配置文件是否正确  \nsuccessful是正确，failed是失败。  \n只能检查语法错误~~（废话）~~  \n\n查看版本\n~~~shell\n# 查看nginx版本。\n./nginx -v\n# 查看nginx版本、编译器版本和配置参数\n./nginx -V\n~~~\n\n## 配置文件\n\n~~~conf\n#配置worker进程运行用户，默认用户为nobody。nobody用户一般用于启动程序，没有密码。  \n#user nobody;  \n#配置工作进程数量，通常等于cpu数量或2倍于cpu数量。  \nworker_processes 1;  \n#配置全局错误日志及类型，[debug | info | notice | warn | error | crit]，默认为error。  \nerror_log logs/error.log;  \n#error_log logs/error.log info;\n#配置进程pid文件，记录pid号，每次启动都会更新。  \npid logs/nginx.pid  \n\n#配置工作模式和连接数  \nevents{\n    worker_connections 1024;  ##配置每个worker进程连接上限，上限65535。nginx支持总连接数等于 worker_connection * worker_processes\n}\n\n#配置http服务器，利用反向代理功能提供负载均衡支持  \nhttp{\n    #配置nginx支持哪些多媒体类型，可以在conf/mime.types查看支持哪些多媒体类型  \n    include mime.types  \n    #默认文件类型 流类型，可以理解支持任意类型  \n    default_type application/octet-stream  \n    #配置日志格式  \n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '  \n    #                  '$status $body_bytes_sent \"$http_referer\" '  \n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';  \n    #配置access.log日志及存放路径，并使用上面定义的main日志格式  \n    #access_log  logs/access.log  main;  \n    #开启高效文件传输模式  \n    sendfile     on;    \n    #防止网络阻塞  \n    #tcp_nopush   on;  \n    #长连接超时时间，单位秒\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    #开启gzip压缩输出\n    #gzip  on;\n    \n    #配置虚拟主机，可以有多个server\n    server{    \n        #配置监听端口\n        listen       80;\n        #配置服务名\n        server_name  localhost;\n        #配置字符集\n        #charset koi8-r;\n        #配置本虚拟主机的访问日志\n        #access_log  logs/host.access.log  main;\n        #默认的匹配斜杠/（根路径）的请求，当访问路径中有/，会被该location匹配到并进行处理\n        location / {\n            #root是配置服务器的默认网站根目录的位置，默认为nginx安装目录下的html目录\n            root   html;\n            #配置首页文件的名称\n            index  index.html index.htm;\n        }\n        \n        #配置404页面\n        #error_page  404              /404.html;\n        \n        #配置50x错误页面\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        #精确匹配，拦截各种请求。\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n}\n~~~\n\n## 静态网站部署\n\n修改配置文件  \n~~~\nlocation /项目名（请求根路径） {\n    root  /项目根路径\n    index index.html\n}\n~~~\n重启nginx即可访问。  \n> index.html 磁盘存放路径为 /项目根路径/项目名/index.html\n> 访问的url为 ip:port/项目名/index.html\n\n## 负载均衡\n\n负载均衡通常指将请求均匀地分摊到集群的多个服务器节点上执行，这里均匀指在比较大的统计范围内是基本均匀的，并不是完全均匀的。  \n\n### 硬件负载均衡\n\n比如 F5、深信服、Array 等  \n优点是有厂商专业技术团队提供支持，性能稳定。  \n缺点是费用昂贵。  \n\n### 软件负载均衡\n\n比如 Nginx、LVS、HAProxy 等  \n优点是开源免费，成本低。  \n\n### nginx负载均衡\n\n示例：www.example.com  \n修改配置文件  \nserver中添加\n~~~conf\nlocation / {\n    proxy_pass http://www.example.com;\n}\n~~~\nserver上添加\n~~~conf\nupstream www.example.com {\n    server 127.0.0.1:8081\n    server 127.0.0.1:8082\n}\n~~~\n\n### nginx负载均衡策略\n\n1. 轮询（默认）  \n每个请求会按时间顺序逐一分配到不同的后端服务器。如果服务器down掉了，会自动剔除。一般后端服务器性能接近。\n2. 权重  \n通过权重值分发请求，值越大访问的比例越大，用于后端服务器性能不均的情况。  \n参数 `weight=1`\n3. 最少连接\n请求会被转发到链接数最少的服务器上。  \n在upstream中添加 `least conn;`\n4. ip_hash\nip_hash也叫ip绑定，每个请求按访问ip的hash值分配，这样每个访问客户端会固定访问一个后端服务器，**可以解决session会话丢失的问题**。  \n在upstream中添加 `ip hash;`\n\n其他配置  \n1. 参数 `backup` 标记该服务器为备用服务器。当主服务器停止时，请求会被转发到这里。  \n2. 参数 `down` 标记该服务器停机。\n\n## 静态代理\n\n将所有静态资源访问改为访问nginx，而不是tomcat。因为nginx更擅长静态资源的处理，性能更好，效率更高。  \n\n在配置文件中，配置静态资源所在目录\n~~~conf\nlocation ~.*/(css|js|img|images){\n    root /web/static;\n}\n~~~\n\n> 正则匹配目录，比匹配后缀会好一些。\n\n## 动静分离\n\n![动静分离架构](../images/Nginx笔记/动静分离架构.png)\n\n\n\n","source":"_posts/Nginx笔记.md","raw":"---\ntitle: Nginx笔记\ndate: 2022-06-24 19:28:18\ntags:\n- Nginx\ncategories:\n- 学习笔记\n---\n\n## 关于Nginx\n\nNginx是一个轻量的web服务器/反向代理服务器/电子邮件代理服务器，占用内存少，并发能力强。  \nnginx是由c语言开发的。  \n\n### 反向代理\n\n反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。  \n![反向代理](../images/Nginx笔记/反向代理.png)  \n\n反向代理隐藏了真正的服务端。\n\n### 正向代理\n\n是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。  \n比如vpn。  \n\n## 环境搭建\n\n### 安装\n\n[nginx官网](http://nginx.org/)  \nnginx安装需要相关的依赖库，否则配置和编译会出现错误。  \ngcc编译器、openssl库、pcre库、zlib库  \n一次安装命令：\n`yum install gcc openssl-devel pcre pcre-devel zlib zlib-devel -y`\n\n然后解压缩官网下载的nginx压缩包。  \n配置安装目录\n`./configure --prefix=/安装目录`\n编译\n`make`\n安装\n`make install`\n\n### 普通启动\n\n运行sbin目录下的nginx文件  \n`./nginx`\nnginx由master进程和worker进程组成。  \nmaster进程读取配置文件，并维护worker进程，而worker进程则对请求进行实际处理。\n![nginx进程](../images/Nginx笔记/nginx进程.png)\n\n启动成功后，访问80端口便会出现如下欢迎页面：\n![nginx欢迎页面](../images/Nginx笔记/nginx欢迎页面.png)\n\n### 通过配置文件启动\n\n-c 参数指定配置文件绝对路径\n`./nginx -c nginx.conf配置文件绝对路径`\n\n### 关闭\n\n1. 优雅的关闭\n找出进程号，执行下面的命令\n`kill -QUIT 主pid`\npid是主进程号，即master process。其他worker process为子进程。  \n这种关闭方式会使nginx不再接受新的请求，等待nginx处理完请求后再关闭。\n\n2. 快速关闭\n`kill -TERM 主pid`\n直接关闭，比较暴力。  \n或者直接kill。  \n\n### 重启\n\n一般用于修改配置，重启服务器。 \n`./nginx -s reload`\n\n### 其他\n\n在启动命令后加 -t 会检查配置文件是否正确  \nsuccessful是正确，failed是失败。  \n只能检查语法错误~~（废话）~~  \n\n查看版本\n~~~shell\n# 查看nginx版本。\n./nginx -v\n# 查看nginx版本、编译器版本和配置参数\n./nginx -V\n~~~\n\n## 配置文件\n\n~~~conf\n#配置worker进程运行用户，默认用户为nobody。nobody用户一般用于启动程序，没有密码。  \n#user nobody;  \n#配置工作进程数量，通常等于cpu数量或2倍于cpu数量。  \nworker_processes 1;  \n#配置全局错误日志及类型，[debug | info | notice | warn | error | crit]，默认为error。  \nerror_log logs/error.log;  \n#error_log logs/error.log info;\n#配置进程pid文件，记录pid号，每次启动都会更新。  \npid logs/nginx.pid  \n\n#配置工作模式和连接数  \nevents{\n    worker_connections 1024;  ##配置每个worker进程连接上限，上限65535。nginx支持总连接数等于 worker_connection * worker_processes\n}\n\n#配置http服务器，利用反向代理功能提供负载均衡支持  \nhttp{\n    #配置nginx支持哪些多媒体类型，可以在conf/mime.types查看支持哪些多媒体类型  \n    include mime.types  \n    #默认文件类型 流类型，可以理解支持任意类型  \n    default_type application/octet-stream  \n    #配置日志格式  \n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '  \n    #                  '$status $body_bytes_sent \"$http_referer\" '  \n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';  \n    #配置access.log日志及存放路径，并使用上面定义的main日志格式  \n    #access_log  logs/access.log  main;  \n    #开启高效文件传输模式  \n    sendfile     on;    \n    #防止网络阻塞  \n    #tcp_nopush   on;  \n    #长连接超时时间，单位秒\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    #开启gzip压缩输出\n    #gzip  on;\n    \n    #配置虚拟主机，可以有多个server\n    server{    \n        #配置监听端口\n        listen       80;\n        #配置服务名\n        server_name  localhost;\n        #配置字符集\n        #charset koi8-r;\n        #配置本虚拟主机的访问日志\n        #access_log  logs/host.access.log  main;\n        #默认的匹配斜杠/（根路径）的请求，当访问路径中有/，会被该location匹配到并进行处理\n        location / {\n            #root是配置服务器的默认网站根目录的位置，默认为nginx安装目录下的html目录\n            root   html;\n            #配置首页文件的名称\n            index  index.html index.htm;\n        }\n        \n        #配置404页面\n        #error_page  404              /404.html;\n        \n        #配置50x错误页面\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        #精确匹配，拦截各种请求。\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n}\n~~~\n\n## 静态网站部署\n\n修改配置文件  \n~~~\nlocation /项目名（请求根路径） {\n    root  /项目根路径\n    index index.html\n}\n~~~\n重启nginx即可访问。  \n> index.html 磁盘存放路径为 /项目根路径/项目名/index.html\n> 访问的url为 ip:port/项目名/index.html\n\n## 负载均衡\n\n负载均衡通常指将请求均匀地分摊到集群的多个服务器节点上执行，这里均匀指在比较大的统计范围内是基本均匀的，并不是完全均匀的。  \n\n### 硬件负载均衡\n\n比如 F5、深信服、Array 等  \n优点是有厂商专业技术团队提供支持，性能稳定。  \n缺点是费用昂贵。  \n\n### 软件负载均衡\n\n比如 Nginx、LVS、HAProxy 等  \n优点是开源免费，成本低。  \n\n### nginx负载均衡\n\n示例：www.example.com  \n修改配置文件  \nserver中添加\n~~~conf\nlocation / {\n    proxy_pass http://www.example.com;\n}\n~~~\nserver上添加\n~~~conf\nupstream www.example.com {\n    server 127.0.0.1:8081\n    server 127.0.0.1:8082\n}\n~~~\n\n### nginx负载均衡策略\n\n1. 轮询（默认）  \n每个请求会按时间顺序逐一分配到不同的后端服务器。如果服务器down掉了，会自动剔除。一般后端服务器性能接近。\n2. 权重  \n通过权重值分发请求，值越大访问的比例越大，用于后端服务器性能不均的情况。  \n参数 `weight=1`\n3. 最少连接\n请求会被转发到链接数最少的服务器上。  \n在upstream中添加 `least conn;`\n4. ip_hash\nip_hash也叫ip绑定，每个请求按访问ip的hash值分配，这样每个访问客户端会固定访问一个后端服务器，**可以解决session会话丢失的问题**。  \n在upstream中添加 `ip hash;`\n\n其他配置  \n1. 参数 `backup` 标记该服务器为备用服务器。当主服务器停止时，请求会被转发到这里。  \n2. 参数 `down` 标记该服务器停机。\n\n## 静态代理\n\n将所有静态资源访问改为访问nginx，而不是tomcat。因为nginx更擅长静态资源的处理，性能更好，效率更高。  \n\n在配置文件中，配置静态资源所在目录\n~~~conf\nlocation ~.*/(css|js|img|images){\n    root /web/static;\n}\n~~~\n\n> 正则匹配目录，比匹配后缀会好一些。\n\n## 动静分离\n\n![动静分离架构](../images/Nginx笔记/动静分离架构.png)\n\n\n\n","slug":"Nginx笔记","published":1,"updated":"2022-08-15T08:40:55.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbdg000bo8tt78na116l","content":"<h2 id=\"关于Nginx\"><a href=\"#关于Nginx\" class=\"headerlink\" title=\"关于Nginx\"></a>关于Nginx</h2><p>Nginx是一个轻量的web服务器/反向代理服务器/电子邮件代理服务器，占用内存少，并发能力强。<br>nginx是由c语言开发的。  </p>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Nginx%E7%AC%94%E8%AE%B0/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png\"\n                      alt=\"反向代理\"\n                >  </p>\n<p>反向代理隐藏了真正的服务端。</p>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><p>是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。<br>比如vpn。  </p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><a class=\"link\"   href=\"http://nginx.org/\" >nginx官网<i class=\"fas fa-external-link-alt\"></i></a><br>nginx安装需要相关的依赖库，否则配置和编译会出现错误。<br>gcc编译器、openssl库、pcre库、zlib库<br>一次安装命令：<br><code>yum install gcc openssl-devel pcre pcre-devel zlib zlib-devel -y</code></p>\n<p>然后解压缩官网下载的nginx压缩包。<br>配置安装目录<br><code>./configure --prefix=/安装目录</code><br>编译<br><code>make</code><br>安装<br><code>make install</code></p>\n<h3 id=\"普通启动\"><a href=\"#普通启动\" class=\"headerlink\" title=\"普通启动\"></a>普通启动</h3><p>运行sbin目录下的nginx文件<br><code>./nginx</code><br>nginx由master进程和worker进程组成。<br>master进程读取配置文件，并维护worker进程，而worker进程则对请求进行实际处理。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Nginx%E7%AC%94%E8%AE%B0/nginx%E8%BF%9B%E7%A8%8B.png\"\n                      alt=\"nginx进程\"\n                ></p>\n<p>启动成功后，访问80端口便会出现如下欢迎页面：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Nginx%E7%AC%94%E8%AE%B0/nginx%E6%AC%A2%E8%BF%8E%E9%A1%B5%E9%9D%A2.png\"\n                      alt=\"nginx欢迎页面\"\n                ></p>\n<h3 id=\"通过配置文件启动\"><a href=\"#通过配置文件启动\" class=\"headerlink\" title=\"通过配置文件启动\"></a>通过配置文件启动</h3><p>-c 参数指定配置文件绝对路径<br><code>./nginx -c nginx.conf配置文件绝对路径</code></p>\n<h3 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h3><ol>\n<li><p>优雅的关闭<br>找出进程号，执行下面的命令<br><code>kill -QUIT 主pid</code><br>pid是主进程号，即master process。其他worker process为子进程。<br>这种关闭方式会使nginx不再接受新的请求，等待nginx处理完请求后再关闭。</p>\n</li>\n<li><p>快速关闭<br><code>kill -TERM 主pid</code><br>直接关闭，比较暴力。<br>或者直接kill。  </p>\n</li>\n</ol>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><p>一般用于修改配置，重启服务器。<br><code>./nginx -s reload</code></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>在启动命令后加 -t 会检查配置文件是否正确<br>successful是正确，failed是失败。<br>只能检查语法错误<del>（废话）</del>  </p>\n<p>查看版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看nginx版本。</span></span><br><span class=\"line\">./nginx -v</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看nginx版本、编译器版本和配置参数</span></span><br><span class=\"line\">./nginx -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#配置worker进程运行用户，默认用户为nobody。nobody用户一般用于启动程序，没有密码。  </span><br><span class=\"line\">#user nobody;  </span><br><span class=\"line\">#配置工作进程数量，通常等于cpu数量或2倍于cpu数量。  </span><br><span class=\"line\">worker_processes 1;  </span><br><span class=\"line\">#配置全局错误日志及类型，[debug | info | notice | warn | error | crit]，默认为error。  </span><br><span class=\"line\">error_log logs/error.log;  </span><br><span class=\"line\">#error_log logs/error.log info;</span><br><span class=\"line\">#配置进程pid文件，记录pid号，每次启动都会更新。  </span><br><span class=\"line\">pid logs/nginx.pid  </span><br><span class=\"line\"></span><br><span class=\"line\">#配置工作模式和连接数  </span><br><span class=\"line\">events&#123;</span><br><span class=\"line\">    worker_connections 1024;  ##配置每个worker进程连接上限，上限65535。nginx支持总连接数等于 worker_connection * worker_processes</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#配置http服务器，利用反向代理功能提供负载均衡支持  </span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">    #配置nginx支持哪些多媒体类型，可以在conf/mime.types查看支持哪些多媒体类型  </span><br><span class=\"line\">    include mime.types  </span><br><span class=\"line\">    #默认文件类型 流类型，可以理解支持任意类型  </span><br><span class=\"line\">    default_type application/octet-stream  </span><br><span class=\"line\">    #配置日志格式  </span><br><span class=\"line\">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;  </span><br><span class=\"line\">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;  </span><br><span class=\"line\">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;  </span><br><span class=\"line\">    #配置access.log日志及存放路径，并使用上面定义的main日志格式  </span><br><span class=\"line\">    #access_log  logs/access.log  main;  </span><br><span class=\"line\">    #开启高效文件传输模式  </span><br><span class=\"line\">    sendfile     on;    </span><br><span class=\"line\">    #防止网络阻塞  </span><br><span class=\"line\">    #tcp_nopush   on;  </span><br><span class=\"line\">    #长连接超时时间，单位秒</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    #开启gzip压缩输出</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #配置虚拟主机，可以有多个server</span><br><span class=\"line\">    server&#123;    </span><br><span class=\"line\">        #配置监听端口</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        #配置服务名</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        #配置字符集</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\">        #配置本虚拟主机的访问日志</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\">        #默认的匹配斜杠/（根路径）的请求，当访问路径中有/，会被该location匹配到并进行处理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            #root是配置服务器的默认网站根目录的位置，默认为nginx安装目录下的html目录</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            #配置首页文件的名称</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        #配置404页面</span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\">        </span><br><span class=\"line\">        #配置50x错误页面</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #精确匹配，拦截各种请求。</span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态网站部署\"><a href=\"#静态网站部署\" class=\"headerlink\" title=\"静态网站部署\"></a>静态网站部署</h2><p>修改配置文件  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /项目名（请求根路径） &#123;</span><br><span class=\"line\">    root  /项目根路径</span><br><span class=\"line\">    index index.html</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启nginx即可访问。  </p>\n<blockquote>\n<p>index.html 磁盘存放路径为 /项目根路径/项目名/index.html<br>访问的url为 ip:port/项目名/index.html</p>\n</blockquote>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>负载均衡通常指将请求均匀地分摊到集群的多个服务器节点上执行，这里均匀指在比较大的统计范围内是基本均匀的，并不是完全均匀的。  </p>\n<h3 id=\"硬件负载均衡\"><a href=\"#硬件负载均衡\" class=\"headerlink\" title=\"硬件负载均衡\"></a>硬件负载均衡</h3><p>比如 F5、深信服、Array 等<br>优点是有厂商专业技术团队提供支持，性能稳定。<br>缺点是费用昂贵。  </p>\n<h3 id=\"软件负载均衡\"><a href=\"#软件负载均衡\" class=\"headerlink\" title=\"软件负载均衡\"></a>软件负载均衡</h3><p>比如 Nginx、LVS、HAProxy 等<br>优点是开源免费，成本低。  </p>\n<h3 id=\"nginx负载均衡\"><a href=\"#nginx负载均衡\" class=\"headerlink\" title=\"nginx负载均衡\"></a>nginx负载均衡</h3><p>示例：<a class=\"link\"   href=\"http://www.example.com/\" >www.example.com<i class=\"fas fa-external-link-alt\"></i></a><br>修改配置文件<br>server中添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://www.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>server上添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream www.example.com &#123;</span><br><span class=\"line\">    server 127.0.0.1:8081</span><br><span class=\"line\">    server 127.0.0.1:8082</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx负载均衡策略\"><a href=\"#nginx负载均衡策略\" class=\"headerlink\" title=\"nginx负载均衡策略\"></a>nginx负载均衡策略</h3><ol>\n<li>轮询（默认）<br>每个请求会按时间顺序逐一分配到不同的后端服务器。如果服务器down掉了，会自动剔除。一般后端服务器性能接近。</li>\n<li>权重<br>通过权重值分发请求，值越大访问的比例越大，用于后端服务器性能不均的情况。<br>参数 <code>weight=1</code></li>\n<li>最少连接<br>请求会被转发到链接数最少的服务器上。<br>在upstream中添加 <code>least conn;</code></li>\n<li>ip_hash<br>ip_hash也叫ip绑定，每个请求按访问ip的hash值分配，这样每个访问客户端会固定访问一个后端服务器，<strong>可以解决session会话丢失的问题</strong>。<br>在upstream中添加 <code>ip hash;</code></li>\n</ol>\n<p>其他配置  </p>\n<ol>\n<li>参数 <code>backup</code> 标记该服务器为备用服务器。当主服务器停止时，请求会被转发到这里。  </li>\n<li>参数 <code>down</code> 标记该服务器停机。</li>\n</ol>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>将所有静态资源访问改为访问nginx，而不是tomcat。因为nginx更擅长静态资源的处理，性能更好，效率更高。  </p>\n<p>在配置文件中，配置静态资源所在目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~.*/(css|js|img|images)&#123;</span><br><span class=\"line\">    root /web/static;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>正则匹配目录，比匹配后缀会好一些。</p>\n</blockquote>\n<h2 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Nginx%E7%AC%94%E8%AE%B0/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84.png\"\n                      alt=\"动静分离架构\"\n                ></p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"关于Nginx\"><a href=\"#关于Nginx\" class=\"headerlink\" title=\"关于Nginx\"></a>关于Nginx</h2><p>Nginx是一个轻量的web服务器/反向代理服务器/电子邮件代理服务器，占用内存少，并发能力强。<br>nginx是由c语言开发的。  </p>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Nginx%E7%AC%94%E8%AE%B0/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png\"\n                      alt=\"反向代理\"\n                >  </p>\n<p>反向代理隐藏了真正的服务端。</p>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><p>是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。<br>比如vpn。  </p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><a class=\"link\"   href=\"http://nginx.org/\" >nginx官网<i class=\"fas fa-external-link-alt\"></i></a><br>nginx安装需要相关的依赖库，否则配置和编译会出现错误。<br>gcc编译器、openssl库、pcre库、zlib库<br>一次安装命令：<br><code>yum install gcc openssl-devel pcre pcre-devel zlib zlib-devel -y</code></p>\n<p>然后解压缩官网下载的nginx压缩包。<br>配置安装目录<br><code>./configure --prefix=/安装目录</code><br>编译<br><code>make</code><br>安装<br><code>make install</code></p>\n<h3 id=\"普通启动\"><a href=\"#普通启动\" class=\"headerlink\" title=\"普通启动\"></a>普通启动</h3><p>运行sbin目录下的nginx文件<br><code>./nginx</code><br>nginx由master进程和worker进程组成。<br>master进程读取配置文件，并维护worker进程，而worker进程则对请求进行实际处理。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Nginx%E7%AC%94%E8%AE%B0/nginx%E8%BF%9B%E7%A8%8B.png\"\n                      alt=\"nginx进程\"\n                ></p>\n<p>启动成功后，访问80端口便会出现如下欢迎页面：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Nginx%E7%AC%94%E8%AE%B0/nginx%E6%AC%A2%E8%BF%8E%E9%A1%B5%E9%9D%A2.png\"\n                      alt=\"nginx欢迎页面\"\n                ></p>\n<h3 id=\"通过配置文件启动\"><a href=\"#通过配置文件启动\" class=\"headerlink\" title=\"通过配置文件启动\"></a>通过配置文件启动</h3><p>-c 参数指定配置文件绝对路径<br><code>./nginx -c nginx.conf配置文件绝对路径</code></p>\n<h3 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h3><ol>\n<li><p>优雅的关闭<br>找出进程号，执行下面的命令<br><code>kill -QUIT 主pid</code><br>pid是主进程号，即master process。其他worker process为子进程。<br>这种关闭方式会使nginx不再接受新的请求，等待nginx处理完请求后再关闭。</p>\n</li>\n<li><p>快速关闭<br><code>kill -TERM 主pid</code><br>直接关闭，比较暴力。<br>或者直接kill。  </p>\n</li>\n</ol>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><p>一般用于修改配置，重启服务器。<br><code>./nginx -s reload</code></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>在启动命令后加 -t 会检查配置文件是否正确<br>successful是正确，failed是失败。<br>只能检查语法错误<del>（废话）</del>  </p>\n<p>查看版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看nginx版本。</span></span><br><span class=\"line\">./nginx -v</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看nginx版本、编译器版本和配置参数</span></span><br><span class=\"line\">./nginx -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#配置worker进程运行用户，默认用户为nobody。nobody用户一般用于启动程序，没有密码。  </span><br><span class=\"line\">#user nobody;  </span><br><span class=\"line\">#配置工作进程数量，通常等于cpu数量或2倍于cpu数量。  </span><br><span class=\"line\">worker_processes 1;  </span><br><span class=\"line\">#配置全局错误日志及类型，[debug | info | notice | warn | error | crit]，默认为error。  </span><br><span class=\"line\">error_log logs/error.log;  </span><br><span class=\"line\">#error_log logs/error.log info;</span><br><span class=\"line\">#配置进程pid文件，记录pid号，每次启动都会更新。  </span><br><span class=\"line\">pid logs/nginx.pid  </span><br><span class=\"line\"></span><br><span class=\"line\">#配置工作模式和连接数  </span><br><span class=\"line\">events&#123;</span><br><span class=\"line\">    worker_connections 1024;  ##配置每个worker进程连接上限，上限65535。nginx支持总连接数等于 worker_connection * worker_processes</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#配置http服务器，利用反向代理功能提供负载均衡支持  </span><br><span class=\"line\">http&#123;</span><br><span class=\"line\">    #配置nginx支持哪些多媒体类型，可以在conf/mime.types查看支持哪些多媒体类型  </span><br><span class=\"line\">    include mime.types  </span><br><span class=\"line\">    #默认文件类型 流类型，可以理解支持任意类型  </span><br><span class=\"line\">    default_type application/octet-stream  </span><br><span class=\"line\">    #配置日志格式  </span><br><span class=\"line\">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;  </span><br><span class=\"line\">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;  </span><br><span class=\"line\">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;  </span><br><span class=\"line\">    #配置access.log日志及存放路径，并使用上面定义的main日志格式  </span><br><span class=\"line\">    #access_log  logs/access.log  main;  </span><br><span class=\"line\">    #开启高效文件传输模式  </span><br><span class=\"line\">    sendfile     on;    </span><br><span class=\"line\">    #防止网络阻塞  </span><br><span class=\"line\">    #tcp_nopush   on;  </span><br><span class=\"line\">    #长连接超时时间，单位秒</span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\">    #开启gzip压缩输出</span><br><span class=\"line\">    #gzip  on;</span><br><span class=\"line\">    </span><br><span class=\"line\">    #配置虚拟主机，可以有多个server</span><br><span class=\"line\">    server&#123;    </span><br><span class=\"line\">        #配置监听端口</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        #配置服务名</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        #配置字符集</span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\">        #配置本虚拟主机的访问日志</span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\">        #默认的匹配斜杠/（根路径）的请求，当访问路径中有/，会被该location匹配到并进行处理</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            #root是配置服务器的默认网站根目录的位置，默认为nginx安装目录下的html目录</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            #配置首页文件的名称</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        #配置404页面</span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\">        </span><br><span class=\"line\">        #配置50x错误页面</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #精确匹配，拦截各种请求。</span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态网站部署\"><a href=\"#静态网站部署\" class=\"headerlink\" title=\"静态网站部署\"></a>静态网站部署</h2><p>修改配置文件  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /项目名（请求根路径） &#123;</span><br><span class=\"line\">    root  /项目根路径</span><br><span class=\"line\">    index index.html</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启nginx即可访问。  </p>\n<blockquote>\n<p>index.html 磁盘存放路径为 /项目根路径/项目名/index.html<br>访问的url为 ip:port/项目名/index.html</p>\n</blockquote>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>负载均衡通常指将请求均匀地分摊到集群的多个服务器节点上执行，这里均匀指在比较大的统计范围内是基本均匀的，并不是完全均匀的。  </p>\n<h3 id=\"硬件负载均衡\"><a href=\"#硬件负载均衡\" class=\"headerlink\" title=\"硬件负载均衡\"></a>硬件负载均衡</h3><p>比如 F5、深信服、Array 等<br>优点是有厂商专业技术团队提供支持，性能稳定。<br>缺点是费用昂贵。  </p>\n<h3 id=\"软件负载均衡\"><a href=\"#软件负载均衡\" class=\"headerlink\" title=\"软件负载均衡\"></a>软件负载均衡</h3><p>比如 Nginx、LVS、HAProxy 等<br>优点是开源免费，成本低。  </p>\n<h3 id=\"nginx负载均衡\"><a href=\"#nginx负载均衡\" class=\"headerlink\" title=\"nginx负载均衡\"></a>nginx负载均衡</h3><p>示例：<a class=\"link\"   href=\"http://www.example.com/\" >www.example.com<i class=\"fas fa-external-link-alt\"></i></a><br>修改配置文件<br>server中添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://www.example.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>server上添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream www.example.com &#123;</span><br><span class=\"line\">    server 127.0.0.1:8081</span><br><span class=\"line\">    server 127.0.0.1:8082</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"nginx负载均衡策略\"><a href=\"#nginx负载均衡策略\" class=\"headerlink\" title=\"nginx负载均衡策略\"></a>nginx负载均衡策略</h3><ol>\n<li>轮询（默认）<br>每个请求会按时间顺序逐一分配到不同的后端服务器。如果服务器down掉了，会自动剔除。一般后端服务器性能接近。</li>\n<li>权重<br>通过权重值分发请求，值越大访问的比例越大，用于后端服务器性能不均的情况。<br>参数 <code>weight=1</code></li>\n<li>最少连接<br>请求会被转发到链接数最少的服务器上。<br>在upstream中添加 <code>least conn;</code></li>\n<li>ip_hash<br>ip_hash也叫ip绑定，每个请求按访问ip的hash值分配，这样每个访问客户端会固定访问一个后端服务器，<strong>可以解决session会话丢失的问题</strong>。<br>在upstream中添加 <code>ip hash;</code></li>\n</ol>\n<p>其他配置  </p>\n<ol>\n<li>参数 <code>backup</code> 标记该服务器为备用服务器。当主服务器停止时，请求会被转发到这里。  </li>\n<li>参数 <code>down</code> 标记该服务器停机。</li>\n</ol>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>将所有静态资源访问改为访问nginx，而不是tomcat。因为nginx更擅长静态资源的处理，性能更好，效率更高。  </p>\n<p>在配置文件中，配置静态资源所在目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~.*/(css|js|img|images)&#123;</span><br><span class=\"line\">    root /web/static;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>正则匹配目录，比匹配后缀会好一些。</p>\n</blockquote>\n<h2 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h2><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/Nginx%E7%AC%94%E8%AE%B0/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB%E6%9E%B6%E6%9E%84.png\"\n                      alt=\"动静分离架构\"\n                ></p>\n"},{"title":"SpringSession笔记","date":"2022-08-08T05:54:27.000Z","_content":"\n## Session会话管理\n\n### session与cookie\n\nsession：  \n因为http协议是无状态的，所以一次会话结束后，下次再会话时，服务端并不知道是上次这个人，所以服务端需要记录用户的状态时，需要session机制来识别具体的用户。\n\ncookie：\n每次http请求时，客户端都会发送相应的cookie信息。  \n大多数应用都是使用cookie来实现session跟踪的。即第一次创建session时，服务端在http协议中向客户端cookie中记录一个sessionID，以后每次请求会把这个会话id发送到服务端，这样服务端可以识别用户。\n\n如果cookie被禁用了，可以重写url，即将sessionID写到url中实现参数传递。（不过一般不会这么做\n\nSession机制存放过程：\n每次请求浏览器都会将Cookie数据传给Tomcat\n每次服务器响应请求都会携带一个Cookie数据，将SessionId写入浏览器（已有则会覆盖。 \n* tomcat接受用户请求后，会从cookie中寻找name为sessionid的数据。\n    * 如果Cookie中没有，则服务器需要创建一个新的Session对象及sessionid。\n    * 如果有，则tomcat会获取这个数据，然后在Session容器中，根据sessionid获取数据。\n        * 数据存在，表示这个session有效\n        * 数据不存在，则表示这个session已经过期。tomcat会创建一个新的session及sessionid，记录并写入浏览器。\n\n### 集群后，session丢失的原因：\n\n多台tomcat之间无法共享session。\ntomcat容器关闭或重启，也会导致session会话失效。\n\n### session会话共享方案\n\n1. 使用容器扩展插件来实现，比如就tomcat的tomcat-redis-session-manager插件，基于jetty的jetty-session-redis插件、memcatched-session-manager插件；\n    好处：无需改动代码\n    坏处：过于依赖容器，容器升级或更换，需要重新配置。底层是复制session到其他服务器，会有一定延迟，不能部署太多服务器。\n2. 使用Nginx负载均衡的ip hash策略，实现用户每次访问都绑定到同一tomcat服务器，实现session总是存在。\n    局限性：ip不可变。其次，负载均衡时，如果某个服务器发生故障，会重新定位，也会跳到别的服务器。\n3. 自己写一套session会话管理工具类。\n    比较灵活，但开发需要一些额外时间，同时功能可能较弱。（不要重复造轮子\n4. 使用框架的会话管理工具，SpringSession。\n    不依赖容器，不惜要改代码。较为完美的方案\n    \n## SpringSession简介\n\nSpringSession是Spring家族中的一个子项目，提供了一组Api和实现，用于管理用户Session信息。\n它将servlet容器实现的httpSession替换为spring-session，专注于解决session管理问题，Session信息存储在Redis中，可简单快速且无缝的集成到应用中。\n\nSpringSession特性：\n1. 提供用户session管理的api和实现\n2. 提供HttpSession，以中立的方式取代web容器中的session\n3. 支持集群的session处理，不必绑定到具体的web容器去解决集群下的session共享问题\n\nSpringSession redis依赖\n~~~xml\n<dependency>\n    <groupId>org.springframework.session</groupId>\n    <artifactId>spring-session-data-redis</artifactId>\n</dependency>\n~~~\n\n然后，配置好redis。用户的session信息就会存储在redis中实现共享。\n\n## SpringSession的实现原理\n\n大概的实现原理\n\n1. 自定义Filter，实现doFilter方法\n2. 集成HttpServletRequestWrapper、HttpServletResponseWrapper类，重写getSession等相关的方法，在这些方法中调用session存储容器的操作类。比如redis等\n3. 在1中的doFilter里，new 2中自定义的request和response类，将他们分别传递到过滤器链上\n4. 将这个过滤器配置到过滤器链的第一个位置上\n\n## 结尾\n\n以后深入了，应该会有补充。比如使用场景之类的\n目前经验不足，就写到这吧。","source":"_posts/SpringSession笔记.md","raw":"---\ntitle: SpringSession笔记\ndate: 2022-08-08 13:54:27\ntags:\n- spring\n- session\ncategories:\n- 学习笔记\n---\n\n## Session会话管理\n\n### session与cookie\n\nsession：  \n因为http协议是无状态的，所以一次会话结束后，下次再会话时，服务端并不知道是上次这个人，所以服务端需要记录用户的状态时，需要session机制来识别具体的用户。\n\ncookie：\n每次http请求时，客户端都会发送相应的cookie信息。  \n大多数应用都是使用cookie来实现session跟踪的。即第一次创建session时，服务端在http协议中向客户端cookie中记录一个sessionID，以后每次请求会把这个会话id发送到服务端，这样服务端可以识别用户。\n\n如果cookie被禁用了，可以重写url，即将sessionID写到url中实现参数传递。（不过一般不会这么做\n\nSession机制存放过程：\n每次请求浏览器都会将Cookie数据传给Tomcat\n每次服务器响应请求都会携带一个Cookie数据，将SessionId写入浏览器（已有则会覆盖。 \n* tomcat接受用户请求后，会从cookie中寻找name为sessionid的数据。\n    * 如果Cookie中没有，则服务器需要创建一个新的Session对象及sessionid。\n    * 如果有，则tomcat会获取这个数据，然后在Session容器中，根据sessionid获取数据。\n        * 数据存在，表示这个session有效\n        * 数据不存在，则表示这个session已经过期。tomcat会创建一个新的session及sessionid，记录并写入浏览器。\n\n### 集群后，session丢失的原因：\n\n多台tomcat之间无法共享session。\ntomcat容器关闭或重启，也会导致session会话失效。\n\n### session会话共享方案\n\n1. 使用容器扩展插件来实现，比如就tomcat的tomcat-redis-session-manager插件，基于jetty的jetty-session-redis插件、memcatched-session-manager插件；\n    好处：无需改动代码\n    坏处：过于依赖容器，容器升级或更换，需要重新配置。底层是复制session到其他服务器，会有一定延迟，不能部署太多服务器。\n2. 使用Nginx负载均衡的ip hash策略，实现用户每次访问都绑定到同一tomcat服务器，实现session总是存在。\n    局限性：ip不可变。其次，负载均衡时，如果某个服务器发生故障，会重新定位，也会跳到别的服务器。\n3. 自己写一套session会话管理工具类。\n    比较灵活，但开发需要一些额外时间，同时功能可能较弱。（不要重复造轮子\n4. 使用框架的会话管理工具，SpringSession。\n    不依赖容器，不惜要改代码。较为完美的方案\n    \n## SpringSession简介\n\nSpringSession是Spring家族中的一个子项目，提供了一组Api和实现，用于管理用户Session信息。\n它将servlet容器实现的httpSession替换为spring-session，专注于解决session管理问题，Session信息存储在Redis中，可简单快速且无缝的集成到应用中。\n\nSpringSession特性：\n1. 提供用户session管理的api和实现\n2. 提供HttpSession，以中立的方式取代web容器中的session\n3. 支持集群的session处理，不必绑定到具体的web容器去解决集群下的session共享问题\n\nSpringSession redis依赖\n~~~xml\n<dependency>\n    <groupId>org.springframework.session</groupId>\n    <artifactId>spring-session-data-redis</artifactId>\n</dependency>\n~~~\n\n然后，配置好redis。用户的session信息就会存储在redis中实现共享。\n\n## SpringSession的实现原理\n\n大概的实现原理\n\n1. 自定义Filter，实现doFilter方法\n2. 集成HttpServletRequestWrapper、HttpServletResponseWrapper类，重写getSession等相关的方法，在这些方法中调用session存储容器的操作类。比如redis等\n3. 在1中的doFilter里，new 2中自定义的request和response类，将他们分别传递到过滤器链上\n4. 将这个过滤器配置到过滤器链的第一个位置上\n\n## 结尾\n\n以后深入了，应该会有补充。比如使用场景之类的\n目前经验不足，就写到这吧。","slug":"SpringSession笔记","published":1,"updated":"2022-08-15T08:40:55.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbdh000fo8tt8mcb48ms","content":"<h2 id=\"Session会话管理\"><a href=\"#Session会话管理\" class=\"headerlink\" title=\"Session会话管理\"></a>Session会话管理</h2><h3 id=\"session与cookie\"><a href=\"#session与cookie\" class=\"headerlink\" title=\"session与cookie\"></a>session与cookie</h3><p>session：<br>因为http协议是无状态的，所以一次会话结束后，下次再会话时，服务端并不知道是上次这个人，所以服务端需要记录用户的状态时，需要session机制来识别具体的用户。</p>\n<p>cookie：<br>每次http请求时，客户端都会发送相应的cookie信息。<br>大多数应用都是使用cookie来实现session跟踪的。即第一次创建session时，服务端在http协议中向客户端cookie中记录一个sessionID，以后每次请求会把这个会话id发送到服务端，这样服务端可以识别用户。</p>\n<p>如果cookie被禁用了，可以重写url，即将sessionID写到url中实现参数传递。（不过一般不会这么做</p>\n<p>Session机制存放过程：<br>每次请求浏览器都会将Cookie数据传给Tomcat<br>每次服务器响应请求都会携带一个Cookie数据，将SessionId写入浏览器（已有则会覆盖。 </p>\n<ul>\n<li>tomcat接受用户请求后，会从cookie中寻找name为sessionid的数据。<ul>\n<li>如果Cookie中没有，则服务器需要创建一个新的Session对象及sessionid。</li>\n<li>如果有，则tomcat会获取这个数据，然后在Session容器中，根据sessionid获取数据。<ul>\n<li>数据存在，表示这个session有效</li>\n<li>数据不存在，则表示这个session已经过期。tomcat会创建一个新的session及sessionid，记录并写入浏览器。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"集群后，session丢失的原因：\"><a href=\"#集群后，session丢失的原因：\" class=\"headerlink\" title=\"集群后，session丢失的原因：\"></a>集群后，session丢失的原因：</h3><p>多台tomcat之间无法共享session。<br>tomcat容器关闭或重启，也会导致session会话失效。</p>\n<h3 id=\"session会话共享方案\"><a href=\"#session会话共享方案\" class=\"headerlink\" title=\"session会话共享方案\"></a>session会话共享方案</h3><ol>\n<li>使用容器扩展插件来实现，比如就tomcat的tomcat-redis-session-manager插件，基于jetty的jetty-session-redis插件、memcatched-session-manager插件；<br> 好处：无需改动代码<br> 坏处：过于依赖容器，容器升级或更换，需要重新配置。底层是复制session到其他服务器，会有一定延迟，不能部署太多服务器。</li>\n<li>使用Nginx负载均衡的ip hash策略，实现用户每次访问都绑定到同一tomcat服务器，实现session总是存在。<br> 局限性：ip不可变。其次，负载均衡时，如果某个服务器发生故障，会重新定位，也会跳到别的服务器。</li>\n<li>自己写一套session会话管理工具类。<br> 比较灵活，但开发需要一些额外时间，同时功能可能较弱。（不要重复造轮子</li>\n<li>使用框架的会话管理工具，SpringSession。<br> 不依赖容器，不惜要改代码。较为完美的方案</li>\n</ol>\n<h2 id=\"SpringSession简介\"><a href=\"#SpringSession简介\" class=\"headerlink\" title=\"SpringSession简介\"></a>SpringSession简介</h2><p>SpringSession是Spring家族中的一个子项目，提供了一组Api和实现，用于管理用户Session信息。<br>它将servlet容器实现的httpSession替换为spring-session，专注于解决session管理问题，Session信息存储在Redis中，可简单快速且无缝的集成到应用中。</p>\n<p>SpringSession特性：</p>\n<ol>\n<li>提供用户session管理的api和实现</li>\n<li>提供HttpSession，以中立的方式取代web容器中的session</li>\n<li>支持集群的session处理，不必绑定到具体的web容器去解决集群下的session共享问题</li>\n</ol>\n<p>SpringSession redis依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，配置好redis。用户的session信息就会存储在redis中实现共享。</p>\n<h2 id=\"SpringSession的实现原理\"><a href=\"#SpringSession的实现原理\" class=\"headerlink\" title=\"SpringSession的实现原理\"></a>SpringSession的实现原理</h2><p>大概的实现原理</p>\n<ol>\n<li>自定义Filter，实现doFilter方法</li>\n<li>集成HttpServletRequestWrapper、HttpServletResponseWrapper类，重写getSession等相关的方法，在这些方法中调用session存储容器的操作类。比如redis等</li>\n<li>在1中的doFilter里，new 2中自定义的request和response类，将他们分别传递到过滤器链上</li>\n<li>将这个过滤器配置到过滤器链的第一个位置上</li>\n</ol>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>以后深入了，应该会有补充。比如使用场景之类的<br>目前经验不足，就写到这吧。</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"Session会话管理\"><a href=\"#Session会话管理\" class=\"headerlink\" title=\"Session会话管理\"></a>Session会话管理</h2><h3 id=\"session与cookie\"><a href=\"#session与cookie\" class=\"headerlink\" title=\"session与cookie\"></a>session与cookie</h3><p>session：<br>因为http协议是无状态的，所以一次会话结束后，下次再会话时，服务端并不知道是上次这个人，所以服务端需要记录用户的状态时，需要session机制来识别具体的用户。</p>\n<p>cookie：<br>每次http请求时，客户端都会发送相应的cookie信息。<br>大多数应用都是使用cookie来实现session跟踪的。即第一次创建session时，服务端在http协议中向客户端cookie中记录一个sessionID，以后每次请求会把这个会话id发送到服务端，这样服务端可以识别用户。</p>\n<p>如果cookie被禁用了，可以重写url，即将sessionID写到url中实现参数传递。（不过一般不会这么做</p>\n<p>Session机制存放过程：<br>每次请求浏览器都会将Cookie数据传给Tomcat<br>每次服务器响应请求都会携带一个Cookie数据，将SessionId写入浏览器（已有则会覆盖。 </p>\n<ul>\n<li>tomcat接受用户请求后，会从cookie中寻找name为sessionid的数据。<ul>\n<li>如果Cookie中没有，则服务器需要创建一个新的Session对象及sessionid。</li>\n<li>如果有，则tomcat会获取这个数据，然后在Session容器中，根据sessionid获取数据。<ul>\n<li>数据存在，表示这个session有效</li>\n<li>数据不存在，则表示这个session已经过期。tomcat会创建一个新的session及sessionid，记录并写入浏览器。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"集群后，session丢失的原因：\"><a href=\"#集群后，session丢失的原因：\" class=\"headerlink\" title=\"集群后，session丢失的原因：\"></a>集群后，session丢失的原因：</h3><p>多台tomcat之间无法共享session。<br>tomcat容器关闭或重启，也会导致session会话失效。</p>\n<h3 id=\"session会话共享方案\"><a href=\"#session会话共享方案\" class=\"headerlink\" title=\"session会话共享方案\"></a>session会话共享方案</h3><ol>\n<li>使用容器扩展插件来实现，比如就tomcat的tomcat-redis-session-manager插件，基于jetty的jetty-session-redis插件、memcatched-session-manager插件；<br> 好处：无需改动代码<br> 坏处：过于依赖容器，容器升级或更换，需要重新配置。底层是复制session到其他服务器，会有一定延迟，不能部署太多服务器。</li>\n<li>使用Nginx负载均衡的ip hash策略，实现用户每次访问都绑定到同一tomcat服务器，实现session总是存在。<br> 局限性：ip不可变。其次，负载均衡时，如果某个服务器发生故障，会重新定位，也会跳到别的服务器。</li>\n<li>自己写一套session会话管理工具类。<br> 比较灵活，但开发需要一些额外时间，同时功能可能较弱。（不要重复造轮子</li>\n<li>使用框架的会话管理工具，SpringSession。<br> 不依赖容器，不惜要改代码。较为完美的方案</li>\n</ol>\n<h2 id=\"SpringSession简介\"><a href=\"#SpringSession简介\" class=\"headerlink\" title=\"SpringSession简介\"></a>SpringSession简介</h2><p>SpringSession是Spring家族中的一个子项目，提供了一组Api和实现，用于管理用户Session信息。<br>它将servlet容器实现的httpSession替换为spring-session，专注于解决session管理问题，Session信息存储在Redis中，可简单快速且无缝的集成到应用中。</p>\n<p>SpringSession特性：</p>\n<ol>\n<li>提供用户session管理的api和实现</li>\n<li>提供HttpSession，以中立的方式取代web容器中的session</li>\n<li>支持集群的session处理，不必绑定到具体的web容器去解决集群下的session共享问题</li>\n</ol>\n<p>SpringSession redis依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，配置好redis。用户的session信息就会存储在redis中实现共享。</p>\n<h2 id=\"SpringSession的实现原理\"><a href=\"#SpringSession的实现原理\" class=\"headerlink\" title=\"SpringSession的实现原理\"></a>SpringSession的实现原理</h2><p>大概的实现原理</p>\n<ol>\n<li>自定义Filter，实现doFilter方法</li>\n<li>集成HttpServletRequestWrapper、HttpServletResponseWrapper类，重写getSession等相关的方法，在这些方法中调用session存储容器的操作类。比如redis等</li>\n<li>在1中的doFilter里，new 2中自定义的request和response类，将他们分别传递到过滤器链上</li>\n<li>将这个过滤器配置到过滤器链的第一个位置上</li>\n</ol>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>以后深入了，应该会有补充。比如使用场景之类的<br>目前经验不足，就写到这吧。</p>\n"},{"title":"unity笔记（弃）","date":"2022-08-13T05:14:38.000Z","_content":"","source":"_posts/unity笔记.md","raw":"---\ntitle: unity笔记（弃）\ndate: 2022-08-13 13:14:38\ntags:\n---\n","slug":"unity笔记","published":1,"updated":"2022-09-11T09:07:57.567Z","_id":"cl7ketbdi000go8tt0sb33j8z","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":""},{"title":"使用hexo框架在github.io上搭建博客网站.","date":"2022-03-12T05:54:21.000Z","_content":"## 安装相关软件\n### 安装git\nGit是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。\n~~据说他开发git只花了两周时间，大佬不愧是大佬。~~\n[git官网](https://git-scm.com/)\nwindows：到[git官网](https://gitforwindows.org/)上下载，下载后会有一个Git Bash的命令行工具，用这个工具就可以使用git了。\nlinux：因为开发git就是为了管理linux内核开发的，所以linux的非常简单，只需要下面这行代码\n~~~shell\nsudo apt-get install git\n~~~\n当然你像我一样使用IDE自动安装\n安装完成后，可以使用`git --version`查看版本\n\n### 安装nodejs\n因为Hexo是基于nodeJS编写的，所以需要安装一下nodejs和里面的npm工具。\nwindows：到[nodejs下载地址](https://nodejs.org/en/download/)，选择LTS版本（稳定版本）就行了。\nlinux：使用以下命令\n~~~shell\nsudo apt-get install nodejs\nsudo apt-get install npm\n~~~\n安装完后，使用`node -v` 和 `npm -v` 查看版本\n\n### 安装hexo\n可以参考[官方文档](https://hexo.io/zh-cn/docs/)，真的非常好用\n所有必备的应用程序（git和nodejs）安装完成后，即可使用 npm 安装 Hexo。\n全局安装\n~~~shell\nnpm install -g hexo-cli\n~~~\n\n## 关于github pages\n可以参考[官方文档](https://docs.github.com/cn)\n### 创建github仓库\n新建一个名字为**username.github.io**的仓库\n仓库名必须为**username.github.io**，否则不会被github识别。其中username为github账户的用户名。\n### 生成ssh添加到github（如果之前没有添加过的话）\n在git bash中，配置账户信息\n~~~shell\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n~~~\n这里的yourname为GitHub用户名，youremail为GitHub的邮箱。~~不要瞎写，不然无法push到github~~\n\n可以查看配置的信息。~~以防写错~~\n~~~shell\ngit config user.name\ngit config user.email\n~~~\n然后创建SSH，一路回车。\n~~~shell\nssh-keygen -t rsa -C \"youremail\"\n~~~\n创建完成后，会生成C:\\Users\\Username\\.ssh文件夹\n![.shh文件夹](../images/使用hexo框架在github-io上搭建博客网站/ssh.png)\n其中id_rsa是生成的私钥，id_rsa.pub是生成的公钥。将id_rsa.pub用记事本打开，复制其内容，添加到github的设置中。\n![.githubSSHKey](../images/使用hexo框架在github-io上搭建博客网站/githubSSHKey.png)\n添加完成后，在gitbash中查看是否添加成功\n~~~shell\nssh -T git@github.com\n~~~\n成功会有 **Hi username/username.github.io! You've successfully authenticated, but GitHub does not provide shell access.** 这句话。\n\n## 关于hexo\n### hexo的初始化\n前面给的[官方文档](https://hexo.io/zh-cn/docs/)也包含了hexo的配置，以及命令等其他相关的功能。 ~~所以这里就简单写一下。~~\n执行下列命令，Hexo将会在当前目录的指定文件夹中新建所需要的文件，请确保指定文件夹为空。\n~~~shell\nhexo init <folder>\ncd <folder>\nnpm install\n~~~\n新建完成后，指定文件夹下会生成一些文件，其中：\n_config.yml——hexo的配置文件\npackage.json——应用程序信息\nscaffolds——模板文件夹，创建文章时，会根据模板来创建\nsource——资源文件夹，写的markdown和图片资源什么的都在这\nthemes——主题文件夹，比如我在使用的butterfly主题就放在这\n\n### 将hexo部署到GitHub\n将hexo生成的文章部署到GitHub上\n打开hexo配置文件 _config.yml，翻到最后，修改deploy\n其中YourgithubName是你的GitHub账户，branch是分支，一般设置为main或者master\n~~~yml\ndeploy:\n    type: git\n    repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n    branch: master\n~~~\n修改完后，需要先安装deploy-git（部署的命令），这样才能用命令部署到GitHub。\n~~~shell\nnpm install hexo-deployer-git --save\n~~~\n之后是hexo的部署命令\n~~~shell\nhexo clean\nhexo generate\nhexo deploy\n~~~\n其中 hexo clean 清除了你之前生成的东西。\nhexo generate 生成静态文章，可以用 hexo g缩写\nhexo deploy 部署文章，可以用hexo d缩写\nhexo generate 和 hexo deploy 也可以合并写成 `hexo g -d` 或者 `hexo d -g`\n\n出现 **INFO  Deploy done: git** 时，说明部署成功了。\n稍微等一会，便可以在 https://yourname.github.io 这个网站看到你的博客了，其中yourname是github的用户名。\n刷新显示404，请不要着急。~~心急吃不了热豆腐~~\n\n到这里，使用hexo在github.io上搭建博客网站就成功了。\n就可以开始写博客了。\n但，是不是有点单调。所以我们可以使用主题来装饰他，来实现更多的功能。 github官方建议你使用博客生成工具 Jekyll。\n\n## 关于hexo的主题butterfly\n可以参考[官方安装文档](https://butterfly.js.org/posts/21cfbf15/)\n### 安装butterfly\n在hexo的根目录里\ngithub：\n~~~shell\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly\n~~~\ngitee：\n~~~shell\ngit clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly\n~~~\n### 应用主题\n修改 Hexo 根目录下的 _config.yml，把主题改为butterfly\n~~~yml\ntheme: butterfly\n~~~\n### 安裝插件\n如果你沒有 pug 以及 stylus 的渲染器，請下載安裝：\n~~~shell\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n~~~\n### butterfly的相关配置\n相关配置请看文档，有详细的解释。在此不作赘述。\n\n## 可能会产生的错误\n错误的原因可能很多，解决方法并不一定有用。在这里列出我碰到的问题。\n因为github连接不稳定，所以要有耐心。\n### OpenSSL SSL_read: Connection was aborted, errno 10053\n原因\nGit默认限制推送的大小，运行命令更改限制大小\n解决方法\n~~~shell\ngit config --global http.postBuffer 524288000\n~~~\n### Failed to connect to github.com port 443: Timed out\n原因\n代理的设置问题\n解决方法：\n进入项目目录中，使用命令行取消代理设置：\n~~~shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n~~~","source":"_posts/使用hexo框架在github-io上搭建博客网站.md","raw":"---\ntitle: 使用hexo框架在github.io上搭建博客网站.\ndate: 2022-03-12 13:54:21\ntags:\n    - hexo\ncategories: \n    - 学习记录\n---\n## 安装相关软件\n### 安装git\nGit是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。\n~~据说他开发git只花了两周时间，大佬不愧是大佬。~~\n[git官网](https://git-scm.com/)\nwindows：到[git官网](https://gitforwindows.org/)上下载，下载后会有一个Git Bash的命令行工具，用这个工具就可以使用git了。\nlinux：因为开发git就是为了管理linux内核开发的，所以linux的非常简单，只需要下面这行代码\n~~~shell\nsudo apt-get install git\n~~~\n当然你像我一样使用IDE自动安装\n安装完成后，可以使用`git --version`查看版本\n\n### 安装nodejs\n因为Hexo是基于nodeJS编写的，所以需要安装一下nodejs和里面的npm工具。\nwindows：到[nodejs下载地址](https://nodejs.org/en/download/)，选择LTS版本（稳定版本）就行了。\nlinux：使用以下命令\n~~~shell\nsudo apt-get install nodejs\nsudo apt-get install npm\n~~~\n安装完后，使用`node -v` 和 `npm -v` 查看版本\n\n### 安装hexo\n可以参考[官方文档](https://hexo.io/zh-cn/docs/)，真的非常好用\n所有必备的应用程序（git和nodejs）安装完成后，即可使用 npm 安装 Hexo。\n全局安装\n~~~shell\nnpm install -g hexo-cli\n~~~\n\n## 关于github pages\n可以参考[官方文档](https://docs.github.com/cn)\n### 创建github仓库\n新建一个名字为**username.github.io**的仓库\n仓库名必须为**username.github.io**，否则不会被github识别。其中username为github账户的用户名。\n### 生成ssh添加到github（如果之前没有添加过的话）\n在git bash中，配置账户信息\n~~~shell\ngit config --global user.name \"yourname\"\ngit config --global user.email \"youremail\"\n~~~\n这里的yourname为GitHub用户名，youremail为GitHub的邮箱。~~不要瞎写，不然无法push到github~~\n\n可以查看配置的信息。~~以防写错~~\n~~~shell\ngit config user.name\ngit config user.email\n~~~\n然后创建SSH，一路回车。\n~~~shell\nssh-keygen -t rsa -C \"youremail\"\n~~~\n创建完成后，会生成C:\\Users\\Username\\.ssh文件夹\n![.shh文件夹](../images/使用hexo框架在github-io上搭建博客网站/ssh.png)\n其中id_rsa是生成的私钥，id_rsa.pub是生成的公钥。将id_rsa.pub用记事本打开，复制其内容，添加到github的设置中。\n![.githubSSHKey](../images/使用hexo框架在github-io上搭建博客网站/githubSSHKey.png)\n添加完成后，在gitbash中查看是否添加成功\n~~~shell\nssh -T git@github.com\n~~~\n成功会有 **Hi username/username.github.io! You've successfully authenticated, but GitHub does not provide shell access.** 这句话。\n\n## 关于hexo\n### hexo的初始化\n前面给的[官方文档](https://hexo.io/zh-cn/docs/)也包含了hexo的配置，以及命令等其他相关的功能。 ~~所以这里就简单写一下。~~\n执行下列命令，Hexo将会在当前目录的指定文件夹中新建所需要的文件，请确保指定文件夹为空。\n~~~shell\nhexo init <folder>\ncd <folder>\nnpm install\n~~~\n新建完成后，指定文件夹下会生成一些文件，其中：\n_config.yml——hexo的配置文件\npackage.json——应用程序信息\nscaffolds——模板文件夹，创建文章时，会根据模板来创建\nsource——资源文件夹，写的markdown和图片资源什么的都在这\nthemes——主题文件夹，比如我在使用的butterfly主题就放在这\n\n### 将hexo部署到GitHub\n将hexo生成的文章部署到GitHub上\n打开hexo配置文件 _config.yml，翻到最后，修改deploy\n其中YourgithubName是你的GitHub账户，branch是分支，一般设置为main或者master\n~~~yml\ndeploy:\n    type: git\n    repo: https://github.com/YourgithubName/YourgithubName.github.io.git\n    branch: master\n~~~\n修改完后，需要先安装deploy-git（部署的命令），这样才能用命令部署到GitHub。\n~~~shell\nnpm install hexo-deployer-git --save\n~~~\n之后是hexo的部署命令\n~~~shell\nhexo clean\nhexo generate\nhexo deploy\n~~~\n其中 hexo clean 清除了你之前生成的东西。\nhexo generate 生成静态文章，可以用 hexo g缩写\nhexo deploy 部署文章，可以用hexo d缩写\nhexo generate 和 hexo deploy 也可以合并写成 `hexo g -d` 或者 `hexo d -g`\n\n出现 **INFO  Deploy done: git** 时，说明部署成功了。\n稍微等一会，便可以在 https://yourname.github.io 这个网站看到你的博客了，其中yourname是github的用户名。\n刷新显示404，请不要着急。~~心急吃不了热豆腐~~\n\n到这里，使用hexo在github.io上搭建博客网站就成功了。\n就可以开始写博客了。\n但，是不是有点单调。所以我们可以使用主题来装饰他，来实现更多的功能。 github官方建议你使用博客生成工具 Jekyll。\n\n## 关于hexo的主题butterfly\n可以参考[官方安装文档](https://butterfly.js.org/posts/21cfbf15/)\n### 安装butterfly\n在hexo的根目录里\ngithub：\n~~~shell\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly\n~~~\ngitee：\n~~~shell\ngit clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly\n~~~\n### 应用主题\n修改 Hexo 根目录下的 _config.yml，把主题改为butterfly\n~~~yml\ntheme: butterfly\n~~~\n### 安裝插件\n如果你沒有 pug 以及 stylus 的渲染器，請下載安裝：\n~~~shell\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n~~~\n### butterfly的相关配置\n相关配置请看文档，有详细的解释。在此不作赘述。\n\n## 可能会产生的错误\n错误的原因可能很多，解决方法并不一定有用。在这里列出我碰到的问题。\n因为github连接不稳定，所以要有耐心。\n### OpenSSL SSL_read: Connection was aborted, errno 10053\n原因\nGit默认限制推送的大小，运行命令更改限制大小\n解决方法\n~~~shell\ngit config --global http.postBuffer 524288000\n~~~\n### Failed to connect to github.com port 443: Timed out\n原因\n代理的设置问题\n解决方法：\n进入项目目录中，使用命令行取消代理设置：\n~~~shell\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n~~~","slug":"使用hexo框架在github-io上搭建博客网站","published":1,"updated":"2022-08-15T08:40:02.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbdl000ko8tte7ui9ant","content":"<h2 id=\"安装相关软件\"><a href=\"#安装相关软件\" class=\"headerlink\" title=\"安装相关软件\"></a>安装相关软件</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。<br><del>据说他开发git只花了两周时间，大佬不愧是大佬。</del><br><a class=\"link\"   href=\"https://git-scm.com/\" >git官网<i class=\"fas fa-external-link-alt\"></i></a><br>windows：到<a class=\"link\"   href=\"https://gitforwindows.org/\" >git官网<i class=\"fas fa-external-link-alt\"></i></a>上下载，下载后会有一个Git Bash的命令行工具，用这个工具就可以使用git了。<br>linux：因为开发git就是为了管理linux内核开发的，所以linux的非常简单，只需要下面这行代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<p>当然你像我一样使用IDE自动安装<br>安装完成后，可以使用<code>git --version</code>查看版本</p>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><p>因为Hexo是基于nodeJS编写的，所以需要安装一下nodejs和里面的npm工具。<br>windows：到<a class=\"link\"   href=\"https://nodejs.org/en/download/\" >nodejs下载地址<i class=\"fas fa-external-link-alt\"></i></a>，选择LTS版本（稳定版本）就行了。<br>linux：使用以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n<p>安装完后，使用<code>node -v</code> 和 <code>npm -v</code> 查看版本</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>可以参考<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a>，真的非常好用<br>所有必备的应用程序（git和nodejs）安装完成后，即可使用 npm 安装 Hexo。<br>全局安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于github-pages\"><a href=\"#关于github-pages\" class=\"headerlink\" title=\"关于github pages\"></a>关于github pages</h2><p>可以参考<a class=\"link\"   href=\"https://docs.github.com/cn\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"创建github仓库\"><a href=\"#创建github仓库\" class=\"headerlink\" title=\"创建github仓库\"></a>创建github仓库</h3><p>新建一个名字为<strong>username.github.io</strong>的仓库<br>仓库名必须为<strong>username.github.io</strong>，否则不会被github识别。其中username为github账户的用户名。</p>\n<h3 id=\"生成ssh添加到github（如果之前没有添加过的话）\"><a href=\"#生成ssh添加到github（如果之前没有添加过的话）\" class=\"headerlink\" title=\"生成ssh添加到github（如果之前没有添加过的话）\"></a>生成ssh添加到github（如果之前没有添加过的话）</h3><p>在git bash中，配置账户信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourname&quot;</span><br><span class=\"line\">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<p>这里的yourname为GitHub用户名，youremail为GitHub的邮箱。<del>不要瞎写，不然无法push到github</del></p>\n<p>可以查看配置的信息。<del>以防写错</del></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<p>然后创建SSH，一路回车。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<p>创建完成后，会生成C:\\Users\\Username.ssh文件夹<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6%E5%9C%A8github-io%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/ssh.png\"\n                      alt=\".shh文件夹\"\n                ><br>其中id_rsa是生成的私钥，id_rsa.pub是生成的公钥。将id_rsa.pub用记事本打开，复制其内容，添加到github的设置中。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6%E5%9C%A8github-io%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/githubSSHKey.png\"\n                      alt=\".githubSSHKey\"\n                ><br>添加完成后，在gitbash中查看是否添加成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>成功会有 <strong>Hi username/username.github.io! You’ve successfully authenticated, but GitHub does not provide shell access.</strong> 这句话。</p>\n<h2 id=\"关于hexo\"><a href=\"#关于hexo\" class=\"headerlink\" title=\"关于hexo\"></a>关于hexo</h2><h3 id=\"hexo的初始化\"><a href=\"#hexo的初始化\" class=\"headerlink\" title=\"hexo的初始化\"></a>hexo的初始化</h3><p>前面给的<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a>也包含了hexo的配置，以及命令等其他相关的功能。 <del>所以这里就简单写一下。</del><br>执行下列命令，Hexo将会在当前目录的指定文件夹中新建所需要的文件，请确保指定文件夹为空。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>新建完成后，指定文件夹下会生成一些文件，其中：<br>_config.yml——hexo的配置文件<br>package.json——应用程序信息<br>scaffolds——模板文件夹，创建文章时，会根据模板来创建<br>source——资源文件夹，写的markdown和图片资源什么的都在这<br>themes——主题文件夹，比如我在使用的butterfly主题就放在这</p>\n<h3 id=\"将hexo部署到GitHub\"><a href=\"#将hexo部署到GitHub\" class=\"headerlink\" title=\"将hexo部署到GitHub\"></a>将hexo部署到GitHub</h3><p>将hexo生成的文章部署到GitHub上<br>打开hexo配置文件 _config.yml，翻到最后，修改deploy<br>其中YourgithubName是你的GitHub账户，branch是分支，一般设置为main或者master</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p>修改完后，需要先安装deploy-git（部署的命令），这样才能用命令部署到GitHub。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>之后是hexo的部署命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>其中 hexo clean 清除了你之前生成的东西。<br>hexo generate 生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写<br>hexo generate 和 hexo deploy 也可以合并写成 <code>hexo g -d</code> 或者 <code>hexo d -g</code></p>\n<p>出现 <strong>INFO  Deploy done: git</strong> 时，说明部署成功了。<br>稍微等一会，便可以在 <a class=\"link\"   href=\"https://yourname.github.io/\" >https://yourname.github.io<i class=\"fas fa-external-link-alt\"></i></a> 这个网站看到你的博客了，其中yourname是github的用户名。<br>刷新显示404，请不要着急。<del>心急吃不了热豆腐</del></p>\n<p>到这里，使用hexo在github.io上搭建博客网站就成功了。<br>就可以开始写博客了。<br>但，是不是有点单调。所以我们可以使用主题来装饰他，来实现更多的功能。 github官方建议你使用博客生成工具 Jekyll。</p>\n<h2 id=\"关于hexo的主题butterfly\"><a href=\"#关于hexo的主题butterfly\" class=\"headerlink\" title=\"关于hexo的主题butterfly\"></a>关于hexo的主题butterfly</h2><p>可以参考<a class=\"link\"   href=\"https://butterfly.js.org/posts/21cfbf15/\" >官方安装文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"安装butterfly\"><a href=\"#安装butterfly\" class=\"headerlink\" title=\"安装butterfly\"></a>安装butterfly</h3><p>在hexo的根目录里<br>github：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>\n<p>gitee：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用主题\"><a href=\"#应用主题\" class=\"headerlink\" title=\"应用主题\"></a>应用主题</h3><p>修改 Hexo 根目录下的 _config.yml，把主题改为butterfly</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">butterfly</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安裝插件\"><a href=\"#安裝插件\" class=\"headerlink\" title=\"安裝插件\"></a>安裝插件</h3><p>如果你沒有 pug 以及 stylus 的渲染器，請下載安裝：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"butterfly的相关配置\"><a href=\"#butterfly的相关配置\" class=\"headerlink\" title=\"butterfly的相关配置\"></a>butterfly的相关配置</h3><p>相关配置请看文档，有详细的解释。在此不作赘述。</p>\n<h2 id=\"可能会产生的错误\"><a href=\"#可能会产生的错误\" class=\"headerlink\" title=\"可能会产生的错误\"></a>可能会产生的错误</h2><p>错误的原因可能很多，解决方法并不一定有用。在这里列出我碰到的问题。<br>因为github连接不稳定，所以要有耐心。</p>\n<h3 id=\"OpenSSL-SSL-read-Connection-was-aborted-errno-10053\"><a href=\"#OpenSSL-SSL-read-Connection-was-aborted-errno-10053\" class=\"headerlink\" title=\"OpenSSL SSL_read: Connection was aborted, errno 10053\"></a>OpenSSL SSL_read: Connection was aborted, errno 10053</h3><p>原因<br>Git默认限制推送的大小，运行命令更改限制大小<br>解决方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure>\n<h3 id=\"Failed-to-connect-to-github-com-port-443-Timed-out\"><a href=\"#Failed-to-connect-to-github-com-port-443-Timed-out\" class=\"headerlink\" title=\"Failed to connect to github.com port 443: Timed out\"></a>Failed to connect to github.com port 443: Timed out</h3><p>原因<br>代理的设置问题<br>解决方法：<br>进入项目目录中，使用命令行取消代理设置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"安装相关软件\"><a href=\"#安装相关软件\" class=\"headerlink\" title=\"安装相关软件\"></a>安装相关软件</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。<br><del>据说他开发git只花了两周时间，大佬不愧是大佬。</del><br><a class=\"link\"   href=\"https://git-scm.com/\" >git官网<i class=\"fas fa-external-link-alt\"></i></a><br>windows：到<a class=\"link\"   href=\"https://gitforwindows.org/\" >git官网<i class=\"fas fa-external-link-alt\"></i></a>上下载，下载后会有一个Git Bash的命令行工具，用这个工具就可以使用git了。<br>linux：因为开发git就是为了管理linux内核开发的，所以linux的非常简单，只需要下面这行代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<p>当然你像我一样使用IDE自动安装<br>安装完成后，可以使用<code>git --version</code>查看版本</p>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><p>因为Hexo是基于nodeJS编写的，所以需要安装一下nodejs和里面的npm工具。<br>windows：到<a class=\"link\"   href=\"https://nodejs.org/en/download/\" >nodejs下载地址<i class=\"fas fa-external-link-alt\"></i></a>，选择LTS版本（稳定版本）就行了。<br>linux：使用以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt-get install npm</span><br></pre></td></tr></table></figure>\n<p>安装完后，使用<code>node -v</code> 和 <code>npm -v</code> 查看版本</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>可以参考<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a>，真的非常好用<br>所有必备的应用程序（git和nodejs）安装完成后，即可使用 npm 安装 Hexo。<br>全局安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于github-pages\"><a href=\"#关于github-pages\" class=\"headerlink\" title=\"关于github pages\"></a>关于github pages</h2><p>可以参考<a class=\"link\"   href=\"https://docs.github.com/cn\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"创建github仓库\"><a href=\"#创建github仓库\" class=\"headerlink\" title=\"创建github仓库\"></a>创建github仓库</h3><p>新建一个名字为<strong>username.github.io</strong>的仓库<br>仓库名必须为<strong>username.github.io</strong>，否则不会被github识别。其中username为github账户的用户名。</p>\n<h3 id=\"生成ssh添加到github（如果之前没有添加过的话）\"><a href=\"#生成ssh添加到github（如果之前没有添加过的话）\" class=\"headerlink\" title=\"生成ssh添加到github（如果之前没有添加过的话）\"></a>生成ssh添加到github（如果之前没有添加过的话）</h3><p>在git bash中，配置账户信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;yourname&quot;</span><br><span class=\"line\">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<p>这里的yourname为GitHub用户名，youremail为GitHub的邮箱。<del>不要瞎写，不然无法push到github</del></p>\n<p>可以查看配置的信息。<del>以防写错</del></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<p>然后创建SSH，一路回车。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n<p>创建完成后，会生成C:\\Users\\Username.ssh文件夹<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6%E5%9C%A8github-io%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/ssh.png\"\n                      alt=\".shh文件夹\"\n                ><br>其中id_rsa是生成的私钥，id_rsa.pub是生成的公钥。将id_rsa.pub用记事本打开，复制其内容，添加到github的设置中。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E4%BD%BF%E7%94%A8hexo%E6%A1%86%E6%9E%B6%E5%9C%A8github-io%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/githubSSHKey.png\"\n                      alt=\".githubSSHKey\"\n                ><br>添加完成后，在gitbash中查看是否添加成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>成功会有 <strong>Hi username/username.github.io! You’ve successfully authenticated, but GitHub does not provide shell access.</strong> 这句话。</p>\n<h2 id=\"关于hexo\"><a href=\"#关于hexo\" class=\"headerlink\" title=\"关于hexo\"></a>关于hexo</h2><h3 id=\"hexo的初始化\"><a href=\"#hexo的初始化\" class=\"headerlink\" title=\"hexo的初始化\"></a>hexo的初始化</h3><p>前面给的<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a>也包含了hexo的配置，以及命令等其他相关的功能。 <del>所以这里就简单写一下。</del><br>执行下列命令，Hexo将会在当前目录的指定文件夹中新建所需要的文件，请确保指定文件夹为空。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>新建完成后，指定文件夹下会生成一些文件，其中：<br>_config.yml——hexo的配置文件<br>package.json——应用程序信息<br>scaffolds——模板文件夹，创建文章时，会根据模板来创建<br>source——资源文件夹，写的markdown和图片资源什么的都在这<br>themes——主题文件夹，比如我在使用的butterfly主题就放在这</p>\n<h3 id=\"将hexo部署到GitHub\"><a href=\"#将hexo部署到GitHub\" class=\"headerlink\" title=\"将hexo部署到GitHub\"></a>将hexo部署到GitHub</h3><p>将hexo生成的文章部署到GitHub上<br>打开hexo配置文件 _config.yml，翻到最后，修改deploy<br>其中YourgithubName是你的GitHub账户，branch是分支，一般设置为main或者master</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p>修改完后，需要先安装deploy-git（部署的命令），这样才能用命令部署到GitHub。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>之后是hexo的部署命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>其中 hexo clean 清除了你之前生成的东西。<br>hexo generate 生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写<br>hexo generate 和 hexo deploy 也可以合并写成 <code>hexo g -d</code> 或者 <code>hexo d -g</code></p>\n<p>出现 <strong>INFO  Deploy done: git</strong> 时，说明部署成功了。<br>稍微等一会，便可以在 <a class=\"link\"   href=\"https://yourname.github.io/\" >https://yourname.github.io<i class=\"fas fa-external-link-alt\"></i></a> 这个网站看到你的博客了，其中yourname是github的用户名。<br>刷新显示404，请不要着急。<del>心急吃不了热豆腐</del></p>\n<p>到这里，使用hexo在github.io上搭建博客网站就成功了。<br>就可以开始写博客了。<br>但，是不是有点单调。所以我们可以使用主题来装饰他，来实现更多的功能。 github官方建议你使用博客生成工具 Jekyll。</p>\n<h2 id=\"关于hexo的主题butterfly\"><a href=\"#关于hexo的主题butterfly\" class=\"headerlink\" title=\"关于hexo的主题butterfly\"></a>关于hexo的主题butterfly</h2><p>可以参考<a class=\"link\"   href=\"https://butterfly.js.org/posts/21cfbf15/\" >官方安装文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"安装butterfly\"><a href=\"#安装butterfly\" class=\"headerlink\" title=\"安装butterfly\"></a>安装butterfly</h3><p>在hexo的根目录里<br>github：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>\n<p>gitee：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://gitee.com/immyw/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用主题\"><a href=\"#应用主题\" class=\"headerlink\" title=\"应用主题\"></a>应用主题</h3><p>修改 Hexo 根目录下的 _config.yml，把主题改为butterfly</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">butterfly</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"安裝插件\"><a href=\"#安裝插件\" class=\"headerlink\" title=\"安裝插件\"></a>安裝插件</h3><p>如果你沒有 pug 以及 stylus 的渲染器，請下載安裝：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n<h3 id=\"butterfly的相关配置\"><a href=\"#butterfly的相关配置\" class=\"headerlink\" title=\"butterfly的相关配置\"></a>butterfly的相关配置</h3><p>相关配置请看文档，有详细的解释。在此不作赘述。</p>\n<h2 id=\"可能会产生的错误\"><a href=\"#可能会产生的错误\" class=\"headerlink\" title=\"可能会产生的错误\"></a>可能会产生的错误</h2><p>错误的原因可能很多，解决方法并不一定有用。在这里列出我碰到的问题。<br>因为github连接不稳定，所以要有耐心。</p>\n<h3 id=\"OpenSSL-SSL-read-Connection-was-aborted-errno-10053\"><a href=\"#OpenSSL-SSL-read-Connection-was-aborted-errno-10053\" class=\"headerlink\" title=\"OpenSSL SSL_read: Connection was aborted, errno 10053\"></a>OpenSSL SSL_read: Connection was aborted, errno 10053</h3><p>原因<br>Git默认限制推送的大小，运行命令更改限制大小<br>解决方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure>\n<h3 id=\"Failed-to-connect-to-github-com-port-443-Timed-out\"><a href=\"#Failed-to-connect-to-github-com-port-443-Timed-out\" class=\"headerlink\" title=\"Failed to connect to github.com port 443: Timed out\"></a>Failed to connect to github.com port 443: Timed out</h3><p>原因<br>代理的设置问题<br>解决方法：<br>进入项目目录中，使用命令行取消代理设置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>"},{"title":"关于Schiphalast注册功能开发中的bug","date":"2022-08-12T04:50:52.000Z","_content":"\n## 简介\n\n这个功能写成了一个springboot项目，部署在taptap的云引擎上。\n[taptap云引擎官方文档](https://developer.taptap.com/docs/sdk/engine/overview/)\n使用了官方提供的命令行工具，创建项目和部署到云引擎。[命令行文档](https://developer.taptap.com/docs/sdk/engine/cli/)\n他生成的项目实际是springboot的改版，添加了一些他们独有的功能。比如云函数等。\n实际开发与平时一致（~~他们提供的功能其实基本没用到，或许以后会用到。~~\n\n另外，要吐槽的一个点就是：\n项目生成默认配置使用的是Java11，但是部署到云引擎时，报错。\n换成Java8后正常运行。\n版本问题，影响不大。~~新版任你发，我用Java 8。~~\n\n## 可复用模块\n\n### 从请求中获取ip地址\n\nRemote Address：\nRemote Address代表HTTP请求的远程地址，即请求的源地址。http协议在三次握手时时用的就是这个Remote Address地址，发送响应报文时也是使用的这个Remote Address地址。\n所以，Remote Address地址是不能伪造的，否则请求者会收不到响应报文。\n> 但是，**http请求经过代理服务器转发时，用户真实ip会丢失。**所以有了`X-Forwarded-For`获取ip的方式。\n\nX-Forwarded-For：\n为了避免真实ip的丢失，代理服务器会增加叫X-Forwarded-For的头信息。将客户端ip记录到其中，以保证服务器可以获取到客户端真实ip。\nX-Forwarded-For是一个拓展头。虽然HTTP/1.1（RFC 2616）协议并没有对它的定义，但它已经成为事实上的标准（都在用\nX-Forwarded-For请求头格式：`X-Forwarded-For: client, proxy1, proxy2`\n第一个便是请求的原始ip，后面则是代理服务器的ip。\n> 由于请求头可以伪造，所以**不要相信请求头中携带的ip信息**。\n\n> 直接对外提供服务的 Web 应用，在进行与安全有关的操作时，只能通过 Remote Address 获取 IP，不能相信任何请求头；\n> 使用 Nginx 等 Web Server 进行反向代理的 Web 应用，在配置正确的前提下，要用 X-Forwarded-For 最后一节 或 X-Real-IP 来获取 IP（因为 Remote Address 得到的是 Nginx 所在服务器的内网 IP）；同时还应该禁止 Web 应用直接对外提供服务；\n> 在与安全无关的场景，例如通过 IP 显示所在地天气，可以从 X-Forwarded-For 靠前的位置获取 IP，但是需要校验 IP 格式合法性；\n\n参考文章：\n[关于X-Forwarded-For的介绍](https://www.runoob.com/w3cnote/http-x-forwarded-for.html)\n[HTTP 请求头中的 X-Forwarded-For](https://imququ.com/post/x-forwarded-for-header-in-http.html)\n\n代码：\n~~~java\n    /**\n     * 从HttpServletRequest中获取ip\n     * @param request 请求\n     * @return ip\n     */\n    public static String getIP(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"X-Forwarded-For\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"X-Real-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n            if (\"127.0.0.1\".equalsIgnoreCase(ip) || \"0:0:0:0:0:0:0:1\".equalsIgnoreCase(ip)) {\n                // 根据网卡取本机配置的 IP\n                InetAddress iNet = null;\n                try {\n                    iNet = InetAddress.getLocalHost();\n                } catch (UnknownHostException e) {\n                    e.printStackTrace();\n                }\n                if (iNet != null)\n                    ip = iNet.getHostAddress();\n            }\n        }\n        // 对于通过多个代理的情况，分割出第一个 IP\n        if (ip != null && ip.length() > 15) {\n            if (ip.indexOf(\",\") > 0) {\n                ip = ip.substring(0, ip.indexOf(\",\"));\n            }\n        }\n        return \"0:0:0:0:0:0:0:1\".equals(ip) ? \"127.0.0.1\" : ip;\n    }\n~~~\n\n### 密码的md5加密\n\nMD5，全称 消息摘要算法第五版（Message Digest Algorithm 5）\n不多介绍，详见[MD5百度百科](https://baike.baidu.com/item/MD5/212708)\n\n关于加密算法的改进：\n1. 加盐\n    即**在原来的明文中加入一组随机串**，再通过加密算法加密，将密文存入数据库。\n2. 加次数\n    即多加密几次，增加破解难度。不过会消耗更多计算资源。\n\njdk自带api：\n~~~java\n    /**\n     * md5加密\n     * @param password 需要加密的字符串\n     * @return 加密后的字符串\n     */\n    public static String md5(String password){\n        String hashedPwd = null;\n        try {\n            //生成MessageDigest对象，指定使用的消息摘要算法\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            //传入需要计算的字符串，传入参数为字节或字节数组\n            md.update(password.getBytes());\n            /*\n            digest()计算消息摘要，返回值为字节数组。16个字节，128bit\n            通过BigInteger将其转换成32位的16进制数（每个字节用两个16进制数表示）\n            或者16位16进制数，去掉32位前后各8位\n             */\n            hashedPwd = new BigInteger(1, md.digest()).toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return hashedPwd;\n    }\n~~~\n\nspring的DigestUtils工具类\n~~~java\n    public static String md5(String password) {\n        // 基于spring框架中的DigestUtils工具类进行密码加密\n        return DigestUtils.md5DigestAsHex((password).getBytes());\n    }\n~~~\n\n### 发送mail邮件\n\n使用JavaMail发送邮件\n\n依赖：\n~~~xml\n        <!--javamail的依赖-->\n        <dependency>\n            <groupId>javax.mail</groupId>\n            <artifactId>mail</artifactId>\n            <version>1.4.7</version>\n        </dependency>\n~~~\n代码：\n~~~java\n    //邮件服务器地址（比如smtp.qq.com\n    private static final String mailHost = null;\n    //邮件传输协议（通常为smtp\n    private static final String mailTransportProtocol = \"smtp\";\n    //邮箱认证（即登录\n    private static final String mailSmtpAuth = \"true\";\n    //发件人邮箱地址\n    private static final String fromEmail = null;\n    //发件人邮箱密码\n    private static final String password = null;\n    /**\n     * 发送邮件\n     * @param toEmail 发往邮箱地址\n     */\n    public static void sendMail(String toEmail){\n        //发送的内容（可以是dom文档\n        String sendContent = \"test mail\";\n        //创建，发送邮件\n        Properties prop = new Properties();\n        prop.setProperty(\"mail.host\", mailHost);\n        prop.setProperty(\"mail.transport.protocol\", mailTransportProtocol);\n        prop.setProperty(\"mail.smtp.auth\", mailSmtpAuth);\n        //使用JavaMail发送邮件的5个步骤\n        //1、创建session\n        Session session = Session.getInstance(prop);\n        //2、通过session得到transport对象\n        Transport ts;\n        try {\n            ts = session.getTransport();\n            //3、使用邮箱的用户名和密码连上邮件服务器，发送邮件时，发件人需要提交邮箱的用户名和密码给smtp服务器，用户名和密码都通过验证之后才能够正常发送邮件给收件人。\n            ts.connect(mailHost, fromEmail, password);\n            //4、创建邮件\n            MimeMessage message = new MimeMessage(session);\n            //指明邮件的发件人\n            message.setFrom(new InternetAddress(fromEmail));\n            //指明邮件的收件人\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(toEmail));\n            //邮件的标题\n            message.setSubject(\"标题\");\n            //邮件的文本内容\n            message.setContent(sendContent, \"text/html;charset=UTF-8\");\n            //5、发送邮件\n            ts.sendMessage(message, message.getAllRecipients());\n            ts.close();\n        } catch (MessagingException e) {\n            e.printStackTrace();\n        }\n    }\n~~~\n\n参考文章：\n[使用JavaMail创建邮件和发送邮件](https://www.cnblogs.com/xdp-gacl/p/4216311.html)\n\n---\n\n使用springboot集成的mail模块\n\n依赖：\n~~~xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-mail</artifactId>\n        </dependency>\n~~~\n配置：\n~~~properties\nspring.mail.protocol=\nspring.mail.host=\nspring.mail.username=\nspring.mail.password=\n~~~\n代码：\n~~~java\n    @Resource\n    private JavaMailSender javaMailSender;\n    @Value(\"${fromEmail}\")\n    private String fromEmail;\n    /**\n     * 发送邮件\n     * @param toEmail 发往邮箱地址\n     */\n    public static void sendMail(String toEmail){\n        //发送的内容（可以是dom文档\n        String sendContent = \"test mail\";\n        try {\n            MimeMessageHelper messageHelper = new MimeMessageHelper(javaMailSender.createMimeMessage(), true);\n            messageHelper.setFrom(fromEmail);\n            messageHelper.setTo(toEmail);\n            messageHelper.setSubject(\"标题\");\n            messageHelper.setText(sendContent, true);\n            javaMailSender.send(messageHelper.getMimeMessage());\n        } catch (MessagingException e) {\n            e.printStackTrace();\n        }\n    }\n~~~\n\n### jdbc数据库连接池（鸽了）\n\n因为建立数据库连接与关闭数据库连接是非常耗时的事情，如果每次查询都建立连接、关闭连接会产生很大的性能开销。\n所以有了连接池的出现来解决这一问题。\n即在程序启动时，初始化连接池（连接数据库，创建多个连接）。在需要使用时从连接池中获取连接，使用结束放回连接池。\n以减少性能开销。\n\n代码：\n~~~\n先鸽了\n~~~\n\n附DataSource的产出背景：\n[DataSource，一个被严重低估的接口](https://www.51cto.com/article/663312.html)\n\n## bug及解决方案\n\n### session变化\n\n#### 现象\najax请求及其余请求在前几次请求时，session会发送变化。导致存在session中的数据获取不到。\n\n#### 原因\n通过HttpServletRequest获取session对象时，使用 `request.getSession()` 方法。\ngetSession方法会检测当前是否有session存在，默认**不存在会创建一个新的session**，存在则返回。\n\najax请求跨域请求默认不携带cookie信息。即获取不到session\n\n#### 解决方案（未解决）\n\n调用getSession方法时传入参数false或true\n例如：`request.getSession(false);`\n为true时，先查看请求时是否有sessionID。如果没有，则创建一个新的session对象。如果有则根据sessionID查找对应的session对象，找到了就返回该session对象，没找到就创建新的session对象。\n为false时，先查看请求中是否有sessionID，没有则返回null。有则根据sessionID查找对应的session对象，找到了就返回该session对象，没找到就创建新的session对象。\n**默认为true**\n\n建议：\n往session中写入参数时使用 `request.getSession();`\n从session中读取参数时使用 `request.getSession(false);`\n\n附session其他操作：\n设置值：`session.setAttribute(String name,Object obj);`\n读取值：`session.getAttribute(String name);`\n删除session：`session.invalidate();`\n\n---\n\n让ajax请求携带参数\n添加属性：`xhr.withCredentials=true`\n\n附js原生实现ajax请求：\n~~~javascript\nvar Ajax = {\n        get: function (url, callback) {\n            // XMLHttpRequest对象用于在后台与服务器交换数据\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', url, false);\n            xhr.onreadystatechange = function () {\n                // readyState == 4说明请求已完成\n                if (xhr.readyState == 4) {\n                    if (xhr.status == 200 || xhr.status == 304) {\n                        console.log(xhr.responseText);\n                        callback(xhr.responseText);\n                    }\n                }\n            }\n            xhr.send();\n        },\n\n        // data应为'a=a1&b=b1'这种字符串格式，在jq里如果data为对象会自动将对象转成这种字符串格式\n        post: function (url, data, callback) {\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', url, false);\n            // 跨域携带cookie\n            xhr.withCredentials=true\n            // 添加http头，发送信息至服务器时内容编码类型\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200 || xhr.status === 304) {\n                        // console.log(xhr.responseText);\n                        callback(xhr.responseText);\n                    }\n                }\n            }\n            xhr.send(data);\n        }\n    }\n~~~\n---\n\n说明：\n这个bug其实并未解决，因为部署到tap云引擎时，是一个springboot项目。所有的请求应该都是同源的，不会出现跨域的情况。\n而session变化原因，就是getSession会创建新的session对象。\n将getSession传入false，同时改完ajax属性后，这个bug依旧会出现。\n在部署到生产环境后，依旧有用户偶尔会出现了session为null的情况。\n> 2022-08-12 暂未解决。\n\n## 总结\n\n第一次使用平台提供的自动化的部署和管理功能。\n有部署状态（预备环境和生产环境）、请求统计、日志、及环境变量各种设置等。\ntaptap云服务还是很成熟的。相比自己在腾讯云服务器上使用要方便很多，不管是部署还是监控。\n官方文档也相对很齐全，参看文档来使用是完全可以的。\n","source":"_posts/关于Schiphalast注册功能开发中的bug.md","raw":"---\ntitle: 关于Schiphalast注册功能开发中的bug\ndate: 2022-08-12 12:50:52\ntags:\n- bug\n- java\n- MD5\n- ip\n- session\n- mail\n- 数据库连接池\ncategories:\n- 编程记录\n---\n\n## 简介\n\n这个功能写成了一个springboot项目，部署在taptap的云引擎上。\n[taptap云引擎官方文档](https://developer.taptap.com/docs/sdk/engine/overview/)\n使用了官方提供的命令行工具，创建项目和部署到云引擎。[命令行文档](https://developer.taptap.com/docs/sdk/engine/cli/)\n他生成的项目实际是springboot的改版，添加了一些他们独有的功能。比如云函数等。\n实际开发与平时一致（~~他们提供的功能其实基本没用到，或许以后会用到。~~\n\n另外，要吐槽的一个点就是：\n项目生成默认配置使用的是Java11，但是部署到云引擎时，报错。\n换成Java8后正常运行。\n版本问题，影响不大。~~新版任你发，我用Java 8。~~\n\n## 可复用模块\n\n### 从请求中获取ip地址\n\nRemote Address：\nRemote Address代表HTTP请求的远程地址，即请求的源地址。http协议在三次握手时时用的就是这个Remote Address地址，发送响应报文时也是使用的这个Remote Address地址。\n所以，Remote Address地址是不能伪造的，否则请求者会收不到响应报文。\n> 但是，**http请求经过代理服务器转发时，用户真实ip会丢失。**所以有了`X-Forwarded-For`获取ip的方式。\n\nX-Forwarded-For：\n为了避免真实ip的丢失，代理服务器会增加叫X-Forwarded-For的头信息。将客户端ip记录到其中，以保证服务器可以获取到客户端真实ip。\nX-Forwarded-For是一个拓展头。虽然HTTP/1.1（RFC 2616）协议并没有对它的定义，但它已经成为事实上的标准（都在用\nX-Forwarded-For请求头格式：`X-Forwarded-For: client, proxy1, proxy2`\n第一个便是请求的原始ip，后面则是代理服务器的ip。\n> 由于请求头可以伪造，所以**不要相信请求头中携带的ip信息**。\n\n> 直接对外提供服务的 Web 应用，在进行与安全有关的操作时，只能通过 Remote Address 获取 IP，不能相信任何请求头；\n> 使用 Nginx 等 Web Server 进行反向代理的 Web 应用，在配置正确的前提下，要用 X-Forwarded-For 最后一节 或 X-Real-IP 来获取 IP（因为 Remote Address 得到的是 Nginx 所在服务器的内网 IP）；同时还应该禁止 Web 应用直接对外提供服务；\n> 在与安全无关的场景，例如通过 IP 显示所在地天气，可以从 X-Forwarded-For 靠前的位置获取 IP，但是需要校验 IP 格式合法性；\n\n参考文章：\n[关于X-Forwarded-For的介绍](https://www.runoob.com/w3cnote/http-x-forwarded-for.html)\n[HTTP 请求头中的 X-Forwarded-For](https://imququ.com/post/x-forwarded-for-header-in-http.html)\n\n代码：\n~~~java\n    /**\n     * 从HttpServletRequest中获取ip\n     * @param request 请求\n     * @return ip\n     */\n    public static String getIP(HttpServletRequest request) {\n        String ip = request.getHeader(\"x-forwarded-for\");\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"X-Forwarded-For\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"WL-Proxy-Client-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"X-Real-IP\");\n        }\n        if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n            if (\"127.0.0.1\".equalsIgnoreCase(ip) || \"0:0:0:0:0:0:0:1\".equalsIgnoreCase(ip)) {\n                // 根据网卡取本机配置的 IP\n                InetAddress iNet = null;\n                try {\n                    iNet = InetAddress.getLocalHost();\n                } catch (UnknownHostException e) {\n                    e.printStackTrace();\n                }\n                if (iNet != null)\n                    ip = iNet.getHostAddress();\n            }\n        }\n        // 对于通过多个代理的情况，分割出第一个 IP\n        if (ip != null && ip.length() > 15) {\n            if (ip.indexOf(\",\") > 0) {\n                ip = ip.substring(0, ip.indexOf(\",\"));\n            }\n        }\n        return \"0:0:0:0:0:0:0:1\".equals(ip) ? \"127.0.0.1\" : ip;\n    }\n~~~\n\n### 密码的md5加密\n\nMD5，全称 消息摘要算法第五版（Message Digest Algorithm 5）\n不多介绍，详见[MD5百度百科](https://baike.baidu.com/item/MD5/212708)\n\n关于加密算法的改进：\n1. 加盐\n    即**在原来的明文中加入一组随机串**，再通过加密算法加密，将密文存入数据库。\n2. 加次数\n    即多加密几次，增加破解难度。不过会消耗更多计算资源。\n\njdk自带api：\n~~~java\n    /**\n     * md5加密\n     * @param password 需要加密的字符串\n     * @return 加密后的字符串\n     */\n    public static String md5(String password){\n        String hashedPwd = null;\n        try {\n            //生成MessageDigest对象，指定使用的消息摘要算法\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            //传入需要计算的字符串，传入参数为字节或字节数组\n            md.update(password.getBytes());\n            /*\n            digest()计算消息摘要，返回值为字节数组。16个字节，128bit\n            通过BigInteger将其转换成32位的16进制数（每个字节用两个16进制数表示）\n            或者16位16进制数，去掉32位前后各8位\n             */\n            hashedPwd = new BigInteger(1, md.digest()).toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return hashedPwd;\n    }\n~~~\n\nspring的DigestUtils工具类\n~~~java\n    public static String md5(String password) {\n        // 基于spring框架中的DigestUtils工具类进行密码加密\n        return DigestUtils.md5DigestAsHex((password).getBytes());\n    }\n~~~\n\n### 发送mail邮件\n\n使用JavaMail发送邮件\n\n依赖：\n~~~xml\n        <!--javamail的依赖-->\n        <dependency>\n            <groupId>javax.mail</groupId>\n            <artifactId>mail</artifactId>\n            <version>1.4.7</version>\n        </dependency>\n~~~\n代码：\n~~~java\n    //邮件服务器地址（比如smtp.qq.com\n    private static final String mailHost = null;\n    //邮件传输协议（通常为smtp\n    private static final String mailTransportProtocol = \"smtp\";\n    //邮箱认证（即登录\n    private static final String mailSmtpAuth = \"true\";\n    //发件人邮箱地址\n    private static final String fromEmail = null;\n    //发件人邮箱密码\n    private static final String password = null;\n    /**\n     * 发送邮件\n     * @param toEmail 发往邮箱地址\n     */\n    public static void sendMail(String toEmail){\n        //发送的内容（可以是dom文档\n        String sendContent = \"test mail\";\n        //创建，发送邮件\n        Properties prop = new Properties();\n        prop.setProperty(\"mail.host\", mailHost);\n        prop.setProperty(\"mail.transport.protocol\", mailTransportProtocol);\n        prop.setProperty(\"mail.smtp.auth\", mailSmtpAuth);\n        //使用JavaMail发送邮件的5个步骤\n        //1、创建session\n        Session session = Session.getInstance(prop);\n        //2、通过session得到transport对象\n        Transport ts;\n        try {\n            ts = session.getTransport();\n            //3、使用邮箱的用户名和密码连上邮件服务器，发送邮件时，发件人需要提交邮箱的用户名和密码给smtp服务器，用户名和密码都通过验证之后才能够正常发送邮件给收件人。\n            ts.connect(mailHost, fromEmail, password);\n            //4、创建邮件\n            MimeMessage message = new MimeMessage(session);\n            //指明邮件的发件人\n            message.setFrom(new InternetAddress(fromEmail));\n            //指明邮件的收件人\n            message.setRecipient(Message.RecipientType.TO, new InternetAddress(toEmail));\n            //邮件的标题\n            message.setSubject(\"标题\");\n            //邮件的文本内容\n            message.setContent(sendContent, \"text/html;charset=UTF-8\");\n            //5、发送邮件\n            ts.sendMessage(message, message.getAllRecipients());\n            ts.close();\n        } catch (MessagingException e) {\n            e.printStackTrace();\n        }\n    }\n~~~\n\n参考文章：\n[使用JavaMail创建邮件和发送邮件](https://www.cnblogs.com/xdp-gacl/p/4216311.html)\n\n---\n\n使用springboot集成的mail模块\n\n依赖：\n~~~xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-mail</artifactId>\n        </dependency>\n~~~\n配置：\n~~~properties\nspring.mail.protocol=\nspring.mail.host=\nspring.mail.username=\nspring.mail.password=\n~~~\n代码：\n~~~java\n    @Resource\n    private JavaMailSender javaMailSender;\n    @Value(\"${fromEmail}\")\n    private String fromEmail;\n    /**\n     * 发送邮件\n     * @param toEmail 发往邮箱地址\n     */\n    public static void sendMail(String toEmail){\n        //发送的内容（可以是dom文档\n        String sendContent = \"test mail\";\n        try {\n            MimeMessageHelper messageHelper = new MimeMessageHelper(javaMailSender.createMimeMessage(), true);\n            messageHelper.setFrom(fromEmail);\n            messageHelper.setTo(toEmail);\n            messageHelper.setSubject(\"标题\");\n            messageHelper.setText(sendContent, true);\n            javaMailSender.send(messageHelper.getMimeMessage());\n        } catch (MessagingException e) {\n            e.printStackTrace();\n        }\n    }\n~~~\n\n### jdbc数据库连接池（鸽了）\n\n因为建立数据库连接与关闭数据库连接是非常耗时的事情，如果每次查询都建立连接、关闭连接会产生很大的性能开销。\n所以有了连接池的出现来解决这一问题。\n即在程序启动时，初始化连接池（连接数据库，创建多个连接）。在需要使用时从连接池中获取连接，使用结束放回连接池。\n以减少性能开销。\n\n代码：\n~~~\n先鸽了\n~~~\n\n附DataSource的产出背景：\n[DataSource，一个被严重低估的接口](https://www.51cto.com/article/663312.html)\n\n## bug及解决方案\n\n### session变化\n\n#### 现象\najax请求及其余请求在前几次请求时，session会发送变化。导致存在session中的数据获取不到。\n\n#### 原因\n通过HttpServletRequest获取session对象时，使用 `request.getSession()` 方法。\ngetSession方法会检测当前是否有session存在，默认**不存在会创建一个新的session**，存在则返回。\n\najax请求跨域请求默认不携带cookie信息。即获取不到session\n\n#### 解决方案（未解决）\n\n调用getSession方法时传入参数false或true\n例如：`request.getSession(false);`\n为true时，先查看请求时是否有sessionID。如果没有，则创建一个新的session对象。如果有则根据sessionID查找对应的session对象，找到了就返回该session对象，没找到就创建新的session对象。\n为false时，先查看请求中是否有sessionID，没有则返回null。有则根据sessionID查找对应的session对象，找到了就返回该session对象，没找到就创建新的session对象。\n**默认为true**\n\n建议：\n往session中写入参数时使用 `request.getSession();`\n从session中读取参数时使用 `request.getSession(false);`\n\n附session其他操作：\n设置值：`session.setAttribute(String name,Object obj);`\n读取值：`session.getAttribute(String name);`\n删除session：`session.invalidate();`\n\n---\n\n让ajax请求携带参数\n添加属性：`xhr.withCredentials=true`\n\n附js原生实现ajax请求：\n~~~javascript\nvar Ajax = {\n        get: function (url, callback) {\n            // XMLHttpRequest对象用于在后台与服务器交换数据\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', url, false);\n            xhr.onreadystatechange = function () {\n                // readyState == 4说明请求已完成\n                if (xhr.readyState == 4) {\n                    if (xhr.status == 200 || xhr.status == 304) {\n                        console.log(xhr.responseText);\n                        callback(xhr.responseText);\n                    }\n                }\n            }\n            xhr.send();\n        },\n\n        // data应为'a=a1&b=b1'这种字符串格式，在jq里如果data为对象会自动将对象转成这种字符串格式\n        post: function (url, data, callback) {\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', url, false);\n            // 跨域携带cookie\n            xhr.withCredentials=true\n            // 添加http头，发送信息至服务器时内容编码类型\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200 || xhr.status === 304) {\n                        // console.log(xhr.responseText);\n                        callback(xhr.responseText);\n                    }\n                }\n            }\n            xhr.send(data);\n        }\n    }\n~~~\n---\n\n说明：\n这个bug其实并未解决，因为部署到tap云引擎时，是一个springboot项目。所有的请求应该都是同源的，不会出现跨域的情况。\n而session变化原因，就是getSession会创建新的session对象。\n将getSession传入false，同时改完ajax属性后，这个bug依旧会出现。\n在部署到生产环境后，依旧有用户偶尔会出现了session为null的情况。\n> 2022-08-12 暂未解决。\n\n## 总结\n\n第一次使用平台提供的自动化的部署和管理功能。\n有部署状态（预备环境和生产环境）、请求统计、日志、及环境变量各种设置等。\ntaptap云服务还是很成熟的。相比自己在腾讯云服务器上使用要方便很多，不管是部署还是监控。\n官方文档也相对很齐全，参看文档来使用是完全可以的。\n","slug":"关于Schiphalast注册功能开发中的bug","published":1,"updated":"2022-08-15T08:40:02.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbdm000mo8tt5h8q2moo","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>这个功能写成了一个springboot项目，部署在taptap的云引擎上。<br><a class=\"link\"   href=\"https://developer.taptap.com/docs/sdk/engine/overview/\" >taptap云引擎官方文档<i class=\"fas fa-external-link-alt\"></i></a><br>使用了官方提供的命令行工具，创建项目和部署到云引擎。<a class=\"link\"   href=\"https://developer.taptap.com/docs/sdk/engine/cli/\" >命令行文档<i class=\"fas fa-external-link-alt\"></i></a><br>他生成的项目实际是springboot的改版，添加了一些他们独有的功能。比如云函数等。<br>实际开发与平时一致（<del>他们提供的功能其实基本没用到，或许以后会用到。</del></p>\n<p>另外，要吐槽的一个点就是：<br>项目生成默认配置使用的是Java11，但是部署到云引擎时，报错。<br>换成Java8后正常运行。<br>版本问题，影响不大。<del>新版任你发，我用Java 8。</del></p>\n<h2 id=\"可复用模块\"><a href=\"#可复用模块\" class=\"headerlink\" title=\"可复用模块\"></a>可复用模块</h2><h3 id=\"从请求中获取ip地址\"><a href=\"#从请求中获取ip地址\" class=\"headerlink\" title=\"从请求中获取ip地址\"></a>从请求中获取ip地址</h3><p>Remote Address：<br>Remote Address代表HTTP请求的远程地址，即请求的源地址。http协议在三次握手时时用的就是这个Remote Address地址，发送响应报文时也是使用的这个Remote Address地址。<br>所以，Remote Address地址是不能伪造的，否则请求者会收不到响应报文。</p>\n<blockquote>\n<p>但是，<strong>http请求经过代理服务器转发时，用户真实ip会丢失。</strong>所以有了<code>X-Forwarded-For</code>获取ip的方式。</p>\n</blockquote>\n<p>X-Forwarded-For：<br>为了避免真实ip的丢失，代理服务器会增加叫X-Forwarded-For的头信息。将客户端ip记录到其中，以保证服务器可以获取到客户端真实ip。<br>X-Forwarded-For是一个拓展头。虽然HTTP/1.1（RFC 2616）协议并没有对它的定义，但它已经成为事实上的标准（都在用<br>X-Forwarded-For请求头格式：<code>X-Forwarded-For: client, proxy1, proxy2</code><br>第一个便是请求的原始ip，后面则是代理服务器的ip。</p>\n<blockquote>\n<p>由于请求头可以伪造，所以<strong>不要相信请求头中携带的ip信息</strong>。</p>\n</blockquote>\n<blockquote>\n<p>直接对外提供服务的 Web 应用，在进行与安全有关的操作时，只能通过 Remote Address 获取 IP，不能相信任何请求头；<br>使用 Nginx 等 Web Server 进行反向代理的 Web 应用，在配置正确的前提下，要用 X-Forwarded-For 最后一节 或 X-Real-IP 来获取 IP（因为 Remote Address 得到的是 Nginx 所在服务器的内网 IP）；同时还应该禁止 Web 应用直接对外提供服务；<br>在与安全无关的场景，例如通过 IP 显示所在地天气，可以从 X-Forwarded-For 靠前的位置获取 IP，但是需要校验 IP 格式合法性；</p>\n</blockquote>\n<p>参考文章：<br><a class=\"link\"   href=\"https://www.runoob.com/w3cnote/http-x-forwarded-for.html\" >关于X-Forwarded-For的介绍<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://imququ.com/post/x-forwarded-for-header-in-http.html\" >HTTP 请求头中的 X-Forwarded-For<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从HttpServletRequest中获取ip</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request 请求</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> ip</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getIP</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">ip</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;x-forwarded-for&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip == <span class=\"literal\">null</span> || ip.length() == <span class=\"number\">0</span> || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">        ip = request.getHeader(<span class=\"string\">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip == <span class=\"literal\">null</span> || ip.length() == <span class=\"number\">0</span> || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">        ip = request.getHeader(<span class=\"string\">&quot;X-Forwarded-For&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip == <span class=\"literal\">null</span> || ip.length() == <span class=\"number\">0</span> || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">        ip = request.getHeader(<span class=\"string\">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip == <span class=\"literal\">null</span> || ip.length() == <span class=\"number\">0</span> || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">        ip = request.getHeader(<span class=\"string\">&quot;X-Real-IP&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip == <span class=\"literal\">null</span> || ip.length() == <span class=\"number\">0</span> || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">        ip = request.getRemoteAddr();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;127.0.0.1&quot;</span>.equalsIgnoreCase(ip) || <span class=\"string\">&quot;0:0:0:0:0:0:0:1&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据网卡取本机配置的 IP</span></span><br><span class=\"line\">            <span class=\"type\">InetAddress</span> <span class=\"variable\">iNet</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                iNet = InetAddress.getLocalHost();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (iNet != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                ip = iNet.getHostAddress();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于通过多个代理的情况，分割出第一个 IP</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip != <span class=\"literal\">null</span> &amp;&amp; ip.length() &gt; <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ip.indexOf(<span class=\"string\">&quot;,&quot;</span>) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ip = ip.substring(<span class=\"number\">0</span>, ip.indexOf(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;0:0:0:0:0:0:0:1&quot;</span>.equals(ip) ? <span class=\"string\">&quot;127.0.0.1&quot;</span> : ip;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"密码的md5加密\"><a href=\"#密码的md5加密\" class=\"headerlink\" title=\"密码的md5加密\"></a>密码的md5加密</h3><p>MD5，全称 消息摘要算法第五版（Message Digest Algorithm 5）<br>不多介绍，详见<a class=\"link\"   href=\"https://baike.baidu.com/item/MD5/212708\" >MD5百度百科<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>关于加密算法的改进：</p>\n<ol>\n<li>加盐<br> 即<strong>在原来的明文中加入一组随机串</strong>，再通过加密算法加密，将密文存入数据库。</li>\n<li>加次数<br> 即多加密几次，增加破解难度。不过会消耗更多计算资源。</li>\n</ol>\n<p>jdk自带api：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * md5加密</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> password 需要加密的字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 加密后的字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">md5</span><span class=\"params\">(String password)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">hashedPwd</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//生成MessageDigest对象，指定使用的消息摘要算法</span></span><br><span class=\"line\">        <span class=\"type\">MessageDigest</span> <span class=\"variable\">md</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">&quot;MD5&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//传入需要计算的字符串，传入参数为字节或字节数组</span></span><br><span class=\"line\">        md.update(password.getBytes());</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        digest()计算消息摘要，返回值为字节数组。16个字节，128bit</span></span><br><span class=\"line\"><span class=\"comment\">        通过BigInteger将其转换成32位的16进制数（每个字节用两个16进制数表示）</span></span><br><span class=\"line\"><span class=\"comment\">        或者16位16进制数，去掉32位前后各8位</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        hashedPwd = <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"number\">1</span>, md.digest()).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashedPwd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>spring的DigestUtils工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">md5</span><span class=\"params\">(String password)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基于spring框架中的DigestUtils工具类进行密码加密</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> DigestUtils.md5DigestAsHex((password).getBytes());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送mail邮件\"><a href=\"#发送mail邮件\" class=\"headerlink\" title=\"发送mail邮件\"></a>发送mail邮件</h3><p>使用JavaMail发送邮件</p>\n<p>依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--javamail的依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//邮件服务器地址（比如smtp.qq.com</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">mailHost</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">//邮件传输协议（通常为smtp</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">mailTransportProtocol</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;smtp&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//邮箱认证（即登录</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">mailSmtpAuth</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//发件人邮箱地址</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">fromEmail</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">//发件人邮箱密码</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送邮件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> toEmail 发往邮箱地址</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMail</span><span class=\"params\">(String toEmail)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//发送的内容（可以是dom文档</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">sendContent</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;test mail&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//创建，发送邮件</span></span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">prop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">&quot;mail.host&quot;</span>, mailHost);</span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">&quot;mail.transport.protocol&quot;</span>, mailTransportProtocol);</span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">&quot;mail.smtp.auth&quot;</span>, mailSmtpAuth);</span><br><span class=\"line\">    <span class=\"comment\">//使用JavaMail发送邮件的5个步骤</span></span><br><span class=\"line\">    <span class=\"comment\">//1、创建session</span></span><br><span class=\"line\">    <span class=\"type\">Session</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> Session.getInstance(prop);</span><br><span class=\"line\">    <span class=\"comment\">//2、通过session得到transport对象</span></span><br><span class=\"line\">    Transport ts;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ts = session.getTransport();</span><br><span class=\"line\">        <span class=\"comment\">//3、使用邮箱的用户名和密码连上邮件服务器，发送邮件时，发件人需要提交邮箱的用户名和密码给smtp服务器，用户名和密码都通过验证之后才能够正常发送邮件给收件人。</span></span><br><span class=\"line\">        ts.connect(mailHost, fromEmail, password);</span><br><span class=\"line\">        <span class=\"comment\">//4、创建邮件</span></span><br><span class=\"line\">        <span class=\"type\">MimeMessage</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MimeMessage</span>(session);</span><br><span class=\"line\">        <span class=\"comment\">//指明邮件的发件人</span></span><br><span class=\"line\">        message.setFrom(<span class=\"keyword\">new</span> <span class=\"title class_\">InternetAddress</span>(fromEmail));</span><br><span class=\"line\">        <span class=\"comment\">//指明邮件的收件人</span></span><br><span class=\"line\">        message.setRecipient(Message.RecipientType.TO, <span class=\"keyword\">new</span> <span class=\"title class_\">InternetAddress</span>(toEmail));</span><br><span class=\"line\">        <span class=\"comment\">//邮件的标题</span></span><br><span class=\"line\">        message.setSubject(<span class=\"string\">&quot;标题&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//邮件的文本内容</span></span><br><span class=\"line\">        message.setContent(sendContent, <span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//5、发送邮件</span></span><br><span class=\"line\">        ts.sendMessage(message, message.getAllRecipients());</span><br><span class=\"line\">        ts.close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MessagingException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：<br><a class=\"link\"   href=\"https://www.cnblogs.com/xdp-gacl/p/4216311.html\" >使用JavaMail创建邮件和发送邮件<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<p>使用springboot集成的mail模块</p>\n<p>依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.mail.protocol</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">spring.mail.host</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">spring.mail.username</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">spring.mail.password</span>=<span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JavaMailSender javaMailSender;</span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;fromEmail&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String fromEmail;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送邮件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> toEmail 发往邮箱地址</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMail</span><span class=\"params\">(String toEmail)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//发送的内容（可以是dom文档</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">sendContent</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;test mail&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MimeMessageHelper</span> <span class=\"variable\">messageHelper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MimeMessageHelper</span>(javaMailSender.createMimeMessage(), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        messageHelper.setFrom(fromEmail);</span><br><span class=\"line\">        messageHelper.setTo(toEmail);</span><br><span class=\"line\">        messageHelper.setSubject(<span class=\"string\">&quot;标题&quot;</span>);</span><br><span class=\"line\">        messageHelper.setText(sendContent, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        javaMailSender.send(messageHelper.getMimeMessage());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MessagingException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jdbc数据库连接池（鸽了）\"><a href=\"#jdbc数据库连接池（鸽了）\" class=\"headerlink\" title=\"jdbc数据库连接池（鸽了）\"></a>jdbc数据库连接池（鸽了）</h3><p>因为建立数据库连接与关闭数据库连接是非常耗时的事情，如果每次查询都建立连接、关闭连接会产生很大的性能开销。<br>所以有了连接池的出现来解决这一问题。<br>即在程序启动时，初始化连接池（连接数据库，创建多个连接）。在需要使用时从连接池中获取连接，使用结束放回连接池。<br>以减少性能开销。</p>\n<p>代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先鸽了</span><br></pre></td></tr></table></figure>\n\n<p>附DataSource的产出背景：<br><a class=\"link\"   href=\"https://www.51cto.com/article/663312.html\" >DataSource，一个被严重低估的接口<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"bug及解决方案\"><a href=\"#bug及解决方案\" class=\"headerlink\" title=\"bug及解决方案\"></a>bug及解决方案</h2><h3 id=\"session变化\"><a href=\"#session变化\" class=\"headerlink\" title=\"session变化\"></a>session变化</h3><h4 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h4><p>ajax请求及其余请求在前几次请求时，session会发送变化。导致存在session中的数据获取不到。</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>通过HttpServletRequest获取session对象时，使用 <code>request.getSession()</code> 方法。<br>getSession方法会检测当前是否有session存在，默认<strong>不存在会创建一个新的session</strong>，存在则返回。</p>\n<p>ajax请求跨域请求默认不携带cookie信息。即获取不到session</p>\n<h4 id=\"解决方案（未解决）\"><a href=\"#解决方案（未解决）\" class=\"headerlink\" title=\"解决方案（未解决）\"></a>解决方案（未解决）</h4><p>调用getSession方法时传入参数false或true<br>例如：<code>request.getSession(false);</code><br>为true时，先查看请求时是否有sessionID。如果没有，则创建一个新的session对象。如果有则根据sessionID查找对应的session对象，找到了就返回该session对象，没找到就创建新的session对象。<br>为false时，先查看请求中是否有sessionID，没有则返回null。有则根据sessionID查找对应的session对象，找到了就返回该session对象，没找到就创建新的session对象。<br><strong>默认为true</strong></p>\n<p>建议：<br>往session中写入参数时使用 <code>request.getSession();</code><br>从session中读取参数时使用 <code>request.getSession(false);</code></p>\n<p>附session其他操作：<br>设置值：<code>session.setAttribute(String name,Object obj);</code><br>读取值：<code>session.getAttribute(String name);</code><br>删除session：<code>session.invalidate();</code></p>\n<hr>\n<p>让ajax请求携带参数<br>添加属性：<code>xhr.withCredentials=true</code></p>\n<p>附js原生实现ajax请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Ajax</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\">url, callback</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// XMLHttpRequest对象用于在后台与服务器交换数据</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">            xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// readyState == 4说明请求已完成</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> == <span class=\"number\">200</span> || xhr.<span class=\"property\">status</span> == <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">                        <span class=\"title function_\">callback</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            xhr.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// data应为&#x27;a=a1&amp;b=b1&#x27;这种字符串格式，在jq里如果data为对象会自动将对象转成这种字符串格式</span></span><br><span class=\"line\">        <span class=\"attr\">post</span>: <span class=\"keyword\">function</span> (<span class=\"params\">url, data, callback</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">            xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>, url, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 跨域携带cookie</span></span><br><span class=\"line\">            xhr.<span class=\"property\">withCredentials</span>=<span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"comment\">// 添加http头，发送信息至服务器时内容编码类型</span></span><br><span class=\"line\">            xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class=\"line\">            xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span> || xhr.<span class=\"property\">status</span> === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// console.log(xhr.responseText);</span></span><br><span class=\"line\">                        <span class=\"title function_\">callback</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            xhr.<span class=\"title function_\">send</span>(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>说明：<br>这个bug其实并未解决，因为部署到tap云引擎时，是一个springboot项目。所有的请求应该都是同源的，不会出现跨域的情况。<br>而session变化原因，就是getSession会创建新的session对象。<br>将getSession传入false，同时改完ajax属性后，这个bug依旧会出现。<br>在部署到生产环境后，依旧有用户偶尔会出现了session为null的情况。</p>\n<blockquote>\n<p>2022-08-12 暂未解决。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>第一次使用平台提供的自动化的部署和管理功能。<br>有部署状态（预备环境和生产环境）、请求统计、日志、及环境变量各种设置等。<br>taptap云服务还是很成熟的。相比自己在腾讯云服务器上使用要方便很多，不管是部署还是监控。<br>官方文档也相对很齐全，参看文档来使用是完全可以的。</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>这个功能写成了一个springboot项目，部署在taptap的云引擎上。<br><a class=\"link\"   href=\"https://developer.taptap.com/docs/sdk/engine/overview/\" >taptap云引擎官方文档<i class=\"fas fa-external-link-alt\"></i></a><br>使用了官方提供的命令行工具，创建项目和部署到云引擎。<a class=\"link\"   href=\"https://developer.taptap.com/docs/sdk/engine/cli/\" >命令行文档<i class=\"fas fa-external-link-alt\"></i></a><br>他生成的项目实际是springboot的改版，添加了一些他们独有的功能。比如云函数等。<br>实际开发与平时一致（<del>他们提供的功能其实基本没用到，或许以后会用到。</del></p>\n<p>另外，要吐槽的一个点就是：<br>项目生成默认配置使用的是Java11，但是部署到云引擎时，报错。<br>换成Java8后正常运行。<br>版本问题，影响不大。<del>新版任你发，我用Java 8。</del></p>\n<h2 id=\"可复用模块\"><a href=\"#可复用模块\" class=\"headerlink\" title=\"可复用模块\"></a>可复用模块</h2><h3 id=\"从请求中获取ip地址\"><a href=\"#从请求中获取ip地址\" class=\"headerlink\" title=\"从请求中获取ip地址\"></a>从请求中获取ip地址</h3><p>Remote Address：<br>Remote Address代表HTTP请求的远程地址，即请求的源地址。http协议在三次握手时时用的就是这个Remote Address地址，发送响应报文时也是使用的这个Remote Address地址。<br>所以，Remote Address地址是不能伪造的，否则请求者会收不到响应报文。</p>\n<blockquote>\n<p>但是，<strong>http请求经过代理服务器转发时，用户真实ip会丢失。</strong>所以有了<code>X-Forwarded-For</code>获取ip的方式。</p>\n</blockquote>\n<p>X-Forwarded-For：<br>为了避免真实ip的丢失，代理服务器会增加叫X-Forwarded-For的头信息。将客户端ip记录到其中，以保证服务器可以获取到客户端真实ip。<br>X-Forwarded-For是一个拓展头。虽然HTTP/1.1（RFC 2616）协议并没有对它的定义，但它已经成为事实上的标准（都在用<br>X-Forwarded-For请求头格式：<code>X-Forwarded-For: client, proxy1, proxy2</code><br>第一个便是请求的原始ip，后面则是代理服务器的ip。</p>\n<blockquote>\n<p>由于请求头可以伪造，所以<strong>不要相信请求头中携带的ip信息</strong>。</p>\n</blockquote>\n<blockquote>\n<p>直接对外提供服务的 Web 应用，在进行与安全有关的操作时，只能通过 Remote Address 获取 IP，不能相信任何请求头；<br>使用 Nginx 等 Web Server 进行反向代理的 Web 应用，在配置正确的前提下，要用 X-Forwarded-For 最后一节 或 X-Real-IP 来获取 IP（因为 Remote Address 得到的是 Nginx 所在服务器的内网 IP）；同时还应该禁止 Web 应用直接对外提供服务；<br>在与安全无关的场景，例如通过 IP 显示所在地天气，可以从 X-Forwarded-For 靠前的位置获取 IP，但是需要校验 IP 格式合法性；</p>\n</blockquote>\n<p>参考文章：<br><a class=\"link\"   href=\"https://www.runoob.com/w3cnote/http-x-forwarded-for.html\" >关于X-Forwarded-For的介绍<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://imququ.com/post/x-forwarded-for-header-in-http.html\" >HTTP 请求头中的 X-Forwarded-For<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从HttpServletRequest中获取ip</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request 请求</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> ip</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getIP</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">ip</span> <span class=\"operator\">=</span> request.getHeader(<span class=\"string\">&quot;x-forwarded-for&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip == <span class=\"literal\">null</span> || ip.length() == <span class=\"number\">0</span> || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">        ip = request.getHeader(<span class=\"string\">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip == <span class=\"literal\">null</span> || ip.length() == <span class=\"number\">0</span> || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">        ip = request.getHeader(<span class=\"string\">&quot;X-Forwarded-For&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip == <span class=\"literal\">null</span> || ip.length() == <span class=\"number\">0</span> || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">        ip = request.getHeader(<span class=\"string\">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip == <span class=\"literal\">null</span> || ip.length() == <span class=\"number\">0</span> || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">        ip = request.getHeader(<span class=\"string\">&quot;X-Real-IP&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip == <span class=\"literal\">null</span> || ip.length() == <span class=\"number\">0</span> || <span class=\"string\">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">        ip = request.getRemoteAddr();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;127.0.0.1&quot;</span>.equalsIgnoreCase(ip) || <span class=\"string\">&quot;0:0:0:0:0:0:0:1&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据网卡取本机配置的 IP</span></span><br><span class=\"line\">            <span class=\"type\">InetAddress</span> <span class=\"variable\">iNet</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                iNet = InetAddress.getLocalHost();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (iNet != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                ip = iNet.getHostAddress();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于通过多个代理的情况，分割出第一个 IP</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ip != <span class=\"literal\">null</span> &amp;&amp; ip.length() &gt; <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ip.indexOf(<span class=\"string\">&quot;,&quot;</span>) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ip = ip.substring(<span class=\"number\">0</span>, ip.indexOf(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;0:0:0:0:0:0:0:1&quot;</span>.equals(ip) ? <span class=\"string\">&quot;127.0.0.1&quot;</span> : ip;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"密码的md5加密\"><a href=\"#密码的md5加密\" class=\"headerlink\" title=\"密码的md5加密\"></a>密码的md5加密</h3><p>MD5，全称 消息摘要算法第五版（Message Digest Algorithm 5）<br>不多介绍，详见<a class=\"link\"   href=\"https://baike.baidu.com/item/MD5/212708\" >MD5百度百科<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>关于加密算法的改进：</p>\n<ol>\n<li>加盐<br> 即<strong>在原来的明文中加入一组随机串</strong>，再通过加密算法加密，将密文存入数据库。</li>\n<li>加次数<br> 即多加密几次，增加破解难度。不过会消耗更多计算资源。</li>\n</ol>\n<p>jdk自带api：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * md5加密</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> password 需要加密的字符串</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 加密后的字符串</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">md5</span><span class=\"params\">(String password)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">hashedPwd</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//生成MessageDigest对象，指定使用的消息摘要算法</span></span><br><span class=\"line\">        <span class=\"type\">MessageDigest</span> <span class=\"variable\">md</span> <span class=\"operator\">=</span> MessageDigest.getInstance(<span class=\"string\">&quot;MD5&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//传入需要计算的字符串，传入参数为字节或字节数组</span></span><br><span class=\"line\">        md.update(password.getBytes());</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        digest()计算消息摘要，返回值为字节数组。16个字节，128bit</span></span><br><span class=\"line\"><span class=\"comment\">        通过BigInteger将其转换成32位的16进制数（每个字节用两个16进制数表示）</span></span><br><span class=\"line\"><span class=\"comment\">        或者16位16进制数，去掉32位前后各8位</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        hashedPwd = <span class=\"keyword\">new</span> <span class=\"title class_\">BigInteger</span>(<span class=\"number\">1</span>, md.digest()).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hashedPwd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>spring的DigestUtils工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">md5</span><span class=\"params\">(String password)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基于spring框架中的DigestUtils工具类进行密码加密</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> DigestUtils.md5DigestAsHex((password).getBytes());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送mail邮件\"><a href=\"#发送mail邮件\" class=\"headerlink\" title=\"发送mail邮件\"></a>发送mail邮件</h3><p>使用JavaMail发送邮件</p>\n<p>依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--javamail的依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.mail<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//邮件服务器地址（比如smtp.qq.com</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">mailHost</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">//邮件传输协议（通常为smtp</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">mailTransportProtocol</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;smtp&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//邮箱认证（即登录</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">mailSmtpAuth</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//发件人邮箱地址</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">fromEmail</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">//发件人邮箱密码</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送邮件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> toEmail 发往邮箱地址</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMail</span><span class=\"params\">(String toEmail)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//发送的内容（可以是dom文档</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">sendContent</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;test mail&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//创建，发送邮件</span></span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">prop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">&quot;mail.host&quot;</span>, mailHost);</span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">&quot;mail.transport.protocol&quot;</span>, mailTransportProtocol);</span><br><span class=\"line\">    prop.setProperty(<span class=\"string\">&quot;mail.smtp.auth&quot;</span>, mailSmtpAuth);</span><br><span class=\"line\">    <span class=\"comment\">//使用JavaMail发送邮件的5个步骤</span></span><br><span class=\"line\">    <span class=\"comment\">//1、创建session</span></span><br><span class=\"line\">    <span class=\"type\">Session</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> Session.getInstance(prop);</span><br><span class=\"line\">    <span class=\"comment\">//2、通过session得到transport对象</span></span><br><span class=\"line\">    Transport ts;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ts = session.getTransport();</span><br><span class=\"line\">        <span class=\"comment\">//3、使用邮箱的用户名和密码连上邮件服务器，发送邮件时，发件人需要提交邮箱的用户名和密码给smtp服务器，用户名和密码都通过验证之后才能够正常发送邮件给收件人。</span></span><br><span class=\"line\">        ts.connect(mailHost, fromEmail, password);</span><br><span class=\"line\">        <span class=\"comment\">//4、创建邮件</span></span><br><span class=\"line\">        <span class=\"type\">MimeMessage</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MimeMessage</span>(session);</span><br><span class=\"line\">        <span class=\"comment\">//指明邮件的发件人</span></span><br><span class=\"line\">        message.setFrom(<span class=\"keyword\">new</span> <span class=\"title class_\">InternetAddress</span>(fromEmail));</span><br><span class=\"line\">        <span class=\"comment\">//指明邮件的收件人</span></span><br><span class=\"line\">        message.setRecipient(Message.RecipientType.TO, <span class=\"keyword\">new</span> <span class=\"title class_\">InternetAddress</span>(toEmail));</span><br><span class=\"line\">        <span class=\"comment\">//邮件的标题</span></span><br><span class=\"line\">        message.setSubject(<span class=\"string\">&quot;标题&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//邮件的文本内容</span></span><br><span class=\"line\">        message.setContent(sendContent, <span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//5、发送邮件</span></span><br><span class=\"line\">        ts.sendMessage(message, message.getAllRecipients());</span><br><span class=\"line\">        ts.close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MessagingException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：<br><a class=\"link\"   href=\"https://www.cnblogs.com/xdp-gacl/p/4216311.html\" >使用JavaMail创建邮件和发送邮件<i class=\"fas fa-external-link-alt\"></i></a></p>\n<hr>\n<p>使用springboot集成的mail模块</p>\n<p>依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-mail<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.mail.protocol</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">spring.mail.host</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">spring.mail.username</span>=<span class=\"string\"></span></span><br><span class=\"line\"><span class=\"attr\">spring.mail.password</span>=<span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> JavaMailSender javaMailSender;</span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;fromEmail&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String fromEmail;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送邮件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> toEmail 发往邮箱地址</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMail</span><span class=\"params\">(String toEmail)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//发送的内容（可以是dom文档</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">sendContent</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;test mail&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MimeMessageHelper</span> <span class=\"variable\">messageHelper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MimeMessageHelper</span>(javaMailSender.createMimeMessage(), <span class=\"literal\">true</span>);</span><br><span class=\"line\">        messageHelper.setFrom(fromEmail);</span><br><span class=\"line\">        messageHelper.setTo(toEmail);</span><br><span class=\"line\">        messageHelper.setSubject(<span class=\"string\">&quot;标题&quot;</span>);</span><br><span class=\"line\">        messageHelper.setText(sendContent, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        javaMailSender.send(messageHelper.getMimeMessage());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (MessagingException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jdbc数据库连接池（鸽了）\"><a href=\"#jdbc数据库连接池（鸽了）\" class=\"headerlink\" title=\"jdbc数据库连接池（鸽了）\"></a>jdbc数据库连接池（鸽了）</h3><p>因为建立数据库连接与关闭数据库连接是非常耗时的事情，如果每次查询都建立连接、关闭连接会产生很大的性能开销。<br>所以有了连接池的出现来解决这一问题。<br>即在程序启动时，初始化连接池（连接数据库，创建多个连接）。在需要使用时从连接池中获取连接，使用结束放回连接池。<br>以减少性能开销。</p>\n<p>代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先鸽了</span><br></pre></td></tr></table></figure>\n\n<p>附DataSource的产出背景：<br><a class=\"link\"   href=\"https://www.51cto.com/article/663312.html\" >DataSource，一个被严重低估的接口<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"bug及解决方案\"><a href=\"#bug及解决方案\" class=\"headerlink\" title=\"bug及解决方案\"></a>bug及解决方案</h2><h3 id=\"session变化\"><a href=\"#session变化\" class=\"headerlink\" title=\"session变化\"></a>session变化</h3><h4 id=\"现象\"><a href=\"#现象\" class=\"headerlink\" title=\"现象\"></a>现象</h4><p>ajax请求及其余请求在前几次请求时，session会发送变化。导致存在session中的数据获取不到。</p>\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>通过HttpServletRequest获取session对象时，使用 <code>request.getSession()</code> 方法。<br>getSession方法会检测当前是否有session存在，默认<strong>不存在会创建一个新的session</strong>，存在则返回。</p>\n<p>ajax请求跨域请求默认不携带cookie信息。即获取不到session</p>\n<h4 id=\"解决方案（未解决）\"><a href=\"#解决方案（未解决）\" class=\"headerlink\" title=\"解决方案（未解决）\"></a>解决方案（未解决）</h4><p>调用getSession方法时传入参数false或true<br>例如：<code>request.getSession(false);</code><br>为true时，先查看请求时是否有sessionID。如果没有，则创建一个新的session对象。如果有则根据sessionID查找对应的session对象，找到了就返回该session对象，没找到就创建新的session对象。<br>为false时，先查看请求中是否有sessionID，没有则返回null。有则根据sessionID查找对应的session对象，找到了就返回该session对象，没找到就创建新的session对象。<br><strong>默认为true</strong></p>\n<p>建议：<br>往session中写入参数时使用 <code>request.getSession();</code><br>从session中读取参数时使用 <code>request.getSession(false);</code></p>\n<p>附session其他操作：<br>设置值：<code>session.setAttribute(String name,Object obj);</code><br>读取值：<code>session.getAttribute(String name);</code><br>删除session：<code>session.invalidate();</code></p>\n<hr>\n<p>让ajax请求携带参数<br>添加属性：<code>xhr.withCredentials=true</code></p>\n<p>附js原生实现ajax请求：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Ajax</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\">url, callback</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// XMLHttpRequest对象用于在后台与服务器交换数据</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">            xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// readyState == 4说明请求已完成</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> == <span class=\"number\">200</span> || xhr.<span class=\"property\">status</span> == <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">                        <span class=\"title function_\">callback</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            xhr.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// data应为&#x27;a=a1&amp;b=b1&#x27;这种字符串格式，在jq里如果data为对象会自动将对象转成这种字符串格式</span></span><br><span class=\"line\">        <span class=\"attr\">post</span>: <span class=\"keyword\">function</span> (<span class=\"params\">url, data, callback</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">            xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>, url, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 跨域携带cookie</span></span><br><span class=\"line\">            xhr.<span class=\"property\">withCredentials</span>=<span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"comment\">// 添加http头，发送信息至服务器时内容编码类型</span></span><br><span class=\"line\">            xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class=\"line\">            xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span> || xhr.<span class=\"property\">status</span> === <span class=\"number\">304</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// console.log(xhr.responseText);</span></span><br><span class=\"line\">                        <span class=\"title function_\">callback</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            xhr.<span class=\"title function_\">send</span>(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>说明：<br>这个bug其实并未解决，因为部署到tap云引擎时，是一个springboot项目。所有的请求应该都是同源的，不会出现跨域的情况。<br>而session变化原因，就是getSession会创建新的session对象。<br>将getSession传入false，同时改完ajax属性后，这个bug依旧会出现。<br>在部署到生产环境后，依旧有用户偶尔会出现了session为null的情况。</p>\n<blockquote>\n<p>2022-08-12 暂未解决。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>第一次使用平台提供的自动化的部署和管理功能。<br>有部署状态（预备环境和生产环境）、请求统计、日志、及环境变量各种设置等。<br>taptap云服务还是很成熟的。相比自己在腾讯云服务器上使用要方便很多，不管是部署还是监控。<br>官方文档也相对很齐全，参看文档来使用是完全可以的。</p>\n"},{"title":"关于健康码识别的网站开发进度记录","date":"2022-05-21T12:22:23.000Z","_content":"\n## 关于这个网站\n\n这个网站是大创项目的网站。用于健康码识别，目前什么都没有，只有一个空项目。~~啊，对，没错。~~  \n[github仓库地址](https://github.com/2450123/jkm_web)  \n\n\n### 关于网站的架构\n\n网站前端打算使用vue，前端由[青虬](https://reol077.github.io/)负责编写  \n网站后端打算使用springboot，由我负责  \n项目核心功能由[顾のEvery Day](https://gufanstudy.github.io/)负责，他也是这个项目的负责人（组长）。 ~~图像识别那块，我暂时还不是很懂啦，反正很厉害就对了~~  \n前后端肯定是要分离的，使用ajax，数据格式使用json。 ~~jsp不分离属实痛苦~~  \n后端与图像识别的python程序，目前打算使用socket（套接字）进行通信。 ~~目前只是了解过，还需要学习~~  \n而且临近期末，springboot暂时还没学完，所以开发进度在七月前估计会很慢。 ~~可能根本没有进度~~  \n\n目前进度：确认大体需求\n![大体需求.png](../images/关于健康码识别的网站开发进度记录/大体需求.png)\n> 2022-05-21  \n> 周六，楼下的广场舞很吵。\n\n### 数据库设计\n\n数据库设计了四张表，老师、学生、权限、班级  \n因为需求比较简单，比如权限暂时只有两种——能否查看统计信息，所以并没有采取复杂的角色和权限表。  \n同时因为对学院和专业没有什么明确的实际操作，所以写在了班级中，并未单独分表。  \n关于学生健康码信息的表，目前计划动态新建表，即每天新建一张表用于存储健康码的相关信息\n\n目前进度：创建数据库，搭建项目基本配置\n![img.png](../images/关于健康码识别的网站开发进度记录/数据库er图.png)\n> 2022-07-05  \n> 果然七月前完全没有进度，紧张的期末也终于是结束了。python实训（网课）开始了。  \n> ~~（还有几门成绩还不出，是不打算出了吗）~~\n\n\n## 具体开发过程\n\n### 注册部分（未完成\n\n注册部分使用邮箱进行验证，使用到了springboot自带的mail组件。还挺好用的，和之前使用的javax.mail的大体流程（邮件的设置之类的）是一样的。  \n同时也决定使用redis数据库，来解决同一用户使用不同浏览器或设备来进行邮件验证的数据共享问题。比之前采取静态类存取sessionId的方式会好一些。  \n最后，在发送邮件的调试过程中，我也决定使用日志来打印一些信息，进行排错，而非System.out.println()。  \n\n目前进度：大概完成了注册的三分之一。\n\n> 2022-07-08  \n> 今天也算是见证历史了，日本前首相安倍晋三今天中午遇刺，下午宣布死亡。  \n> 考虑以后可以给博客添加上类似历史上的今天这类tips。~~应该会有意义吧~~  \n\n### 老师注册部分（基本完成\n\n注册的流程大概如下：  \n1. 发送注册请求\n2. 生成验证码，将验证码同用户信息一起写入redis，发送验证邮件\n3. 访问验证链接\n4. 验证验证码是否正确\n   1. 正确则修改redis中的数据，将用户改为在线状态，用户邮箱写入cookie，同时修改它们的生命周期（方便后期登录使用），发送注册成功的邮件，写入数据库\n   2. 错误则返回错误信息\n\nredis中缓存的信息也从原来的string改成了hash，因为考虑到登录会使用，所以缓存中用户信息得记录详细。  \n关于验证的链接，返回的是html页面，使用的是thymeleaf，其实不太想用的，但总不能返回个json数据吧。因为页面显示完信息后，应该会3s后跳转到首页。比jsp方便了一些吧。（暂时没有好的处理方式  \n最后就是关于Controller层和Service层的一些想法。  \n业务层应该把这个请求分解成一个个服务，不同的请求也可以重用服务，提高代码的复用性。dao层就只做与数据库的交互。  \n对于Controller层和Service层的划分和设计，目前设计的还不是很好。得多写多看吧。  \n\n> 2022-07-10  \n> 脑子有点乱，去睡会觉。想把个人介绍写写，但还没想好怎么写。\n\n### 重新设计\n\n想了想，现在的注册虽然完成了，但是过于复杂。在邮件里嵌入链接进行验证是一个不太聪明的行为。  \n所以决定重新设计下使用流程：  \n1. 注册\n   1. 输入图片验证码，发送带有验证码的邮件。  \n   2. 同一页面，输入邮件的验证码提交后。即注册完成\n2. 登录\n   1. 账号，密码，图片验证码。  \n   2. 正确则登陆成功\n3. 忘记密码\n   1. 输入图片验证码，发送带有验证码的邮件。\n   2. 同一页面，输入邮件的验证码以及新密码提交后。即重置完成\n\n顺带把接口写好，需要什么，返回什么得提前规划好。\n\n> 2022-07-11\n> 脑子不是一般的乱，之前的设计问题很大。虽然也不是不能实现。\n> 好的设计会让程序更加简洁高效，接口写了一部分，先实现这部分。\n\n被大佬推荐了两个工具  \n自动生成api文档的swagger包，经过一番调试，终于能正常的扫描到controller中的所有api了。后面要使用他的注解来使生成的api更详细。  \n还有个就是Apifox，可以模拟各种请求，方便了调试。同时，也支持将swagger生成的api数据导入。也可以多人协同开发。应该会蛮好用的。  \n\n> 2022-07-11\n> 晚上补充，重构真痛苦啊。  \n> 在博客上写的接口文档就不用了，不如软件生成的。~~害，亏我写了蛮久的~~\n\n\n注册功能，重新写好了。比之前的逻辑简单了许多。重置密码的流程和注册是一样的，也方便后面开发。  \n使用spring-session-data-redis。把数据存到session中，session把数据存到redis，实现数据共享。  \n（不存redis问题好像也不大，因为改变了设计，不在邮件中夹杂链接，所以不需要考虑用户不同源访问的数据共享问题。这个依赖包是解决分布式session共享的问题的，用在这感觉没啥必要，纯session存储就足够了。不过都写好了也无所谓了）  \n\n> 2022-07-13  \n> 昨天忘写了。python实训布置了最后的大作业，就做个东西交上去，也没什么限制。我到现在也没想好要做啥，这几天要暂停去写大作业了。\n\n注册，登录，重置的接口基本实现了，但是没有完整的测试。  \n昨天试着写了上传图片的模块，还行，能上传，问题不大。后面要考虑如何和python程序进行数据交互了。  \n所以暂时缓一缓，因为负责python的人跑去上夜班了，没啥时间交流。  \n所以这几天先学学nginx吧。~~后面部署还是我~~。nginx看完再考虑别的。  \n\n> 2022-07-20\n> python实训的大作业交了个qq机器人，也不知道老师能不能跑起来。等python熟练点了，把qq机器人的配置和部署记录下。\n\n## 测试socket\n\njava客户端：\n~~~java\npackage org.example;\n\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class Client {\n    public static void main(String args[]) {\n        // 要连接的服务端IP地址和端口\n        String host = \"124.222.100.205\";\n        int port = 55533;\n        // 与服务端建立连接\n        Socket socket = new Socket(host, port);\n        // 建立连接后获得输出流\n        OutputStream outputStream = socket.getOutputStream();\n        String message = \"你好 socket test1!\";\n        socket.getOutputStream().write(message.getBytes(\"UTF-8\"));\n        //通过shutdownOutput高速服务器已经发送完数据，后续只能接受数据\n        socket.shutdownOutput();\n\n        InputStream inputStream = socket.getInputStream();\n        byte[] bytes = new byte[1024];\n        int len;\n        StringBuilder sb = new StringBuilder();\n        while ((len = inputStream.read(bytes)) != -1) {\n            //注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8\n            sb.append(new String(bytes, 0, len, \"UTF-8\"));\n        }\n        System.out.println(\"get message from server: \" + sb);\n\n        inputStream.close();\n        outputStream.close();\n        socket.close();\n    }\n}\n~~~\npython服务端：\n~~~python\nimport socket\n\nhost = '0.0.0.0'\nport = 55533\n\ntry:\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind((host, port))  \n    s.listen(1) \nexcept socket.error:\n    print('create socket failed')\n\nprint('socket created')\n\nwhile 1:\n    conn, addr = s.accept()\n    print(\"from\" + str(addr))\n    while 1:\n        data = conn.recv(1024)\n        if len(data) == 0:\n            conn.send('end'.encode())\n        else:\n            print(data.decode())\n            conn.send('end'.encode())\n        break\n    conn.close()\n~~~\n\n客户端报错：**Connection timed out: connect**\n原因：服务器端口未开放\n\n客户端报错：**Connection refused: connect**\n原因：服务端监听端口为 **127.0.0.1:55533**，但127.0.0.1表示本机地址，即客户端与服务端**同时运行**在这台服务器上才能进行连接。所以需要绑定到网卡的ip，或者**使用0.0.0.0绑定到所有的网络地址**。\n\n> 2022-07-30\n\nsocket通信，也许会使用队列，一个个发给python端。但这样好像效率不高。  \n另一种方式是采取类似数据库连接池的方法，或者多线程。\n\n> 2022-08-01\n> 讨论了一下，边写边想吧。\n\n接口规范\n请求：\npath:图片绝对路径\nid:学号\ntype:j(健康码）x（行程码）\n\n例：{\"path\":\"/tmp/test.jpg\",\"id\":\"001\",\"type\":\"j\"}\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/关于健康码识别的网站开发进度.md","raw":"---\ntitle: 关于健康码识别的网站开发进度记录\ndate: 2022-05-21 20:22:23\ntags:\n    - SpringBoot\n    - java\ncategories:\n    - 编程记录\n---\n\n## 关于这个网站\n\n这个网站是大创项目的网站。用于健康码识别，目前什么都没有，只有一个空项目。~~啊，对，没错。~~  \n[github仓库地址](https://github.com/2450123/jkm_web)  \n\n\n### 关于网站的架构\n\n网站前端打算使用vue，前端由[青虬](https://reol077.github.io/)负责编写  \n网站后端打算使用springboot，由我负责  \n项目核心功能由[顾のEvery Day](https://gufanstudy.github.io/)负责，他也是这个项目的负责人（组长）。 ~~图像识别那块，我暂时还不是很懂啦，反正很厉害就对了~~  \n前后端肯定是要分离的，使用ajax，数据格式使用json。 ~~jsp不分离属实痛苦~~  \n后端与图像识别的python程序，目前打算使用socket（套接字）进行通信。 ~~目前只是了解过，还需要学习~~  \n而且临近期末，springboot暂时还没学完，所以开发进度在七月前估计会很慢。 ~~可能根本没有进度~~  \n\n目前进度：确认大体需求\n![大体需求.png](../images/关于健康码识别的网站开发进度记录/大体需求.png)\n> 2022-05-21  \n> 周六，楼下的广场舞很吵。\n\n### 数据库设计\n\n数据库设计了四张表，老师、学生、权限、班级  \n因为需求比较简单，比如权限暂时只有两种——能否查看统计信息，所以并没有采取复杂的角色和权限表。  \n同时因为对学院和专业没有什么明确的实际操作，所以写在了班级中，并未单独分表。  \n关于学生健康码信息的表，目前计划动态新建表，即每天新建一张表用于存储健康码的相关信息\n\n目前进度：创建数据库，搭建项目基本配置\n![img.png](../images/关于健康码识别的网站开发进度记录/数据库er图.png)\n> 2022-07-05  \n> 果然七月前完全没有进度，紧张的期末也终于是结束了。python实训（网课）开始了。  \n> ~~（还有几门成绩还不出，是不打算出了吗）~~\n\n\n## 具体开发过程\n\n### 注册部分（未完成\n\n注册部分使用邮箱进行验证，使用到了springboot自带的mail组件。还挺好用的，和之前使用的javax.mail的大体流程（邮件的设置之类的）是一样的。  \n同时也决定使用redis数据库，来解决同一用户使用不同浏览器或设备来进行邮件验证的数据共享问题。比之前采取静态类存取sessionId的方式会好一些。  \n最后，在发送邮件的调试过程中，我也决定使用日志来打印一些信息，进行排错，而非System.out.println()。  \n\n目前进度：大概完成了注册的三分之一。\n\n> 2022-07-08  \n> 今天也算是见证历史了，日本前首相安倍晋三今天中午遇刺，下午宣布死亡。  \n> 考虑以后可以给博客添加上类似历史上的今天这类tips。~~应该会有意义吧~~  \n\n### 老师注册部分（基本完成\n\n注册的流程大概如下：  \n1. 发送注册请求\n2. 生成验证码，将验证码同用户信息一起写入redis，发送验证邮件\n3. 访问验证链接\n4. 验证验证码是否正确\n   1. 正确则修改redis中的数据，将用户改为在线状态，用户邮箱写入cookie，同时修改它们的生命周期（方便后期登录使用），发送注册成功的邮件，写入数据库\n   2. 错误则返回错误信息\n\nredis中缓存的信息也从原来的string改成了hash，因为考虑到登录会使用，所以缓存中用户信息得记录详细。  \n关于验证的链接，返回的是html页面，使用的是thymeleaf，其实不太想用的，但总不能返回个json数据吧。因为页面显示完信息后，应该会3s后跳转到首页。比jsp方便了一些吧。（暂时没有好的处理方式  \n最后就是关于Controller层和Service层的一些想法。  \n业务层应该把这个请求分解成一个个服务，不同的请求也可以重用服务，提高代码的复用性。dao层就只做与数据库的交互。  \n对于Controller层和Service层的划分和设计，目前设计的还不是很好。得多写多看吧。  \n\n> 2022-07-10  \n> 脑子有点乱，去睡会觉。想把个人介绍写写，但还没想好怎么写。\n\n### 重新设计\n\n想了想，现在的注册虽然完成了，但是过于复杂。在邮件里嵌入链接进行验证是一个不太聪明的行为。  \n所以决定重新设计下使用流程：  \n1. 注册\n   1. 输入图片验证码，发送带有验证码的邮件。  \n   2. 同一页面，输入邮件的验证码提交后。即注册完成\n2. 登录\n   1. 账号，密码，图片验证码。  \n   2. 正确则登陆成功\n3. 忘记密码\n   1. 输入图片验证码，发送带有验证码的邮件。\n   2. 同一页面，输入邮件的验证码以及新密码提交后。即重置完成\n\n顺带把接口写好，需要什么，返回什么得提前规划好。\n\n> 2022-07-11\n> 脑子不是一般的乱，之前的设计问题很大。虽然也不是不能实现。\n> 好的设计会让程序更加简洁高效，接口写了一部分，先实现这部分。\n\n被大佬推荐了两个工具  \n自动生成api文档的swagger包，经过一番调试，终于能正常的扫描到controller中的所有api了。后面要使用他的注解来使生成的api更详细。  \n还有个就是Apifox，可以模拟各种请求，方便了调试。同时，也支持将swagger生成的api数据导入。也可以多人协同开发。应该会蛮好用的。  \n\n> 2022-07-11\n> 晚上补充，重构真痛苦啊。  \n> 在博客上写的接口文档就不用了，不如软件生成的。~~害，亏我写了蛮久的~~\n\n\n注册功能，重新写好了。比之前的逻辑简单了许多。重置密码的流程和注册是一样的，也方便后面开发。  \n使用spring-session-data-redis。把数据存到session中，session把数据存到redis，实现数据共享。  \n（不存redis问题好像也不大，因为改变了设计，不在邮件中夹杂链接，所以不需要考虑用户不同源访问的数据共享问题。这个依赖包是解决分布式session共享的问题的，用在这感觉没啥必要，纯session存储就足够了。不过都写好了也无所谓了）  \n\n> 2022-07-13  \n> 昨天忘写了。python实训布置了最后的大作业，就做个东西交上去，也没什么限制。我到现在也没想好要做啥，这几天要暂停去写大作业了。\n\n注册，登录，重置的接口基本实现了，但是没有完整的测试。  \n昨天试着写了上传图片的模块，还行，能上传，问题不大。后面要考虑如何和python程序进行数据交互了。  \n所以暂时缓一缓，因为负责python的人跑去上夜班了，没啥时间交流。  \n所以这几天先学学nginx吧。~~后面部署还是我~~。nginx看完再考虑别的。  \n\n> 2022-07-20\n> python实训的大作业交了个qq机器人，也不知道老师能不能跑起来。等python熟练点了，把qq机器人的配置和部署记录下。\n\n## 测试socket\n\njava客户端：\n~~~java\npackage org.example;\n\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class Client {\n    public static void main(String args[]) {\n        // 要连接的服务端IP地址和端口\n        String host = \"124.222.100.205\";\n        int port = 55533;\n        // 与服务端建立连接\n        Socket socket = new Socket(host, port);\n        // 建立连接后获得输出流\n        OutputStream outputStream = socket.getOutputStream();\n        String message = \"你好 socket test1!\";\n        socket.getOutputStream().write(message.getBytes(\"UTF-8\"));\n        //通过shutdownOutput高速服务器已经发送完数据，后续只能接受数据\n        socket.shutdownOutput();\n\n        InputStream inputStream = socket.getInputStream();\n        byte[] bytes = new byte[1024];\n        int len;\n        StringBuilder sb = new StringBuilder();\n        while ((len = inputStream.read(bytes)) != -1) {\n            //注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8\n            sb.append(new String(bytes, 0, len, \"UTF-8\"));\n        }\n        System.out.println(\"get message from server: \" + sb);\n\n        inputStream.close();\n        outputStream.close();\n        socket.close();\n    }\n}\n~~~\npython服务端：\n~~~python\nimport socket\n\nhost = '0.0.0.0'\nport = 55533\n\ntry:\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind((host, port))  \n    s.listen(1) \nexcept socket.error:\n    print('create socket failed')\n\nprint('socket created')\n\nwhile 1:\n    conn, addr = s.accept()\n    print(\"from\" + str(addr))\n    while 1:\n        data = conn.recv(1024)\n        if len(data) == 0:\n            conn.send('end'.encode())\n        else:\n            print(data.decode())\n            conn.send('end'.encode())\n        break\n    conn.close()\n~~~\n\n客户端报错：**Connection timed out: connect**\n原因：服务器端口未开放\n\n客户端报错：**Connection refused: connect**\n原因：服务端监听端口为 **127.0.0.1:55533**，但127.0.0.1表示本机地址，即客户端与服务端**同时运行**在这台服务器上才能进行连接。所以需要绑定到网卡的ip，或者**使用0.0.0.0绑定到所有的网络地址**。\n\n> 2022-07-30\n\nsocket通信，也许会使用队列，一个个发给python端。但这样好像效率不高。  \n另一种方式是采取类似数据库连接池的方法，或者多线程。\n\n> 2022-08-01\n> 讨论了一下，边写边想吧。\n\n接口规范\n请求：\npath:图片绝对路径\nid:学号\ntype:j(健康码）x（行程码）\n\n例：{\"path\":\"/tmp/test.jpg\",\"id\":\"001\",\"type\":\"j\"}\n\n\n\n\n\n\n\n\n\n\n","slug":"关于健康码识别的网站开发进度","published":1,"updated":"2022-08-20T12:37:34.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbdu001mo8ttei7hgrtw","content":"<h2 id=\"关于这个网站\"><a href=\"#关于这个网站\" class=\"headerlink\" title=\"关于这个网站\"></a>关于这个网站</h2><p>这个网站是大创项目的网站。用于健康码识别，目前什么都没有，只有一个空项目。<del>啊，对，没错。</del><br><a class=\"link\"   href=\"https://github.com/2450123/jkm_web\" >github仓库地址<i class=\"fas fa-external-link-alt\"></i></a>  </p>\n<h3 id=\"关于网站的架构\"><a href=\"#关于网站的架构\" class=\"headerlink\" title=\"关于网站的架构\"></a>关于网站的架构</h3><p>网站前端打算使用vue，前端由<a class=\"link\"   href=\"https://reol077.github.io/\" >青虬<i class=\"fas fa-external-link-alt\"></i></a>负责编写<br>网站后端打算使用springboot，由我负责<br>项目核心功能由<a class=\"link\"   href=\"https://gufanstudy.github.io/\" >顾のEvery Day<i class=\"fas fa-external-link-alt\"></i></a>负责，他也是这个项目的负责人（组长）。 <del>图像识别那块，我暂时还不是很懂啦，反正很厉害就对了</del><br>前后端肯定是要分离的，使用ajax，数据格式使用json。 <del>jsp不分离属实痛苦</del><br>后端与图像识别的python程序，目前打算使用socket（套接字）进行通信。 <del>目前只是了解过，还需要学习</del><br>而且临近期末，springboot暂时还没学完，所以开发进度在七月前估计会很慢。 <del>可能根本没有进度</del>  </p>\n<p>目前进度：确认大体需求<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%85%B3%E4%BA%8E%E5%81%A5%E5%BA%B7%E7%A0%81%E8%AF%86%E5%88%AB%E7%9A%84%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95/%E5%A4%A7%E4%BD%93%E9%9C%80%E6%B1%82.png\"\n                      alt=\"大体需求.png\"\n                ></p>\n<blockquote>\n<p>2022-05-21<br>周六，楼下的广场舞很吵。</p>\n</blockquote>\n<h3 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h3><p>数据库设计了四张表，老师、学生、权限、班级<br>因为需求比较简单，比如权限暂时只有两种——能否查看统计信息，所以并没有采取复杂的角色和权限表。<br>同时因为对学院和专业没有什么明确的实际操作，所以写在了班级中，并未单独分表。<br>关于学生健康码信息的表，目前计划动态新建表，即每天新建一张表用于存储健康码的相关信息</p>\n<p>目前进度：创建数据库，搭建项目基本配置<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%85%B3%E4%BA%8E%E5%81%A5%E5%BA%B7%E7%A0%81%E8%AF%86%E5%88%AB%E7%9A%84%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95/%E6%95%B0%E6%8D%AE%E5%BA%93er%E5%9B%BE.png\"\n                      alt=\"img.png\"\n                ></p>\n<blockquote>\n<p>2022-07-05<br>果然七月前完全没有进度，紧张的期末也终于是结束了。python实训（网课）开始了。<br><del>（还有几门成绩还不出，是不打算出了吗）</del></p>\n</blockquote>\n<h2 id=\"具体开发过程\"><a href=\"#具体开发过程\" class=\"headerlink\" title=\"具体开发过程\"></a>具体开发过程</h2><h3 id=\"注册部分（未完成\"><a href=\"#注册部分（未完成\" class=\"headerlink\" title=\"注册部分（未完成\"></a>注册部分（未完成</h3><p>注册部分使用邮箱进行验证，使用到了springboot自带的mail组件。还挺好用的，和之前使用的javax.mail的大体流程（邮件的设置之类的）是一样的。<br>同时也决定使用redis数据库，来解决同一用户使用不同浏览器或设备来进行邮件验证的数据共享问题。比之前采取静态类存取sessionId的方式会好一些。<br>最后，在发送邮件的调试过程中，我也决定使用日志来打印一些信息，进行排错，而非System.out.println()。  </p>\n<p>目前进度：大概完成了注册的三分之一。</p>\n<blockquote>\n<p>2022-07-08<br>今天也算是见证历史了，日本前首相安倍晋三今天中午遇刺，下午宣布死亡。<br>考虑以后可以给博客添加上类似历史上的今天这类tips。<del>应该会有意义吧</del>  </p>\n</blockquote>\n<h3 id=\"老师注册部分（基本完成\"><a href=\"#老师注册部分（基本完成\" class=\"headerlink\" title=\"老师注册部分（基本完成\"></a>老师注册部分（基本完成</h3><p>注册的流程大概如下：  </p>\n<ol>\n<li>发送注册请求</li>\n<li>生成验证码，将验证码同用户信息一起写入redis，发送验证邮件</li>\n<li>访问验证链接</li>\n<li>验证验证码是否正确<ol>\n<li>正确则修改redis中的数据，将用户改为在线状态，用户邮箱写入cookie，同时修改它们的生命周期（方便后期登录使用），发送注册成功的邮件，写入数据库</li>\n<li>错误则返回错误信息</li>\n</ol>\n</li>\n</ol>\n<p>redis中缓存的信息也从原来的string改成了hash，因为考虑到登录会使用，所以缓存中用户信息得记录详细。<br>关于验证的链接，返回的是html页面，使用的是thymeleaf，其实不太想用的，但总不能返回个json数据吧。因为页面显示完信息后，应该会3s后跳转到首页。比jsp方便了一些吧。（暂时没有好的处理方式<br>最后就是关于Controller层和Service层的一些想法。<br>业务层应该把这个请求分解成一个个服务，不同的请求也可以重用服务，提高代码的复用性。dao层就只做与数据库的交互。<br>对于Controller层和Service层的划分和设计，目前设计的还不是很好。得多写多看吧。  </p>\n<blockquote>\n<p>2022-07-10<br>脑子有点乱，去睡会觉。想把个人介绍写写，但还没想好怎么写。</p>\n</blockquote>\n<h3 id=\"重新设计\"><a href=\"#重新设计\" class=\"headerlink\" title=\"重新设计\"></a>重新设计</h3><p>想了想，现在的注册虽然完成了，但是过于复杂。在邮件里嵌入链接进行验证是一个不太聪明的行为。<br>所以决定重新设计下使用流程：  </p>\n<ol>\n<li>注册<ol>\n<li>输入图片验证码，发送带有验证码的邮件。  </li>\n<li>同一页面，输入邮件的验证码提交后。即注册完成</li>\n</ol>\n</li>\n<li>登录<ol>\n<li>账号，密码，图片验证码。  </li>\n<li>正确则登陆成功</li>\n</ol>\n</li>\n<li>忘记密码<ol>\n<li>输入图片验证码，发送带有验证码的邮件。</li>\n<li>同一页面，输入邮件的验证码以及新密码提交后。即重置完成</li>\n</ol>\n</li>\n</ol>\n<p>顺带把接口写好，需要什么，返回什么得提前规划好。</p>\n<blockquote>\n<p>2022-07-11<br>脑子不是一般的乱，之前的设计问题很大。虽然也不是不能实现。<br>好的设计会让程序更加简洁高效，接口写了一部分，先实现这部分。</p>\n</blockquote>\n<p>被大佬推荐了两个工具<br>自动生成api文档的swagger包，经过一番调试，终于能正常的扫描到controller中的所有api了。后面要使用他的注解来使生成的api更详细。<br>还有个就是Apifox，可以模拟各种请求，方便了调试。同时，也支持将swagger生成的api数据导入。也可以多人协同开发。应该会蛮好用的。  </p>\n<blockquote>\n<p>2022-07-11<br>晚上补充，重构真痛苦啊。<br>在博客上写的接口文档就不用了，不如软件生成的。<del>害，亏我写了蛮久的</del></p>\n</blockquote>\n<p>注册功能，重新写好了。比之前的逻辑简单了许多。重置密码的流程和注册是一样的，也方便后面开发。<br>使用spring-session-data-redis。把数据存到session中，session把数据存到redis，实现数据共享。<br>（不存redis问题好像也不大，因为改变了设计，不在邮件中夹杂链接，所以不需要考虑用户不同源访问的数据共享问题。这个依赖包是解决分布式session共享的问题的，用在这感觉没啥必要，纯session存储就足够了。不过都写好了也无所谓了）  </p>\n<blockquote>\n<p>2022-07-13<br>昨天忘写了。python实训布置了最后的大作业，就做个东西交上去，也没什么限制。我到现在也没想好要做啥，这几天要暂停去写大作业了。</p>\n</blockquote>\n<p>注册，登录，重置的接口基本实现了，但是没有完整的测试。<br>昨天试着写了上传图片的模块，还行，能上传，问题不大。后面要考虑如何和python程序进行数据交互了。<br>所以暂时缓一缓，因为负责python的人跑去上夜班了，没啥时间交流。<br>所以这几天先学学nginx吧。<del>后面部署还是我</del>。nginx看完再考虑别的。  </p>\n<blockquote>\n<p>2022-07-20<br>python实训的大作业交了个qq机器人，也不知道老师能不能跑起来。等python熟练点了，把qq机器人的配置和部署记录下。</p>\n</blockquote>\n<h2 id=\"测试socket\"><a href=\"#测试socket\" class=\"headerlink\" title=\"测试socket\"></a>测试socket</h2><p>java客户端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 要连接的服务端IP地址和端口</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">host</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;124.222.100.205&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">55533</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 与服务端建立连接</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(host, port);</span><br><span class=\"line\">        <span class=\"comment\">// 建立连接后获得输出流</span></span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> socket.getOutputStream();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你好 socket test1!&quot;</span>;</span><br><span class=\"line\">        socket.getOutputStream().write(message.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//通过shutdownOutput高速服务器已经发送完数据，后续只能接受数据</span></span><br><span class=\"line\">        socket.shutdownOutput();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> len;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len = inputStream.read(bytes)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class=\"line\">            sb.append(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"number\">0</span>, len, <span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;get message from server: &quot;</span> + sb);</span><br><span class=\"line\"></span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>python服务端：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\">host = <span class=\"string\">&#x27;0.0.0.0&#x27;</span></span><br><span class=\"line\">port = <span class=\"number\">55533</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    s.bind((host, port))  </span><br><span class=\"line\">    s.listen(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"keyword\">except</span> socket.error:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;create socket failed&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;socket created&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    conn, addr = s.accept()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;from&quot;</span> + <span class=\"built_in\">str</span>(addr))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        data = conn.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(data) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            conn.send(<span class=\"string\">&#x27;end&#x27;</span>.encode())</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(data.decode())</span><br><span class=\"line\">            conn.send(<span class=\"string\">&#x27;end&#x27;</span>.encode())</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    conn.close()</span><br></pre></td></tr></table></figure>\n\n<p>客户端报错：<strong>Connection timed out: connect</strong><br>原因：服务器端口未开放</p>\n<p>客户端报错：<strong>Connection refused: connect</strong><br>原因：服务端监听端口为 <strong>127.0.0.1:55533</strong>，但127.0.0.1表示本机地址，即客户端与服务端<strong>同时运行</strong>在这台服务器上才能进行连接。所以需要绑定到网卡的ip，或者<strong>使用0.0.0.0绑定到所有的网络地址</strong>。</p>\n<blockquote>\n<p>2022-07-30</p>\n</blockquote>\n<p>socket通信，也许会使用队列，一个个发给python端。但这样好像效率不高。<br>另一种方式是采取类似数据库连接池的方法，或者多线程。</p>\n<blockquote>\n<p>2022-08-01<br>讨论了一下，边写边想吧。</p>\n</blockquote>\n<p>接口规范<br>请求：<br>path:图片绝对路径<br>id:学号<br>type:j(健康码）x（行程码）</p>\n<p>例：{“path”:”/tmp/test.jpg”,”id”:”001”,”type”:”j”}</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"关于这个网站\"><a href=\"#关于这个网站\" class=\"headerlink\" title=\"关于这个网站\"></a>关于这个网站</h2><p>这个网站是大创项目的网站。用于健康码识别，目前什么都没有，只有一个空项目。<del>啊，对，没错。</del><br><a class=\"link\"   href=\"https://github.com/2450123/jkm_web\" >github仓库地址<i class=\"fas fa-external-link-alt\"></i></a>  </p>\n<h3 id=\"关于网站的架构\"><a href=\"#关于网站的架构\" class=\"headerlink\" title=\"关于网站的架构\"></a>关于网站的架构</h3><p>网站前端打算使用vue，前端由<a class=\"link\"   href=\"https://reol077.github.io/\" >青虬<i class=\"fas fa-external-link-alt\"></i></a>负责编写<br>网站后端打算使用springboot，由我负责<br>项目核心功能由<a class=\"link\"   href=\"https://gufanstudy.github.io/\" >顾のEvery Day<i class=\"fas fa-external-link-alt\"></i></a>负责，他也是这个项目的负责人（组长）。 <del>图像识别那块，我暂时还不是很懂啦，反正很厉害就对了</del><br>前后端肯定是要分离的，使用ajax，数据格式使用json。 <del>jsp不分离属实痛苦</del><br>后端与图像识别的python程序，目前打算使用socket（套接字）进行通信。 <del>目前只是了解过，还需要学习</del><br>而且临近期末，springboot暂时还没学完，所以开发进度在七月前估计会很慢。 <del>可能根本没有进度</del>  </p>\n<p>目前进度：确认大体需求<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%85%B3%E4%BA%8E%E5%81%A5%E5%BA%B7%E7%A0%81%E8%AF%86%E5%88%AB%E7%9A%84%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95/%E5%A4%A7%E4%BD%93%E9%9C%80%E6%B1%82.png\"\n                      alt=\"大体需求.png\"\n                ></p>\n<blockquote>\n<p>2022-05-21<br>周六，楼下的广场舞很吵。</p>\n</blockquote>\n<h3 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h3><p>数据库设计了四张表，老师、学生、权限、班级<br>因为需求比较简单，比如权限暂时只有两种——能否查看统计信息，所以并没有采取复杂的角色和权限表。<br>同时因为对学院和专业没有什么明确的实际操作，所以写在了班级中，并未单独分表。<br>关于学生健康码信息的表，目前计划动态新建表，即每天新建一张表用于存储健康码的相关信息</p>\n<p>目前进度：创建数据库，搭建项目基本配置<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%85%B3%E4%BA%8E%E5%81%A5%E5%BA%B7%E7%A0%81%E8%AF%86%E5%88%AB%E7%9A%84%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91%E8%BF%9B%E5%BA%A6%E8%AE%B0%E5%BD%95/%E6%95%B0%E6%8D%AE%E5%BA%93er%E5%9B%BE.png\"\n                      alt=\"img.png\"\n                ></p>\n<blockquote>\n<p>2022-07-05<br>果然七月前完全没有进度，紧张的期末也终于是结束了。python实训（网课）开始了。<br><del>（还有几门成绩还不出，是不打算出了吗）</del></p>\n</blockquote>\n<h2 id=\"具体开发过程\"><a href=\"#具体开发过程\" class=\"headerlink\" title=\"具体开发过程\"></a>具体开发过程</h2><h3 id=\"注册部分（未完成\"><a href=\"#注册部分（未完成\" class=\"headerlink\" title=\"注册部分（未完成\"></a>注册部分（未完成</h3><p>注册部分使用邮箱进行验证，使用到了springboot自带的mail组件。还挺好用的，和之前使用的javax.mail的大体流程（邮件的设置之类的）是一样的。<br>同时也决定使用redis数据库，来解决同一用户使用不同浏览器或设备来进行邮件验证的数据共享问题。比之前采取静态类存取sessionId的方式会好一些。<br>最后，在发送邮件的调试过程中，我也决定使用日志来打印一些信息，进行排错，而非System.out.println()。  </p>\n<p>目前进度：大概完成了注册的三分之一。</p>\n<blockquote>\n<p>2022-07-08<br>今天也算是见证历史了，日本前首相安倍晋三今天中午遇刺，下午宣布死亡。<br>考虑以后可以给博客添加上类似历史上的今天这类tips。<del>应该会有意义吧</del>  </p>\n</blockquote>\n<h3 id=\"老师注册部分（基本完成\"><a href=\"#老师注册部分（基本完成\" class=\"headerlink\" title=\"老师注册部分（基本完成\"></a>老师注册部分（基本完成</h3><p>注册的流程大概如下：  </p>\n<ol>\n<li>发送注册请求</li>\n<li>生成验证码，将验证码同用户信息一起写入redis，发送验证邮件</li>\n<li>访问验证链接</li>\n<li>验证验证码是否正确<ol>\n<li>正确则修改redis中的数据，将用户改为在线状态，用户邮箱写入cookie，同时修改它们的生命周期（方便后期登录使用），发送注册成功的邮件，写入数据库</li>\n<li>错误则返回错误信息</li>\n</ol>\n</li>\n</ol>\n<p>redis中缓存的信息也从原来的string改成了hash，因为考虑到登录会使用，所以缓存中用户信息得记录详细。<br>关于验证的链接，返回的是html页面，使用的是thymeleaf，其实不太想用的，但总不能返回个json数据吧。因为页面显示完信息后，应该会3s后跳转到首页。比jsp方便了一些吧。（暂时没有好的处理方式<br>最后就是关于Controller层和Service层的一些想法。<br>业务层应该把这个请求分解成一个个服务，不同的请求也可以重用服务，提高代码的复用性。dao层就只做与数据库的交互。<br>对于Controller层和Service层的划分和设计，目前设计的还不是很好。得多写多看吧。  </p>\n<blockquote>\n<p>2022-07-10<br>脑子有点乱，去睡会觉。想把个人介绍写写，但还没想好怎么写。</p>\n</blockquote>\n<h3 id=\"重新设计\"><a href=\"#重新设计\" class=\"headerlink\" title=\"重新设计\"></a>重新设计</h3><p>想了想，现在的注册虽然完成了，但是过于复杂。在邮件里嵌入链接进行验证是一个不太聪明的行为。<br>所以决定重新设计下使用流程：  </p>\n<ol>\n<li>注册<ol>\n<li>输入图片验证码，发送带有验证码的邮件。  </li>\n<li>同一页面，输入邮件的验证码提交后。即注册完成</li>\n</ol>\n</li>\n<li>登录<ol>\n<li>账号，密码，图片验证码。  </li>\n<li>正确则登陆成功</li>\n</ol>\n</li>\n<li>忘记密码<ol>\n<li>输入图片验证码，发送带有验证码的邮件。</li>\n<li>同一页面，输入邮件的验证码以及新密码提交后。即重置完成</li>\n</ol>\n</li>\n</ol>\n<p>顺带把接口写好，需要什么，返回什么得提前规划好。</p>\n<blockquote>\n<p>2022-07-11<br>脑子不是一般的乱，之前的设计问题很大。虽然也不是不能实现。<br>好的设计会让程序更加简洁高效，接口写了一部分，先实现这部分。</p>\n</blockquote>\n<p>被大佬推荐了两个工具<br>自动生成api文档的swagger包，经过一番调试，终于能正常的扫描到controller中的所有api了。后面要使用他的注解来使生成的api更详细。<br>还有个就是Apifox，可以模拟各种请求，方便了调试。同时，也支持将swagger生成的api数据导入。也可以多人协同开发。应该会蛮好用的。  </p>\n<blockquote>\n<p>2022-07-11<br>晚上补充，重构真痛苦啊。<br>在博客上写的接口文档就不用了，不如软件生成的。<del>害，亏我写了蛮久的</del></p>\n</blockquote>\n<p>注册功能，重新写好了。比之前的逻辑简单了许多。重置密码的流程和注册是一样的，也方便后面开发。<br>使用spring-session-data-redis。把数据存到session中，session把数据存到redis，实现数据共享。<br>（不存redis问题好像也不大，因为改变了设计，不在邮件中夹杂链接，所以不需要考虑用户不同源访问的数据共享问题。这个依赖包是解决分布式session共享的问题的，用在这感觉没啥必要，纯session存储就足够了。不过都写好了也无所谓了）  </p>\n<blockquote>\n<p>2022-07-13<br>昨天忘写了。python实训布置了最后的大作业，就做个东西交上去，也没什么限制。我到现在也没想好要做啥，这几天要暂停去写大作业了。</p>\n</blockquote>\n<p>注册，登录，重置的接口基本实现了，但是没有完整的测试。<br>昨天试着写了上传图片的模块，还行，能上传，问题不大。后面要考虑如何和python程序进行数据交互了。<br>所以暂时缓一缓，因为负责python的人跑去上夜班了，没啥时间交流。<br>所以这几天先学学nginx吧。<del>后面部署还是我</del>。nginx看完再考虑别的。  </p>\n<blockquote>\n<p>2022-07-20<br>python实训的大作业交了个qq机器人，也不知道老师能不能跑起来。等python熟练点了，把qq机器人的配置和部署记录下。</p>\n</blockquote>\n<h2 id=\"测试socket\"><a href=\"#测试socket\" class=\"headerlink\" title=\"测试socket\"></a>测试socket</h2><p>java客户端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Socket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 要连接的服务端IP地址和端口</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">host</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;124.222.100.205&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">55533</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 与服务端建立连接</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(host, port);</span><br><span class=\"line\">        <span class=\"comment\">// 建立连接后获得输出流</span></span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> socket.getOutputStream();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你好 socket test1!&quot;</span>;</span><br><span class=\"line\">        socket.getOutputStream().write(message.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//通过shutdownOutput高速服务器已经发送完数据，后续只能接受数据</span></span><br><span class=\"line\">        socket.shutdownOutput();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> socket.getInputStream();</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> len;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((len = inputStream.read(bytes)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//注意指定编码格式，发送方和接收方一定要统一，建议使用UTF-8</span></span><br><span class=\"line\">            sb.append(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes, <span class=\"number\">0</span>, len, <span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;get message from server: &quot;</span> + sb);</span><br><span class=\"line\"></span><br><span class=\"line\">        inputStream.close();</span><br><span class=\"line\">        outputStream.close();</span><br><span class=\"line\">        socket.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>python服务端：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\">host = <span class=\"string\">&#x27;0.0.0.0&#x27;</span></span><br><span class=\"line\">port = <span class=\"number\">55533</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    s.bind((host, port))  </span><br><span class=\"line\">    s.listen(<span class=\"number\">1</span>) </span><br><span class=\"line\"><span class=\"keyword\">except</span> socket.error:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;create socket failed&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;socket created&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    conn, addr = s.accept()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;from&quot;</span> + <span class=\"built_in\">str</span>(addr))</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        data = conn.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(data) == <span class=\"number\">0</span>:</span><br><span class=\"line\">            conn.send(<span class=\"string\">&#x27;end&#x27;</span>.encode())</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(data.decode())</span><br><span class=\"line\">            conn.send(<span class=\"string\">&#x27;end&#x27;</span>.encode())</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    conn.close()</span><br></pre></td></tr></table></figure>\n\n<p>客户端报错：<strong>Connection timed out: connect</strong><br>原因：服务器端口未开放</p>\n<p>客户端报错：<strong>Connection refused: connect</strong><br>原因：服务端监听端口为 <strong>127.0.0.1:55533</strong>，但127.0.0.1表示本机地址，即客户端与服务端<strong>同时运行</strong>在这台服务器上才能进行连接。所以需要绑定到网卡的ip，或者<strong>使用0.0.0.0绑定到所有的网络地址</strong>。</p>\n<blockquote>\n<p>2022-07-30</p>\n</blockquote>\n<p>socket通信，也许会使用队列，一个个发给python端。但这样好像效率不高。<br>另一种方式是采取类似数据库连接池的方法，或者多线程。</p>\n<blockquote>\n<p>2022-08-01<br>讨论了一下，边写边想吧。</p>\n</blockquote>\n<p>接口规范<br>请求：<br>path:图片绝对路径<br>id:学号<br>type:j(健康码）x（行程码）</p>\n<p>例：{“path”:”/tmp/test.jpg”,”id”:”001”,”type”:”j”}</p>\n"},{"title":"南京总统府","date":"2022-08-27T06:12:08.000Z","_content":"\n## 前言\n\n无意间发现小米云空间满了，点进去一看，原来是自动备份给塞满了。\n然后发现了以前出去玩的照片，或许不是自动备份的话，它们也许就消失了。\n所以我想，博客或许也是另一种备份的方式。\n\n这些照片是 2022-01-21 拍的\n本来打算上午去鸡鸣寺，下午去总统府的（通了地铁，直通南京是真的爽）。但是早上到南京之后，鸡鸣寺那天并没有开门（没记错的话，应该是疫情管控。可恶的疫情啊）\n\n另外，中午吃的那家鸭血粉丝是真的不好吃~~（这个倒是记得蛮清楚的）~~。\n\n## 照片\n\n图片顺序就无所谓了。~~能找到就不错了~~\n\n![0](../images/南京总统府/0.jpg)\n![1](../images/南京总统府/1.jpg)\n![2](../images/南京总统府/2.jpg)\n![3](../images/南京总统府/3.jpg)\n![4](../images/南京总统府/4.jpg)\n![5](../images/南京总统府/5.jpg)\n![6](../images/南京总统府/6.jpg)\n![7](../images/南京总统府/7.jpg)\n![8](../images/南京总统府/8.jpg)\n![9](../images/南京总统府/9.jpg)\n![10](../images/南京总统府/10.jpg)\n![11](../images/南京总统府/11.jpg)\n![12](../images/南京总统府/12.jpg)\n![13](../images/南京总统府/13.jpg)\n![14](../images/南京总统府/14.jpg)\n![15](../images/南京总统府/15.jpg)\n![16](../images/南京总统府/16.jpg)\n![17](../images/南京总统府/17.jpg)\n![18](../images/南京总统府/18.jpg)\n![19](../images/南京总统府/19.jpg)\n![20](../images/南京总统府/20.jpg)\n![21](../images/南京总统府/21.jpg)\n![22](../images/南京总统府/22.jpg)\n![23](../images/南京总统府/23.jpg)\n![24](../images/南京总统府/24.jpg)\n![25](../images/南京总统府/25.jpg)\n![26](../images/南京总统府/26.jpg)\n![27](../images/南京总统府/27.jpg)\n![28](../images/南京总统府/28.jpg)\n![29](../images/南京总统府/29.jpg)\n![30](../images/南京总统府/30.jpg)\n![31](../images/南京总统府/31.jpg)\n![32](../images/南京总统府/32.jpg)\n![33](../images/南京总统府/33.jpg)\n![34](../images/南京总统府/34.jpg)\n![35](../images/南京总统府/35.jpg)\n![36](../images/南京总统府/36.jpg)\n![37](../images/南京总统府/37.jpg)\n![38](../images/南京总统府/38.jpg)\n![39](../images/南京总统府/39.jpg)\n![40](../images/南京总统府/40.jpg)\n![41](../images/南京总统府/41.jpg)\n![42](../images/南京总统府/42.jpg)\n![43](../images/南京总统府/43.jpg)\n![44](../images/南京总统府/44.jpg)\n![45](../images/南京总统府/45.jpg)\n![46](../images/南京总统府/46.jpg)\n![47](../images/南京总统府/47.jpg)\n![48](../images/南京总统府/48.jpg)\n![49](../images/南京总统府/49.jpg)\n![50](../images/南京总统府/50.jpg)\n![51](../images/南京总统府/51.jpg)\n![52](../images/南京总统府/52.jpg)\n![53](../images/南京总统府/53.jpg)\n![54](../images/南京总统府/54.jpg)\n![55](../images/南京总统府/55.jpg)\n![56](../images/南京总统府/56.jpg)\n![57](../images/南京总统府/57.jpg)\n![58](../images/南京总统府/58.jpg)\n![59](../images/南京总统府/59.jpg)\n![60](../images/南京总统府/60.jpg)\n![61](../images/南京总统府/61.jpg)\n![62](../images/南京总统府/62.jpg)\n![63](../images/南京总统府/63.jpg)\n![64](../images/南京总统府/64.jpg)\n![65](../images/南京总统府/65.jpg)\n![66](../images/南京总统府/66.jpg)\n![67](../images/南京总统府/67.jpg)\n![68](../images/南京总统府/68.jpg)\n![69](../images/南京总统府/69.jpg)\n![70](../images/南京总统府/70.jpg)\n![71](../images/南京总统府/71.jpg)\n![72](../images/南京总统府/72.jpg)\n![73](../images/南京总统府/73.jpg)\n![74](../images/南京总统府/74.jpg)\n\n## 最后\n\n陪我去的憨憨的背影单独放\n![75](../images/南京总统府/75.jpg)\n\n","source":"_posts/南京总统府.md","raw":"---\ntitle: 南京总统府\ndate: 2022-08-27 14:12:08\ntags:\n- 游\n- 南京\n- 多图\ncategories:\n- 记录生活\n---\n\n## 前言\n\n无意间发现小米云空间满了，点进去一看，原来是自动备份给塞满了。\n然后发现了以前出去玩的照片，或许不是自动备份的话，它们也许就消失了。\n所以我想，博客或许也是另一种备份的方式。\n\n这些照片是 2022-01-21 拍的\n本来打算上午去鸡鸣寺，下午去总统府的（通了地铁，直通南京是真的爽）。但是早上到南京之后，鸡鸣寺那天并没有开门（没记错的话，应该是疫情管控。可恶的疫情啊）\n\n另外，中午吃的那家鸭血粉丝是真的不好吃~~（这个倒是记得蛮清楚的）~~。\n\n## 照片\n\n图片顺序就无所谓了。~~能找到就不错了~~\n\n![0](../images/南京总统府/0.jpg)\n![1](../images/南京总统府/1.jpg)\n![2](../images/南京总统府/2.jpg)\n![3](../images/南京总统府/3.jpg)\n![4](../images/南京总统府/4.jpg)\n![5](../images/南京总统府/5.jpg)\n![6](../images/南京总统府/6.jpg)\n![7](../images/南京总统府/7.jpg)\n![8](../images/南京总统府/8.jpg)\n![9](../images/南京总统府/9.jpg)\n![10](../images/南京总统府/10.jpg)\n![11](../images/南京总统府/11.jpg)\n![12](../images/南京总统府/12.jpg)\n![13](../images/南京总统府/13.jpg)\n![14](../images/南京总统府/14.jpg)\n![15](../images/南京总统府/15.jpg)\n![16](../images/南京总统府/16.jpg)\n![17](../images/南京总统府/17.jpg)\n![18](../images/南京总统府/18.jpg)\n![19](../images/南京总统府/19.jpg)\n![20](../images/南京总统府/20.jpg)\n![21](../images/南京总统府/21.jpg)\n![22](../images/南京总统府/22.jpg)\n![23](../images/南京总统府/23.jpg)\n![24](../images/南京总统府/24.jpg)\n![25](../images/南京总统府/25.jpg)\n![26](../images/南京总统府/26.jpg)\n![27](../images/南京总统府/27.jpg)\n![28](../images/南京总统府/28.jpg)\n![29](../images/南京总统府/29.jpg)\n![30](../images/南京总统府/30.jpg)\n![31](../images/南京总统府/31.jpg)\n![32](../images/南京总统府/32.jpg)\n![33](../images/南京总统府/33.jpg)\n![34](../images/南京总统府/34.jpg)\n![35](../images/南京总统府/35.jpg)\n![36](../images/南京总统府/36.jpg)\n![37](../images/南京总统府/37.jpg)\n![38](../images/南京总统府/38.jpg)\n![39](../images/南京总统府/39.jpg)\n![40](../images/南京总统府/40.jpg)\n![41](../images/南京总统府/41.jpg)\n![42](../images/南京总统府/42.jpg)\n![43](../images/南京总统府/43.jpg)\n![44](../images/南京总统府/44.jpg)\n![45](../images/南京总统府/45.jpg)\n![46](../images/南京总统府/46.jpg)\n![47](../images/南京总统府/47.jpg)\n![48](../images/南京总统府/48.jpg)\n![49](../images/南京总统府/49.jpg)\n![50](../images/南京总统府/50.jpg)\n![51](../images/南京总统府/51.jpg)\n![52](../images/南京总统府/52.jpg)\n![53](../images/南京总统府/53.jpg)\n![54](../images/南京总统府/54.jpg)\n![55](../images/南京总统府/55.jpg)\n![56](../images/南京总统府/56.jpg)\n![57](../images/南京总统府/57.jpg)\n![58](../images/南京总统府/58.jpg)\n![59](../images/南京总统府/59.jpg)\n![60](../images/南京总统府/60.jpg)\n![61](../images/南京总统府/61.jpg)\n![62](../images/南京总统府/62.jpg)\n![63](../images/南京总统府/63.jpg)\n![64](../images/南京总统府/64.jpg)\n![65](../images/南京总统府/65.jpg)\n![66](../images/南京总统府/66.jpg)\n![67](../images/南京总统府/67.jpg)\n![68](../images/南京总统府/68.jpg)\n![69](../images/南京总统府/69.jpg)\n![70](../images/南京总统府/70.jpg)\n![71](../images/南京总统府/71.jpg)\n![72](../images/南京总统府/72.jpg)\n![73](../images/南京总统府/73.jpg)\n![74](../images/南京总统府/74.jpg)\n\n## 最后\n\n陪我去的憨憨的背影单独放\n![75](../images/南京总统府/75.jpg)\n\n","slug":"南京总统府","published":1,"updated":"2022-08-27T08:00:13.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbdu001no8tt3tml6qb9","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>无意间发现小米云空间满了，点进去一看，原来是自动备份给塞满了。<br>然后发现了以前出去玩的照片，或许不是自动备份的话，它们也许就消失了。<br>所以我想，博客或许也是另一种备份的方式。</p>\n<p>这些照片是 2022-01-21 拍的<br>本来打算上午去鸡鸣寺，下午去总统府的（通了地铁，直通南京是真的爽）。但是早上到南京之后，鸡鸣寺那天并没有开门（没记错的话，应该是疫情管控。可恶的疫情啊）</p>\n<p>另外，中午吃的那家鸭血粉丝是真的不好吃<del>（这个倒是记得蛮清楚的）</del>。</p>\n<h2 id=\"照片\"><a href=\"#照片\" class=\"headerlink\" title=\"照片\"></a>照片</h2><p>图片顺序就无所谓了。<del>能找到就不错了</del></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/0.jpg\"\n                      alt=\"0\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/1.jpg\"\n                      alt=\"1\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/2.jpg\"\n                      alt=\"2\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/3.jpg\"\n                      alt=\"3\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/4.jpg\"\n                      alt=\"4\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/5.jpg\"\n                      alt=\"5\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/6.jpg\"\n                      alt=\"6\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/7.jpg\"\n                      alt=\"7\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/8.jpg\"\n                      alt=\"8\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/9.jpg\"\n                      alt=\"9\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/10.jpg\"\n                      alt=\"10\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/11.jpg\"\n                      alt=\"11\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/12.jpg\"\n                      alt=\"12\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/13.jpg\"\n                      alt=\"13\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/14.jpg\"\n                      alt=\"14\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/15.jpg\"\n                      alt=\"15\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/16.jpg\"\n                      alt=\"16\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/17.jpg\"\n                      alt=\"17\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/18.jpg\"\n                      alt=\"18\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/19.jpg\"\n                      alt=\"19\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/20.jpg\"\n                      alt=\"20\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/21.jpg\"\n                      alt=\"21\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/22.jpg\"\n                      alt=\"22\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/23.jpg\"\n                      alt=\"23\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/24.jpg\"\n                      alt=\"24\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/25.jpg\"\n                      alt=\"25\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/26.jpg\"\n                      alt=\"26\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/27.jpg\"\n                      alt=\"27\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/28.jpg\"\n                      alt=\"28\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/29.jpg\"\n                      alt=\"29\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/30.jpg\"\n                      alt=\"30\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/31.jpg\"\n                      alt=\"31\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/32.jpg\"\n                      alt=\"32\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/33.jpg\"\n                      alt=\"33\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/34.jpg\"\n                      alt=\"34\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/35.jpg\"\n                      alt=\"35\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/36.jpg\"\n                      alt=\"36\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/37.jpg\"\n                      alt=\"37\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/38.jpg\"\n                      alt=\"38\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/39.jpg\"\n                      alt=\"39\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/40.jpg\"\n                      alt=\"40\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/41.jpg\"\n                      alt=\"41\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/42.jpg\"\n                      alt=\"42\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/43.jpg\"\n                      alt=\"43\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/44.jpg\"\n                      alt=\"44\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/45.jpg\"\n                      alt=\"45\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/46.jpg\"\n                      alt=\"46\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/47.jpg\"\n                      alt=\"47\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/48.jpg\"\n                      alt=\"48\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/49.jpg\"\n                      alt=\"49\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/50.jpg\"\n                      alt=\"50\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/51.jpg\"\n                      alt=\"51\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/52.jpg\"\n                      alt=\"52\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/53.jpg\"\n                      alt=\"53\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/54.jpg\"\n                      alt=\"54\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/55.jpg\"\n                      alt=\"55\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/56.jpg\"\n                      alt=\"56\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/57.jpg\"\n                      alt=\"57\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/58.jpg\"\n                      alt=\"58\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/59.jpg\"\n                      alt=\"59\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/60.jpg\"\n                      alt=\"60\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/61.jpg\"\n                      alt=\"61\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/62.jpg\"\n                      alt=\"62\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/63.jpg\"\n                      alt=\"63\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/64.jpg\"\n                      alt=\"64\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/65.jpg\"\n                      alt=\"65\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/66.jpg\"\n                      alt=\"66\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/67.jpg\"\n                      alt=\"67\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/68.jpg\"\n                      alt=\"68\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/69.jpg\"\n                      alt=\"69\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/70.jpg\"\n                      alt=\"70\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/71.jpg\"\n                      alt=\"71\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/72.jpg\"\n                      alt=\"72\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/73.jpg\"\n                      alt=\"73\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/74.jpg\"\n                      alt=\"74\"\n                ></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>陪我去的憨憨的背影单独放<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/75.jpg\"\n                      alt=\"75\"\n                ></p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>无意间发现小米云空间满了，点进去一看，原来是自动备份给塞满了。<br>然后发现了以前出去玩的照片，或许不是自动备份的话，它们也许就消失了。<br>所以我想，博客或许也是另一种备份的方式。</p>\n<p>这些照片是 2022-01-21 拍的<br>本来打算上午去鸡鸣寺，下午去总统府的（通了地铁，直通南京是真的爽）。但是早上到南京之后，鸡鸣寺那天并没有开门（没记错的话，应该是疫情管控。可恶的疫情啊）</p>\n<p>另外，中午吃的那家鸭血粉丝是真的不好吃<del>（这个倒是记得蛮清楚的）</del>。</p>\n<h2 id=\"照片\"><a href=\"#照片\" class=\"headerlink\" title=\"照片\"></a>照片</h2><p>图片顺序就无所谓了。<del>能找到就不错了</del></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/0.jpg\"\n                      alt=\"0\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/1.jpg\"\n                      alt=\"1\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/2.jpg\"\n                      alt=\"2\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/3.jpg\"\n                      alt=\"3\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/4.jpg\"\n                      alt=\"4\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/5.jpg\"\n                      alt=\"5\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/6.jpg\"\n                      alt=\"6\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/7.jpg\"\n                      alt=\"7\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/8.jpg\"\n                      alt=\"8\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/9.jpg\"\n                      alt=\"9\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/10.jpg\"\n                      alt=\"10\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/11.jpg\"\n                      alt=\"11\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/12.jpg\"\n                      alt=\"12\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/13.jpg\"\n                      alt=\"13\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/14.jpg\"\n                      alt=\"14\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/15.jpg\"\n                      alt=\"15\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/16.jpg\"\n                      alt=\"16\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/17.jpg\"\n                      alt=\"17\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/18.jpg\"\n                      alt=\"18\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/19.jpg\"\n                      alt=\"19\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/20.jpg\"\n                      alt=\"20\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/21.jpg\"\n                      alt=\"21\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/22.jpg\"\n                      alt=\"22\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/23.jpg\"\n                      alt=\"23\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/24.jpg\"\n                      alt=\"24\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/25.jpg\"\n                      alt=\"25\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/26.jpg\"\n                      alt=\"26\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/27.jpg\"\n                      alt=\"27\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/28.jpg\"\n                      alt=\"28\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/29.jpg\"\n                      alt=\"29\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/30.jpg\"\n                      alt=\"30\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/31.jpg\"\n                      alt=\"31\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/32.jpg\"\n                      alt=\"32\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/33.jpg\"\n                      alt=\"33\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/34.jpg\"\n                      alt=\"34\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/35.jpg\"\n                      alt=\"35\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/36.jpg\"\n                      alt=\"36\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/37.jpg\"\n                      alt=\"37\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/38.jpg\"\n                      alt=\"38\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/39.jpg\"\n                      alt=\"39\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/40.jpg\"\n                      alt=\"40\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/41.jpg\"\n                      alt=\"41\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/42.jpg\"\n                      alt=\"42\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/43.jpg\"\n                      alt=\"43\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/44.jpg\"\n                      alt=\"44\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/45.jpg\"\n                      alt=\"45\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/46.jpg\"\n                      alt=\"46\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/47.jpg\"\n                      alt=\"47\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/48.jpg\"\n                      alt=\"48\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/49.jpg\"\n                      alt=\"49\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/50.jpg\"\n                      alt=\"50\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/51.jpg\"\n                      alt=\"51\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/52.jpg\"\n                      alt=\"52\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/53.jpg\"\n                      alt=\"53\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/54.jpg\"\n                      alt=\"54\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/55.jpg\"\n                      alt=\"55\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/56.jpg\"\n                      alt=\"56\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/57.jpg\"\n                      alt=\"57\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/58.jpg\"\n                      alt=\"58\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/59.jpg\"\n                      alt=\"59\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/60.jpg\"\n                      alt=\"60\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/61.jpg\"\n                      alt=\"61\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/62.jpg\"\n                      alt=\"62\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/63.jpg\"\n                      alt=\"63\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/64.jpg\"\n                      alt=\"64\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/65.jpg\"\n                      alt=\"65\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/66.jpg\"\n                      alt=\"66\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/67.jpg\"\n                      alt=\"67\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/68.jpg\"\n                      alt=\"68\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/69.jpg\"\n                      alt=\"69\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/70.jpg\"\n                      alt=\"70\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/71.jpg\"\n                      alt=\"71\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/72.jpg\"\n                      alt=\"72\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/73.jpg\"\n                      alt=\"73\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/74.jpg\"\n                      alt=\"74\"\n                ></p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>陪我去的憨憨的背影单独放<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%97%E4%BA%AC%E6%80%BB%E7%BB%9F%E5%BA%9C/75.jpg\"\n                      alt=\"75\"\n                ></p>\n"},{"title":"睡觉排序","date":"2022-03-16T03:28:21.000Z","_content":"## 前言\n\n在网上看到了这个算法，觉得很是厉害。  \n能想出这种算法的多半是个人才，所以记录下，也算是分享。  \n写程序，要拓宽思路。\n\n## 代码\n\n~~~java\nimport java.util.Scanner;\n\npublic class SleepSort implements Runnable {\n    private final int num;\n\n    public SleepSort(int num) {\n        this.num = num;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int[] nums = new int[10];\n        for (int i = 0; i < 10; i++) {\n            nums[i] = scanner.nextInt();\n        }\n        //排序\n        for (int j : nums) {\n            new Thread(new SleepSort(j)).start();\n        }\n    }\n\n    @Override\n    public void run() {\n        try {\n            Thread.sleep(num * 100);//乘100防止num值过小出错，不过nums中值相近时，还是容易出错。\n            System.out.println(num);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n## 后记\n\n叹为观止的算法！ 时间复杂度为O(max(input))","source":"_posts/睡觉排序.md","raw":"---\ntitle: 睡觉排序\ndate: 2022-03-16 11:28:21\ntags:\n    - java\n    - 算法\n    - 排序\ncategories: \n    - 算法练习\n---\n## 前言\n\n在网上看到了这个算法，觉得很是厉害。  \n能想出这种算法的多半是个人才，所以记录下，也算是分享。  \n写程序，要拓宽思路。\n\n## 代码\n\n~~~java\nimport java.util.Scanner;\n\npublic class SleepSort implements Runnable {\n    private final int num;\n\n    public SleepSort(int num) {\n        this.num = num;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int[] nums = new int[10];\n        for (int i = 0; i < 10; i++) {\n            nums[i] = scanner.nextInt();\n        }\n        //排序\n        for (int j : nums) {\n            new Thread(new SleepSort(j)).start();\n        }\n    }\n\n    @Override\n    public void run() {\n        try {\n            Thread.sleep(num * 100);//乘100防止num值过小出错，不过nums中值相近时，还是容易出错。\n            System.out.println(num);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n## 后记\n\n叹为观止的算法！ 时间复杂度为O(max(input))","slug":"睡觉排序","published":1,"updated":"2022-09-16T00:20:56.571Z","_id":"cl7ketbdv001po8tt1axy1cdd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在网上看到了这个算法，觉得很是厉害。<br>能想出这种算法的多半是个人才，所以记录下，也算是分享。<br>写程序，要拓宽思路。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SleepSort</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SleepSort</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            nums[i] = scanner.nextInt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">SleepSort</span>(j)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(num * <span class=\"number\">100</span>);<span class=\"comment\">//乘100防止num值过小出错，不过nums中值相近时，还是容易出错。</span></span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>叹为观止的算法！ 时间复杂度为O(max(input))</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在网上看到了这个算法，觉得很是厉害。<br>能想出这种算法的多半是个人才，所以记录下，也算是分享。<br>写程序，要拓宽思路。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SleepSort</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SleepSort</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.num = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            nums[i] = scanner.nextInt();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//排序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j : nums) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">SleepSort</span>(j)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(num * <span class=\"number\">100</span>);<span class=\"comment\">//乘100防止num值过小出错，不过nums中值相近时，还是容易出错。</span></span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>叹为观止的算法！ 时间复杂度为O(max(input))</p>\n"},{"title":"计算机组成（鸽）","date":"2022-08-31T06:26:42.000Z","_content":"\n## 前言\n\n这学期想重新学下计组、计网、以及数据结构。\n这学期有操作系统的课。\n这学期想把这四门课仔细地学习一下，巩固基础。可以的话也想巩固下Java的基础（这学期也有这门课）\ncs四门课都是看的王道考研在b站的公开视频\n\n## 计算机系统概述\n\n### 硬件基本组成\n\n早期冯诺依曼机\n![早期冯诺依曼机](../images/计算机组成/早期冯诺依曼机.png)\n特点：\n1. 计算机有五大部件组成（输入设备、输出设备、主存储器、运算器、控制器）\n2. 指令和数据以同等地位存储在存储器，可以按地址寻访\n3. 指令和数据可以用二进制表示\n4. 指令由操作码和地址码组成\n5. 存储程序\n6. **以运算器为中心**（输入/输出设备与存储器之间的数据传送通过运算器完成）\n\n现代计算机结构\n![现代计算机结构](../images/计算机组成/现代计算机结构.png)\n现代计算机：**以存储器为中心**\nCPU=运算器+控制器\n\n![现代计算机结构2](../images/计算机组成/现代计算机结构2.png)\n\n### 各个硬件部件\n\n主存储器的基本组成\n![主存储器的基本组成](../images/计算机组成/主存储器的基本组成.png)\nMAR：Memory Address Register 存储**地址寄存器**\nMDR：Memory Data Register 存储**数据寄存器**\n\n运算器基本组成\n![运算器基本组成](../images/计算机组成/运算器基本组成.png)\n\n控制器的基本组成\n![控制器的基本组成](../images/计算机组成/控制器的基本组成.png)\n\n计算机工作过程(取指令、分析指令、执行指令)\n1. PC->MAR PC将主存地址给MAR\n2. M(MAR)->MDR MAR从存储体中取出相应的指令给MDR\n3. (MDR)->IR MDR将指令给IR\n4. OP(IR)->CU IR将指令操作码给CU，CU根据操作码得知是什么指令\n\n如果是取数指令，则IR会把指令的地址码给MAR，MAR取出数据后给MDR，MDR再给ACC\n如果是乘法指令，则IR会把指令的地址码给MAR，MAR取出数据后给MDR，MDR再给MQ，ACC会把数据给X。之后ALU实现乘法运算，将运算结果给ACC\n\nCPU区分指令和数据的依据：**指令周期的不同阶段**\n\n注：现在的计算机通常把MAR、MDR也集成在CPU内\n\n### 计算机系统的层次结构\n\n![计算机系统的层次结构](../images/计算机组成/计算机系统的层次结构.png)\n\n![三种级别的语言](../images/计算机组成/三种级别的语言.png)\n注：编译、汇编、解释程序可以统称为“翻译程序”\n\n### 计算机的性能指标 \n\n1. 存储器的性能指标\n\nMAR的位数反应存储单元的个数\nMDR的位数=存储字长=每个存储单元的大小\n\n总容量=存储单元个数*存储字长 bit =存储单元个数*存储字长/8 Byte (1Byte=8bit)\n例如：MAR为32位，MDR为8位\n总容量=2^32*8 bit = 4GB\n\n2. CPU的性能指标\n\nCPU主频：CPU内数字脉冲信号震荡的频率\n\nCPU时钟周期：震荡一次所需时间 (单位：微妙、纳秒)\nCPU主频(时钟频率)=1/CPU时钟周期 (单位：赫兹)\nCPI(Clock cycle Per Instruction)：执行一条指令所需的时钟周期数\n执行一条指令的耗时=CPI*CPU时钟周期\n\n例如：CPU主频1000Hz，程序包含100条指令。平均来看指令CPI=3\n那么执行所需时间 = 100 \\* 3 * 1 / 1000 = 0.3s\n\nIPS(Instructions Per Second)：每秒执行多少条指令 IPS=主频/平均CPI\nFLOPS(Floating-point Operations Per Second)：每秒执行多少次浮点运算 \n\n3. 系统整体性能指标\n\n数据通路带宽：数据总线一次所能并行传送信息的位数（各硬件部件通过数据总线传输数据）\n吞吐量：指系统在单位时间内处理请求的数量（主要取决于主存的存取周期）\n响应时间：指从用户向计算机发送一个请求，到系统对该请求做出响应并获取他所需要的结果的等待时间（通常包括CPU时间（运行程序所花时间）和等待时间（访问磁盘、存储器访问、I/O操作、操作系统开销等时间））\n\n## 数据表示和运算\n\n### 进位计数制\n\n**省略关于进制的相关知识**（因为是回顾）\n\n真值：符合人类习惯的数字\n机器数：数字实际存到机器里的形式，正负号被数字化\n\n### BCD码\n\nBCD：Binary-Coded Decimal，用于二进制编码的十进制\n\n[BCD码-百度百科](https://baike.baidu.com/item/BCD%E7%A0%81/826461)\n![映射关系](../images/计算机组成/映射关系.png)\n![BCD码](../images/计算机组成/BCD码.png)\n\n### 字符与字符串\n\nASCII码表\n![ASCII码表](../images/计算机组成/ASCII码表.png)\n\n汉字的表示和编码\n![汉字表示与编码](../images/计算机组成/汉字表示与编码.png)\n\n字符串存储\n![大小端模式](../images/计算机组成/大小端模式.png)\n\n### 奇偶校验码\n\n添加一个奇偶检验位（校验位由有效信息位异或运算得来）\n\n奇校验码：整个校验码（有效信息位和校验位）中1的个数为奇数\n偶校验码：整个校验码（有效信息位和校验位）中1的个数为偶数\n\n> 码距：一个编码方案中，合法码字间的最小距离\n\n**奇偶校验码的码距为2，仅能检测出奇数位错误，无纠错能力**\n\n### 海明校验码\n\n海明码设计思路：将信息位分组进行偶校验->多个校验位->多个校验位标注出错位置\n\n1. 确定需要添加的校验位个数\n信息位：n、校验位：k（可以表示2^k种状态）\n信息位+校验位共 n+k 位\nn+k位中任何一位都可能出错+一种正确的状态。总共 n+k+1 种状态\n所以有 **2^k>=n+k+1** 求出 k\n\n2. 确定校验位的分布\n**校验位P1放在海明位号位2^(i-1)的位置上**\n\n例如信息位 1010\n\n| H7  | H6  | H5  | H4  | H3  | H2  | H1  |\n|-----|-----|-----|-----|-----|-----|-----|\n| D4  | D3  | D2  | P3  | D1  | P2  | P1  | \n| 1   | 0   | 1   | 0   | 0   | 1   | 0   | \n\n3. 求校验位的值('⊕'为异或运算符)\nP1=D1⊕D2⊕D4\nP2=D1⊕D3⊕D4\nP3=D2⊕D3⊕D4\n\n4. 纠错\n校验方程：\nS1=P1⊕D1⊕D2⊕D4 \nS2=P1⊕D1⊕D3⊕D4  \nS3=P1⊕D2⊕D3⊕D4 \n\n正确情况，接收到 1010010\nS1=P1⊕D1⊕D2⊕D4 =0\nS2=P1⊕D1⊕D3⊕D4 =0\nS3=P1⊕D2⊕D3⊕D4 =0\n\n出错情况，接收到 1**1**10000\nS1=P1⊕D1⊕D2⊕D4 =0\n**S2=P1⊕D1⊕D3⊕D4 =1**\n**S3=P1⊕D2⊕D3⊕D4 =1**\n\n第110位出错，即第6位出错\n\n海明码具有**1位纠错能力**和**2位检错能力**\n需在最前面加上“全校验位”，对整体进行偶校验\nS3 S2 S1 = 000 且全体偶检验成功->无错误\nS3 S2 S1 != 000 且全体偶检验失败->有1位错，纠正即可\nS3 S2 S1 != 000 且全体偶检验成功->有两位错，重传\n\n### 循环冗余校验码（CRC）\n\n循环冗余校验码的思想：\n数据发送发、接收方约定一个“除数”。k个信息位+R个校验位 作为“被除数”，添加校验位后需保证除法余数为0。收到数据后，进行触发检查余数是否为0。非0需要纠错或重传\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/计算机组成.md","raw":"---\ntitle: 计算机组成（鸽）\ndate: 2022-08-31 14:26:42\ntags:\n- 计组\ncategories:\n- 学习笔记\n---\n\n## 前言\n\n这学期想重新学下计组、计网、以及数据结构。\n这学期有操作系统的课。\n这学期想把这四门课仔细地学习一下，巩固基础。可以的话也想巩固下Java的基础（这学期也有这门课）\ncs四门课都是看的王道考研在b站的公开视频\n\n## 计算机系统概述\n\n### 硬件基本组成\n\n早期冯诺依曼机\n![早期冯诺依曼机](../images/计算机组成/早期冯诺依曼机.png)\n特点：\n1. 计算机有五大部件组成（输入设备、输出设备、主存储器、运算器、控制器）\n2. 指令和数据以同等地位存储在存储器，可以按地址寻访\n3. 指令和数据可以用二进制表示\n4. 指令由操作码和地址码组成\n5. 存储程序\n6. **以运算器为中心**（输入/输出设备与存储器之间的数据传送通过运算器完成）\n\n现代计算机结构\n![现代计算机结构](../images/计算机组成/现代计算机结构.png)\n现代计算机：**以存储器为中心**\nCPU=运算器+控制器\n\n![现代计算机结构2](../images/计算机组成/现代计算机结构2.png)\n\n### 各个硬件部件\n\n主存储器的基本组成\n![主存储器的基本组成](../images/计算机组成/主存储器的基本组成.png)\nMAR：Memory Address Register 存储**地址寄存器**\nMDR：Memory Data Register 存储**数据寄存器**\n\n运算器基本组成\n![运算器基本组成](../images/计算机组成/运算器基本组成.png)\n\n控制器的基本组成\n![控制器的基本组成](../images/计算机组成/控制器的基本组成.png)\n\n计算机工作过程(取指令、分析指令、执行指令)\n1. PC->MAR PC将主存地址给MAR\n2. M(MAR)->MDR MAR从存储体中取出相应的指令给MDR\n3. (MDR)->IR MDR将指令给IR\n4. OP(IR)->CU IR将指令操作码给CU，CU根据操作码得知是什么指令\n\n如果是取数指令，则IR会把指令的地址码给MAR，MAR取出数据后给MDR，MDR再给ACC\n如果是乘法指令，则IR会把指令的地址码给MAR，MAR取出数据后给MDR，MDR再给MQ，ACC会把数据给X。之后ALU实现乘法运算，将运算结果给ACC\n\nCPU区分指令和数据的依据：**指令周期的不同阶段**\n\n注：现在的计算机通常把MAR、MDR也集成在CPU内\n\n### 计算机系统的层次结构\n\n![计算机系统的层次结构](../images/计算机组成/计算机系统的层次结构.png)\n\n![三种级别的语言](../images/计算机组成/三种级别的语言.png)\n注：编译、汇编、解释程序可以统称为“翻译程序”\n\n### 计算机的性能指标 \n\n1. 存储器的性能指标\n\nMAR的位数反应存储单元的个数\nMDR的位数=存储字长=每个存储单元的大小\n\n总容量=存储单元个数*存储字长 bit =存储单元个数*存储字长/8 Byte (1Byte=8bit)\n例如：MAR为32位，MDR为8位\n总容量=2^32*8 bit = 4GB\n\n2. CPU的性能指标\n\nCPU主频：CPU内数字脉冲信号震荡的频率\n\nCPU时钟周期：震荡一次所需时间 (单位：微妙、纳秒)\nCPU主频(时钟频率)=1/CPU时钟周期 (单位：赫兹)\nCPI(Clock cycle Per Instruction)：执行一条指令所需的时钟周期数\n执行一条指令的耗时=CPI*CPU时钟周期\n\n例如：CPU主频1000Hz，程序包含100条指令。平均来看指令CPI=3\n那么执行所需时间 = 100 \\* 3 * 1 / 1000 = 0.3s\n\nIPS(Instructions Per Second)：每秒执行多少条指令 IPS=主频/平均CPI\nFLOPS(Floating-point Operations Per Second)：每秒执行多少次浮点运算 \n\n3. 系统整体性能指标\n\n数据通路带宽：数据总线一次所能并行传送信息的位数（各硬件部件通过数据总线传输数据）\n吞吐量：指系统在单位时间内处理请求的数量（主要取决于主存的存取周期）\n响应时间：指从用户向计算机发送一个请求，到系统对该请求做出响应并获取他所需要的结果的等待时间（通常包括CPU时间（运行程序所花时间）和等待时间（访问磁盘、存储器访问、I/O操作、操作系统开销等时间））\n\n## 数据表示和运算\n\n### 进位计数制\n\n**省略关于进制的相关知识**（因为是回顾）\n\n真值：符合人类习惯的数字\n机器数：数字实际存到机器里的形式，正负号被数字化\n\n### BCD码\n\nBCD：Binary-Coded Decimal，用于二进制编码的十进制\n\n[BCD码-百度百科](https://baike.baidu.com/item/BCD%E7%A0%81/826461)\n![映射关系](../images/计算机组成/映射关系.png)\n![BCD码](../images/计算机组成/BCD码.png)\n\n### 字符与字符串\n\nASCII码表\n![ASCII码表](../images/计算机组成/ASCII码表.png)\n\n汉字的表示和编码\n![汉字表示与编码](../images/计算机组成/汉字表示与编码.png)\n\n字符串存储\n![大小端模式](../images/计算机组成/大小端模式.png)\n\n### 奇偶校验码\n\n添加一个奇偶检验位（校验位由有效信息位异或运算得来）\n\n奇校验码：整个校验码（有效信息位和校验位）中1的个数为奇数\n偶校验码：整个校验码（有效信息位和校验位）中1的个数为偶数\n\n> 码距：一个编码方案中，合法码字间的最小距离\n\n**奇偶校验码的码距为2，仅能检测出奇数位错误，无纠错能力**\n\n### 海明校验码\n\n海明码设计思路：将信息位分组进行偶校验->多个校验位->多个校验位标注出错位置\n\n1. 确定需要添加的校验位个数\n信息位：n、校验位：k（可以表示2^k种状态）\n信息位+校验位共 n+k 位\nn+k位中任何一位都可能出错+一种正确的状态。总共 n+k+1 种状态\n所以有 **2^k>=n+k+1** 求出 k\n\n2. 确定校验位的分布\n**校验位P1放在海明位号位2^(i-1)的位置上**\n\n例如信息位 1010\n\n| H7  | H6  | H5  | H4  | H3  | H2  | H1  |\n|-----|-----|-----|-----|-----|-----|-----|\n| D4  | D3  | D2  | P3  | D1  | P2  | P1  | \n| 1   | 0   | 1   | 0   | 0   | 1   | 0   | \n\n3. 求校验位的值('⊕'为异或运算符)\nP1=D1⊕D2⊕D4\nP2=D1⊕D3⊕D4\nP3=D2⊕D3⊕D4\n\n4. 纠错\n校验方程：\nS1=P1⊕D1⊕D2⊕D4 \nS2=P1⊕D1⊕D3⊕D4  \nS3=P1⊕D2⊕D3⊕D4 \n\n正确情况，接收到 1010010\nS1=P1⊕D1⊕D2⊕D4 =0\nS2=P1⊕D1⊕D3⊕D4 =0\nS3=P1⊕D2⊕D3⊕D4 =0\n\n出错情况，接收到 1**1**10000\nS1=P1⊕D1⊕D2⊕D4 =0\n**S2=P1⊕D1⊕D3⊕D4 =1**\n**S3=P1⊕D2⊕D3⊕D4 =1**\n\n第110位出错，即第6位出错\n\n海明码具有**1位纠错能力**和**2位检错能力**\n需在最前面加上“全校验位”，对整体进行偶校验\nS3 S2 S1 = 000 且全体偶检验成功->无错误\nS3 S2 S1 != 000 且全体偶检验失败->有1位错，纠正即可\nS3 S2 S1 != 000 且全体偶检验成功->有两位错，重传\n\n### 循环冗余校验码（CRC）\n\n循环冗余校验码的思想：\n数据发送发、接收方约定一个“除数”。k个信息位+R个校验位 作为“被除数”，添加校验位后需保证除法余数为0。收到数据后，进行触发检查余数是否为0。非0需要纠错或重传\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"计算机组成","published":1,"updated":"2022-09-11T09:07:57.578Z","_id":"cl7ketbdw001ro8tt255jg6h4","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这学期想重新学下计组、计网、以及数据结构。<br>这学期有操作系统的课。<br>这学期想把这四门课仔细地学习一下，巩固基础。可以的话也想巩固下Java的基础（这学期也有这门课）<br>cs四门课都是看的王道考研在b站的公开视频</p>\n<h2 id=\"计算机系统概述\"><a href=\"#计算机系统概述\" class=\"headerlink\" title=\"计算机系统概述\"></a>计算机系统概述</h2><h3 id=\"硬件基本组成\"><a href=\"#硬件基本组成\" class=\"headerlink\" title=\"硬件基本组成\"></a>硬件基本组成</h3><p>早期冯诺依曼机<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E6%97%A9%E6%9C%9F%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%9C%BA.png\"\n                      alt=\"早期冯诺依曼机\"\n                ><br>特点：</p>\n<ol>\n<li>计算机有五大部件组成（输入设备、输出设备、主存储器、运算器、控制器）</li>\n<li>指令和数据以同等地位存储在存储器，可以按地址寻访</li>\n<li>指令和数据可以用二进制表示</li>\n<li>指令由操作码和地址码组成</li>\n<li>存储程序</li>\n<li><strong>以运算器为中心</strong>（输入/输出设备与存储器之间的数据传送通过运算器完成）</li>\n</ol>\n<p>现代计算机结构<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%84.png\"\n                      alt=\"现代计算机结构\"\n                ><br>现代计算机：<strong>以存储器为中心</strong><br>CPU=运算器+控制器</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%842.png\"\n                      alt=\"现代计算机结构2\"\n                ></p>\n<h3 id=\"各个硬件部件\"><a href=\"#各个硬件部件\" class=\"headerlink\" title=\"各个硬件部件\"></a>各个硬件部件</h3><p>主存储器的基本组成<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E4%B8%BB%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90.png\"\n                      alt=\"主存储器的基本组成\"\n                ><br>MAR：Memory Address Register 存储<strong>地址寄存器</strong><br>MDR：Memory Data Register 存储<strong>数据寄存器</strong></p>\n<p>运算器基本组成<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E8%BF%90%E7%AE%97%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90.png\"\n                      alt=\"运算器基本组成\"\n                ></p>\n<p>控制器的基本组成<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90.png\"\n                      alt=\"控制器的基本组成\"\n                ></p>\n<p>计算机工作过程(取指令、分析指令、执行指令)</p>\n<ol>\n<li>PC-&gt;MAR PC将主存地址给MAR</li>\n<li>M(MAR)-&gt;MDR MAR从存储体中取出相应的指令给MDR</li>\n<li>(MDR)-&gt;IR MDR将指令给IR</li>\n<li>OP(IR)-&gt;CU IR将指令操作码给CU，CU根据操作码得知是什么指令</li>\n</ol>\n<p>如果是取数指令，则IR会把指令的地址码给MAR，MAR取出数据后给MDR，MDR再给ACC<br>如果是乘法指令，则IR会把指令的地址码给MAR，MAR取出数据后给MDR，MDR再给MQ，ACC会把数据给X。之后ALU实现乘法运算，将运算结果给ACC</p>\n<p>CPU区分指令和数据的依据：<strong>指令周期的不同阶段</strong></p>\n<p>注：现在的计算机通常把MAR、MDR也集成在CPU内</p>\n<h3 id=\"计算机系统的层次结构\"><a href=\"#计算机系统的层次结构\" class=\"headerlink\" title=\"计算机系统的层次结构\"></a>计算机系统的层次结构</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png\"\n                      alt=\"计算机系统的层次结构\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E4%B8%89%E7%A7%8D%E7%BA%A7%E5%88%AB%E7%9A%84%E8%AF%AD%E8%A8%80.png\"\n                      alt=\"三种级别的语言\"\n                ><br>注：编译、汇编、解释程序可以统称为“翻译程序”</p>\n<h3 id=\"计算机的性能指标\"><a href=\"#计算机的性能指标\" class=\"headerlink\" title=\"计算机的性能指标\"></a>计算机的性能指标</h3><ol>\n<li>存储器的性能指标</li>\n</ol>\n<p>MAR的位数反应存储单元的个数<br>MDR的位数=存储字长=每个存储单元的大小</p>\n<p>总容量=存储单元个数<em>存储字长 bit =存储单元个数</em>存储字长/8 Byte (1Byte=8bit)<br>例如：MAR为32位，MDR为8位<br>总容量=2^32*8 bit = 4GB</p>\n<ol start=\"2\">\n<li>CPU的性能指标</li>\n</ol>\n<p>CPU主频：CPU内数字脉冲信号震荡的频率</p>\n<p>CPU时钟周期：震荡一次所需时间 (单位：微妙、纳秒)<br>CPU主频(时钟频率)=1/CPU时钟周期 (单位：赫兹)<br>CPI(Clock cycle Per Instruction)：执行一条指令所需的时钟周期数<br>执行一条指令的耗时=CPI*CPU时钟周期</p>\n<p>例如：CPU主频1000Hz，程序包含100条指令。平均来看指令CPI=3<br>那么执行所需时间 = 100 * 3 * 1 / 1000 = 0.3s</p>\n<p>IPS(Instructions Per Second)：每秒执行多少条指令 IPS=主频/平均CPI<br>FLOPS(Floating-point Operations Per Second)：每秒执行多少次浮点运算 </p>\n<ol start=\"3\">\n<li>系统整体性能指标</li>\n</ol>\n<p>数据通路带宽：数据总线一次所能并行传送信息的位数（各硬件部件通过数据总线传输数据）<br>吞吐量：指系统在单位时间内处理请求的数量（主要取决于主存的存取周期）<br>响应时间：指从用户向计算机发送一个请求，到系统对该请求做出响应并获取他所需要的结果的等待时间（通常包括CPU时间（运行程序所花时间）和等待时间（访问磁盘、存储器访问、I/O操作、操作系统开销等时间））</p>\n<h2 id=\"数据表示和运算\"><a href=\"#数据表示和运算\" class=\"headerlink\" title=\"数据表示和运算\"></a>数据表示和运算</h2><h3 id=\"进位计数制\"><a href=\"#进位计数制\" class=\"headerlink\" title=\"进位计数制\"></a>进位计数制</h3><p><strong>省略关于进制的相关知识</strong>（因为是回顾）</p>\n<p>真值：符合人类习惯的数字<br>机器数：数字实际存到机器里的形式，正负号被数字化</p>\n<h3 id=\"BCD码\"><a href=\"#BCD码\" class=\"headerlink\" title=\"BCD码\"></a>BCD码</h3><p>BCD：Binary-Coded Decimal，用于二进制编码的十进制</p>\n<p><a class=\"link\"   href=\"https://baike.baidu.com/item/BCD%E7%A0%81/826461\" >BCD码-百度百科<i class=\"fas fa-external-link-alt\"></i></a><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB.png\"\n                      alt=\"映射关系\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/BCD%E7%A0%81.png\"\n                      alt=\"BCD码\"\n                ></p>\n<h3 id=\"字符与字符串\"><a href=\"#字符与字符串\" class=\"headerlink\" title=\"字符与字符串\"></a>字符与字符串</h3><p>ASCII码表<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/ASCII%E7%A0%81%E8%A1%A8.png\"\n                      alt=\"ASCII码表\"\n                ></p>\n<p>汉字的表示和编码<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E6%B1%89%E5%AD%97%E8%A1%A8%E7%A4%BA%E4%B8%8E%E7%BC%96%E7%A0%81.png\"\n                      alt=\"汉字表示与编码\"\n                ></p>\n<p>字符串存储<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E5%A4%A7%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F.png\"\n                      alt=\"大小端模式\"\n                ></p>\n<h3 id=\"奇偶校验码\"><a href=\"#奇偶校验码\" class=\"headerlink\" title=\"奇偶校验码\"></a>奇偶校验码</h3><p>添加一个奇偶检验位（校验位由有效信息位异或运算得来）</p>\n<p>奇校验码：整个校验码（有效信息位和校验位）中1的个数为奇数<br>偶校验码：整个校验码（有效信息位和校验位）中1的个数为偶数</p>\n<blockquote>\n<p>码距：一个编码方案中，合法码字间的最小距离</p>\n</blockquote>\n<p><strong>奇偶校验码的码距为2，仅能检测出奇数位错误，无纠错能力</strong></p>\n<h3 id=\"海明校验码\"><a href=\"#海明校验码\" class=\"headerlink\" title=\"海明校验码\"></a>海明校验码</h3><p>海明码设计思路：将信息位分组进行偶校验-&gt;多个校验位-&gt;多个校验位标注出错位置</p>\n<ol>\n<li><p>确定需要添加的校验位个数<br>信息位：n、校验位：k（可以表示2^k种状态）<br>信息位+校验位共 n+k 位<br>n+k位中任何一位都可能出错+一种正确的状态。总共 n+k+1 种状态<br>所以有 <strong>2^k&gt;=n+k+1</strong> 求出 k</p>\n</li>\n<li><p>确定校验位的分布</p>\n</li>\n</ol>\n<p><strong>校验位P1放在海明位号位2^(i-1)的位置上</strong></p>\n<p>例如信息位 1010</p>\n<table>\n<thead>\n<tr>\n<th>H7</th>\n<th>H6</th>\n<th>H5</th>\n<th>H4</th>\n<th>H3</th>\n<th>H2</th>\n<th>H1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>D4</td>\n<td>D3</td>\n<td>D2</td>\n<td>P3</td>\n<td>D1</td>\n<td>P2</td>\n<td>P1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li><p>求校验位的值(‘⊕’为异或运算符)<br>P1=D1⊕D2⊕D4<br>P2=D1⊕D3⊕D4<br>P3=D2⊕D3⊕D4</p>\n</li>\n<li><p>纠错<br>校验方程：<br>S1=P1⊕D1⊕D2⊕D4<br>S2=P1⊕D1⊕D3⊕D4<br>S3=P1⊕D2⊕D3⊕D4 </p>\n</li>\n</ol>\n<p>正确情况，接收到 1010010<br>S1=P1⊕D1⊕D2⊕D4 =0<br>S2=P1⊕D1⊕D3⊕D4 =0<br>S3=P1⊕D2⊕D3⊕D4 =0</p>\n<p>出错情况，接收到 1<strong>1</strong>10000<br>S1=P1⊕D1⊕D2⊕D4 =0<br><strong>S2=P1⊕D1⊕D3⊕D4 =1</strong><br><strong>S3=P1⊕D2⊕D3⊕D4 =1</strong></p>\n<p>第110位出错，即第6位出错</p>\n<p>海明码具有<strong>1位纠错能力</strong>和<strong>2位检错能力</strong><br>需在最前面加上“全校验位”，对整体进行偶校验<br>S3 S2 S1 = 000 且全体偶检验成功-&gt;无错误<br>S3 S2 S1 != 000 且全体偶检验失败-&gt;有1位错，纠正即可<br>S3 S2 S1 != 000 且全体偶检验成功-&gt;有两位错，重传</p>\n<h3 id=\"循环冗余校验码（CRC）\"><a href=\"#循环冗余校验码（CRC）\" class=\"headerlink\" title=\"循环冗余校验码（CRC）\"></a>循环冗余校验码（CRC）</h3><p>循环冗余校验码的思想：<br>数据发送发、接收方约定一个“除数”。k个信息位+R个校验位 作为“被除数”，添加校验位后需保证除法余数为0。收到数据后，进行触发检查余数是否为0。非0需要纠错或重传</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这学期想重新学下计组、计网、以及数据结构。<br>这学期有操作系统的课。<br>这学期想把这四门课仔细地学习一下，巩固基础。可以的话也想巩固下Java的基础（这学期也有这门课）<br>cs四门课都是看的王道考研在b站的公开视频</p>\n<h2 id=\"计算机系统概述\"><a href=\"#计算机系统概述\" class=\"headerlink\" title=\"计算机系统概述\"></a>计算机系统概述</h2><h3 id=\"硬件基本组成\"><a href=\"#硬件基本组成\" class=\"headerlink\" title=\"硬件基本组成\"></a>硬件基本组成</h3><p>早期冯诺依曼机<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E6%97%A9%E6%9C%9F%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%9C%BA.png\"\n                      alt=\"早期冯诺依曼机\"\n                ><br>特点：</p>\n<ol>\n<li>计算机有五大部件组成（输入设备、输出设备、主存储器、运算器、控制器）</li>\n<li>指令和数据以同等地位存储在存储器，可以按地址寻访</li>\n<li>指令和数据可以用二进制表示</li>\n<li>指令由操作码和地址码组成</li>\n<li>存储程序</li>\n<li><strong>以运算器为中心</strong>（输入/输出设备与存储器之间的数据传送通过运算器完成）</li>\n</ol>\n<p>现代计算机结构<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%84.png\"\n                      alt=\"现代计算机结构\"\n                ><br>现代计算机：<strong>以存储器为中心</strong><br>CPU=运算器+控制器</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%842.png\"\n                      alt=\"现代计算机结构2\"\n                ></p>\n<h3 id=\"各个硬件部件\"><a href=\"#各个硬件部件\" class=\"headerlink\" title=\"各个硬件部件\"></a>各个硬件部件</h3><p>主存储器的基本组成<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E4%B8%BB%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90.png\"\n                      alt=\"主存储器的基本组成\"\n                ><br>MAR：Memory Address Register 存储<strong>地址寄存器</strong><br>MDR：Memory Data Register 存储<strong>数据寄存器</strong></p>\n<p>运算器基本组成<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E8%BF%90%E7%AE%97%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90.png\"\n                      alt=\"运算器基本组成\"\n                ></p>\n<p>控制器的基本组成<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E6%88%90.png\"\n                      alt=\"控制器的基本组成\"\n                ></p>\n<p>计算机工作过程(取指令、分析指令、执行指令)</p>\n<ol>\n<li>PC-&gt;MAR PC将主存地址给MAR</li>\n<li>M(MAR)-&gt;MDR MAR从存储体中取出相应的指令给MDR</li>\n<li>(MDR)-&gt;IR MDR将指令给IR</li>\n<li>OP(IR)-&gt;CU IR将指令操作码给CU，CU根据操作码得知是什么指令</li>\n</ol>\n<p>如果是取数指令，则IR会把指令的地址码给MAR，MAR取出数据后给MDR，MDR再给ACC<br>如果是乘法指令，则IR会把指令的地址码给MAR，MAR取出数据后给MDR，MDR再给MQ，ACC会把数据给X。之后ALU实现乘法运算，将运算结果给ACC</p>\n<p>CPU区分指令和数据的依据：<strong>指令周期的不同阶段</strong></p>\n<p>注：现在的计算机通常把MAR、MDR也集成在CPU内</p>\n<h3 id=\"计算机系统的层次结构\"><a href=\"#计算机系统的层次结构\" class=\"headerlink\" title=\"计算机系统的层次结构\"></a>计算机系统的层次结构</h3><p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png\"\n                      alt=\"计算机系统的层次结构\"\n                ></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E4%B8%89%E7%A7%8D%E7%BA%A7%E5%88%AB%E7%9A%84%E8%AF%AD%E8%A8%80.png\"\n                      alt=\"三种级别的语言\"\n                ><br>注：编译、汇编、解释程序可以统称为“翻译程序”</p>\n<h3 id=\"计算机的性能指标\"><a href=\"#计算机的性能指标\" class=\"headerlink\" title=\"计算机的性能指标\"></a>计算机的性能指标</h3><ol>\n<li>存储器的性能指标</li>\n</ol>\n<p>MAR的位数反应存储单元的个数<br>MDR的位数=存储字长=每个存储单元的大小</p>\n<p>总容量=存储单元个数<em>存储字长 bit =存储单元个数</em>存储字长/8 Byte (1Byte=8bit)<br>例如：MAR为32位，MDR为8位<br>总容量=2^32*8 bit = 4GB</p>\n<ol start=\"2\">\n<li>CPU的性能指标</li>\n</ol>\n<p>CPU主频：CPU内数字脉冲信号震荡的频率</p>\n<p>CPU时钟周期：震荡一次所需时间 (单位：微妙、纳秒)<br>CPU主频(时钟频率)=1/CPU时钟周期 (单位：赫兹)<br>CPI(Clock cycle Per Instruction)：执行一条指令所需的时钟周期数<br>执行一条指令的耗时=CPI*CPU时钟周期</p>\n<p>例如：CPU主频1000Hz，程序包含100条指令。平均来看指令CPI=3<br>那么执行所需时间 = 100 * 3 * 1 / 1000 = 0.3s</p>\n<p>IPS(Instructions Per Second)：每秒执行多少条指令 IPS=主频/平均CPI<br>FLOPS(Floating-point Operations Per Second)：每秒执行多少次浮点运算 </p>\n<ol start=\"3\">\n<li>系统整体性能指标</li>\n</ol>\n<p>数据通路带宽：数据总线一次所能并行传送信息的位数（各硬件部件通过数据总线传输数据）<br>吞吐量：指系统在单位时间内处理请求的数量（主要取决于主存的存取周期）<br>响应时间：指从用户向计算机发送一个请求，到系统对该请求做出响应并获取他所需要的结果的等待时间（通常包括CPU时间（运行程序所花时间）和等待时间（访问磁盘、存储器访问、I/O操作、操作系统开销等时间））</p>\n<h2 id=\"数据表示和运算\"><a href=\"#数据表示和运算\" class=\"headerlink\" title=\"数据表示和运算\"></a>数据表示和运算</h2><h3 id=\"进位计数制\"><a href=\"#进位计数制\" class=\"headerlink\" title=\"进位计数制\"></a>进位计数制</h3><p><strong>省略关于进制的相关知识</strong>（因为是回顾）</p>\n<p>真值：符合人类习惯的数字<br>机器数：数字实际存到机器里的形式，正负号被数字化</p>\n<h3 id=\"BCD码\"><a href=\"#BCD码\" class=\"headerlink\" title=\"BCD码\"></a>BCD码</h3><p>BCD：Binary-Coded Decimal，用于二进制编码的十进制</p>\n<p><a class=\"link\"   href=\"https://baike.baidu.com/item/BCD%E7%A0%81/826461\" >BCD码-百度百科<i class=\"fas fa-external-link-alt\"></i></a><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB.png\"\n                      alt=\"映射关系\"\n                ><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/BCD%E7%A0%81.png\"\n                      alt=\"BCD码\"\n                ></p>\n<h3 id=\"字符与字符串\"><a href=\"#字符与字符串\" class=\"headerlink\" title=\"字符与字符串\"></a>字符与字符串</h3><p>ASCII码表<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/ASCII%E7%A0%81%E8%A1%A8.png\"\n                      alt=\"ASCII码表\"\n                ></p>\n<p>汉字的表示和编码<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E6%B1%89%E5%AD%97%E8%A1%A8%E7%A4%BA%E4%B8%8E%E7%BC%96%E7%A0%81.png\"\n                      alt=\"汉字表示与编码\"\n                ></p>\n<p>字符串存储<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/%E5%A4%A7%E5%B0%8F%E7%AB%AF%E6%A8%A1%E5%BC%8F.png\"\n                      alt=\"大小端模式\"\n                ></p>\n<h3 id=\"奇偶校验码\"><a href=\"#奇偶校验码\" class=\"headerlink\" title=\"奇偶校验码\"></a>奇偶校验码</h3><p>添加一个奇偶检验位（校验位由有效信息位异或运算得来）</p>\n<p>奇校验码：整个校验码（有效信息位和校验位）中1的个数为奇数<br>偶校验码：整个校验码（有效信息位和校验位）中1的个数为偶数</p>\n<blockquote>\n<p>码距：一个编码方案中，合法码字间的最小距离</p>\n</blockquote>\n<p><strong>奇偶校验码的码距为2，仅能检测出奇数位错误，无纠错能力</strong></p>\n<h3 id=\"海明校验码\"><a href=\"#海明校验码\" class=\"headerlink\" title=\"海明校验码\"></a>海明校验码</h3><p>海明码设计思路：将信息位分组进行偶校验-&gt;多个校验位-&gt;多个校验位标注出错位置</p>\n<ol>\n<li><p>确定需要添加的校验位个数<br>信息位：n、校验位：k（可以表示2^k种状态）<br>信息位+校验位共 n+k 位<br>n+k位中任何一位都可能出错+一种正确的状态。总共 n+k+1 种状态<br>所以有 <strong>2^k&gt;=n+k+1</strong> 求出 k</p>\n</li>\n<li><p>确定校验位的分布</p>\n</li>\n</ol>\n<p><strong>校验位P1放在海明位号位2^(i-1)的位置上</strong></p>\n<p>例如信息位 1010</p>\n<table>\n<thead>\n<tr>\n<th>H7</th>\n<th>H6</th>\n<th>H5</th>\n<th>H4</th>\n<th>H3</th>\n<th>H2</th>\n<th>H1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>D4</td>\n<td>D3</td>\n<td>D2</td>\n<td>P3</td>\n<td>D1</td>\n<td>P2</td>\n<td>P1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li><p>求校验位的值(‘⊕’为异或运算符)<br>P1=D1⊕D2⊕D4<br>P2=D1⊕D3⊕D4<br>P3=D2⊕D3⊕D4</p>\n</li>\n<li><p>纠错<br>校验方程：<br>S1=P1⊕D1⊕D2⊕D4<br>S2=P1⊕D1⊕D3⊕D4<br>S3=P1⊕D2⊕D3⊕D4 </p>\n</li>\n</ol>\n<p>正确情况，接收到 1010010<br>S1=P1⊕D1⊕D2⊕D4 =0<br>S2=P1⊕D1⊕D3⊕D4 =0<br>S3=P1⊕D2⊕D3⊕D4 =0</p>\n<p>出错情况，接收到 1<strong>1</strong>10000<br>S1=P1⊕D1⊕D2⊕D4 =0<br><strong>S2=P1⊕D1⊕D3⊕D4 =1</strong><br><strong>S3=P1⊕D2⊕D3⊕D4 =1</strong></p>\n<p>第110位出错，即第6位出错</p>\n<p>海明码具有<strong>1位纠错能力</strong>和<strong>2位检错能力</strong><br>需在最前面加上“全校验位”，对整体进行偶校验<br>S3 S2 S1 = 000 且全体偶检验成功-&gt;无错误<br>S3 S2 S1 != 000 且全体偶检验失败-&gt;有1位错，纠正即可<br>S3 S2 S1 != 000 且全体偶检验成功-&gt;有两位错，重传</p>\n<h3 id=\"循环冗余校验码（CRC）\"><a href=\"#循环冗余校验码（CRC）\" class=\"headerlink\" title=\"循环冗余校验码（CRC）\"></a>循环冗余校验码（CRC）</h3><p>循环冗余校验码的思想：<br>数据发送发、接收方约定一个“除数”。k个信息位+R个校验位 作为“被除数”，添加校验位后需保证除法余数为0。收到数据后，进行触发检查余数是否为0。非0需要纠错或重传</p>\n"},{"title":"猴子排序","date":"2022-04-30T11:59:56.000Z","_content":"## 前言\n首先得介绍一下无限猴子定理，这个定理是来自埃米尔·博雷尔一本1909年出版谈概率的书籍，当中介绍了“打字的猴子”的概念。\n\n猴子定理定义如下：\n>一般关于此定理的叙述为：有无限只猴子用无限的时间会产生特定的文章。  \n其他取代的叙述，可能是用大英图书馆或美国国会图书馆取代法国国家图书馆；另一个常见的版本是英语使用者常用的，就是猴子会打出莎士比亚的著作。欧洲大陆还有一种说法版是猴子打出大英百科全书。在《从一到无穷大》中，作者则引用了哈姆雷特的例子。\n\n详细推导过程参考[百度百科](https://baike.baidu.com/item/%E6%97%A0%E9%99%90%E7%8C%B4%E5%AD%90%E5%AE%9A%E7%90%86/2221476)  \n那么根据猴子定理，如果我们不断随机打乱一个可排序的数组，在无限长的时间里，这个数组肯定会变成有序数组。\n\n## 代码\n\n~~~java\npackage org.example;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class MonkeySort {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        ArrayList<Integer> nums = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            nums.add(scanner.nextInt());\n        }\n        //排序\n        monkeySort(nums);\n        //输出有序数组\n        for (Integer num : nums) {\n            System.out.println(num);\n        }\n    }\n\n    private static void monkeySort(ArrayList<Integer> nums) {\n        while (!checkSort(nums)) {\n            upset3(nums);\n        }\n    }\n\n    /*\n     * 随机打乱传入的集合\n     * 洗牌算法\n     */\n\n    /**暴力\n     * 每次将原集合中随机一个元素，放到新集合中，然后删除原集合中这个元素。\n     */\n    private static void upset1(ArrayList<Integer> nums) {\n        ArrayList<Integer> arr = (ArrayList<Integer>) nums.clone();\n        int length = arr.size();\n        nums.clear();\n        for (int i = 0; i < length; i++) {\n            int j = (int) (Math.random() * arr.size());\n            nums.add(arr.get(j));\n            arr.remove(j);\n        }\n    }\n\n    /**Fisher-Yates 洗牌算法\n     * 是对暴力算法的优化\n     * 我们可以不删除那个元素，而是将它和需打乱集合中最后一个元素交换位置\n     * 第一次将交换完，将前n-1个作为新地需要打乱的集合，最后1个元素作为乱序后的结果\n     * 第二次将交换完，将前n-2个作为新地需要打乱的集合，倒数两个元素作为乱序后的结果\n     * ...\n     * 直至集合全为乱序。\n     */\n    private static void upset2(ArrayList<Integer> nums) {\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int j = (int) (Math.random() * (i));\n            nums.add(j, nums.get(i));\n            nums.remove(i + 1);\n            nums.add(nums.get(j + 1));\n            nums.remove(j + 1);\n        }\n    }\n\n    //使用shuffle()方法\n    private static void upset3(ArrayList<Integer> nums) {\n        Collections.shuffle(nums);\n    }\n\n    /**\n     * 判断集合是否有序\n     */\n    private static boolean checkSort(ArrayList<Integer> nums) {\n        for (int i = 0; i < nums.size() - 1; i++) {\n            if (nums.get(i) > nums.get(i + 1)) return false;\n        }\n        return true;\n    }\n}\n~~~\n## 总结\n\n猴子排序，看运气的算法。","source":"_posts/猴子排序.md","raw":"---\ntitle: 猴子排序\ndate: 2022-04-30 19:59:56\ntags:\n    - java\n    - 算法\n    - 排序\ncategories: \n    - 算法练习\n---\n## 前言\n首先得介绍一下无限猴子定理，这个定理是来自埃米尔·博雷尔一本1909年出版谈概率的书籍，当中介绍了“打字的猴子”的概念。\n\n猴子定理定义如下：\n>一般关于此定理的叙述为：有无限只猴子用无限的时间会产生特定的文章。  \n其他取代的叙述，可能是用大英图书馆或美国国会图书馆取代法国国家图书馆；另一个常见的版本是英语使用者常用的，就是猴子会打出莎士比亚的著作。欧洲大陆还有一种说法版是猴子打出大英百科全书。在《从一到无穷大》中，作者则引用了哈姆雷特的例子。\n\n详细推导过程参考[百度百科](https://baike.baidu.com/item/%E6%97%A0%E9%99%90%E7%8C%B4%E5%AD%90%E5%AE%9A%E7%90%86/2221476)  \n那么根据猴子定理，如果我们不断随机打乱一个可排序的数组，在无限长的时间里，这个数组肯定会变成有序数组。\n\n## 代码\n\n~~~java\npackage org.example;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class MonkeySort {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        ArrayList<Integer> nums = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            nums.add(scanner.nextInt());\n        }\n        //排序\n        monkeySort(nums);\n        //输出有序数组\n        for (Integer num : nums) {\n            System.out.println(num);\n        }\n    }\n\n    private static void monkeySort(ArrayList<Integer> nums) {\n        while (!checkSort(nums)) {\n            upset3(nums);\n        }\n    }\n\n    /*\n     * 随机打乱传入的集合\n     * 洗牌算法\n     */\n\n    /**暴力\n     * 每次将原集合中随机一个元素，放到新集合中，然后删除原集合中这个元素。\n     */\n    private static void upset1(ArrayList<Integer> nums) {\n        ArrayList<Integer> arr = (ArrayList<Integer>) nums.clone();\n        int length = arr.size();\n        nums.clear();\n        for (int i = 0; i < length; i++) {\n            int j = (int) (Math.random() * arr.size());\n            nums.add(arr.get(j));\n            arr.remove(j);\n        }\n    }\n\n    /**Fisher-Yates 洗牌算法\n     * 是对暴力算法的优化\n     * 我们可以不删除那个元素，而是将它和需打乱集合中最后一个元素交换位置\n     * 第一次将交换完，将前n-1个作为新地需要打乱的集合，最后1个元素作为乱序后的结果\n     * 第二次将交换完，将前n-2个作为新地需要打乱的集合，倒数两个元素作为乱序后的结果\n     * ...\n     * 直至集合全为乱序。\n     */\n    private static void upset2(ArrayList<Integer> nums) {\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int j = (int) (Math.random() * (i));\n            nums.add(j, nums.get(i));\n            nums.remove(i + 1);\n            nums.add(nums.get(j + 1));\n            nums.remove(j + 1);\n        }\n    }\n\n    //使用shuffle()方法\n    private static void upset3(ArrayList<Integer> nums) {\n        Collections.shuffle(nums);\n    }\n\n    /**\n     * 判断集合是否有序\n     */\n    private static boolean checkSort(ArrayList<Integer> nums) {\n        for (int i = 0; i < nums.size() - 1; i++) {\n            if (nums.get(i) > nums.get(i + 1)) return false;\n        }\n        return true;\n    }\n}\n~~~\n## 总结\n\n猴子排序，看运气的算法。","slug":"猴子排序","published":1,"updated":"2022-09-16T00:20:56.582Z","_id":"cl7ketbdw001to8tt7xy8a3kr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>首先得介绍一下无限猴子定理，这个定理是来自埃米尔·博雷尔一本1909年出版谈概率的书籍，当中介绍了“打字的猴子”的概念。</p>\n<p>猴子定理定义如下：</p>\n<blockquote>\n<p>一般关于此定理的叙述为：有无限只猴子用无限的时间会产生特定的文章。<br>其他取代的叙述，可能是用大英图书馆或美国国会图书馆取代法国国家图书馆；另一个常见的版本是英语使用者常用的，就是猴子会打出莎士比亚的著作。欧洲大陆还有一种说法版是猴子打出大英百科全书。在《从一到无穷大》中，作者则引用了哈姆雷特的例子。</p>\n</blockquote>\n<p>详细推导过程参考<a class=\"link\"   href=\"https://baike.baidu.com/item/%E6%97%A0%E9%99%90%E7%8C%B4%E5%AD%90%E5%AE%9A%E7%90%86/2221476\" >百度百科<i class=\"fas fa-external-link-alt\"></i></a><br>那么根据猴子定理，如果我们不断随机打乱一个可排序的数组，在无限长的时间里，这个数组肯定会变成有序数组。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MonkeySort</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; nums = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            nums.add(scanner.nextInt());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//排序</span></span><br><span class=\"line\">        monkeySort(nums);</span><br><span class=\"line\">        <span class=\"comment\">//输出有序数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer num : nums) &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">monkeySort</span><span class=\"params\">(ArrayList&lt;Integer&gt; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!checkSort(nums)) &#123;</span><br><span class=\"line\">            upset3(nums);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机打乱传入的集合</span></span><br><span class=\"line\"><span class=\"comment\">     * 洗牌算法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**暴力</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次将原集合中随机一个元素，放到新集合中，然后删除原集合中这个元素。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upset1</span><span class=\"params\">(ArrayList&lt;Integer&gt; nums)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; arr = (ArrayList&lt;Integer&gt;) nums.clone();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> arr.size();</span><br><span class=\"line\">        nums.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (Math.random() * arr.size());</span><br><span class=\"line\">            nums.add(arr.get(j));</span><br><span class=\"line\">            arr.remove(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**Fisher-Yates 洗牌算法</span></span><br><span class=\"line\"><span class=\"comment\">     * 是对暴力算法的优化</span></span><br><span class=\"line\"><span class=\"comment\">     * 我们可以不删除那个元素，而是将它和需打乱集合中最后一个元素交换位置</span></span><br><span class=\"line\"><span class=\"comment\">     * 第一次将交换完，将前n-1个作为新地需要打乱的集合，最后1个元素作为乱序后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     * 第二次将交换完，将前n-2个作为新地需要打乱的集合，倒数两个元素作为乱序后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     * ...</span></span><br><span class=\"line\"><span class=\"comment\">     * 直至集合全为乱序。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upset2</span><span class=\"params\">(ArrayList&lt;Integer&gt; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> nums.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (Math.random() * (i));</span><br><span class=\"line\">            nums.add(j, nums.get(i));</span><br><span class=\"line\">            nums.remove(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            nums.add(nums.get(j + <span class=\"number\">1</span>));</span><br><span class=\"line\">            nums.remove(j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用shuffle()方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upset3</span><span class=\"params\">(ArrayList&lt;Integer&gt; nums)</span> &#123;</span><br><span class=\"line\">        Collections.shuffle(nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断集合是否有序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">checkSort</span><span class=\"params\">(ArrayList&lt;Integer&gt; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.size() - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums.get(i) &gt; nums.get(i + <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>猴子排序，看运气的算法。</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>首先得介绍一下无限猴子定理，这个定理是来自埃米尔·博雷尔一本1909年出版谈概率的书籍，当中介绍了“打字的猴子”的概念。</p>\n<p>猴子定理定义如下：</p>\n<blockquote>\n<p>一般关于此定理的叙述为：有无限只猴子用无限的时间会产生特定的文章。<br>其他取代的叙述，可能是用大英图书馆或美国国会图书馆取代法国国家图书馆；另一个常见的版本是英语使用者常用的，就是猴子会打出莎士比亚的著作。欧洲大陆还有一种说法版是猴子打出大英百科全书。在《从一到无穷大》中，作者则引用了哈姆雷特的例子。</p>\n</blockquote>\n<p>详细推导过程参考<a class=\"link\"   href=\"https://baike.baidu.com/item/%E6%97%A0%E9%99%90%E7%8C%B4%E5%AD%90%E5%AE%9A%E7%90%86/2221476\" >百度百科<i class=\"fas fa-external-link-alt\"></i></a><br>那么根据猴子定理，如果我们不断随机打乱一个可排序的数组，在无限长的时间里，这个数组肯定会变成有序数组。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MonkeySort</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; nums = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            nums.add(scanner.nextInt());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//排序</span></span><br><span class=\"line\">        monkeySort(nums);</span><br><span class=\"line\">        <span class=\"comment\">//输出有序数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer num : nums) &#123;</span><br><span class=\"line\">            System.out.println(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">monkeySort</span><span class=\"params\">(ArrayList&lt;Integer&gt; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!checkSort(nums)) &#123;</span><br><span class=\"line\">            upset3(nums);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机打乱传入的集合</span></span><br><span class=\"line\"><span class=\"comment\">     * 洗牌算法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**暴力</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次将原集合中随机一个元素，放到新集合中，然后删除原集合中这个元素。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upset1</span><span class=\"params\">(ArrayList&lt;Integer&gt; nums)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; arr = (ArrayList&lt;Integer&gt;) nums.clone();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> arr.size();</span><br><span class=\"line\">        nums.clear();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (Math.random() * arr.size());</span><br><span class=\"line\">            nums.add(arr.get(j));</span><br><span class=\"line\">            arr.remove(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**Fisher-Yates 洗牌算法</span></span><br><span class=\"line\"><span class=\"comment\">     * 是对暴力算法的优化</span></span><br><span class=\"line\"><span class=\"comment\">     * 我们可以不删除那个元素，而是将它和需打乱集合中最后一个元素交换位置</span></span><br><span class=\"line\"><span class=\"comment\">     * 第一次将交换完，将前n-1个作为新地需要打乱的集合，最后1个元素作为乱序后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     * 第二次将交换完，将前n-2个作为新地需要打乱的集合，倒数两个元素作为乱序后的结果</span></span><br><span class=\"line\"><span class=\"comment\">     * ...</span></span><br><span class=\"line\"><span class=\"comment\">     * 直至集合全为乱序。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upset2</span><span class=\"params\">(ArrayList&lt;Integer&gt; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> nums.size() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (Math.random() * (i));</span><br><span class=\"line\">            nums.add(j, nums.get(i));</span><br><span class=\"line\">            nums.remove(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            nums.add(nums.get(j + <span class=\"number\">1</span>));</span><br><span class=\"line\">            nums.remove(j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用shuffle()方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">upset3</span><span class=\"params\">(ArrayList&lt;Integer&gt; nums)</span> &#123;</span><br><span class=\"line\">        Collections.shuffle(nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断集合是否有序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">checkSort</span><span class=\"params\">(ArrayList&lt;Integer&gt; nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.size() - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums.get(i) &gt; nums.get(i + <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>猴子排序，看运气的算法。</p>\n"},{"title":"Redis笔记","date":"2022-05-07T13:38:10.000Z","_content":"## 关于Redis\n\n[Redis官网](https://redis.io/)\n[Redis百度百科](https://baike.baidu.com/item/Redis/6549233)\nREmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 **key-value** 存储系统，是跨平台的非关系型数据库。\nRedis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、**支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库**，并提供多种语言的 API。  \nRedis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。  \n\n使用Redis是为了解决多次读写数据库引发的性能问题。因为Redis是**基于内存的数据库**，所以它的性能十分优越，读的速度是110000次/s,写的速度是81000次/s。JavaWeb通常使用它存储**缓存**用的数据，以及需要高速读/写的场合，以减少对基于硬盘的数据库的访问次数。\n\n## Redis中的数据结构及操作命令\n\n### Redis中的数据结构\n\n| 数据类型                      | 格式            | 例子                                            |\n|---------------------------|---------------|-----------------------------------------------|\n| string(字符串)               | 单key:单value   | name:zhangsan                                 |\n| list(列表,按插入顺序)            | 单key:多有序value | contacts:13952900000,xxx,xxx                  |\n| set(集合,无序且不重复,string类型)   | 单key:多无序value | city:beijing shanghai shenzhen                |\n| hash(哈希,适合存储对象)           | 单key:对象(属性:值) | student:id:1,name:zhangsan,age:20             |\n| zset(有序集合,通过double类型分数排序) | 单key:多有序value | city:1000 beijing,1500 shanghai,2000 shenzhen |\n\n### 关于键(key)的操作命令\n\n1. 查看redis中的key: **keys pattern**(查找符合给定模式pattern的key)\n   * keys *: 查看redis中所有的key(*匹配零或多个字符)\n   * keys h?o: 查看redis中以h开头，o结尾且中间只有一个字符的key(?匹配一个字符)\n   * keys h[abc]llo: 查看redis中以h开头，llo结尾，且中间为abc中一个的key([]匹配[]中的一个字符)\n2. 判断key在redis中是否存在\n   * **exists key**(存在返回1，不存在返回0)\n   * **exists key [key key key]** (返回值为存在key的数量)\n3. 移动指定key到指定的redis实例: **move key index**\n   * move k1 1\n4. 查看指定key的剩余生存时间: **ttl key**(key未设置生存时间，返回-1；key不存在，返回-2)\n   * ttl k1\n5. 设置key最大生命时间: **expire key seconds**(单位秒)\n   * expire k2 20\n6. 查看指定key的数据类型: **type key**\n   * type k1\n7. 重命名key: **rename key newkey**\n   * rename k1 k2\n8. 删除指定key: **del key [key key key]**(返回值是实际删除key的数量)\n   * del k1 k2\n\n### 关于string类型数据的操作命令\n\n1. 将string类型数据设置到redis中: **set key value**\n   * set name zhangsan\n   * set age 20\n2. 从redis中获取string类型数据: **get key**\n   * get name\n   * \\> zhangsan\n   * get age\n   * \\> 20\n3. 追加字符串: **append key value**(返回值为追加后字符串长度；如果key不存在，则创建并赋值)\n   * set phone 2333333\n   * append phone 8888\n   * \\> 23333338888\n4. 获取字符串长度: **strlen key**\n   * strlen phone\n   * \\> 5\n5. 将字符串数值进行加1运算: **incr key**  \n(返回加1运算后的数据;key不存在，设置一个初始值为0的key，在进行incr运算；key的value不为数值，报错)\n6. 将字符串数值进行减1运算: **decr key**  \n(返回减1运算后的数据;key不存在，设置一个初始值为0的key，在进行decr运算；key的value不为数值，报错)\n7. 将字符串数值进行加offset运算: **incrby key offset**  \n(返回加offset运算后的数据;key不存在，设置一个初始值为0的key，在进行incrby运算；key的value不为数值，报错)\n8. 将字符串数值进行减offset运算: **decrby key offset**  \n(返回减offset运算后的数据;key不存在，设置一个初始值为0的key，在进行decrby运算；key的value不为数值，报错)\n9. 获取字符串key中从startIndex到endIndex的子串: **getrange key startIndex endIndex**(闭区间，下标也可为负数)\n   * set k1 zhangsan\n   * getrange k1 2 5\n   * \\> angs\n   * getrange k1 0 -1\n   * \\> zhangsan\n10. 用value覆盖从startIndex开始的字符串: **setrange key startIndex value**\n    * set k1 zhangsan\n    * setrange k1 5 233\n    * \\> zhang233\n    * setrange k1 5 a\n    * \\> zhanga33\n11. 设置string数据同时，设置它的最大生命周期: **setex key seconds value**\n    * setex k1 20 zhangsan\n12. 设置string数据到redis中，不存在则设置；存在则放弃: **setnx key value**\n    * setnx k1 20\n13. 批量设置string数据到redis中: **mset key1 value1 key2 value2 ...**\n14. 批量获取string数据: **mget key1 key2 ...**\n\n### 关于list类型数据的操作命令\n\n单key-多有序value\n多个value之间有顺序(插入顺序)，最左侧是表头，最右侧表尾。\n每个元素都有下标，表头元素下标是0。下标可以为负数\n\n1. 将一个或多个值依次插入列表的表头: **lpush key value [value value ...]**\n   * lpush list1 1 2 3\n2. 获取指定列表中指定下标区间的元素: **lrange key startIndex endIndex**\n   * lrange list1 0 2\n   * \\>3\n   * \\>2\n   * \\>1\n3. 将一个或多个值依次插入列表的表尾: **rpush key value [value value ...]**\n   * rpush list2 1 2 3\n   * lrange list2 0 2\n   * \\>1\n   * \\>2\n   * \\>3\n4. 从指定列表移除并返回表头: **lpop key**\n5. 从指定列表移除并返回表尾: **rpop key**\n6. 获取指定列表中指定下标的元素: **lindex key index**\n   * lindex list1 1\n   * \\>2\n7. 获取指定列表的长度: llen key\n   * llen list1\n   * \\>3\n8. 根据count值移除指定列表中跟value相等的数据: **lrem key count value**  \ncount>0:从列表的左侧移除count个跟value相等的数据；  \ncount<0:从列表的右侧移除count个跟value相等的数据；\ncount=0:从列表移除所有跟value相等的数据。\n9. 截取指定列表指定区间组成新的列表，并赋值给key: **ltrim key startIndex endIndex**\n10. 将指定列表指定下标元素设置为指定值: lset key index value\n11. 将value插入到指定列表中位于pivot元素之前/之后的位置: linsert key before/after pivot value\n\n### 关于set类型数据的操作命令\n\n单key-多无序value\n无序且不重复，所以元素没有下标，直接操作数据。\n\n1. 将一个或多个元素添加到指定集合: **sadd key value [value value ...]**  \n如果元素已经存在，则会忽略。返回成功加入的元素个数。\n   * sadd set1 a b c a\n2. 获取指定集合中的所有元素: smembers key\n   * smembers set1\n   * \\>a\n   * \\>c\n   * \\>b\n3. 判断指定元素在指定集合中是否存在: **sismember key member**  \n存在返回1，不存在返回0。\n4. 获取指定集合的长度: **scard key**\n5. 移除指定集合中的一个或多个元素: **srem key member [member member ...]**  \n不存在的元素会被忽略  \n返回成功移除的元素个数\n6. 随机获取指定集合中的一个或多个元素: **srandmember key [count]**  \ncount>0 随机获取的多个元素不能重复  \ncount<0 随机获取的多个元素之间可能重复\n7. 从指定集合中随机移除一个或多个元素: **spop key [count]**\n8. 将指定集合中指定元素移动到另一个集合: **smove source dest member**\n   * smove set1 set2 a\n9. 获取第一个集合中有，但其他集合中没有的元素组成新的集合(差集): **sdiff key key [key key ...]**\n10. 获取所有指定集合中都有的元素组成新的集合(交集): **sinter key key [key key ...]**\n11. 获取所有指定集合中所有的元素组成新的集合(并集): **sunion key key [key key ...]**\n\n### 关于hash类型数据的操作命令\n\n单key:field-value field-value ...\nhash是string类型的key和value的映射表，value是一系列的键值对，适合存储对象\n\n1. 将一个或多个field-value对设置到哈希表中: **hset key field1 value1 [field2 value2 ...]**\n   * hset stu1 id 0001\n   * hset stu2 id 0002 name zhangsan\n2. 获取指定哈希表中指定的field的值: **hget key field**\n   * hget stu1 id\n   * \\>0001\n3. ~~批量将多个field-value对设置到哈希表中: **hmset key field1 value1 [field2 value2 ...]**~~\n4. 批量获取指定哈希表在的field值: **hmget key field1 [field2 field3 ...]**\n5. 获取指定哈希表中所有的field和value: **hgetall key**\n6. 从指定哈希表中删除一个或多个field: **hdel key field1 [field1 field2 ...]**\n7. 获取指定哈希表中所有的field个数: **hlen key**\n8. 判断指定哈希表中是否存在某个field: **hexists key field**\n9. 获取指定哈希表中所有的field列表: **hkeys key**\n10. 获取指定哈希表中所有的value列表: **hvals key**\n11. 对指定哈希表中指定的field值进行整数加法运算: **hincrby key field int**\n12. 对指定哈希表中指定的field值进行浮点数加法运算: **hincrbyfloat key field float**\n13. 将一个field-value对设置到指定哈希表中: **hsetnx stu1 age 30**  \n当key-field已经存在，则放弃设置\n\n### 关于zset类型数据的操作命令\n\n有序集合，不允许重复元素。\n但zset集合中，每个元素会关联一个分数，redis根据分数对元素进行排序，分数可以重复。\nzset中每个元素都有顺序，所有每个元素也有下标。。\n\n1. 将一个或多个member及其score值加入有序集合: **zadd key score member [score member ...]**  \n如果元素已经存在，则会覆盖其分数\n   * zadd zset1 1 a\n2. 获取指定有序集合中指定下标区间的元素: **zrange key startIndex endIndex [withscores]**  \nwithscores 是否显示分数\n3. 获取指定有序集合中指定分数区间(闭区间)的元素: **zrangebysorce key min max [withscores]**\n4. 删除指定有序集合中的一个或多个元素: **zrem key member [member ...]**\n5. 获取指定有序集合中所有元素的个数: **zcard key**\n6. 获取指定有序集合中分数在指定区间内的元素个数: **zcount key min max**\n7. 获取指定有序集合中指定元素的排名(从0开始): **zrank key member**\n8. 获取指定有序集合中指定元素的分数: **zscore key member**\n9. 获取指定有序集合中指定元素的排名(按分数从小到大的排名): **zrevrank key member**\n\n### 命令小结\n\n> 上面的命令是部分常用的命令，写到这里感觉不如去看文档，不过写一遍也算是加深印象。  \n> [菜鸟教程Redis](https://www.runoob.com/redis/redis-tutorial.html)  \n\n## Redis的配置文件\n\nredis根目录下提供redis.conf配置文件  \n如果不使用配置文件，redis按默认参数运行。如果使用配置文件，在启动redis服务时，必须指定所使用的配置文件。  \n\n### 关于网络的配置\n\n1. port：指定redis服务所使用的端口号，默认使用6379\n2. bind：配置客户端连接redis服务时，所能使用的ip地址，默认可以使用redis服务所在主机上任意一个ip都可以；一般情况会配置一个真实ip。  \n   * 如果配置了port和bind，则客户端连接redis服务时，必须指定端口和ip：  \n   redis-cli -h 192.268.11.128 -p 6380  \n   redis-cli -h 192.268.11.128 -p 6380 shutdown  \n3. tcp-keepalive：TCP连接保活策略。单位秒，每过多少秒向连接空闲的客户端发送一个ACK请求，以检查客户端是否挂掉，对于无响应的客户端会关闭连接。如果设置为0，则不会进行保活检测。  \n\n### 常规配置\n\n1. loglevel：配置日志级别，开发阶段可以设置成debug，生产阶段通常设置为notice或waring。\n2. logfile：指定日志文件。redis运行过程中会输出日志信息；默认会输出到控制台。\n3. databases：配置redis服务创建的数据库实例个数，默认16个。\n\n### 安全配置\n\n1. requirepass：配置redis的访问密码。默认不配置密码。此参数必须在protected-mode=yes(安全模式)是才起作用。\n\n### RDB配置\n\n1. save <seconds> <changes>：配置复合的快照触发条件，即redis在seconds秒内key改变了changes次，会将快照内数据保存到磁盘一次。默认策略是：\n    * 1分钟内改变1万次\n    * 或5分钟内改变10次\n    * 或15分钟内改变1次\n    * 如果要禁用redis的持久化功能，吧所有的save配置注释即可。\n2. stop-writes-on-bgsave-erroe：在bgsave快照操作出错时停止写入磁盘，以保证数据一致性。如果出错时要继续写入，配置为no。\n3. rdbcompression：设置对存储到磁盘的快照是否压缩。yes会采用LZF算法进行压缩，no关闭此功能，可减少CPU消耗。\n4. rdbchecksum：快照存储后，可使用CRC64算法进行数据校验，会消耗一定性能，no关闭此功能。\n5. sdbfilename：持久化数据生成的文件名。默认为dump.rdb\n6. dir：持久化数据生成文件的保存目录。默认./即redis启动目录\n\n### AOF配置\n\n1. appendonly：配置是否开启AOF，yes表示开启，no表示关闭。默认no\n2. appendfilename：AOF保存的文件名\n3. appendfsync：AOF异步持久化策略\n   * always：同步持久化，每次发生数据变化立刻写入磁盘。性能差但数据安全。\n   * everysec：每秒异步记录一次。默认。\n   * no：不及时同步，由操作系统决定何时同步。\n4. no-appendfysnc-on-rewrite：重写时是否可以运用appendsync，默认no，可以保证数据安全性。\n5. auto-aof-rewrite-percentage：设置重写的基准百分比。\n6. auto-aof-rewrite-min-size：设置重写的基准值。\n\n## Redis的持久化\n\nredis是内存数据库，数据存储在内存中，虽然加快了读取速度，但也对数据安全性产生新的问题。当服务器宕机后，redis数据库中所有数据会全部丢失，所以redis提供了持久化功能——RDB和AOF。\n\n### RDB策略\n\n在指定时间间隔内，redis服务执行指定次数的写操作，会自动触发一次持久化操作。  \nRDB策略是redis默认的持久化策略，在redis服务开启时，这种持久化策略默认开启。\n\n### AOF策略\n\n采用操作日志来记录进行的每一次操作，每次redis启动时，都会重新执行一遍日志中的命令。  \n效率低下，redis默认不开启。作为RDB策略的补充。\n\n### 持久化策略小结\n\n> 根据数据的特点来决定使用哪种策略，一般RDB足够。redis主要做缓存，数据在关系型数据库中有备份。\n\n## Redis的事务\n\n事务：把一组数据库放在一起执行，保证操作的原子性，要么同时成功，要么同时失败。\nRedis的事务：允许把一组redis命令放在一起执行，把命令序列化，然后一起执行，保证部分原子性。\n\n1. multi：用来标记一个事务的开始。\n   * 压入事务队列\n   * multi\n   * set k1 v1\n   * set k2 v2 \n   * ...\n2. exec：用来执行事务队列中的所有命令。\n   * exec\n3. redis的事务只能保证部分原子性：\n   * 如果一组命令中，在压入事务队列过程中发生错误，则本事务中所有命令都不执行，保证事务原子性。\n   * 如果一组命令中，艾压入队列过程正常，但在执行事务队列命令时发生错误，则只会影响发生错误的命令，不会影响其他命令，不能保证事务的原子性。\n4. discard：清除所有已经压入队列中的命令，并且结束整个事务。\n   * multi\n   * set k1 v1\n   * set k2 v2\n   * discard\n5. watch：监控某一个键，当事务在执行过程中，此键代码的值发生变化，则本事务放弃执行；否则，正常执行。\n6. unwatch：放弃监控某一键\n\n> 事务小结：  \n> 1.单独的隔离操作：事务中的所有命令会序列化、顺序地执行。执行过程中不会被其他客户端的命令请求打断，除非是用watch进行监视。\n> 2.不保证事务的原子性：同一事务如果某一命令执行失败，其他命令仍可能被继续执行，redis事务没有回滚。\n\n## Redis消息的发布与订阅(了解)\n\nredis客户端订阅频道，消息的发布者往频道上发布消息，所有订阅此频道的客户端都能够接收到消息。\n\n1. subscribe：订阅一个或多个频道的消息。\n   * subscribe ch1 ch2 ch3\n2. publish：将消息发布到指定频道\n   * publish ch1 hello\n3. psubscribe：订阅一个或多个频道的消息，频道名支持通配符。\n\n## Redis的主从复制\n\n主少从多，主写从读，读写分离，主写同步复制到从。\n\n搭建一主二从的redis集群：\n1. 搭建三台redis服务：使用一台机器，三个不同端口模拟\n   * 修改配置文件(bind、port等),以redis6379.conf为例\n   * bind 127.0.0.1\n   * port 6379\n   * pidfile /var/run/redis_6379.pid\n   * logfile \"6379.log\"\n   * dbfilename dump6379.rdb\n   * 启动服务\n   * redis-server redis6379.cond &\n   * redis-server redis6380.cond &\n   * redis-server redis6381.cond &\n2. 连接到redis服务\n   * redis-cli -h 127.0.0.1 -p 6379\n   * redis-cli -h 127.0.0.1 -p 6380\n   * redis-cli -h 127.0.0.1 -p 6381\n3. 查看三台redis服务在集群中的主从角色：\n   * info replication\n   * 默认情况下，所有的redis服务都是主机，既能读也能写，但都没有从机。\n4. 设置主从关系：设从不设主\n   * 在6380上执行：slaveof 127.0.0.1 6379\n   * 在6381上执行：slaveof 127.0.0.1 6379\n5. 全量复制：一旦主从关系确定，会自动把主机上已有的数据同步复制到从库\n6. 增量复制：主库写数据会自动同步到从库\n7. 主写从读，读写分离：\n   * 在从机上进行写操作会报错\n8. 主机宕机、从机原地待命：\n   * 从机可以继续读，但数据不会再更新。\n9. 主机恢复、一切恢复正常\n10. 从机宕机、主机少一个从机，其他从机不变。\n11. 从机恢复、需**重新设置主从关系**。\n12. 从机上位：\n    * 主机宕机、从机原地待命\n    * 从机断开原来的主从关系\n    * 在6380上执行：slaveof no one\n    * 重新设置主从关系\n    * 在6381上执行：slaveof 127.0.0.1 6380\n13. 原主机恢复\n    * 在6379上执行：slaveof 127.0.0.1 6379\n    * 让6379变为6380的从机\n    * 或者在6379上执行：slaveof 127.0.0.1 6381\n    * 让6379成为6381的从机，此时6381既是主机又是从机，但他不能读。\n\n> 小结：  \n> 一台主机配置多台从机，一台从机也可以配置多台从机，从而形成一个庞大的集群。减轻一台主机的压力，但是增加了服务间的延迟。\n\n## Redis的哨兵模式\n\n主机宕机、从机上位的自动版\n\n1. 搭建一主二从的redis集群(见上文)\n2. 提供哨兵的配置文件：\n   * 在redis安装目录下下创建配置文件：redis_sentinel.conf\n   * 写入 sentinel monitor dc-redis 127.0.0.1 6379 1\n3. 启动哨兵服务：redis-sentinel redis_sentinel.conf\n4. 主机宕机，哨兵自动选择从机上位\n5. 原主机恢复，自动从属于新主机\n\n> 哨兵小结\n> 可以设置多个哨兵。即每个redis服务都可以设置一个哨兵。\n> 哨兵模式三大任务：监控、提醒、自动故障迁移\n\n## Jedis操作Redis\n\n使用Redis官方推荐的Jedis，在Java应用中操作Redis。操作Redis的命令在jedis中以方法形式出现。  \n[Jedis文档](https://ppg007.github.io/redis/docs/jedis.html)\n\nmaven配置\n~~~xml\n    <dependency>\n      <groupId>redis.clients</groupId>\n      <artifactId>jedis</artifactId>\n      <version>4.2.2</version>\n    </dependency>\n~~~\n示例java程序\n~~~java\npackage org.example;\n\nimport redis.clients.jedis.Jedis;\n\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        //连接redis\n        Jedis jedis = new Jedis(\"127.0.0.1\", 6379);\n        //使用jedis对象操作redis服务\n        Set<String> ret = jedis.keys(\"*\");\n        System.out.println(ret);\n    }\n}\n~~~\n输出：[]\n\n## Jedis中连接池的使用\n\n工具类\n~~~Java\npackage org.example;\n\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisUtils {\n    private static JedisPool pool;\n\n    //创建JedisPool对象\n    public static JedisPool open(String ip, int port) {\n        if (pool == null) {\n            //创建JedisPool\n            //创建JedisPoolConfig，给config设置连接池的参数，使用config对象创建JedisPool\n            JedisPoolConfig config = new JedisPoolConfig();\n            //给config设置连接池的参数\n\n            //设置最大线程数，一个线程就是一个Jedis\n            config.setMaxTotal(20);\n            //设置最大空闲数\n            config.setMaxIdle(2);\n            //设置检查项为true，表示从线程池中获取的对象一定是经过检查可用的\n            config.setTestOnBorrow(true);\n            //创建Pool对象\n            /*\n             * poolConfig:配置器JedisPoolConfig\n             * host:redis所在linux的ip\n             * port:redis的端口\n             * timeout:链接redis超时，毫秒值\n             * password:链接redis的访问密码\n             */\n            pool = new JedisPool(config, ip, port, 6000);\n        }\n        return pool;\n    }\n\n    //关闭Pool对象\n    public static void close() {\n        if (pool != null) {\n            pool.close();\n        }\n    }\n}\n~~~\n测试类\n~~~java\npackage org.example;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        String host = \"127.0.0.1\";\n        int port = 6379;\n        //创建JedisPool对象，从JedisPool中获取Jedis\n        JedisPool pool = null;\n        Jedis jedis = null;\n        try {\n            pool = RedisUtils.open(host, port);\n            //从pool中获取Jedis\n            jedis = pool.getResource();\n\n            Set<String> ret = jedis.keys(\"*\");\n            System.out.println(ret);\n        } finally {\n            //关闭Jedis对象，把Pool中获取的Jedis放回Pool，供其他请求使用。\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n}\n~~~\n输出：[]\n\n## Redis客户端工具——Redis Desktop Manager\n\n使用命令行还行，就不用客户端了。贴个[官网链接](https://resp.app/)\n\n## 总结\n\n> Redis的学习告一段落，其中用的最多的应该还是对数据的操作。","source":"_posts/Redis笔记.md","raw":"---\ntitle: Redis笔记\ndate: 2022-05-07 21:38:10\ntags:\n    - Redis\n    - 数据库\ncategories:\n    - 学习笔记\n---\n## 关于Redis\n\n[Redis官网](https://redis.io/)\n[Redis百度百科](https://baike.baidu.com/item/Redis/6549233)\nREmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 **key-value** 存储系统，是跨平台的非关系型数据库。\nRedis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、**支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库**，并提供多种语言的 API。  \nRedis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。  \n\n使用Redis是为了解决多次读写数据库引发的性能问题。因为Redis是**基于内存的数据库**，所以它的性能十分优越，读的速度是110000次/s,写的速度是81000次/s。JavaWeb通常使用它存储**缓存**用的数据，以及需要高速读/写的场合，以减少对基于硬盘的数据库的访问次数。\n\n## Redis中的数据结构及操作命令\n\n### Redis中的数据结构\n\n| 数据类型                      | 格式            | 例子                                            |\n|---------------------------|---------------|-----------------------------------------------|\n| string(字符串)               | 单key:单value   | name:zhangsan                                 |\n| list(列表,按插入顺序)            | 单key:多有序value | contacts:13952900000,xxx,xxx                  |\n| set(集合,无序且不重复,string类型)   | 单key:多无序value | city:beijing shanghai shenzhen                |\n| hash(哈希,适合存储对象)           | 单key:对象(属性:值) | student:id:1,name:zhangsan,age:20             |\n| zset(有序集合,通过double类型分数排序) | 单key:多有序value | city:1000 beijing,1500 shanghai,2000 shenzhen |\n\n### 关于键(key)的操作命令\n\n1. 查看redis中的key: **keys pattern**(查找符合给定模式pattern的key)\n   * keys *: 查看redis中所有的key(*匹配零或多个字符)\n   * keys h?o: 查看redis中以h开头，o结尾且中间只有一个字符的key(?匹配一个字符)\n   * keys h[abc]llo: 查看redis中以h开头，llo结尾，且中间为abc中一个的key([]匹配[]中的一个字符)\n2. 判断key在redis中是否存在\n   * **exists key**(存在返回1，不存在返回0)\n   * **exists key [key key key]** (返回值为存在key的数量)\n3. 移动指定key到指定的redis实例: **move key index**\n   * move k1 1\n4. 查看指定key的剩余生存时间: **ttl key**(key未设置生存时间，返回-1；key不存在，返回-2)\n   * ttl k1\n5. 设置key最大生命时间: **expire key seconds**(单位秒)\n   * expire k2 20\n6. 查看指定key的数据类型: **type key**\n   * type k1\n7. 重命名key: **rename key newkey**\n   * rename k1 k2\n8. 删除指定key: **del key [key key key]**(返回值是实际删除key的数量)\n   * del k1 k2\n\n### 关于string类型数据的操作命令\n\n1. 将string类型数据设置到redis中: **set key value**\n   * set name zhangsan\n   * set age 20\n2. 从redis中获取string类型数据: **get key**\n   * get name\n   * \\> zhangsan\n   * get age\n   * \\> 20\n3. 追加字符串: **append key value**(返回值为追加后字符串长度；如果key不存在，则创建并赋值)\n   * set phone 2333333\n   * append phone 8888\n   * \\> 23333338888\n4. 获取字符串长度: **strlen key**\n   * strlen phone\n   * \\> 5\n5. 将字符串数值进行加1运算: **incr key**  \n(返回加1运算后的数据;key不存在，设置一个初始值为0的key，在进行incr运算；key的value不为数值，报错)\n6. 将字符串数值进行减1运算: **decr key**  \n(返回减1运算后的数据;key不存在，设置一个初始值为0的key，在进行decr运算；key的value不为数值，报错)\n7. 将字符串数值进行加offset运算: **incrby key offset**  \n(返回加offset运算后的数据;key不存在，设置一个初始值为0的key，在进行incrby运算；key的value不为数值，报错)\n8. 将字符串数值进行减offset运算: **decrby key offset**  \n(返回减offset运算后的数据;key不存在，设置一个初始值为0的key，在进行decrby运算；key的value不为数值，报错)\n9. 获取字符串key中从startIndex到endIndex的子串: **getrange key startIndex endIndex**(闭区间，下标也可为负数)\n   * set k1 zhangsan\n   * getrange k1 2 5\n   * \\> angs\n   * getrange k1 0 -1\n   * \\> zhangsan\n10. 用value覆盖从startIndex开始的字符串: **setrange key startIndex value**\n    * set k1 zhangsan\n    * setrange k1 5 233\n    * \\> zhang233\n    * setrange k1 5 a\n    * \\> zhanga33\n11. 设置string数据同时，设置它的最大生命周期: **setex key seconds value**\n    * setex k1 20 zhangsan\n12. 设置string数据到redis中，不存在则设置；存在则放弃: **setnx key value**\n    * setnx k1 20\n13. 批量设置string数据到redis中: **mset key1 value1 key2 value2 ...**\n14. 批量获取string数据: **mget key1 key2 ...**\n\n### 关于list类型数据的操作命令\n\n单key-多有序value\n多个value之间有顺序(插入顺序)，最左侧是表头，最右侧表尾。\n每个元素都有下标，表头元素下标是0。下标可以为负数\n\n1. 将一个或多个值依次插入列表的表头: **lpush key value [value value ...]**\n   * lpush list1 1 2 3\n2. 获取指定列表中指定下标区间的元素: **lrange key startIndex endIndex**\n   * lrange list1 0 2\n   * \\>3\n   * \\>2\n   * \\>1\n3. 将一个或多个值依次插入列表的表尾: **rpush key value [value value ...]**\n   * rpush list2 1 2 3\n   * lrange list2 0 2\n   * \\>1\n   * \\>2\n   * \\>3\n4. 从指定列表移除并返回表头: **lpop key**\n5. 从指定列表移除并返回表尾: **rpop key**\n6. 获取指定列表中指定下标的元素: **lindex key index**\n   * lindex list1 1\n   * \\>2\n7. 获取指定列表的长度: llen key\n   * llen list1\n   * \\>3\n8. 根据count值移除指定列表中跟value相等的数据: **lrem key count value**  \ncount>0:从列表的左侧移除count个跟value相等的数据；  \ncount<0:从列表的右侧移除count个跟value相等的数据；\ncount=0:从列表移除所有跟value相等的数据。\n9. 截取指定列表指定区间组成新的列表，并赋值给key: **ltrim key startIndex endIndex**\n10. 将指定列表指定下标元素设置为指定值: lset key index value\n11. 将value插入到指定列表中位于pivot元素之前/之后的位置: linsert key before/after pivot value\n\n### 关于set类型数据的操作命令\n\n单key-多无序value\n无序且不重复，所以元素没有下标，直接操作数据。\n\n1. 将一个或多个元素添加到指定集合: **sadd key value [value value ...]**  \n如果元素已经存在，则会忽略。返回成功加入的元素个数。\n   * sadd set1 a b c a\n2. 获取指定集合中的所有元素: smembers key\n   * smembers set1\n   * \\>a\n   * \\>c\n   * \\>b\n3. 判断指定元素在指定集合中是否存在: **sismember key member**  \n存在返回1，不存在返回0。\n4. 获取指定集合的长度: **scard key**\n5. 移除指定集合中的一个或多个元素: **srem key member [member member ...]**  \n不存在的元素会被忽略  \n返回成功移除的元素个数\n6. 随机获取指定集合中的一个或多个元素: **srandmember key [count]**  \ncount>0 随机获取的多个元素不能重复  \ncount<0 随机获取的多个元素之间可能重复\n7. 从指定集合中随机移除一个或多个元素: **spop key [count]**\n8. 将指定集合中指定元素移动到另一个集合: **smove source dest member**\n   * smove set1 set2 a\n9. 获取第一个集合中有，但其他集合中没有的元素组成新的集合(差集): **sdiff key key [key key ...]**\n10. 获取所有指定集合中都有的元素组成新的集合(交集): **sinter key key [key key ...]**\n11. 获取所有指定集合中所有的元素组成新的集合(并集): **sunion key key [key key ...]**\n\n### 关于hash类型数据的操作命令\n\n单key:field-value field-value ...\nhash是string类型的key和value的映射表，value是一系列的键值对，适合存储对象\n\n1. 将一个或多个field-value对设置到哈希表中: **hset key field1 value1 [field2 value2 ...]**\n   * hset stu1 id 0001\n   * hset stu2 id 0002 name zhangsan\n2. 获取指定哈希表中指定的field的值: **hget key field**\n   * hget stu1 id\n   * \\>0001\n3. ~~批量将多个field-value对设置到哈希表中: **hmset key field1 value1 [field2 value2 ...]**~~\n4. 批量获取指定哈希表在的field值: **hmget key field1 [field2 field3 ...]**\n5. 获取指定哈希表中所有的field和value: **hgetall key**\n6. 从指定哈希表中删除一个或多个field: **hdel key field1 [field1 field2 ...]**\n7. 获取指定哈希表中所有的field个数: **hlen key**\n8. 判断指定哈希表中是否存在某个field: **hexists key field**\n9. 获取指定哈希表中所有的field列表: **hkeys key**\n10. 获取指定哈希表中所有的value列表: **hvals key**\n11. 对指定哈希表中指定的field值进行整数加法运算: **hincrby key field int**\n12. 对指定哈希表中指定的field值进行浮点数加法运算: **hincrbyfloat key field float**\n13. 将一个field-value对设置到指定哈希表中: **hsetnx stu1 age 30**  \n当key-field已经存在，则放弃设置\n\n### 关于zset类型数据的操作命令\n\n有序集合，不允许重复元素。\n但zset集合中，每个元素会关联一个分数，redis根据分数对元素进行排序，分数可以重复。\nzset中每个元素都有顺序，所有每个元素也有下标。。\n\n1. 将一个或多个member及其score值加入有序集合: **zadd key score member [score member ...]**  \n如果元素已经存在，则会覆盖其分数\n   * zadd zset1 1 a\n2. 获取指定有序集合中指定下标区间的元素: **zrange key startIndex endIndex [withscores]**  \nwithscores 是否显示分数\n3. 获取指定有序集合中指定分数区间(闭区间)的元素: **zrangebysorce key min max [withscores]**\n4. 删除指定有序集合中的一个或多个元素: **zrem key member [member ...]**\n5. 获取指定有序集合中所有元素的个数: **zcard key**\n6. 获取指定有序集合中分数在指定区间内的元素个数: **zcount key min max**\n7. 获取指定有序集合中指定元素的排名(从0开始): **zrank key member**\n8. 获取指定有序集合中指定元素的分数: **zscore key member**\n9. 获取指定有序集合中指定元素的排名(按分数从小到大的排名): **zrevrank key member**\n\n### 命令小结\n\n> 上面的命令是部分常用的命令，写到这里感觉不如去看文档，不过写一遍也算是加深印象。  \n> [菜鸟教程Redis](https://www.runoob.com/redis/redis-tutorial.html)  \n\n## Redis的配置文件\n\nredis根目录下提供redis.conf配置文件  \n如果不使用配置文件，redis按默认参数运行。如果使用配置文件，在启动redis服务时，必须指定所使用的配置文件。  \n\n### 关于网络的配置\n\n1. port：指定redis服务所使用的端口号，默认使用6379\n2. bind：配置客户端连接redis服务时，所能使用的ip地址，默认可以使用redis服务所在主机上任意一个ip都可以；一般情况会配置一个真实ip。  \n   * 如果配置了port和bind，则客户端连接redis服务时，必须指定端口和ip：  \n   redis-cli -h 192.268.11.128 -p 6380  \n   redis-cli -h 192.268.11.128 -p 6380 shutdown  \n3. tcp-keepalive：TCP连接保活策略。单位秒，每过多少秒向连接空闲的客户端发送一个ACK请求，以检查客户端是否挂掉，对于无响应的客户端会关闭连接。如果设置为0，则不会进行保活检测。  \n\n### 常规配置\n\n1. loglevel：配置日志级别，开发阶段可以设置成debug，生产阶段通常设置为notice或waring。\n2. logfile：指定日志文件。redis运行过程中会输出日志信息；默认会输出到控制台。\n3. databases：配置redis服务创建的数据库实例个数，默认16个。\n\n### 安全配置\n\n1. requirepass：配置redis的访问密码。默认不配置密码。此参数必须在protected-mode=yes(安全模式)是才起作用。\n\n### RDB配置\n\n1. save <seconds> <changes>：配置复合的快照触发条件，即redis在seconds秒内key改变了changes次，会将快照内数据保存到磁盘一次。默认策略是：\n    * 1分钟内改变1万次\n    * 或5分钟内改变10次\n    * 或15分钟内改变1次\n    * 如果要禁用redis的持久化功能，吧所有的save配置注释即可。\n2. stop-writes-on-bgsave-erroe：在bgsave快照操作出错时停止写入磁盘，以保证数据一致性。如果出错时要继续写入，配置为no。\n3. rdbcompression：设置对存储到磁盘的快照是否压缩。yes会采用LZF算法进行压缩，no关闭此功能，可减少CPU消耗。\n4. rdbchecksum：快照存储后，可使用CRC64算法进行数据校验，会消耗一定性能，no关闭此功能。\n5. sdbfilename：持久化数据生成的文件名。默认为dump.rdb\n6. dir：持久化数据生成文件的保存目录。默认./即redis启动目录\n\n### AOF配置\n\n1. appendonly：配置是否开启AOF，yes表示开启，no表示关闭。默认no\n2. appendfilename：AOF保存的文件名\n3. appendfsync：AOF异步持久化策略\n   * always：同步持久化，每次发生数据变化立刻写入磁盘。性能差但数据安全。\n   * everysec：每秒异步记录一次。默认。\n   * no：不及时同步，由操作系统决定何时同步。\n4. no-appendfysnc-on-rewrite：重写时是否可以运用appendsync，默认no，可以保证数据安全性。\n5. auto-aof-rewrite-percentage：设置重写的基准百分比。\n6. auto-aof-rewrite-min-size：设置重写的基准值。\n\n## Redis的持久化\n\nredis是内存数据库，数据存储在内存中，虽然加快了读取速度，但也对数据安全性产生新的问题。当服务器宕机后，redis数据库中所有数据会全部丢失，所以redis提供了持久化功能——RDB和AOF。\n\n### RDB策略\n\n在指定时间间隔内，redis服务执行指定次数的写操作，会自动触发一次持久化操作。  \nRDB策略是redis默认的持久化策略，在redis服务开启时，这种持久化策略默认开启。\n\n### AOF策略\n\n采用操作日志来记录进行的每一次操作，每次redis启动时，都会重新执行一遍日志中的命令。  \n效率低下，redis默认不开启。作为RDB策略的补充。\n\n### 持久化策略小结\n\n> 根据数据的特点来决定使用哪种策略，一般RDB足够。redis主要做缓存，数据在关系型数据库中有备份。\n\n## Redis的事务\n\n事务：把一组数据库放在一起执行，保证操作的原子性，要么同时成功，要么同时失败。\nRedis的事务：允许把一组redis命令放在一起执行，把命令序列化，然后一起执行，保证部分原子性。\n\n1. multi：用来标记一个事务的开始。\n   * 压入事务队列\n   * multi\n   * set k1 v1\n   * set k2 v2 \n   * ...\n2. exec：用来执行事务队列中的所有命令。\n   * exec\n3. redis的事务只能保证部分原子性：\n   * 如果一组命令中，在压入事务队列过程中发生错误，则本事务中所有命令都不执行，保证事务原子性。\n   * 如果一组命令中，艾压入队列过程正常，但在执行事务队列命令时发生错误，则只会影响发生错误的命令，不会影响其他命令，不能保证事务的原子性。\n4. discard：清除所有已经压入队列中的命令，并且结束整个事务。\n   * multi\n   * set k1 v1\n   * set k2 v2\n   * discard\n5. watch：监控某一个键，当事务在执行过程中，此键代码的值发生变化，则本事务放弃执行；否则，正常执行。\n6. unwatch：放弃监控某一键\n\n> 事务小结：  \n> 1.单独的隔离操作：事务中的所有命令会序列化、顺序地执行。执行过程中不会被其他客户端的命令请求打断，除非是用watch进行监视。\n> 2.不保证事务的原子性：同一事务如果某一命令执行失败，其他命令仍可能被继续执行，redis事务没有回滚。\n\n## Redis消息的发布与订阅(了解)\n\nredis客户端订阅频道，消息的发布者往频道上发布消息，所有订阅此频道的客户端都能够接收到消息。\n\n1. subscribe：订阅一个或多个频道的消息。\n   * subscribe ch1 ch2 ch3\n2. publish：将消息发布到指定频道\n   * publish ch1 hello\n3. psubscribe：订阅一个或多个频道的消息，频道名支持通配符。\n\n## Redis的主从复制\n\n主少从多，主写从读，读写分离，主写同步复制到从。\n\n搭建一主二从的redis集群：\n1. 搭建三台redis服务：使用一台机器，三个不同端口模拟\n   * 修改配置文件(bind、port等),以redis6379.conf为例\n   * bind 127.0.0.1\n   * port 6379\n   * pidfile /var/run/redis_6379.pid\n   * logfile \"6379.log\"\n   * dbfilename dump6379.rdb\n   * 启动服务\n   * redis-server redis6379.cond &\n   * redis-server redis6380.cond &\n   * redis-server redis6381.cond &\n2. 连接到redis服务\n   * redis-cli -h 127.0.0.1 -p 6379\n   * redis-cli -h 127.0.0.1 -p 6380\n   * redis-cli -h 127.0.0.1 -p 6381\n3. 查看三台redis服务在集群中的主从角色：\n   * info replication\n   * 默认情况下，所有的redis服务都是主机，既能读也能写，但都没有从机。\n4. 设置主从关系：设从不设主\n   * 在6380上执行：slaveof 127.0.0.1 6379\n   * 在6381上执行：slaveof 127.0.0.1 6379\n5. 全量复制：一旦主从关系确定，会自动把主机上已有的数据同步复制到从库\n6. 增量复制：主库写数据会自动同步到从库\n7. 主写从读，读写分离：\n   * 在从机上进行写操作会报错\n8. 主机宕机、从机原地待命：\n   * 从机可以继续读，但数据不会再更新。\n9. 主机恢复、一切恢复正常\n10. 从机宕机、主机少一个从机，其他从机不变。\n11. 从机恢复、需**重新设置主从关系**。\n12. 从机上位：\n    * 主机宕机、从机原地待命\n    * 从机断开原来的主从关系\n    * 在6380上执行：slaveof no one\n    * 重新设置主从关系\n    * 在6381上执行：slaveof 127.0.0.1 6380\n13. 原主机恢复\n    * 在6379上执行：slaveof 127.0.0.1 6379\n    * 让6379变为6380的从机\n    * 或者在6379上执行：slaveof 127.0.0.1 6381\n    * 让6379成为6381的从机，此时6381既是主机又是从机，但他不能读。\n\n> 小结：  \n> 一台主机配置多台从机，一台从机也可以配置多台从机，从而形成一个庞大的集群。减轻一台主机的压力，但是增加了服务间的延迟。\n\n## Redis的哨兵模式\n\n主机宕机、从机上位的自动版\n\n1. 搭建一主二从的redis集群(见上文)\n2. 提供哨兵的配置文件：\n   * 在redis安装目录下下创建配置文件：redis_sentinel.conf\n   * 写入 sentinel monitor dc-redis 127.0.0.1 6379 1\n3. 启动哨兵服务：redis-sentinel redis_sentinel.conf\n4. 主机宕机，哨兵自动选择从机上位\n5. 原主机恢复，自动从属于新主机\n\n> 哨兵小结\n> 可以设置多个哨兵。即每个redis服务都可以设置一个哨兵。\n> 哨兵模式三大任务：监控、提醒、自动故障迁移\n\n## Jedis操作Redis\n\n使用Redis官方推荐的Jedis，在Java应用中操作Redis。操作Redis的命令在jedis中以方法形式出现。  \n[Jedis文档](https://ppg007.github.io/redis/docs/jedis.html)\n\nmaven配置\n~~~xml\n    <dependency>\n      <groupId>redis.clients</groupId>\n      <artifactId>jedis</artifactId>\n      <version>4.2.2</version>\n    </dependency>\n~~~\n示例java程序\n~~~java\npackage org.example;\n\nimport redis.clients.jedis.Jedis;\n\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        //连接redis\n        Jedis jedis = new Jedis(\"127.0.0.1\", 6379);\n        //使用jedis对象操作redis服务\n        Set<String> ret = jedis.keys(\"*\");\n        System.out.println(ret);\n    }\n}\n~~~\n输出：[]\n\n## Jedis中连接池的使用\n\n工具类\n~~~Java\npackage org.example;\n\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisUtils {\n    private static JedisPool pool;\n\n    //创建JedisPool对象\n    public static JedisPool open(String ip, int port) {\n        if (pool == null) {\n            //创建JedisPool\n            //创建JedisPoolConfig，给config设置连接池的参数，使用config对象创建JedisPool\n            JedisPoolConfig config = new JedisPoolConfig();\n            //给config设置连接池的参数\n\n            //设置最大线程数，一个线程就是一个Jedis\n            config.setMaxTotal(20);\n            //设置最大空闲数\n            config.setMaxIdle(2);\n            //设置检查项为true，表示从线程池中获取的对象一定是经过检查可用的\n            config.setTestOnBorrow(true);\n            //创建Pool对象\n            /*\n             * poolConfig:配置器JedisPoolConfig\n             * host:redis所在linux的ip\n             * port:redis的端口\n             * timeout:链接redis超时，毫秒值\n             * password:链接redis的访问密码\n             */\n            pool = new JedisPool(config, ip, port, 6000);\n        }\n        return pool;\n    }\n\n    //关闭Pool对象\n    public static void close() {\n        if (pool != null) {\n            pool.close();\n        }\n    }\n}\n~~~\n测试类\n~~~java\npackage org.example;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        String host = \"127.0.0.1\";\n        int port = 6379;\n        //创建JedisPool对象，从JedisPool中获取Jedis\n        JedisPool pool = null;\n        Jedis jedis = null;\n        try {\n            pool = RedisUtils.open(host, port);\n            //从pool中获取Jedis\n            jedis = pool.getResource();\n\n            Set<String> ret = jedis.keys(\"*\");\n            System.out.println(ret);\n        } finally {\n            //关闭Jedis对象，把Pool中获取的Jedis放回Pool，供其他请求使用。\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n}\n~~~\n输出：[]\n\n## Redis客户端工具——Redis Desktop Manager\n\n使用命令行还行，就不用客户端了。贴个[官网链接](https://resp.app/)\n\n## 总结\n\n> Redis的学习告一段落，其中用的最多的应该还是对数据的操作。","slug":"Redis笔记","published":1,"updated":"2022-08-15T08:40:55.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbdx001wo8tte5x87ax1","content":"<h2 id=\"关于Redis\"><a href=\"#关于Redis\" class=\"headerlink\" title=\"关于Redis\"></a>关于Redis</h2><p><a class=\"link\"   href=\"https://redis.io/\" >Redis官网<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://baike.baidu.com/item/Redis/6549233\" >Redis百度百科<i class=\"fas fa-external-link-alt\"></i></a><br>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 <strong>key-value</strong> 存储系统，是跨平台的非关系型数据库。<br>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、<strong>支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库</strong>，并提供多种语言的 API。<br>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。  </p>\n<p>使用Redis是为了解决多次读写数据库引发的性能问题。因为Redis是<strong>基于内存的数据库</strong>，所以它的性能十分优越，读的速度是110000次/s,写的速度是81000次/s。JavaWeb通常使用它存储<strong>缓存</strong>用的数据，以及需要高速读/写的场合，以减少对基于硬盘的数据库的访问次数。</p>\n<h2 id=\"Redis中的数据结构及操作命令\"><a href=\"#Redis中的数据结构及操作命令\" class=\"headerlink\" title=\"Redis中的数据结构及操作命令\"></a>Redis中的数据结构及操作命令</h2><h3 id=\"Redis中的数据结构\"><a href=\"#Redis中的数据结构\" class=\"headerlink\" title=\"Redis中的数据结构\"></a>Redis中的数据结构</h3><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>格式</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string(字符串)</td>\n<td>单key:单value</td>\n<td>name:zhangsan</td>\n</tr>\n<tr>\n<td>list(列表,按插入顺序)</td>\n<td>单key:多有序value</td>\n<td>contacts:13952900000,xxx,xxx</td>\n</tr>\n<tr>\n<td>set(集合,无序且不重复,string类型)</td>\n<td>单key:多无序value</td>\n<td>city:beijing shanghai shenzhen</td>\n</tr>\n<tr>\n<td>hash(哈希,适合存储对象)</td>\n<td>单key:对象(属性:值)</td>\n<td>student:id:1,name:zhangsan,age:20</td>\n</tr>\n<tr>\n<td>zset(有序集合,通过double类型分数排序)</td>\n<td>单key:多有序value</td>\n<td>city:1000 beijing,1500 shanghai,2000 shenzhen</td>\n</tr>\n</tbody></table>\n<h3 id=\"关于键-key-的操作命令\"><a href=\"#关于键-key-的操作命令\" class=\"headerlink\" title=\"关于键(key)的操作命令\"></a>关于键(key)的操作命令</h3><ol>\n<li>查看redis中的key: <strong>keys pattern</strong>(查找符合给定模式pattern的key)<ul>\n<li>keys *: 查看redis中所有的key(*匹配零或多个字符)</li>\n<li>keys h?o: 查看redis中以h开头，o结尾且中间只有一个字符的key(?匹配一个字符)</li>\n<li>keys h[abc]llo: 查看redis中以h开头，llo结尾，且中间为abc中一个的key([]匹配[]中的一个字符)</li>\n</ul>\n</li>\n<li>判断key在redis中是否存在<ul>\n<li><strong>exists key</strong>(存在返回1，不存在返回0)</li>\n<li><strong>exists key [key key key]</strong> (返回值为存在key的数量)</li>\n</ul>\n</li>\n<li>移动指定key到指定的redis实例: <strong>move key index</strong><ul>\n<li>move k1 1</li>\n</ul>\n</li>\n<li>查看指定key的剩余生存时间: <strong>ttl key</strong>(key未设置生存时间，返回-1；key不存在，返回-2)<ul>\n<li>ttl k1</li>\n</ul>\n</li>\n<li>设置key最大生命时间: <strong>expire key seconds</strong>(单位秒)<ul>\n<li>expire k2 20</li>\n</ul>\n</li>\n<li>查看指定key的数据类型: <strong>type key</strong><ul>\n<li>type k1</li>\n</ul>\n</li>\n<li>重命名key: <strong>rename key newkey</strong><ul>\n<li>rename k1 k2</li>\n</ul>\n</li>\n<li>删除指定key: <strong>del key [key key key]</strong>(返回值是实际删除key的数量)<ul>\n<li>del k1 k2</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"关于string类型数据的操作命令\"><a href=\"#关于string类型数据的操作命令\" class=\"headerlink\" title=\"关于string类型数据的操作命令\"></a>关于string类型数据的操作命令</h3><ol>\n<li>将string类型数据设置到redis中: <strong>set key value</strong><ul>\n<li>set name zhangsan</li>\n<li>set age 20</li>\n</ul>\n</li>\n<li>从redis中获取string类型数据: <strong>get key</strong><ul>\n<li>get name</li>\n<li>&gt; zhangsan</li>\n<li>get age</li>\n<li>&gt; 20</li>\n</ul>\n</li>\n<li>追加字符串: <strong>append key value</strong>(返回值为追加后字符串长度；如果key不存在，则创建并赋值)<ul>\n<li>set phone 2333333</li>\n<li>append phone 8888</li>\n<li>&gt; 23333338888</li>\n</ul>\n</li>\n<li>获取字符串长度: <strong>strlen key</strong><ul>\n<li>strlen phone</li>\n<li>&gt; 5</li>\n</ul>\n</li>\n<li>将字符串数值进行加1运算: <strong>incr key</strong><br>(返回加1运算后的数据;key不存在，设置一个初始值为0的key，在进行incr运算；key的value不为数值，报错)</li>\n<li>将字符串数值进行减1运算: <strong>decr key</strong><br>(返回减1运算后的数据;key不存在，设置一个初始值为0的key，在进行decr运算；key的value不为数值，报错)</li>\n<li>将字符串数值进行加offset运算: <strong>incrby key offset</strong><br>(返回加offset运算后的数据;key不存在，设置一个初始值为0的key，在进行incrby运算；key的value不为数值，报错)</li>\n<li>将字符串数值进行减offset运算: <strong>decrby key offset</strong><br>(返回减offset运算后的数据;key不存在，设置一个初始值为0的key，在进行decrby运算；key的value不为数值，报错)</li>\n<li>获取字符串key中从startIndex到endIndex的子串: <strong>getrange key startIndex endIndex</strong>(闭区间，下标也可为负数)<ul>\n<li>set k1 zhangsan</li>\n<li>getrange k1 2 5</li>\n<li>&gt; angs</li>\n<li>getrange k1 0 -1</li>\n<li>&gt; zhangsan</li>\n</ul>\n</li>\n<li>用value覆盖从startIndex开始的字符串: <strong>setrange key startIndex value</strong><ul>\n<li>set k1 zhangsan</li>\n<li>setrange k1 5 233</li>\n<li>&gt; zhang233</li>\n<li>setrange k1 5 a</li>\n<li>&gt; zhanga33</li>\n</ul>\n</li>\n<li>设置string数据同时，设置它的最大生命周期: <strong>setex key seconds value</strong><ul>\n<li>setex k1 20 zhangsan</li>\n</ul>\n</li>\n<li>设置string数据到redis中，不存在则设置；存在则放弃: <strong>setnx key value</strong><ul>\n<li>setnx k1 20</li>\n</ul>\n</li>\n<li>批量设置string数据到redis中: <strong>mset key1 value1 key2 value2 …</strong></li>\n<li>批量获取string数据: <strong>mget key1 key2 …</strong></li>\n</ol>\n<h3 id=\"关于list类型数据的操作命令\"><a href=\"#关于list类型数据的操作命令\" class=\"headerlink\" title=\"关于list类型数据的操作命令\"></a>关于list类型数据的操作命令</h3><p>单key-多有序value<br>多个value之间有顺序(插入顺序)，最左侧是表头，最右侧表尾。<br>每个元素都有下标，表头元素下标是0。下标可以为负数</p>\n<ol>\n<li>将一个或多个值依次插入列表的表头: <strong>lpush key value [value value …]</strong><ul>\n<li>lpush list1 1 2 3</li>\n</ul>\n</li>\n<li>获取指定列表中指定下标区间的元素: <strong>lrange key startIndex endIndex</strong><ul>\n<li>lrange list1 0 2</li>\n<li>&gt;3</li>\n<li>&gt;2</li>\n<li>&gt;1</li>\n</ul>\n</li>\n<li>将一个或多个值依次插入列表的表尾: <strong>rpush key value [value value …]</strong><ul>\n<li>rpush list2 1 2 3</li>\n<li>lrange list2 0 2</li>\n<li>&gt;1</li>\n<li>&gt;2</li>\n<li>&gt;3</li>\n</ul>\n</li>\n<li>从指定列表移除并返回表头: <strong>lpop key</strong></li>\n<li>从指定列表移除并返回表尾: <strong>rpop key</strong></li>\n<li>获取指定列表中指定下标的元素: <strong>lindex key index</strong><ul>\n<li>lindex list1 1</li>\n<li>&gt;2</li>\n</ul>\n</li>\n<li>获取指定列表的长度: llen key<ul>\n<li>llen list1</li>\n<li>&gt;3</li>\n</ul>\n</li>\n<li>根据count值移除指定列表中跟value相等的数据: <strong>lrem key count value</strong><br>count&gt;0:从列表的左侧移除count个跟value相等的数据；<br>count&lt;0:从列表的右侧移除count个跟value相等的数据；<br>count=0:从列表移除所有跟value相等的数据。</li>\n<li>截取指定列表指定区间组成新的列表，并赋值给key: <strong>ltrim key startIndex endIndex</strong></li>\n<li>将指定列表指定下标元素设置为指定值: lset key index value</li>\n<li>将value插入到指定列表中位于pivot元素之前/之后的位置: linsert key before/after pivot value</li>\n</ol>\n<h3 id=\"关于set类型数据的操作命令\"><a href=\"#关于set类型数据的操作命令\" class=\"headerlink\" title=\"关于set类型数据的操作命令\"></a>关于set类型数据的操作命令</h3><p>单key-多无序value<br>无序且不重复，所以元素没有下标，直接操作数据。</p>\n<ol>\n<li>将一个或多个元素添加到指定集合: <strong>sadd key value [value value …]</strong><br>如果元素已经存在，则会忽略。返回成功加入的元素个数。<ul>\n<li>sadd set1 a b c a</li>\n</ul>\n</li>\n<li>获取指定集合中的所有元素: smembers key<ul>\n<li>smembers set1</li>\n<li>&gt;a</li>\n<li>&gt;c</li>\n<li>&gt;b</li>\n</ul>\n</li>\n<li>判断指定元素在指定集合中是否存在: <strong>sismember key member</strong><br>存在返回1，不存在返回0。</li>\n<li>获取指定集合的长度: <strong>scard key</strong></li>\n<li>移除指定集合中的一个或多个元素: <strong>srem key member [member member …]</strong><br>不存在的元素会被忽略<br>返回成功移除的元素个数</li>\n<li>随机获取指定集合中的一个或多个元素: <strong>srandmember key [count]</strong><br>count&gt;0 随机获取的多个元素不能重复<br>count&lt;0 随机获取的多个元素之间可能重复</li>\n<li>从指定集合中随机移除一个或多个元素: <strong>spop key [count]</strong></li>\n<li>将指定集合中指定元素移动到另一个集合: <strong>smove source dest member</strong><ul>\n<li>smove set1 set2 a</li>\n</ul>\n</li>\n<li>获取第一个集合中有，但其他集合中没有的元素组成新的集合(差集): <strong>sdiff key key [key key …]</strong></li>\n<li>获取所有指定集合中都有的元素组成新的集合(交集): <strong>sinter key key [key key …]</strong></li>\n<li>获取所有指定集合中所有的元素组成新的集合(并集): <strong>sunion key key [key key …]</strong></li>\n</ol>\n<h3 id=\"关于hash类型数据的操作命令\"><a href=\"#关于hash类型数据的操作命令\" class=\"headerlink\" title=\"关于hash类型数据的操作命令\"></a>关于hash类型数据的操作命令</h3><p>单key:field-value field-value …<br>hash是string类型的key和value的映射表，value是一系列的键值对，适合存储对象</p>\n<ol>\n<li>将一个或多个field-value对设置到哈希表中: <strong>hset key field1 value1 [field2 value2 …]</strong><ul>\n<li>hset stu1 id 0001</li>\n<li>hset stu2 id 0002 name zhangsan</li>\n</ul>\n</li>\n<li>获取指定哈希表中指定的field的值: <strong>hget key field</strong><ul>\n<li>hget stu1 id</li>\n<li>&gt;0001</li>\n</ul>\n</li>\n<li><del>批量将多个field-value对设置到哈希表中: <strong>hmset key field1 value1 [field2 value2 …]</strong></del></li>\n<li>批量获取指定哈希表在的field值: <strong>hmget key field1 [field2 field3 …]</strong></li>\n<li>获取指定哈希表中所有的field和value: <strong>hgetall key</strong></li>\n<li>从指定哈希表中删除一个或多个field: <strong>hdel key field1 [field1 field2 …]</strong></li>\n<li>获取指定哈希表中所有的field个数: <strong>hlen key</strong></li>\n<li>判断指定哈希表中是否存在某个field: <strong>hexists key field</strong></li>\n<li>获取指定哈希表中所有的field列表: <strong>hkeys key</strong></li>\n<li>获取指定哈希表中所有的value列表: <strong>hvals key</strong></li>\n<li>对指定哈希表中指定的field值进行整数加法运算: <strong>hincrby key field int</strong></li>\n<li>对指定哈希表中指定的field值进行浮点数加法运算: <strong>hincrbyfloat key field float</strong></li>\n<li>将一个field-value对设置到指定哈希表中: <strong>hsetnx stu1 age 30</strong><br>当key-field已经存在，则放弃设置</li>\n</ol>\n<h3 id=\"关于zset类型数据的操作命令\"><a href=\"#关于zset类型数据的操作命令\" class=\"headerlink\" title=\"关于zset类型数据的操作命令\"></a>关于zset类型数据的操作命令</h3><p>有序集合，不允许重复元素。<br>但zset集合中，每个元素会关联一个分数，redis根据分数对元素进行排序，分数可以重复。<br>zset中每个元素都有顺序，所有每个元素也有下标。。</p>\n<ol>\n<li>将一个或多个member及其score值加入有序集合: <strong>zadd key score member [score member …]</strong><br>如果元素已经存在，则会覆盖其分数<ul>\n<li>zadd zset1 1 a</li>\n</ul>\n</li>\n<li>获取指定有序集合中指定下标区间的元素: <strong>zrange key startIndex endIndex [withscores]</strong><br>withscores 是否显示分数</li>\n<li>获取指定有序集合中指定分数区间(闭区间)的元素: <strong>zrangebysorce key min max [withscores]</strong></li>\n<li>删除指定有序集合中的一个或多个元素: <strong>zrem key member [member …]</strong></li>\n<li>获取指定有序集合中所有元素的个数: <strong>zcard key</strong></li>\n<li>获取指定有序集合中分数在指定区间内的元素个数: <strong>zcount key min max</strong></li>\n<li>获取指定有序集合中指定元素的排名(从0开始): <strong>zrank key member</strong></li>\n<li>获取指定有序集合中指定元素的分数: <strong>zscore key member</strong></li>\n<li>获取指定有序集合中指定元素的排名(按分数从小到大的排名): <strong>zrevrank key member</strong></li>\n</ol>\n<h3 id=\"命令小结\"><a href=\"#命令小结\" class=\"headerlink\" title=\"命令小结\"></a>命令小结</h3><blockquote>\n<p>上面的命令是部分常用的命令，写到这里感觉不如去看文档，不过写一遍也算是加深印象。<br><a class=\"link\"   href=\"https://www.runoob.com/redis/redis-tutorial.html\" >菜鸟教程Redis<i class=\"fas fa-external-link-alt\"></i></a>  </p>\n</blockquote>\n<h2 id=\"Redis的配置文件\"><a href=\"#Redis的配置文件\" class=\"headerlink\" title=\"Redis的配置文件\"></a>Redis的配置文件</h2><p>redis根目录下提供redis.conf配置文件<br>如果不使用配置文件，redis按默认参数运行。如果使用配置文件，在启动redis服务时，必须指定所使用的配置文件。  </p>\n<h3 id=\"关于网络的配置\"><a href=\"#关于网络的配置\" class=\"headerlink\" title=\"关于网络的配置\"></a>关于网络的配置</h3><ol>\n<li>port：指定redis服务所使用的端口号，默认使用6379</li>\n<li>bind：配置客户端连接redis服务时，所能使用的ip地址，默认可以使用redis服务所在主机上任意一个ip都可以；一般情况会配置一个真实ip。  <ul>\n<li>如果配置了port和bind，则客户端连接redis服务时，必须指定端口和ip：<br>redis-cli -h 192.268.11.128 -p 6380<br>redis-cli -h 192.268.11.128 -p 6380 shutdown  </li>\n</ul>\n</li>\n<li>tcp-keepalive：TCP连接保活策略。单位秒，每过多少秒向连接空闲的客户端发送一个ACK请求，以检查客户端是否挂掉，对于无响应的客户端会关闭连接。如果设置为0，则不会进行保活检测。  </li>\n</ol>\n<h3 id=\"常规配置\"><a href=\"#常规配置\" class=\"headerlink\" title=\"常规配置\"></a>常规配置</h3><ol>\n<li>loglevel：配置日志级别，开发阶段可以设置成debug，生产阶段通常设置为notice或waring。</li>\n<li>logfile：指定日志文件。redis运行过程中会输出日志信息；默认会输出到控制台。</li>\n<li>databases：配置redis服务创建的数据库实例个数，默认16个。</li>\n</ol>\n<h3 id=\"安全配置\"><a href=\"#安全配置\" class=\"headerlink\" title=\"安全配置\"></a>安全配置</h3><ol>\n<li>requirepass：配置redis的访问密码。默认不配置密码。此参数必须在protected-mode=yes(安全模式)是才起作用。</li>\n</ol>\n<h3 id=\"RDB配置\"><a href=\"#RDB配置\" class=\"headerlink\" title=\"RDB配置\"></a>RDB配置</h3><ol>\n<li>save <seconds> <changes>：配置复合的快照触发条件，即redis在seconds秒内key改变了changes次，会将快照内数据保存到磁盘一次。默认策略是：<ul>\n<li>1分钟内改变1万次</li>\n<li>或5分钟内改变10次</li>\n<li>或15分钟内改变1次</li>\n<li>如果要禁用redis的持久化功能，吧所有的save配置注释即可。</li>\n</ul>\n</li>\n<li>stop-writes-on-bgsave-erroe：在bgsave快照操作出错时停止写入磁盘，以保证数据一致性。如果出错时要继续写入，配置为no。</li>\n<li>rdbcompression：设置对存储到磁盘的快照是否压缩。yes会采用LZF算法进行压缩，no关闭此功能，可减少CPU消耗。</li>\n<li>rdbchecksum：快照存储后，可使用CRC64算法进行数据校验，会消耗一定性能，no关闭此功能。</li>\n<li>sdbfilename：持久化数据生成的文件名。默认为dump.rdb</li>\n<li>dir：持久化数据生成文件的保存目录。默认./即redis启动目录</li>\n</ol>\n<h3 id=\"AOF配置\"><a href=\"#AOF配置\" class=\"headerlink\" title=\"AOF配置\"></a>AOF配置</h3><ol>\n<li>appendonly：配置是否开启AOF，yes表示开启，no表示关闭。默认no</li>\n<li>appendfilename：AOF保存的文件名</li>\n<li>appendfsync：AOF异步持久化策略<ul>\n<li>always：同步持久化，每次发生数据变化立刻写入磁盘。性能差但数据安全。</li>\n<li>everysec：每秒异步记录一次。默认。</li>\n<li>no：不及时同步，由操作系统决定何时同步。</li>\n</ul>\n</li>\n<li>no-appendfysnc-on-rewrite：重写时是否可以运用appendsync，默认no，可以保证数据安全性。</li>\n<li>auto-aof-rewrite-percentage：设置重写的基准百分比。</li>\n<li>auto-aof-rewrite-min-size：设置重写的基准值。</li>\n</ol>\n<h2 id=\"Redis的持久化\"><a href=\"#Redis的持久化\" class=\"headerlink\" title=\"Redis的持久化\"></a>Redis的持久化</h2><p>redis是内存数据库，数据存储在内存中，虽然加快了读取速度，但也对数据安全性产生新的问题。当服务器宕机后，redis数据库中所有数据会全部丢失，所以redis提供了持久化功能——RDB和AOF。</p>\n<h3 id=\"RDB策略\"><a href=\"#RDB策略\" class=\"headerlink\" title=\"RDB策略\"></a>RDB策略</h3><p>在指定时间间隔内，redis服务执行指定次数的写操作，会自动触发一次持久化操作。<br>RDB策略是redis默认的持久化策略，在redis服务开启时，这种持久化策略默认开启。</p>\n<h3 id=\"AOF策略\"><a href=\"#AOF策略\" class=\"headerlink\" title=\"AOF策略\"></a>AOF策略</h3><p>采用操作日志来记录进行的每一次操作，每次redis启动时，都会重新执行一遍日志中的命令。<br>效率低下，redis默认不开启。作为RDB策略的补充。</p>\n<h3 id=\"持久化策略小结\"><a href=\"#持久化策略小结\" class=\"headerlink\" title=\"持久化策略小结\"></a>持久化策略小结</h3><blockquote>\n<p>根据数据的特点来决定使用哪种策略，一般RDB足够。redis主要做缓存，数据在关系型数据库中有备份。</p>\n</blockquote>\n<h2 id=\"Redis的事务\"><a href=\"#Redis的事务\" class=\"headerlink\" title=\"Redis的事务\"></a>Redis的事务</h2><p>事务：把一组数据库放在一起执行，保证操作的原子性，要么同时成功，要么同时失败。<br>Redis的事务：允许把一组redis命令放在一起执行，把命令序列化，然后一起执行，保证部分原子性。</p>\n<ol>\n<li>multi：用来标记一个事务的开始。<ul>\n<li>压入事务队列</li>\n<li>multi</li>\n<li>set k1 v1</li>\n<li>set k2 v2 </li>\n<li>…</li>\n</ul>\n</li>\n<li>exec：用来执行事务队列中的所有命令。<ul>\n<li>exec</li>\n</ul>\n</li>\n<li>redis的事务只能保证部分原子性：<ul>\n<li>如果一组命令中，在压入事务队列过程中发生错误，则本事务中所有命令都不执行，保证事务原子性。</li>\n<li>如果一组命令中，艾压入队列过程正常，但在执行事务队列命令时发生错误，则只会影响发生错误的命令，不会影响其他命令，不能保证事务的原子性。</li>\n</ul>\n</li>\n<li>discard：清除所有已经压入队列中的命令，并且结束整个事务。<ul>\n<li>multi</li>\n<li>set k1 v1</li>\n<li>set k2 v2</li>\n<li>discard</li>\n</ul>\n</li>\n<li>watch：监控某一个键，当事务在执行过程中，此键代码的值发生变化，则本事务放弃执行；否则，正常执行。</li>\n<li>unwatch：放弃监控某一键</li>\n</ol>\n<blockquote>\n<p>事务小结：<br>1.单独的隔离操作：事务中的所有命令会序列化、顺序地执行。执行过程中不会被其他客户端的命令请求打断，除非是用watch进行监视。<br>2.不保证事务的原子性：同一事务如果某一命令执行失败，其他命令仍可能被继续执行，redis事务没有回滚。</p>\n</blockquote>\n<h2 id=\"Redis消息的发布与订阅-了解\"><a href=\"#Redis消息的发布与订阅-了解\" class=\"headerlink\" title=\"Redis消息的发布与订阅(了解)\"></a>Redis消息的发布与订阅(了解)</h2><p>redis客户端订阅频道，消息的发布者往频道上发布消息，所有订阅此频道的客户端都能够接收到消息。</p>\n<ol>\n<li>subscribe：订阅一个或多个频道的消息。<ul>\n<li>subscribe ch1 ch2 ch3</li>\n</ul>\n</li>\n<li>publish：将消息发布到指定频道<ul>\n<li>publish ch1 hello</li>\n</ul>\n</li>\n<li>psubscribe：订阅一个或多个频道的消息，频道名支持通配符。</li>\n</ol>\n<h2 id=\"Redis的主从复制\"><a href=\"#Redis的主从复制\" class=\"headerlink\" title=\"Redis的主从复制\"></a>Redis的主从复制</h2><p>主少从多，主写从读，读写分离，主写同步复制到从。</p>\n<p>搭建一主二从的redis集群：</p>\n<ol>\n<li>搭建三台redis服务：使用一台机器，三个不同端口模拟<ul>\n<li>修改配置文件(bind、port等),以redis6379.conf为例</li>\n<li>bind 127.0.0.1</li>\n<li>port 6379</li>\n<li>pidfile /var/run/redis_6379.pid</li>\n<li>logfile “6379.log”</li>\n<li>dbfilename dump6379.rdb</li>\n<li>启动服务</li>\n<li>redis-server redis6379.cond &amp;</li>\n<li>redis-server redis6380.cond &amp;</li>\n<li>redis-server redis6381.cond &amp;</li>\n</ul>\n</li>\n<li>连接到redis服务<ul>\n<li>redis-cli -h 127.0.0.1 -p 6379</li>\n<li>redis-cli -h 127.0.0.1 -p 6380</li>\n<li>redis-cli -h 127.0.0.1 -p 6381</li>\n</ul>\n</li>\n<li>查看三台redis服务在集群中的主从角色：<ul>\n<li>info replication</li>\n<li>默认情况下，所有的redis服务都是主机，既能读也能写，但都没有从机。</li>\n</ul>\n</li>\n<li>设置主从关系：设从不设主<ul>\n<li>在6380上执行：slaveof 127.0.0.1 6379</li>\n<li>在6381上执行：slaveof 127.0.0.1 6379</li>\n</ul>\n</li>\n<li>全量复制：一旦主从关系确定，会自动把主机上已有的数据同步复制到从库</li>\n<li>增量复制：主库写数据会自动同步到从库</li>\n<li>主写从读，读写分离：<ul>\n<li>在从机上进行写操作会报错</li>\n</ul>\n</li>\n<li>主机宕机、从机原地待命：<ul>\n<li>从机可以继续读，但数据不会再更新。</li>\n</ul>\n</li>\n<li>主机恢复、一切恢复正常</li>\n<li>从机宕机、主机少一个从机，其他从机不变。</li>\n<li>从机恢复、需<strong>重新设置主从关系</strong>。</li>\n<li>从机上位：<ul>\n<li>主机宕机、从机原地待命</li>\n<li>从机断开原来的主从关系</li>\n<li>在6380上执行：slaveof no one</li>\n<li>重新设置主从关系</li>\n<li>在6381上执行：slaveof 127.0.0.1 6380</li>\n</ul>\n</li>\n<li>原主机恢复<ul>\n<li>在6379上执行：slaveof 127.0.0.1 6379</li>\n<li>让6379变为6380的从机</li>\n<li>或者在6379上执行：slaveof 127.0.0.1 6381</li>\n<li>让6379成为6381的从机，此时6381既是主机又是从机，但他不能读。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>小结：<br>一台主机配置多台从机，一台从机也可以配置多台从机，从而形成一个庞大的集群。减轻一台主机的压力，但是增加了服务间的延迟。</p>\n</blockquote>\n<h2 id=\"Redis的哨兵模式\"><a href=\"#Redis的哨兵模式\" class=\"headerlink\" title=\"Redis的哨兵模式\"></a>Redis的哨兵模式</h2><p>主机宕机、从机上位的自动版</p>\n<ol>\n<li>搭建一主二从的redis集群(见上文)</li>\n<li>提供哨兵的配置文件：<ul>\n<li>在redis安装目录下下创建配置文件：redis_sentinel.conf</li>\n<li>写入 sentinel monitor dc-redis 127.0.0.1 6379 1</li>\n</ul>\n</li>\n<li>启动哨兵服务：redis-sentinel redis_sentinel.conf</li>\n<li>主机宕机，哨兵自动选择从机上位</li>\n<li>原主机恢复，自动从属于新主机</li>\n</ol>\n<blockquote>\n<p>哨兵小结<br>可以设置多个哨兵。即每个redis服务都可以设置一个哨兵。<br>哨兵模式三大任务：监控、提醒、自动故障迁移</p>\n</blockquote>\n<h2 id=\"Jedis操作Redis\"><a href=\"#Jedis操作Redis\" class=\"headerlink\" title=\"Jedis操作Redis\"></a>Jedis操作Redis</h2><p>使用Redis官方推荐的Jedis，在Java应用中操作Redis。操作Redis的命令在jedis中以方法形式出现。<br><a class=\"link\"   href=\"https://ppg007.github.io/redis/docs/jedis.html\" >Jedis文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>maven配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>示例java程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//连接redis</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">        <span class=\"comment\">//使用jedis对象操作redis服务</span></span><br><span class=\"line\">        Set&lt;String&gt; ret = jedis.keys(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        System.out.println(ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：[]</p>\n<h2 id=\"Jedis中连接池的使用\"><a href=\"#Jedis中连接池的使用\" class=\"headerlink\" title=\"Jedis中连接池的使用\"></a>Jedis中连接池的使用</h2><p>工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.JedisPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> JedisPool pool;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建JedisPool对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> JedisPool <span class=\"title function_\">open</span><span class=\"params\">(String ip, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pool == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建JedisPool</span></span><br><span class=\"line\">            <span class=\"comment\">//创建JedisPoolConfig，给config设置连接池的参数，使用config对象创建JedisPool</span></span><br><span class=\"line\">            <span class=\"type\">JedisPoolConfig</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JedisPoolConfig</span>();</span><br><span class=\"line\">            <span class=\"comment\">//给config设置连接池的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置最大线程数，一个线程就是一个Jedis</span></span><br><span class=\"line\">            config.setMaxTotal(<span class=\"number\">20</span>);</span><br><span class=\"line\">            <span class=\"comment\">//设置最大空闲数</span></span><br><span class=\"line\">            config.setMaxIdle(<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"comment\">//设置检查项为true，表示从线程池中获取的对象一定是经过检查可用的</span></span><br><span class=\"line\">            config.setTestOnBorrow(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//创建Pool对象</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * poolConfig:配置器JedisPoolConfig</span></span><br><span class=\"line\"><span class=\"comment\">             * host:redis所在linux的ip</span></span><br><span class=\"line\"><span class=\"comment\">             * port:redis的端口</span></span><br><span class=\"line\"><span class=\"comment\">             * timeout:链接redis超时，毫秒值</span></span><br><span class=\"line\"><span class=\"comment\">             * password:链接redis的访问密码</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            pool = <span class=\"keyword\">new</span> <span class=\"title class_\">JedisPool</span>(config, ip, port, <span class=\"number\">6000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关闭Pool对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pool != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            pool.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.JedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">host</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">6379</span>;</span><br><span class=\"line\">        <span class=\"comment\">//创建JedisPool对象，从JedisPool中获取Jedis</span></span><br><span class=\"line\">        <span class=\"type\">JedisPool</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            pool = RedisUtils.open(host, port);</span><br><span class=\"line\">            <span class=\"comment\">//从pool中获取Jedis</span></span><br><span class=\"line\">            jedis = pool.getResource();</span><br><span class=\"line\"></span><br><span class=\"line\">            Set&lt;String&gt; ret = jedis.keys(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            System.out.println(ret);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭Jedis对象，把Pool中获取的Jedis放回Pool，供其他请求使用。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (jedis != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                jedis.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：[]</p>\n<h2 id=\"Redis客户端工具——Redis-Desktop-Manager\"><a href=\"#Redis客户端工具——Redis-Desktop-Manager\" class=\"headerlink\" title=\"Redis客户端工具——Redis Desktop Manager\"></a>Redis客户端工具——Redis Desktop Manager</h2><p>使用命令行还行，就不用客户端了。贴个<a class=\"link\"   href=\"https://resp.app/\" >官网链接<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>Redis的学习告一段落，其中用的最多的应该还是对数据的操作。</p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"关于Redis\"><a href=\"#关于Redis\" class=\"headerlink\" title=\"关于Redis\"></a>关于Redis</h2><p><a class=\"link\"   href=\"https://redis.io/\" >Redis官网<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://baike.baidu.com/item/Redis/6549233\" >Redis百度百科<i class=\"fas fa-external-link-alt\"></i></a><br>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 <strong>key-value</strong> 存储系统，是跨平台的非关系型数据库。<br>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、<strong>支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库</strong>，并提供多种语言的 API。<br>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。  </p>\n<p>使用Redis是为了解决多次读写数据库引发的性能问题。因为Redis是<strong>基于内存的数据库</strong>，所以它的性能十分优越，读的速度是110000次/s,写的速度是81000次/s。JavaWeb通常使用它存储<strong>缓存</strong>用的数据，以及需要高速读/写的场合，以减少对基于硬盘的数据库的访问次数。</p>\n<h2 id=\"Redis中的数据结构及操作命令\"><a href=\"#Redis中的数据结构及操作命令\" class=\"headerlink\" title=\"Redis中的数据结构及操作命令\"></a>Redis中的数据结构及操作命令</h2><h3 id=\"Redis中的数据结构\"><a href=\"#Redis中的数据结构\" class=\"headerlink\" title=\"Redis中的数据结构\"></a>Redis中的数据结构</h3><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>格式</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string(字符串)</td>\n<td>单key:单value</td>\n<td>name:zhangsan</td>\n</tr>\n<tr>\n<td>list(列表,按插入顺序)</td>\n<td>单key:多有序value</td>\n<td>contacts:13952900000,xxx,xxx</td>\n</tr>\n<tr>\n<td>set(集合,无序且不重复,string类型)</td>\n<td>单key:多无序value</td>\n<td>city:beijing shanghai shenzhen</td>\n</tr>\n<tr>\n<td>hash(哈希,适合存储对象)</td>\n<td>单key:对象(属性:值)</td>\n<td>student:id:1,name:zhangsan,age:20</td>\n</tr>\n<tr>\n<td>zset(有序集合,通过double类型分数排序)</td>\n<td>单key:多有序value</td>\n<td>city:1000 beijing,1500 shanghai,2000 shenzhen</td>\n</tr>\n</tbody></table>\n<h3 id=\"关于键-key-的操作命令\"><a href=\"#关于键-key-的操作命令\" class=\"headerlink\" title=\"关于键(key)的操作命令\"></a>关于键(key)的操作命令</h3><ol>\n<li>查看redis中的key: <strong>keys pattern</strong>(查找符合给定模式pattern的key)<ul>\n<li>keys *: 查看redis中所有的key(*匹配零或多个字符)</li>\n<li>keys h?o: 查看redis中以h开头，o结尾且中间只有一个字符的key(?匹配一个字符)</li>\n<li>keys h[abc]llo: 查看redis中以h开头，llo结尾，且中间为abc中一个的key([]匹配[]中的一个字符)</li>\n</ul>\n</li>\n<li>判断key在redis中是否存在<ul>\n<li><strong>exists key</strong>(存在返回1，不存在返回0)</li>\n<li><strong>exists key [key key key]</strong> (返回值为存在key的数量)</li>\n</ul>\n</li>\n<li>移动指定key到指定的redis实例: <strong>move key index</strong><ul>\n<li>move k1 1</li>\n</ul>\n</li>\n<li>查看指定key的剩余生存时间: <strong>ttl key</strong>(key未设置生存时间，返回-1；key不存在，返回-2)<ul>\n<li>ttl k1</li>\n</ul>\n</li>\n<li>设置key最大生命时间: <strong>expire key seconds</strong>(单位秒)<ul>\n<li>expire k2 20</li>\n</ul>\n</li>\n<li>查看指定key的数据类型: <strong>type key</strong><ul>\n<li>type k1</li>\n</ul>\n</li>\n<li>重命名key: <strong>rename key newkey</strong><ul>\n<li>rename k1 k2</li>\n</ul>\n</li>\n<li>删除指定key: <strong>del key [key key key]</strong>(返回值是实际删除key的数量)<ul>\n<li>del k1 k2</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"关于string类型数据的操作命令\"><a href=\"#关于string类型数据的操作命令\" class=\"headerlink\" title=\"关于string类型数据的操作命令\"></a>关于string类型数据的操作命令</h3><ol>\n<li>将string类型数据设置到redis中: <strong>set key value</strong><ul>\n<li>set name zhangsan</li>\n<li>set age 20</li>\n</ul>\n</li>\n<li>从redis中获取string类型数据: <strong>get key</strong><ul>\n<li>get name</li>\n<li>&gt; zhangsan</li>\n<li>get age</li>\n<li>&gt; 20</li>\n</ul>\n</li>\n<li>追加字符串: <strong>append key value</strong>(返回值为追加后字符串长度；如果key不存在，则创建并赋值)<ul>\n<li>set phone 2333333</li>\n<li>append phone 8888</li>\n<li>&gt; 23333338888</li>\n</ul>\n</li>\n<li>获取字符串长度: <strong>strlen key</strong><ul>\n<li>strlen phone</li>\n<li>&gt; 5</li>\n</ul>\n</li>\n<li>将字符串数值进行加1运算: <strong>incr key</strong><br>(返回加1运算后的数据;key不存在，设置一个初始值为0的key，在进行incr运算；key的value不为数值，报错)</li>\n<li>将字符串数值进行减1运算: <strong>decr key</strong><br>(返回减1运算后的数据;key不存在，设置一个初始值为0的key，在进行decr运算；key的value不为数值，报错)</li>\n<li>将字符串数值进行加offset运算: <strong>incrby key offset</strong><br>(返回加offset运算后的数据;key不存在，设置一个初始值为0的key，在进行incrby运算；key的value不为数值，报错)</li>\n<li>将字符串数值进行减offset运算: <strong>decrby key offset</strong><br>(返回减offset运算后的数据;key不存在，设置一个初始值为0的key，在进行decrby运算；key的value不为数值，报错)</li>\n<li>获取字符串key中从startIndex到endIndex的子串: <strong>getrange key startIndex endIndex</strong>(闭区间，下标也可为负数)<ul>\n<li>set k1 zhangsan</li>\n<li>getrange k1 2 5</li>\n<li>&gt; angs</li>\n<li>getrange k1 0 -1</li>\n<li>&gt; zhangsan</li>\n</ul>\n</li>\n<li>用value覆盖从startIndex开始的字符串: <strong>setrange key startIndex value</strong><ul>\n<li>set k1 zhangsan</li>\n<li>setrange k1 5 233</li>\n<li>&gt; zhang233</li>\n<li>setrange k1 5 a</li>\n<li>&gt; zhanga33</li>\n</ul>\n</li>\n<li>设置string数据同时，设置它的最大生命周期: <strong>setex key seconds value</strong><ul>\n<li>setex k1 20 zhangsan</li>\n</ul>\n</li>\n<li>设置string数据到redis中，不存在则设置；存在则放弃: <strong>setnx key value</strong><ul>\n<li>setnx k1 20</li>\n</ul>\n</li>\n<li>批量设置string数据到redis中: <strong>mset key1 value1 key2 value2 …</strong></li>\n<li>批量获取string数据: <strong>mget key1 key2 …</strong></li>\n</ol>\n<h3 id=\"关于list类型数据的操作命令\"><a href=\"#关于list类型数据的操作命令\" class=\"headerlink\" title=\"关于list类型数据的操作命令\"></a>关于list类型数据的操作命令</h3><p>单key-多有序value<br>多个value之间有顺序(插入顺序)，最左侧是表头，最右侧表尾。<br>每个元素都有下标，表头元素下标是0。下标可以为负数</p>\n<ol>\n<li>将一个或多个值依次插入列表的表头: <strong>lpush key value [value value …]</strong><ul>\n<li>lpush list1 1 2 3</li>\n</ul>\n</li>\n<li>获取指定列表中指定下标区间的元素: <strong>lrange key startIndex endIndex</strong><ul>\n<li>lrange list1 0 2</li>\n<li>&gt;3</li>\n<li>&gt;2</li>\n<li>&gt;1</li>\n</ul>\n</li>\n<li>将一个或多个值依次插入列表的表尾: <strong>rpush key value [value value …]</strong><ul>\n<li>rpush list2 1 2 3</li>\n<li>lrange list2 0 2</li>\n<li>&gt;1</li>\n<li>&gt;2</li>\n<li>&gt;3</li>\n</ul>\n</li>\n<li>从指定列表移除并返回表头: <strong>lpop key</strong></li>\n<li>从指定列表移除并返回表尾: <strong>rpop key</strong></li>\n<li>获取指定列表中指定下标的元素: <strong>lindex key index</strong><ul>\n<li>lindex list1 1</li>\n<li>&gt;2</li>\n</ul>\n</li>\n<li>获取指定列表的长度: llen key<ul>\n<li>llen list1</li>\n<li>&gt;3</li>\n</ul>\n</li>\n<li>根据count值移除指定列表中跟value相等的数据: <strong>lrem key count value</strong><br>count&gt;0:从列表的左侧移除count个跟value相等的数据；<br>count&lt;0:从列表的右侧移除count个跟value相等的数据；<br>count=0:从列表移除所有跟value相等的数据。</li>\n<li>截取指定列表指定区间组成新的列表，并赋值给key: <strong>ltrim key startIndex endIndex</strong></li>\n<li>将指定列表指定下标元素设置为指定值: lset key index value</li>\n<li>将value插入到指定列表中位于pivot元素之前/之后的位置: linsert key before/after pivot value</li>\n</ol>\n<h3 id=\"关于set类型数据的操作命令\"><a href=\"#关于set类型数据的操作命令\" class=\"headerlink\" title=\"关于set类型数据的操作命令\"></a>关于set类型数据的操作命令</h3><p>单key-多无序value<br>无序且不重复，所以元素没有下标，直接操作数据。</p>\n<ol>\n<li>将一个或多个元素添加到指定集合: <strong>sadd key value [value value …]</strong><br>如果元素已经存在，则会忽略。返回成功加入的元素个数。<ul>\n<li>sadd set1 a b c a</li>\n</ul>\n</li>\n<li>获取指定集合中的所有元素: smembers key<ul>\n<li>smembers set1</li>\n<li>&gt;a</li>\n<li>&gt;c</li>\n<li>&gt;b</li>\n</ul>\n</li>\n<li>判断指定元素在指定集合中是否存在: <strong>sismember key member</strong><br>存在返回1，不存在返回0。</li>\n<li>获取指定集合的长度: <strong>scard key</strong></li>\n<li>移除指定集合中的一个或多个元素: <strong>srem key member [member member …]</strong><br>不存在的元素会被忽略<br>返回成功移除的元素个数</li>\n<li>随机获取指定集合中的一个或多个元素: <strong>srandmember key [count]</strong><br>count&gt;0 随机获取的多个元素不能重复<br>count&lt;0 随机获取的多个元素之间可能重复</li>\n<li>从指定集合中随机移除一个或多个元素: <strong>spop key [count]</strong></li>\n<li>将指定集合中指定元素移动到另一个集合: <strong>smove source dest member</strong><ul>\n<li>smove set1 set2 a</li>\n</ul>\n</li>\n<li>获取第一个集合中有，但其他集合中没有的元素组成新的集合(差集): <strong>sdiff key key [key key …]</strong></li>\n<li>获取所有指定集合中都有的元素组成新的集合(交集): <strong>sinter key key [key key …]</strong></li>\n<li>获取所有指定集合中所有的元素组成新的集合(并集): <strong>sunion key key [key key …]</strong></li>\n</ol>\n<h3 id=\"关于hash类型数据的操作命令\"><a href=\"#关于hash类型数据的操作命令\" class=\"headerlink\" title=\"关于hash类型数据的操作命令\"></a>关于hash类型数据的操作命令</h3><p>单key:field-value field-value …<br>hash是string类型的key和value的映射表，value是一系列的键值对，适合存储对象</p>\n<ol>\n<li>将一个或多个field-value对设置到哈希表中: <strong>hset key field1 value1 [field2 value2 …]</strong><ul>\n<li>hset stu1 id 0001</li>\n<li>hset stu2 id 0002 name zhangsan</li>\n</ul>\n</li>\n<li>获取指定哈希表中指定的field的值: <strong>hget key field</strong><ul>\n<li>hget stu1 id</li>\n<li>&gt;0001</li>\n</ul>\n</li>\n<li><del>批量将多个field-value对设置到哈希表中: <strong>hmset key field1 value1 [field2 value2 …]</strong></del></li>\n<li>批量获取指定哈希表在的field值: <strong>hmget key field1 [field2 field3 …]</strong></li>\n<li>获取指定哈希表中所有的field和value: <strong>hgetall key</strong></li>\n<li>从指定哈希表中删除一个或多个field: <strong>hdel key field1 [field1 field2 …]</strong></li>\n<li>获取指定哈希表中所有的field个数: <strong>hlen key</strong></li>\n<li>判断指定哈希表中是否存在某个field: <strong>hexists key field</strong></li>\n<li>获取指定哈希表中所有的field列表: <strong>hkeys key</strong></li>\n<li>获取指定哈希表中所有的value列表: <strong>hvals key</strong></li>\n<li>对指定哈希表中指定的field值进行整数加法运算: <strong>hincrby key field int</strong></li>\n<li>对指定哈希表中指定的field值进行浮点数加法运算: <strong>hincrbyfloat key field float</strong></li>\n<li>将一个field-value对设置到指定哈希表中: <strong>hsetnx stu1 age 30</strong><br>当key-field已经存在，则放弃设置</li>\n</ol>\n<h3 id=\"关于zset类型数据的操作命令\"><a href=\"#关于zset类型数据的操作命令\" class=\"headerlink\" title=\"关于zset类型数据的操作命令\"></a>关于zset类型数据的操作命令</h3><p>有序集合，不允许重复元素。<br>但zset集合中，每个元素会关联一个分数，redis根据分数对元素进行排序，分数可以重复。<br>zset中每个元素都有顺序，所有每个元素也有下标。。</p>\n<ol>\n<li>将一个或多个member及其score值加入有序集合: <strong>zadd key score member [score member …]</strong><br>如果元素已经存在，则会覆盖其分数<ul>\n<li>zadd zset1 1 a</li>\n</ul>\n</li>\n<li>获取指定有序集合中指定下标区间的元素: <strong>zrange key startIndex endIndex [withscores]</strong><br>withscores 是否显示分数</li>\n<li>获取指定有序集合中指定分数区间(闭区间)的元素: <strong>zrangebysorce key min max [withscores]</strong></li>\n<li>删除指定有序集合中的一个或多个元素: <strong>zrem key member [member …]</strong></li>\n<li>获取指定有序集合中所有元素的个数: <strong>zcard key</strong></li>\n<li>获取指定有序集合中分数在指定区间内的元素个数: <strong>zcount key min max</strong></li>\n<li>获取指定有序集合中指定元素的排名(从0开始): <strong>zrank key member</strong></li>\n<li>获取指定有序集合中指定元素的分数: <strong>zscore key member</strong></li>\n<li>获取指定有序集合中指定元素的排名(按分数从小到大的排名): <strong>zrevrank key member</strong></li>\n</ol>\n<h3 id=\"命令小结\"><a href=\"#命令小结\" class=\"headerlink\" title=\"命令小结\"></a>命令小结</h3><blockquote>\n<p>上面的命令是部分常用的命令，写到这里感觉不如去看文档，不过写一遍也算是加深印象。<br><a class=\"link\"   href=\"https://www.runoob.com/redis/redis-tutorial.html\" >菜鸟教程Redis<i class=\"fas fa-external-link-alt\"></i></a>  </p>\n</blockquote>\n<h2 id=\"Redis的配置文件\"><a href=\"#Redis的配置文件\" class=\"headerlink\" title=\"Redis的配置文件\"></a>Redis的配置文件</h2><p>redis根目录下提供redis.conf配置文件<br>如果不使用配置文件，redis按默认参数运行。如果使用配置文件，在启动redis服务时，必须指定所使用的配置文件。  </p>\n<h3 id=\"关于网络的配置\"><a href=\"#关于网络的配置\" class=\"headerlink\" title=\"关于网络的配置\"></a>关于网络的配置</h3><ol>\n<li>port：指定redis服务所使用的端口号，默认使用6379</li>\n<li>bind：配置客户端连接redis服务时，所能使用的ip地址，默认可以使用redis服务所在主机上任意一个ip都可以；一般情况会配置一个真实ip。  <ul>\n<li>如果配置了port和bind，则客户端连接redis服务时，必须指定端口和ip：<br>redis-cli -h 192.268.11.128 -p 6380<br>redis-cli -h 192.268.11.128 -p 6380 shutdown  </li>\n</ul>\n</li>\n<li>tcp-keepalive：TCP连接保活策略。单位秒，每过多少秒向连接空闲的客户端发送一个ACK请求，以检查客户端是否挂掉，对于无响应的客户端会关闭连接。如果设置为0，则不会进行保活检测。  </li>\n</ol>\n<h3 id=\"常规配置\"><a href=\"#常规配置\" class=\"headerlink\" title=\"常规配置\"></a>常规配置</h3><ol>\n<li>loglevel：配置日志级别，开发阶段可以设置成debug，生产阶段通常设置为notice或waring。</li>\n<li>logfile：指定日志文件。redis运行过程中会输出日志信息；默认会输出到控制台。</li>\n<li>databases：配置redis服务创建的数据库实例个数，默认16个。</li>\n</ol>\n<h3 id=\"安全配置\"><a href=\"#安全配置\" class=\"headerlink\" title=\"安全配置\"></a>安全配置</h3><ol>\n<li>requirepass：配置redis的访问密码。默认不配置密码。此参数必须在protected-mode=yes(安全模式)是才起作用。</li>\n</ol>\n<h3 id=\"RDB配置\"><a href=\"#RDB配置\" class=\"headerlink\" title=\"RDB配置\"></a>RDB配置</h3><ol>\n<li>save <seconds> <changes>：配置复合的快照触发条件，即redis在seconds秒内key改变了changes次，会将快照内数据保存到磁盘一次。默认策略是：<ul>\n<li>1分钟内改变1万次</li>\n<li>或5分钟内改变10次</li>\n<li>或15分钟内改变1次</li>\n<li>如果要禁用redis的持久化功能，吧所有的save配置注释即可。</li>\n</ul>\n</li>\n<li>stop-writes-on-bgsave-erroe：在bgsave快照操作出错时停止写入磁盘，以保证数据一致性。如果出错时要继续写入，配置为no。</li>\n<li>rdbcompression：设置对存储到磁盘的快照是否压缩。yes会采用LZF算法进行压缩，no关闭此功能，可减少CPU消耗。</li>\n<li>rdbchecksum：快照存储后，可使用CRC64算法进行数据校验，会消耗一定性能，no关闭此功能。</li>\n<li>sdbfilename：持久化数据生成的文件名。默认为dump.rdb</li>\n<li>dir：持久化数据生成文件的保存目录。默认./即redis启动目录</li>\n</ol>\n<h3 id=\"AOF配置\"><a href=\"#AOF配置\" class=\"headerlink\" title=\"AOF配置\"></a>AOF配置</h3><ol>\n<li>appendonly：配置是否开启AOF，yes表示开启，no表示关闭。默认no</li>\n<li>appendfilename：AOF保存的文件名</li>\n<li>appendfsync：AOF异步持久化策略<ul>\n<li>always：同步持久化，每次发生数据变化立刻写入磁盘。性能差但数据安全。</li>\n<li>everysec：每秒异步记录一次。默认。</li>\n<li>no：不及时同步，由操作系统决定何时同步。</li>\n</ul>\n</li>\n<li>no-appendfysnc-on-rewrite：重写时是否可以运用appendsync，默认no，可以保证数据安全性。</li>\n<li>auto-aof-rewrite-percentage：设置重写的基准百分比。</li>\n<li>auto-aof-rewrite-min-size：设置重写的基准值。</li>\n</ol>\n<h2 id=\"Redis的持久化\"><a href=\"#Redis的持久化\" class=\"headerlink\" title=\"Redis的持久化\"></a>Redis的持久化</h2><p>redis是内存数据库，数据存储在内存中，虽然加快了读取速度，但也对数据安全性产生新的问题。当服务器宕机后，redis数据库中所有数据会全部丢失，所以redis提供了持久化功能——RDB和AOF。</p>\n<h3 id=\"RDB策略\"><a href=\"#RDB策略\" class=\"headerlink\" title=\"RDB策略\"></a>RDB策略</h3><p>在指定时间间隔内，redis服务执行指定次数的写操作，会自动触发一次持久化操作。<br>RDB策略是redis默认的持久化策略，在redis服务开启时，这种持久化策略默认开启。</p>\n<h3 id=\"AOF策略\"><a href=\"#AOF策略\" class=\"headerlink\" title=\"AOF策略\"></a>AOF策略</h3><p>采用操作日志来记录进行的每一次操作，每次redis启动时，都会重新执行一遍日志中的命令。<br>效率低下，redis默认不开启。作为RDB策略的补充。</p>\n<h3 id=\"持久化策略小结\"><a href=\"#持久化策略小结\" class=\"headerlink\" title=\"持久化策略小结\"></a>持久化策略小结</h3><blockquote>\n<p>根据数据的特点来决定使用哪种策略，一般RDB足够。redis主要做缓存，数据在关系型数据库中有备份。</p>\n</blockquote>\n<h2 id=\"Redis的事务\"><a href=\"#Redis的事务\" class=\"headerlink\" title=\"Redis的事务\"></a>Redis的事务</h2><p>事务：把一组数据库放在一起执行，保证操作的原子性，要么同时成功，要么同时失败。<br>Redis的事务：允许把一组redis命令放在一起执行，把命令序列化，然后一起执行，保证部分原子性。</p>\n<ol>\n<li>multi：用来标记一个事务的开始。<ul>\n<li>压入事务队列</li>\n<li>multi</li>\n<li>set k1 v1</li>\n<li>set k2 v2 </li>\n<li>…</li>\n</ul>\n</li>\n<li>exec：用来执行事务队列中的所有命令。<ul>\n<li>exec</li>\n</ul>\n</li>\n<li>redis的事务只能保证部分原子性：<ul>\n<li>如果一组命令中，在压入事务队列过程中发生错误，则本事务中所有命令都不执行，保证事务原子性。</li>\n<li>如果一组命令中，艾压入队列过程正常，但在执行事务队列命令时发生错误，则只会影响发生错误的命令，不会影响其他命令，不能保证事务的原子性。</li>\n</ul>\n</li>\n<li>discard：清除所有已经压入队列中的命令，并且结束整个事务。<ul>\n<li>multi</li>\n<li>set k1 v1</li>\n<li>set k2 v2</li>\n<li>discard</li>\n</ul>\n</li>\n<li>watch：监控某一个键，当事务在执行过程中，此键代码的值发生变化，则本事务放弃执行；否则，正常执行。</li>\n<li>unwatch：放弃监控某一键</li>\n</ol>\n<blockquote>\n<p>事务小结：<br>1.单独的隔离操作：事务中的所有命令会序列化、顺序地执行。执行过程中不会被其他客户端的命令请求打断，除非是用watch进行监视。<br>2.不保证事务的原子性：同一事务如果某一命令执行失败，其他命令仍可能被继续执行，redis事务没有回滚。</p>\n</blockquote>\n<h2 id=\"Redis消息的发布与订阅-了解\"><a href=\"#Redis消息的发布与订阅-了解\" class=\"headerlink\" title=\"Redis消息的发布与订阅(了解)\"></a>Redis消息的发布与订阅(了解)</h2><p>redis客户端订阅频道，消息的发布者往频道上发布消息，所有订阅此频道的客户端都能够接收到消息。</p>\n<ol>\n<li>subscribe：订阅一个或多个频道的消息。<ul>\n<li>subscribe ch1 ch2 ch3</li>\n</ul>\n</li>\n<li>publish：将消息发布到指定频道<ul>\n<li>publish ch1 hello</li>\n</ul>\n</li>\n<li>psubscribe：订阅一个或多个频道的消息，频道名支持通配符。</li>\n</ol>\n<h2 id=\"Redis的主从复制\"><a href=\"#Redis的主从复制\" class=\"headerlink\" title=\"Redis的主从复制\"></a>Redis的主从复制</h2><p>主少从多，主写从读，读写分离，主写同步复制到从。</p>\n<p>搭建一主二从的redis集群：</p>\n<ol>\n<li>搭建三台redis服务：使用一台机器，三个不同端口模拟<ul>\n<li>修改配置文件(bind、port等),以redis6379.conf为例</li>\n<li>bind 127.0.0.1</li>\n<li>port 6379</li>\n<li>pidfile /var/run/redis_6379.pid</li>\n<li>logfile “6379.log”</li>\n<li>dbfilename dump6379.rdb</li>\n<li>启动服务</li>\n<li>redis-server redis6379.cond &amp;</li>\n<li>redis-server redis6380.cond &amp;</li>\n<li>redis-server redis6381.cond &amp;</li>\n</ul>\n</li>\n<li>连接到redis服务<ul>\n<li>redis-cli -h 127.0.0.1 -p 6379</li>\n<li>redis-cli -h 127.0.0.1 -p 6380</li>\n<li>redis-cli -h 127.0.0.1 -p 6381</li>\n</ul>\n</li>\n<li>查看三台redis服务在集群中的主从角色：<ul>\n<li>info replication</li>\n<li>默认情况下，所有的redis服务都是主机，既能读也能写，但都没有从机。</li>\n</ul>\n</li>\n<li>设置主从关系：设从不设主<ul>\n<li>在6380上执行：slaveof 127.0.0.1 6379</li>\n<li>在6381上执行：slaveof 127.0.0.1 6379</li>\n</ul>\n</li>\n<li>全量复制：一旦主从关系确定，会自动把主机上已有的数据同步复制到从库</li>\n<li>增量复制：主库写数据会自动同步到从库</li>\n<li>主写从读，读写分离：<ul>\n<li>在从机上进行写操作会报错</li>\n</ul>\n</li>\n<li>主机宕机、从机原地待命：<ul>\n<li>从机可以继续读，但数据不会再更新。</li>\n</ul>\n</li>\n<li>主机恢复、一切恢复正常</li>\n<li>从机宕机、主机少一个从机，其他从机不变。</li>\n<li>从机恢复、需<strong>重新设置主从关系</strong>。</li>\n<li>从机上位：<ul>\n<li>主机宕机、从机原地待命</li>\n<li>从机断开原来的主从关系</li>\n<li>在6380上执行：slaveof no one</li>\n<li>重新设置主从关系</li>\n<li>在6381上执行：slaveof 127.0.0.1 6380</li>\n</ul>\n</li>\n<li>原主机恢复<ul>\n<li>在6379上执行：slaveof 127.0.0.1 6379</li>\n<li>让6379变为6380的从机</li>\n<li>或者在6379上执行：slaveof 127.0.0.1 6381</li>\n<li>让6379成为6381的从机，此时6381既是主机又是从机，但他不能读。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>小结：<br>一台主机配置多台从机，一台从机也可以配置多台从机，从而形成一个庞大的集群。减轻一台主机的压力，但是增加了服务间的延迟。</p>\n</blockquote>\n<h2 id=\"Redis的哨兵模式\"><a href=\"#Redis的哨兵模式\" class=\"headerlink\" title=\"Redis的哨兵模式\"></a>Redis的哨兵模式</h2><p>主机宕机、从机上位的自动版</p>\n<ol>\n<li>搭建一主二从的redis集群(见上文)</li>\n<li>提供哨兵的配置文件：<ul>\n<li>在redis安装目录下下创建配置文件：redis_sentinel.conf</li>\n<li>写入 sentinel monitor dc-redis 127.0.0.1 6379 1</li>\n</ul>\n</li>\n<li>启动哨兵服务：redis-sentinel redis_sentinel.conf</li>\n<li>主机宕机，哨兵自动选择从机上位</li>\n<li>原主机恢复，自动从属于新主机</li>\n</ol>\n<blockquote>\n<p>哨兵小结<br>可以设置多个哨兵。即每个redis服务都可以设置一个哨兵。<br>哨兵模式三大任务：监控、提醒、自动故障迁移</p>\n</blockquote>\n<h2 id=\"Jedis操作Redis\"><a href=\"#Jedis操作Redis\" class=\"headerlink\" title=\"Jedis操作Redis\"></a>Jedis操作Redis</h2><p>使用Redis官方推荐的Jedis，在Java应用中操作Redis。操作Redis的命令在jedis中以方法形式出现。<br><a class=\"link\"   href=\"https://ppg007.github.io/redis/docs/jedis.html\" >Jedis文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>maven配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>示例java程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//连接redis</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">        <span class=\"comment\">//使用jedis对象操作redis服务</span></span><br><span class=\"line\">        Set&lt;String&gt; ret = jedis.keys(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        System.out.println(ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：[]</p>\n<h2 id=\"Jedis中连接池的使用\"><a href=\"#Jedis中连接池的使用\" class=\"headerlink\" title=\"Jedis中连接池的使用\"></a>Jedis中连接池的使用</h2><p>工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.JedisPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisUtils</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> JedisPool pool;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建JedisPool对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> JedisPool <span class=\"title function_\">open</span><span class=\"params\">(String ip, <span class=\"type\">int</span> port)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pool == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建JedisPool</span></span><br><span class=\"line\">            <span class=\"comment\">//创建JedisPoolConfig，给config设置连接池的参数，使用config对象创建JedisPool</span></span><br><span class=\"line\">            <span class=\"type\">JedisPoolConfig</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JedisPoolConfig</span>();</span><br><span class=\"line\">            <span class=\"comment\">//给config设置连接池的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置最大线程数，一个线程就是一个Jedis</span></span><br><span class=\"line\">            config.setMaxTotal(<span class=\"number\">20</span>);</span><br><span class=\"line\">            <span class=\"comment\">//设置最大空闲数</span></span><br><span class=\"line\">            config.setMaxIdle(<span class=\"number\">2</span>);</span><br><span class=\"line\">            <span class=\"comment\">//设置检查项为true，表示从线程池中获取的对象一定是经过检查可用的</span></span><br><span class=\"line\">            config.setTestOnBorrow(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//创建Pool对象</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * poolConfig:配置器JedisPoolConfig</span></span><br><span class=\"line\"><span class=\"comment\">             * host:redis所在linux的ip</span></span><br><span class=\"line\"><span class=\"comment\">             * port:redis的端口</span></span><br><span class=\"line\"><span class=\"comment\">             * timeout:链接redis超时，毫秒值</span></span><br><span class=\"line\"><span class=\"comment\">             * password:链接redis的访问密码</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            pool = <span class=\"keyword\">new</span> <span class=\"title class_\">JedisPool</span>(config, ip, port, <span class=\"number\">6000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pool;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关闭Pool对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pool != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            pool.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.JedisPool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">host</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">6379</span>;</span><br><span class=\"line\">        <span class=\"comment\">//创建JedisPool对象，从JedisPool中获取Jedis</span></span><br><span class=\"line\">        <span class=\"type\">JedisPool</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            pool = RedisUtils.open(host, port);</span><br><span class=\"line\">            <span class=\"comment\">//从pool中获取Jedis</span></span><br><span class=\"line\">            jedis = pool.getResource();</span><br><span class=\"line\"></span><br><span class=\"line\">            Set&lt;String&gt; ret = jedis.keys(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            System.out.println(ret);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭Jedis对象，把Pool中获取的Jedis放回Pool，供其他请求使用。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (jedis != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                jedis.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：[]</p>\n<h2 id=\"Redis客户端工具——Redis-Desktop-Manager\"><a href=\"#Redis客户端工具——Redis-Desktop-Manager\" class=\"headerlink\" title=\"Redis客户端工具——Redis Desktop Manager\"></a>Redis客户端工具——Redis Desktop Manager</h2><p>使用命令行还行，就不用客户端了。贴个<a class=\"link\"   href=\"https://resp.app/\" >官网链接<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>Redis的学习告一段落，其中用的最多的应该还是对数据的操作。</p>\n</blockquote>\n"},{"title":"Vuejs笔记（鸽）","date":"2022-07-26T02:18:28.000Z","_content":"\n## vue核心\n\n### 介绍\n\n前端框架，主要负责MVC中View层。用来对页面中的数据进行处理，以及制作前端页面相关特效及动画。  \nvue特点：\n1. 使用组件化模式，提高代码复用、让代码更好维护。\n2. 声明式编码，无需直接操作dom\n3. 使用虚拟dom+Diff算法，尽量复用dom节点\n\n[vue官网](https://cn.vuejs.org/)\n[vue官方文档](https://cn.vuejs.org/v2/guide/)\n\n### 搭建环境\n\n下载vue.js并引入。\n\n1. 想要vue工作，必须创建vue实例，并传入一个配置对象。\n2. root容器内的代码依然符合html规范，但会增加vue的语法。\n3. root容器中的代码被称为**vue模板**。\n\n~~~html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title></title>\n    <!-- 引入vue -->\n    <script type=\"text/javascript\" src=\"js/vue.js\"></script>\n</head>\n<body>\n<!-- 准备一个容器 -->\n<div id=\"root\">\n    <h2>hello {{name}}</h2>\n</div>\n\n<script type=\"text/javascript\">\n    Vue.config.productionTip = false //阻止vue在启动时生成生产提示\n\n    //创建vue实例\n    new Vue({\n        el: '#root', //el用于指定当前vue实例为哪个容器服务，值通常为css选择器字符串\n        data: { //data用于存储数据，数据供el所指定的容器去使用。\n            name: 'vue'\n        }\n    })\n</script>\n</body>\n</html>\n~~~\n\n> 容器与实例一一对应（先到先得），每个实例只能被一个容器接管\n> 开发中只有一个vue实例，配合组件一起使用\n\n### 模板语法\n\n插值语法\n功能：用于解析标签体内容\n语法：{{xxx}}中xxx为js表达式，且xxx可以自动读取data中的所有属性\n`<h2>hello {{name}}</h2>`\n\n指令语法\n功能：用于解析标签（包括标签属性、标签体内容、绑定事件...）\n`<a v-bind:href=\"url\">点击前往百度</a>`\n> v-bind 可以简写成 :\n`<a :href=\"url\">点击前往百度</a>`\n\n> vue中有很多指令，且形式都是 v-???\n\n### 数据绑定\n单向绑定(v-bind)：数据只能从data流向页面。\n双向绑定(v-model)：数据能从data流向页面，也能从页面流向data\n> 双向绑定一般用于表单类元素上（如input、select等）\n> v-model:value 可以简写 v-model，因为model默认收集的就是value的值\n\n### el与data的两种写法\n\nel两种写法\n~~~html\n<script type=\"text/javascript\">\n    const v = new Vue({\n        // el: '#root', //第一种写法：对象式\n        data: {\n            name: 'vue'\n        }\n    })\n    v.$mount('#root') //第二种写法：函数式\n</script>\n~~~\n\n1. new Vue时配置el属性\n2. 先创建vue实例，再通过函数$.mount指定el的值\n\ndata两种写法\n~~~html\n<script type=\"text/javascript\">\n    const v = new Vue({\n        el: '#root', \n        //第一种写法：对象式\n        // data: {\n        //     name: 'vue'\n        // }\n        \n        //第二种写法：函数式\n        data(){\n            return{\n                name:'vue'\n            }\n        }\n    })\n    \n</script>\n~~~\n\n> 由vue管理的函数，不要使用箭头函数。使用箭头函数，this就不再是vue实例。\n\n### MVVM模型\n\nM：模型(Model)：对应data中的数据\nV：视图(View)：模板\nVM：视图模型(ViewModel)：Vue实例对象\n\n> data中所有属性，都会出现在vm上\n> vm上所有属性 及 vue原型上的所有属性，在vue模板中都可以直接使用\n\n### 数据代理\n\n通过一个对象代理对另一个对象中属性的操作（读/写）\n\nObject.defineProperty的使用\n通过number操作person.age。即number代理了对person.age的操作\n\n~~~html\n<script type=\"text/javascript\">\n    let number = 20\n    let person = {\n        name: '张三',\n        sex: '男',\n        // age: 18\n    }\n\n    Object.defineProperty(person, 'age', {\n        // value: 18,\n        // enumerable: true, //控制属性是否可以枚举，默认false\n        // writable: true, //控制属性是否可以被修改，默认false\n        // configurable: true, //控制属性是都可以被删除，默认false\n\n        //当读取person的age属性时，get函数会被调用，且返回值为age的值\n        get: function() {\n            return number\n        },\n        //当修改person的age属性时，Set函数会被调用，且会收到修改的具体值\n        set(value) {\n            console.log('修改person.age值，改为', value)\n            number = value\n        }\n    })\n</script>\n~~~\n\n### 事件处理\n\n#### 事件基本使用\n\n1. 使用 v-on:xxx 或 @xxx 绑定事件，xxx为事件名\n2. 事件的回调需要配置在methods对象中，最终会在vm上\n3. methods中配置的函数，不要使用箭头函数，否则this就不是vm了。\n4. @click=\"function\" 与 @click=\"function($event)\" 效果一致，但后者可以传参\n\n~~~html\n<body>\n    <div id=\"root\">\n        <button v-on:click=\"showInfo1\">按钮1</button>\n        <button @click=\"showInfo2($event,'vue')\">按钮2</button>\n    </div>\n\n    <script type=\"text/javascript\">\n        new Vue({\n            el: '#root',\n            methods: {\n                showInfo1() {\n                    alert(\"hello\")\n                },\n                showInfo2(event, number) {\n                    alert(number)\n                }\n            }\n        })\n    </script>\n</body>\n~~~\n\n#### 事件修饰符\n\n1. prevent：阻止默认事件\n2. stop：阻止事件冒泡\n3. once：事件只触发一次\n4. capture：使用事件的捕获模式\n5. self：只有event.target时当前操作的元素时才触发事件\n6. passive：事件的默认行为立即执行，无需等待事件回调执行完毕\n\n~~~html\n<body>\n    <div id=\"root\">\n        <!-- 阻止默认事件 -->\n        <a href=\"https://www.bing.com\" @click.prevent=\"showInfo\">点击提示信息</a>\n        <!-- 阻止事件冒泡 -->\n        <div class=\"demo\" @click=\"showInfo\">\n            <button @click.stop=\"showInfo\">点击提示信息</button>\n        </div>\n        <!-- 事件只触发一次 -->\n        <button @click.once=\"showInfo\">点击提示信息</button>\n        <!-- 使用事件捕获模式 -->\n        <div class=\"box1\" @click.capture=\"showMsg(1)\">\n            div1\n            <div class=\"box2\" @click=\"showMsg(2)\">\n                div2\n            </div>\n        </div>\n        <!-- 只有event.target时当前操作的元素时才触发事件 -->\n        <div class=\"demo\" @click.self=\"showInfo2\">\n            <button @click=\"showInfo2\">点击提示信息</button>\n        </div>\n        <!-- 事件的默认行为立即执行，无需等待事件回调执行完毕 -->\n        <ul @scroll.passive=\"list\" class=\"list\">\n            <li>1</li>\n            <li>2</li>\n            <li>3</li>\n            <li>4</li>\n        </ul>\n    </div>\n\n    <script type=\"text/javascript\">\n        new Vue({\n            el: '#root',\n            methods: {\n                showInfo() {\n                    alert(\"hello\")\n                },\n                showInfo2(e) {\n                    alert(e.target)\n                },\n                showMsg(msg) {\n                    alert(msg)\n                },\n                list() {\n                    for (var i = 0; i < 10000; i++) {\n                        console.log(\"@\")\n                    }\n                }\n            }\n        })\n    </script>\n</body>\n~~~\n\n#### 键盘事件\n\n1. vue中常用按键别名：\n   1. 回车：enter\n   2. 删除：delete （捕获“删除”和“退格”键）\n   3. 退出：esc\n   4. 空格：space\n   5. 换行：tab（必须配合keydown使用）\n   6. 上：up\n   7. 下：down\n   8. 左：left\n   9. 右：right\n2. vue未提供别名的按键，可以使用按键原始key值绑定，但注意要转为kebab-case（短横线命名）\n3. 系统修饰键（特殊）：ctrl、alt、shift、meta（win标键）\n   1. 配合keyup使用：按下修饰键同时，再按下其他键，随后释放其他键，事件才被触发。\n   2. 配合keydown使用：正常触发时机\n4. 可以使用keyCode指定具体按键（不推荐，不同键盘编码可能不同）\n5. Vue.config.keyCodes.自定义键名 = 键码，可以定制按键别名\n\n#### 事件总结\n\n修饰符可以连写\n`<a href=\"www.bing.com\" @click.stop.prevent=\"showInfo()\">点击提示信息</a>`\n\n系统修饰键也可以连写\n`<input type=\"text\" placeholder=\"按下ctrl+y提示输入\" @keyup.ctrl.y=\"showInfo\" />`\n\n### 计算属性\n\n计算属性：\n1. 定义：要用的属性不存在，通过已有属性计算而来\n2. 原理：借助Object.defineproperty方法提供的getter和setter\n3. get函数在 初次读取时会执行一次； 当依赖数据发生改变时再次调用\n4. 优势：与methods实现相比，计算属性会有缓存机制（复用），效率更高，调试方便 \n5. 备注：计算属性最终会出现在vm上，直接使用读取即可。如果计算属性要被修改，必须写set函数去相应修改，且set中要让计算时以来的数据发生修改。\n\n~~~html\n <body>\n     <div id=\"root\">\n         姓：<input type=\"text\" v-model=\"firstName\" /><br />\n         名：<input type=\"text\" v-model=\"lastName\" /><br />\n         全名：<span>{{fullName}}</span>\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 firstName: '张',\n                 lastName: '三'\n             },\n             computed: {\n                 fullName: {\n                     // 当有人读取fullName时，get就会被调用，且返回值就作为fullName的值\n                     // get调用时机：初次读取fullName；所依赖的数据发生变化时\n                     get() {\n                         // this指vm\n                         return this.firstName + this.lastName\n                     },\n                     // set调用时机：当fullName被修改时\n                     set(value) {\n                         const arr = value.split('-')\n                         this.firstName = arr[0]\n                         this.lastName = arr[1]\n                     }\n                 }\n             }\n\n         })\n     </script>\n </body>\n~~~\n\n计算属性的简写  \n将计算属性直接写成函数的形式\n> 当计算属性只考虑读取，不考虑修改时使用\n\n~~~html\n<script type=\"text/javascript\">\n   const vm = new Vue({\n      el: '#root',\n      data: {\n         firstName: '张',\n         lastName: '三'\n      },\n      computed: {\n         fullName() {\n            return this.firstName + this.lastName\n         }\n      }\n   })\n</script>\n~~~\n\n### 监视属性\n\n#### 切换天气案例\n\n嵌入表达式的方式实现\n~~~html\n <body>\n     <div id=\"root\">\n         <h2>今天天气很{{isHot?'炎热':'凉爽'}}</h2>\n         <button @click=\"change\">切换天气</button>\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 isHot: true\n             },\n             methods: {\n                 change() {\n                     this.isHot = !this.isHot\n                 }\n             }\n         })\n     </script>\n </body>\n~~~\n计算属性的方式实现\n~~~html\n <body>\n     <div id=\"root\">\n         <h2>今天天气很{{info}}</h2>\n         <button @click=\"change\">切换天气</button>\n         <!-- 另一种写法，绑定事件时，@xxx=\"yyy\"，yyy可以写一些简单的语句 -->\n         <!-- <button @click=\"isHot=!isHot\">切换天气</button> -->\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 isHot: true\n             },\n             computed: {\n                 info() {\n                     return this.isHot ? '炎热' : '凉爽'\n                 }\n             },\n             methods: {\n                 change() {\n                     this.isHot = !this.isHot\n                 }\n             }\n         })\n     </script>\n </body>\n~~~\n\n#### 监视属性\n\n1. 当监视的属性变化时，回调函数自动执行，进行相关操作\n2. 监视的属性必须存在，在能进行监视\n3. 两种写法：\n   1. new Vue时传入watch配置\n   2. 通过vm.$watch监视\n\n~~~html\n <body>\n     <div id=\"root\">\n         <h2>今天天气很{{info}}</h2>\n         <button @click=\"change\">切换天气</button>\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 isHot: true\n             },\n             computed: {\n                 info() {\n                     return this.isHot ? '炎热' : '凉爽'\n                 }\n             },\n             methods: {\n                 change() {\n                     this.isHot = !this.isHot\n                 }\n             },\n             watch: {\n                 isHot: {\n                     immediate: true, //初始化时让handler调用一下\n                     // handler在isHot发生改变时被调用\n                     handler(newValue, oldValue) {\n                         console.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n                     }\n                 }\n             }\n         })\n\n         // 另一种写法\n         // vm.$watch('isHot',{\n         // \timmediate: true, \n         // \thandler(newValue, oldValue) {\n         // \t\tconsole.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n         // \t}\n         // })\n     </script>\n </body>\n~~~\n\n#### 深度监视\n\n1. Vue中watch默认不监视对象内部值的改变（一层）\n2. 配置deep:true可以监视对象内部值的改变（多层）\n\n> Vue自身可以检测对象内部值的改变，但提供的watch默认不支持\n> 使用watch时根据数据的具体结构，决定是否使用深度监视（效率问题）\n\n~~~html\n <body>\n     <div id=\"root\">\n         <h2>a的值是：{{numbers.a}}</h2>\n         <button @click=\"numbers.a++\">点击使a+1</button>\n         <h2>b的值是：{{numbers.b}}</h2>\n         <button @click=\"numbers.b++\">点击使b+1</button>\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 numbers: {\n                     a: 1,\n                     b: 1\n                 }\n             },\n             watch: {\n                 // 监视多级结构中某个属性的变化\n                 'numbers.a': {\n                     handler() {\n                         console.log('numbers.a改变了')\n                     }\n                 },\n                 // 监视多级结构中所有属性的变化\n                 numbers: {\n                     deep: true,\n                     handler() {\n                         console.log('numbers改变了')\n                     }\n                 }\n             }\n         })\n     </script>\n </body>\n~~~\n\n#### 监视属性的简写\n\n当watch中只有handler函数时，才可以使用。即没有其他类似 immediate、deep 等配置\n\n~~~html\n <body>\n     <div id=\"root\">\n         <h2>今天天气很{{info}}</h2>\n         <button @click=\"change\">切换天气</button>\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 isHot: true\n             },\n             computed: {\n                 info() {\n                     return this.isHot ? '炎热' : '凉爽'\n                 }\n             },\n             methods: {\n                 change() {\n                     this.isHot = !this.isHot\n                 }\n             },\n             watch: {\n                 // 完整写法\n                 isHot: {\n                     handler(newValue, oldValue) {\n                         console.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n                     }\n                 },\n                 // 简写\n                 isHot(newValue, oldValue) {\n                     console.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n                 }\n             }\n         })\n         // 完整写法\n         vm.$watch('isHot', {\n             immediate: true,\n             handler(newValue, oldValue) {\n                 console.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n             }\n         })\n         //简写\n         vm.$watch('isHot', function(newValue, oldValue) {\n             console.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n         })\n     </script>\n </body>\n~~~\n\n#### computed与watch区别\n\n1. computed能完成的功能，watch都能完成\n2. watch能完成的功能，computed不一定能完成。比如：watch可以进行异步操作\n\n> 原则\n> 所有被vue管理的函数，最好写成普通函数，这样this指向vm或组件实例对象\n> 所有不被vue管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this才指向vm或组件实例对象\n\n### 绑定样式\n\n\n\n\n","source":"_posts/Vuejs笔记.md","raw":"---\ntitle: Vuejs笔记（鸽）\ndate: 2022-07-26 10:18:28\ntags:\n- Vue\ncategories:\n- 学习笔记\n---\n\n## vue核心\n\n### 介绍\n\n前端框架，主要负责MVC中View层。用来对页面中的数据进行处理，以及制作前端页面相关特效及动画。  \nvue特点：\n1. 使用组件化模式，提高代码复用、让代码更好维护。\n2. 声明式编码，无需直接操作dom\n3. 使用虚拟dom+Diff算法，尽量复用dom节点\n\n[vue官网](https://cn.vuejs.org/)\n[vue官方文档](https://cn.vuejs.org/v2/guide/)\n\n### 搭建环境\n\n下载vue.js并引入。\n\n1. 想要vue工作，必须创建vue实例，并传入一个配置对象。\n2. root容器内的代码依然符合html规范，但会增加vue的语法。\n3. root容器中的代码被称为**vue模板**。\n\n~~~html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title></title>\n    <!-- 引入vue -->\n    <script type=\"text/javascript\" src=\"js/vue.js\"></script>\n</head>\n<body>\n<!-- 准备一个容器 -->\n<div id=\"root\">\n    <h2>hello {{name}}</h2>\n</div>\n\n<script type=\"text/javascript\">\n    Vue.config.productionTip = false //阻止vue在启动时生成生产提示\n\n    //创建vue实例\n    new Vue({\n        el: '#root', //el用于指定当前vue实例为哪个容器服务，值通常为css选择器字符串\n        data: { //data用于存储数据，数据供el所指定的容器去使用。\n            name: 'vue'\n        }\n    })\n</script>\n</body>\n</html>\n~~~\n\n> 容器与实例一一对应（先到先得），每个实例只能被一个容器接管\n> 开发中只有一个vue实例，配合组件一起使用\n\n### 模板语法\n\n插值语法\n功能：用于解析标签体内容\n语法：{{xxx}}中xxx为js表达式，且xxx可以自动读取data中的所有属性\n`<h2>hello {{name}}</h2>`\n\n指令语法\n功能：用于解析标签（包括标签属性、标签体内容、绑定事件...）\n`<a v-bind:href=\"url\">点击前往百度</a>`\n> v-bind 可以简写成 :\n`<a :href=\"url\">点击前往百度</a>`\n\n> vue中有很多指令，且形式都是 v-???\n\n### 数据绑定\n单向绑定(v-bind)：数据只能从data流向页面。\n双向绑定(v-model)：数据能从data流向页面，也能从页面流向data\n> 双向绑定一般用于表单类元素上（如input、select等）\n> v-model:value 可以简写 v-model，因为model默认收集的就是value的值\n\n### el与data的两种写法\n\nel两种写法\n~~~html\n<script type=\"text/javascript\">\n    const v = new Vue({\n        // el: '#root', //第一种写法：对象式\n        data: {\n            name: 'vue'\n        }\n    })\n    v.$mount('#root') //第二种写法：函数式\n</script>\n~~~\n\n1. new Vue时配置el属性\n2. 先创建vue实例，再通过函数$.mount指定el的值\n\ndata两种写法\n~~~html\n<script type=\"text/javascript\">\n    const v = new Vue({\n        el: '#root', \n        //第一种写法：对象式\n        // data: {\n        //     name: 'vue'\n        // }\n        \n        //第二种写法：函数式\n        data(){\n            return{\n                name:'vue'\n            }\n        }\n    })\n    \n</script>\n~~~\n\n> 由vue管理的函数，不要使用箭头函数。使用箭头函数，this就不再是vue实例。\n\n### MVVM模型\n\nM：模型(Model)：对应data中的数据\nV：视图(View)：模板\nVM：视图模型(ViewModel)：Vue实例对象\n\n> data中所有属性，都会出现在vm上\n> vm上所有属性 及 vue原型上的所有属性，在vue模板中都可以直接使用\n\n### 数据代理\n\n通过一个对象代理对另一个对象中属性的操作（读/写）\n\nObject.defineProperty的使用\n通过number操作person.age。即number代理了对person.age的操作\n\n~~~html\n<script type=\"text/javascript\">\n    let number = 20\n    let person = {\n        name: '张三',\n        sex: '男',\n        // age: 18\n    }\n\n    Object.defineProperty(person, 'age', {\n        // value: 18,\n        // enumerable: true, //控制属性是否可以枚举，默认false\n        // writable: true, //控制属性是否可以被修改，默认false\n        // configurable: true, //控制属性是都可以被删除，默认false\n\n        //当读取person的age属性时，get函数会被调用，且返回值为age的值\n        get: function() {\n            return number\n        },\n        //当修改person的age属性时，Set函数会被调用，且会收到修改的具体值\n        set(value) {\n            console.log('修改person.age值，改为', value)\n            number = value\n        }\n    })\n</script>\n~~~\n\n### 事件处理\n\n#### 事件基本使用\n\n1. 使用 v-on:xxx 或 @xxx 绑定事件，xxx为事件名\n2. 事件的回调需要配置在methods对象中，最终会在vm上\n3. methods中配置的函数，不要使用箭头函数，否则this就不是vm了。\n4. @click=\"function\" 与 @click=\"function($event)\" 效果一致，但后者可以传参\n\n~~~html\n<body>\n    <div id=\"root\">\n        <button v-on:click=\"showInfo1\">按钮1</button>\n        <button @click=\"showInfo2($event,'vue')\">按钮2</button>\n    </div>\n\n    <script type=\"text/javascript\">\n        new Vue({\n            el: '#root',\n            methods: {\n                showInfo1() {\n                    alert(\"hello\")\n                },\n                showInfo2(event, number) {\n                    alert(number)\n                }\n            }\n        })\n    </script>\n</body>\n~~~\n\n#### 事件修饰符\n\n1. prevent：阻止默认事件\n2. stop：阻止事件冒泡\n3. once：事件只触发一次\n4. capture：使用事件的捕获模式\n5. self：只有event.target时当前操作的元素时才触发事件\n6. passive：事件的默认行为立即执行，无需等待事件回调执行完毕\n\n~~~html\n<body>\n    <div id=\"root\">\n        <!-- 阻止默认事件 -->\n        <a href=\"https://www.bing.com\" @click.prevent=\"showInfo\">点击提示信息</a>\n        <!-- 阻止事件冒泡 -->\n        <div class=\"demo\" @click=\"showInfo\">\n            <button @click.stop=\"showInfo\">点击提示信息</button>\n        </div>\n        <!-- 事件只触发一次 -->\n        <button @click.once=\"showInfo\">点击提示信息</button>\n        <!-- 使用事件捕获模式 -->\n        <div class=\"box1\" @click.capture=\"showMsg(1)\">\n            div1\n            <div class=\"box2\" @click=\"showMsg(2)\">\n                div2\n            </div>\n        </div>\n        <!-- 只有event.target时当前操作的元素时才触发事件 -->\n        <div class=\"demo\" @click.self=\"showInfo2\">\n            <button @click=\"showInfo2\">点击提示信息</button>\n        </div>\n        <!-- 事件的默认行为立即执行，无需等待事件回调执行完毕 -->\n        <ul @scroll.passive=\"list\" class=\"list\">\n            <li>1</li>\n            <li>2</li>\n            <li>3</li>\n            <li>4</li>\n        </ul>\n    </div>\n\n    <script type=\"text/javascript\">\n        new Vue({\n            el: '#root',\n            methods: {\n                showInfo() {\n                    alert(\"hello\")\n                },\n                showInfo2(e) {\n                    alert(e.target)\n                },\n                showMsg(msg) {\n                    alert(msg)\n                },\n                list() {\n                    for (var i = 0; i < 10000; i++) {\n                        console.log(\"@\")\n                    }\n                }\n            }\n        })\n    </script>\n</body>\n~~~\n\n#### 键盘事件\n\n1. vue中常用按键别名：\n   1. 回车：enter\n   2. 删除：delete （捕获“删除”和“退格”键）\n   3. 退出：esc\n   4. 空格：space\n   5. 换行：tab（必须配合keydown使用）\n   6. 上：up\n   7. 下：down\n   8. 左：left\n   9. 右：right\n2. vue未提供别名的按键，可以使用按键原始key值绑定，但注意要转为kebab-case（短横线命名）\n3. 系统修饰键（特殊）：ctrl、alt、shift、meta（win标键）\n   1. 配合keyup使用：按下修饰键同时，再按下其他键，随后释放其他键，事件才被触发。\n   2. 配合keydown使用：正常触发时机\n4. 可以使用keyCode指定具体按键（不推荐，不同键盘编码可能不同）\n5. Vue.config.keyCodes.自定义键名 = 键码，可以定制按键别名\n\n#### 事件总结\n\n修饰符可以连写\n`<a href=\"www.bing.com\" @click.stop.prevent=\"showInfo()\">点击提示信息</a>`\n\n系统修饰键也可以连写\n`<input type=\"text\" placeholder=\"按下ctrl+y提示输入\" @keyup.ctrl.y=\"showInfo\" />`\n\n### 计算属性\n\n计算属性：\n1. 定义：要用的属性不存在，通过已有属性计算而来\n2. 原理：借助Object.defineproperty方法提供的getter和setter\n3. get函数在 初次读取时会执行一次； 当依赖数据发生改变时再次调用\n4. 优势：与methods实现相比，计算属性会有缓存机制（复用），效率更高，调试方便 \n5. 备注：计算属性最终会出现在vm上，直接使用读取即可。如果计算属性要被修改，必须写set函数去相应修改，且set中要让计算时以来的数据发生修改。\n\n~~~html\n <body>\n     <div id=\"root\">\n         姓：<input type=\"text\" v-model=\"firstName\" /><br />\n         名：<input type=\"text\" v-model=\"lastName\" /><br />\n         全名：<span>{{fullName}}</span>\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 firstName: '张',\n                 lastName: '三'\n             },\n             computed: {\n                 fullName: {\n                     // 当有人读取fullName时，get就会被调用，且返回值就作为fullName的值\n                     // get调用时机：初次读取fullName；所依赖的数据发生变化时\n                     get() {\n                         // this指vm\n                         return this.firstName + this.lastName\n                     },\n                     // set调用时机：当fullName被修改时\n                     set(value) {\n                         const arr = value.split('-')\n                         this.firstName = arr[0]\n                         this.lastName = arr[1]\n                     }\n                 }\n             }\n\n         })\n     </script>\n </body>\n~~~\n\n计算属性的简写  \n将计算属性直接写成函数的形式\n> 当计算属性只考虑读取，不考虑修改时使用\n\n~~~html\n<script type=\"text/javascript\">\n   const vm = new Vue({\n      el: '#root',\n      data: {\n         firstName: '张',\n         lastName: '三'\n      },\n      computed: {\n         fullName() {\n            return this.firstName + this.lastName\n         }\n      }\n   })\n</script>\n~~~\n\n### 监视属性\n\n#### 切换天气案例\n\n嵌入表达式的方式实现\n~~~html\n <body>\n     <div id=\"root\">\n         <h2>今天天气很{{isHot?'炎热':'凉爽'}}</h2>\n         <button @click=\"change\">切换天气</button>\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 isHot: true\n             },\n             methods: {\n                 change() {\n                     this.isHot = !this.isHot\n                 }\n             }\n         })\n     </script>\n </body>\n~~~\n计算属性的方式实现\n~~~html\n <body>\n     <div id=\"root\">\n         <h2>今天天气很{{info}}</h2>\n         <button @click=\"change\">切换天气</button>\n         <!-- 另一种写法，绑定事件时，@xxx=\"yyy\"，yyy可以写一些简单的语句 -->\n         <!-- <button @click=\"isHot=!isHot\">切换天气</button> -->\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 isHot: true\n             },\n             computed: {\n                 info() {\n                     return this.isHot ? '炎热' : '凉爽'\n                 }\n             },\n             methods: {\n                 change() {\n                     this.isHot = !this.isHot\n                 }\n             }\n         })\n     </script>\n </body>\n~~~\n\n#### 监视属性\n\n1. 当监视的属性变化时，回调函数自动执行，进行相关操作\n2. 监视的属性必须存在，在能进行监视\n3. 两种写法：\n   1. new Vue时传入watch配置\n   2. 通过vm.$watch监视\n\n~~~html\n <body>\n     <div id=\"root\">\n         <h2>今天天气很{{info}}</h2>\n         <button @click=\"change\">切换天气</button>\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 isHot: true\n             },\n             computed: {\n                 info() {\n                     return this.isHot ? '炎热' : '凉爽'\n                 }\n             },\n             methods: {\n                 change() {\n                     this.isHot = !this.isHot\n                 }\n             },\n             watch: {\n                 isHot: {\n                     immediate: true, //初始化时让handler调用一下\n                     // handler在isHot发生改变时被调用\n                     handler(newValue, oldValue) {\n                         console.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n                     }\n                 }\n             }\n         })\n\n         // 另一种写法\n         // vm.$watch('isHot',{\n         // \timmediate: true, \n         // \thandler(newValue, oldValue) {\n         // \t\tconsole.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n         // \t}\n         // })\n     </script>\n </body>\n~~~\n\n#### 深度监视\n\n1. Vue中watch默认不监视对象内部值的改变（一层）\n2. 配置deep:true可以监视对象内部值的改变（多层）\n\n> Vue自身可以检测对象内部值的改变，但提供的watch默认不支持\n> 使用watch时根据数据的具体结构，决定是否使用深度监视（效率问题）\n\n~~~html\n <body>\n     <div id=\"root\">\n         <h2>a的值是：{{numbers.a}}</h2>\n         <button @click=\"numbers.a++\">点击使a+1</button>\n         <h2>b的值是：{{numbers.b}}</h2>\n         <button @click=\"numbers.b++\">点击使b+1</button>\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 numbers: {\n                     a: 1,\n                     b: 1\n                 }\n             },\n             watch: {\n                 // 监视多级结构中某个属性的变化\n                 'numbers.a': {\n                     handler() {\n                         console.log('numbers.a改变了')\n                     }\n                 },\n                 // 监视多级结构中所有属性的变化\n                 numbers: {\n                     deep: true,\n                     handler() {\n                         console.log('numbers改变了')\n                     }\n                 }\n             }\n         })\n     </script>\n </body>\n~~~\n\n#### 监视属性的简写\n\n当watch中只有handler函数时，才可以使用。即没有其他类似 immediate、deep 等配置\n\n~~~html\n <body>\n     <div id=\"root\">\n         <h2>今天天气很{{info}}</h2>\n         <button @click=\"change\">切换天气</button>\n     </div>\n\n     <script type=\"text/javascript\">\n         const vm = new Vue({\n             el: '#root',\n             data: {\n                 isHot: true\n             },\n             computed: {\n                 info() {\n                     return this.isHot ? '炎热' : '凉爽'\n                 }\n             },\n             methods: {\n                 change() {\n                     this.isHot = !this.isHot\n                 }\n             },\n             watch: {\n                 // 完整写法\n                 isHot: {\n                     handler(newValue, oldValue) {\n                         console.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n                     }\n                 },\n                 // 简写\n                 isHot(newValue, oldValue) {\n                     console.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n                 }\n             }\n         })\n         // 完整写法\n         vm.$watch('isHot', {\n             immediate: true,\n             handler(newValue, oldValue) {\n                 console.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n             }\n         })\n         //简写\n         vm.$watch('isHot', function(newValue, oldValue) {\n             console.log(\"isHot被修改：\" + oldValue + \"-->\" + newValue)\n         })\n     </script>\n </body>\n~~~\n\n#### computed与watch区别\n\n1. computed能完成的功能，watch都能完成\n2. watch能完成的功能，computed不一定能完成。比如：watch可以进行异步操作\n\n> 原则\n> 所有被vue管理的函数，最好写成普通函数，这样this指向vm或组件实例对象\n> 所有不被vue管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this才指向vm或组件实例对象\n\n### 绑定样式\n\n\n\n\n","slug":"Vuejs笔记","published":1,"updated":"2022-09-11T09:07:57.573Z","_id":"cl7ketbdy001zo8tt0qirgj85","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"vue核心\"><a href=\"#vue核心\" class=\"headerlink\" title=\"vue核心\"></a>vue核心</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>前端框架，主要负责MVC中View层。用来对页面中的数据进行处理，以及制作前端页面相关特效及动画。<br>vue特点：</p>\n<ol>\n<li>使用组件化模式，提高代码复用、让代码更好维护。</li>\n<li>声明式编码，无需直接操作dom</li>\n<li>使用虚拟dom+Diff算法，尽量复用dom节点</li>\n</ol>\n<p><a class=\"link\"   href=\"https://cn.vuejs.org/\" >vue官网<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://cn.vuejs.org/v2/guide/\" >vue官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h3><p>下载vue.js并引入。</p>\n<ol>\n<li>想要vue工作，必须创建vue实例，并传入一个配置对象。</li>\n<li>root容器内的代码依然符合html规范，但会增加vue的语法。</li>\n<li>root容器中的代码被称为<strong>vue模板</strong>。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入vue --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>hello &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span> <span class=\"comment\">//阻止vue在启动时生成生产提示</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//创建vue实例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>, <span class=\"comment\">//el用于指定当前vue实例为哪个容器服务，值通常为css选择器字符串</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123; <span class=\"comment\">//data用于存储数据，数据供el所指定的容器去使用。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>容器与实例一一对应（先到先得），每个实例只能被一个容器接管<br>开发中只有一个vue实例，配合组件一起使用</p>\n</blockquote>\n<h3 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h3><p>插值语法<br>功能：用于解析标签体内容<br>语法：中xxx为js表达式，且xxx可以自动读取data中的所有属性<br><code>&lt;h2&gt;hello &#123;&#123;name&#125;&#125;&lt;/h2&gt;</code></p>\n<p>指令语法<br>功能：用于解析标签（包括标签属性、标签体内容、绑定事件…）<br><code>&lt;a v-bind:href=&quot;url&quot;&gt;点击前往百度&lt;/a&gt;</code></p>\n<blockquote>\n<p>v-bind 可以简写成 :<br><code>&lt;a :href=&quot;url&quot;&gt;点击前往百度&lt;/a&gt;</code></p>\n</blockquote>\n<blockquote>\n<p>vue中有很多指令，且形式都是 v-???</p>\n</blockquote>\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>单向绑定(v-bind)：数据只能从data流向页面。<br>双向绑定(v-model)：数据能从data流向页面，也能从页面流向data</p>\n<blockquote>\n<p>双向绑定一般用于表单类元素上（如input、select等）<br>v-model:value 可以简写 v-model，因为model默认收集的就是value的值</p>\n</blockquote>\n<h3 id=\"el与data的两种写法\"><a href=\"#el与data的两种写法\" class=\"headerlink\" title=\"el与data的两种写法\"></a>el与data的两种写法</h3><p>el两种写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// el: &#x27;#root&#x27;, //第一种写法：对象式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    v.$mount(<span class=\"string\">&#x27;#root&#x27;</span>) <span class=\"comment\">//第二种写法：函数式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>new Vue时配置el属性</li>\n<li>先创建vue实例，再通过函数$.mount指定el的值</li>\n</ol>\n<p>data两种写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//第一种写法：对象式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// data: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//     name: &#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//第二种写法：函数式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>:<span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>由vue管理的函数，不要使用箭头函数。使用箭头函数，this就不再是vue实例。</p>\n</blockquote>\n<h3 id=\"MVVM模型\"><a href=\"#MVVM模型\" class=\"headerlink\" title=\"MVVM模型\"></a>MVVM模型</h3><p>M：模型(Model)：对应data中的数据<br>V：视图(View)：模板<br>VM：视图模型(ViewModel)：Vue实例对象</p>\n<blockquote>\n<p>data中所有属性，都会出现在vm上<br>vm上所有属性 及 vue原型上的所有属性，在vue模板中都可以直接使用</p>\n</blockquote>\n<h3 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h3><p>通过一个对象代理对另一个对象中属性的操作（读/写）</p>\n<p>Object.defineProperty的使用<br>通过number操作person.age。即number代理了对person.age的操作</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> number = <span class=\"number\">20</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> person = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// age: 18</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&#x27;age&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// value: 18,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// enumerable: true, //控制属性是否可以枚举，默认false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// writable: true, //控制属性是否可以被修改，默认false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// configurable: true, //控制属性是都可以被删除，默认false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//当读取person的age属性时，get函数会被调用，且返回值为age的值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> number</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//当修改person的age属性时，Set函数会被调用，且会收到修改的具体值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;修改person.age值，改为&#x27;</span>, value)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            number = value</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><h4 id=\"事件基本使用\"><a href=\"#事件基本使用\" class=\"headerlink\" title=\"事件基本使用\"></a>事件基本使用</h4><ol>\n<li>使用 v-on:xxx 或 @xxx 绑定事件，xxx为事件名</li>\n<li>事件的回调需要配置在methods对象中，最终会在vm上</li>\n<li>methods中配置的函数，不要使用箭头函数，否则this就不是vm了。</li>\n<li>@click=”function” 与 @click=”function($event)” 效果一致，但后者可以传参</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;showInfo1&quot;</span>&gt;</span>按钮1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showInfo2($event,&#x27;vue&#x27;)&quot;</span>&gt;</span>按钮2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">showInfo1</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;hello&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">showInfo2</span>(<span class=\"params\">event, number</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(number)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><ol>\n<li>prevent：阻止默认事件</li>\n<li>stop：阻止事件冒泡</li>\n<li>once：事件只触发一次</li>\n<li>capture：使用事件的捕获模式</li>\n<li>self：只有event.target时当前操作的元素时才触发事件</li>\n<li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.bing.com&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span>点击提示信息<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 阻止事件冒泡 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span>点击提示信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 事件只触发一次 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.once</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span>点击提示信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 使用事件捕获模式 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span> @<span class=\"attr\">click.capture</span>=<span class=\"string\">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class=\"line\">            div1</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class=\"line\">                div2</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 只有event.target时当前操作的元素时才触发事件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;showInfo2&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showInfo2&quot;</span>&gt;</span>点击提示信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> @<span class=\"attr\">scroll.passive</span>=<span class=\"string\">&quot;list&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">showInfo</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;hello&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">showInfo2</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(e.<span class=\"property\">target</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">showMsg</span>(<span class=\"params\">msg</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(msg)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">list</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;@&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h4><ol>\n<li>vue中常用按键别名：<ol>\n<li>回车：enter</li>\n<li>删除：delete （捕获“删除”和“退格”键）</li>\n<li>退出：esc</li>\n<li>空格：space</li>\n<li>换行：tab（必须配合keydown使用）</li>\n<li>上：up</li>\n<li>下：down</li>\n<li>左：left</li>\n<li>右：right</li>\n</ol>\n</li>\n<li>vue未提供别名的按键，可以使用按键原始key值绑定，但注意要转为kebab-case（短横线命名）</li>\n<li>系统修饰键（特殊）：ctrl、alt、shift、meta（win标键）<ol>\n<li>配合keyup使用：按下修饰键同时，再按下其他键，随后释放其他键，事件才被触发。</li>\n<li>配合keydown使用：正常触发时机</li>\n</ol>\n</li>\n<li>可以使用keyCode指定具体按键（不推荐，不同键盘编码可能不同）</li>\n<li>Vue.config.keyCodes.自定义键名 = 键码，可以定制按键别名</li>\n</ol>\n<h4 id=\"事件总结\"><a href=\"#事件总结\" class=\"headerlink\" title=\"事件总结\"></a>事件总结</h4><p>修饰符可以连写<br><code>&lt;a href=&quot;www.bing.com&quot; @click.stop.prevent=&quot;showInfo()&quot;&gt;点击提示信息&lt;/a&gt;</code></p>\n<p>系统修饰键也可以连写<br><code>&lt;input type=&quot;text&quot; placeholder=&quot;按下ctrl+y提示输入&quot; @keyup.ctrl.y=&quot;showInfo&quot; /&gt;</code></p>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>计算属性：</p>\n<ol>\n<li>定义：要用的属性不存在，通过已有属性计算而来</li>\n<li>原理：借助Object.defineproperty方法提供的getter和setter</li>\n<li>get函数在 初次读取时会执行一次； 当依赖数据发生改变时再次调用</li>\n<li>优势：与methods实现相比，计算属性会有缓存机制（复用），效率更高，调试方便 </li>\n<li>备注：计算属性最终会出现在vm上，直接使用读取即可。如果计算属性要被修改，必须写set函数去相应修改，且set中要让计算时以来的数据发生修改。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        姓：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        全名：<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;张&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;三&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">fullName</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// get调用时机：初次读取fullName；所依赖的数据发生变化时</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// this指vm</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// set调用时机：当fullName被修改时</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"keyword\">const</span> arr = value.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;-&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> = arr[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span> = arr[<span class=\"number\">1</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>计算属性的简写<br>将计算属性直接写成函数的形式</p>\n<blockquote>\n<p>当计算属性只考虑读取，不考虑修改时使用</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;张&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;三&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"title function_\">fullName</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">         &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">   &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"监视属性\"><a href=\"#监视属性\" class=\"headerlink\" title=\"监视属性\"></a>监视属性</h3><h4 id=\"切换天气案例\"><a href=\"#切换天气案例\" class=\"headerlink\" title=\"切换天气案例\"></a>切换天气案例</h4><p>嵌入表达式的方式实现</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>今天天气很&#123;&#123;isHot?&#x27;炎热&#x27;:&#x27;凉爽&#x27;&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>切换天气<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">change</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>计算属性的方式实现</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>切换天气<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 另一种写法，绑定事件时，@xxx=&quot;yyy&quot;，yyy可以写一些简单的语句 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- &lt;button @click=&quot;isHot=!isHot&quot;&gt;切换天气&lt;/button&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">info</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> ? <span class=\"string\">&#x27;炎热&#x27;</span> : <span class=\"string\">&#x27;凉爽&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">change</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"监视属性-1\"><a href=\"#监视属性-1\" class=\"headerlink\" title=\"监视属性\"></a>监视属性</h4><ol>\n<li>当监视的属性变化时，回调函数自动执行，进行相关操作</li>\n<li>监视的属性必须存在，在能进行监视</li>\n<li>两种写法：<ol>\n<li>new Vue时传入watch配置</li>\n<li>通过vm.$watch监视</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>切换天气<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">info</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> ? <span class=\"string\">&#x27;炎热&#x27;</span> : <span class=\"string\">&#x27;凉爽&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">change</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//初始化时让handler调用一下</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// handler在isHot发生改变时被调用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;isHot被修改：&quot;</span> + oldValue + <span class=\"string\">&quot;--&gt;&quot;</span> + newValue)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 另一种写法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// vm.$watch(&#x27;isHot&#x27;,&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// \timmediate: true, </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// \thandler(newValue, oldValue) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// \t\tconsole.log(&quot;isHot被修改：&quot; + oldValue + &quot;--&gt;&quot; + newValue)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// \t&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"深度监视\"><a href=\"#深度监视\" class=\"headerlink\" title=\"深度监视\"></a>深度监视</h4><ol>\n<li>Vue中watch默认不监视对象内部值的改变（一层）</li>\n<li>配置deep:true可以监视对象内部值的改变（多层）</li>\n</ol>\n<blockquote>\n<p>Vue自身可以检测对象内部值的改变，但提供的watch默认不支持<br>使用watch时根据数据的具体结构，决定是否使用深度监视（效率问题）</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>a的值是：&#123;&#123;numbers.a&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;numbers.a++&quot;</span>&gt;</span>点击使a+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>b的值是：&#123;&#123;numbers.b&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;numbers.b++&quot;</span>&gt;</span>点击使b+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">numbers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">b</span>: <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 监视多级结构中某个属性的变化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"string\">&#x27;numbers.a&#x27;</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">handler</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;numbers.a改变了&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 监视多级结构中所有属性的变化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">numbers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">handler</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;numbers改变了&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"监视属性的简写\"><a href=\"#监视属性的简写\" class=\"headerlink\" title=\"监视属性的简写\"></a>监视属性的简写</h4><p>当watch中只有handler函数时，才可以使用。即没有其他类似 immediate、deep 等配置</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>切换天气<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">info</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> ? <span class=\"string\">&#x27;炎热&#x27;</span> : <span class=\"string\">&#x27;凉爽&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">change</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 完整写法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;isHot被修改：&quot;</span> + oldValue + <span class=\"string\">&quot;--&gt;&quot;</span> + newValue)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 简写</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">isHot</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;isHot被修改：&quot;</span> + oldValue + <span class=\"string\">&quot;--&gt;&quot;</span> + newValue)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 完整写法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        vm.$watch(<span class=\"string\">&#x27;isHot&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;isHot被修改：&quot;</span> + oldValue + <span class=\"string\">&quot;--&gt;&quot;</span> + newValue)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//简写</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        vm.$watch(<span class=\"string\">&#x27;isHot&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;isHot被修改：&quot;</span> + oldValue + <span class=\"string\">&quot;--&gt;&quot;</span> + newValue)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"computed与watch区别\"><a href=\"#computed与watch区别\" class=\"headerlink\" title=\"computed与watch区别\"></a>computed与watch区别</h4><ol>\n<li>computed能完成的功能，watch都能完成</li>\n<li>watch能完成的功能，computed不一定能完成。比如：watch可以进行异步操作</li>\n</ol>\n<blockquote>\n<p>原则<br>所有被vue管理的函数，最好写成普通函数，这样this指向vm或组件实例对象<br>所有不被vue管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this才指向vm或组件实例对象</p>\n</blockquote>\n<h3 id=\"绑定样式\"><a href=\"#绑定样式\" class=\"headerlink\" title=\"绑定样式\"></a>绑定样式</h3>","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"vue核心\"><a href=\"#vue核心\" class=\"headerlink\" title=\"vue核心\"></a>vue核心</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>前端框架，主要负责MVC中View层。用来对页面中的数据进行处理，以及制作前端页面相关特效及动画。<br>vue特点：</p>\n<ol>\n<li>使用组件化模式，提高代码复用、让代码更好维护。</li>\n<li>声明式编码，无需直接操作dom</li>\n<li>使用虚拟dom+Diff算法，尽量复用dom节点</li>\n</ol>\n<p><a class=\"link\"   href=\"https://cn.vuejs.org/\" >vue官网<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://cn.vuejs.org/v2/guide/\" >vue官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h3><p>下载vue.js并引入。</p>\n<ol>\n<li>想要vue工作，必须创建vue实例，并传入一个配置对象。</li>\n<li>root容器内的代码依然符合html规范，但会增加vue的语法。</li>\n<li>root容器中的代码被称为<strong>vue模板</strong>。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 引入vue --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 准备一个容器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>hello &#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">productionTip</span> = <span class=\"literal\">false</span> <span class=\"comment\">//阻止vue在启动时生成生产提示</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">//创建vue实例</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>, <span class=\"comment\">//el用于指定当前vue实例为哪个容器服务，值通常为css选择器字符串</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123; <span class=\"comment\">//data用于存储数据，数据供el所指定的容器去使用。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>容器与实例一一对应（先到先得），每个实例只能被一个容器接管<br>开发中只有一个vue实例，配合组件一起使用</p>\n</blockquote>\n<h3 id=\"模板语法\"><a href=\"#模板语法\" class=\"headerlink\" title=\"模板语法\"></a>模板语法</h3><p>插值语法<br>功能：用于解析标签体内容<br>语法：中xxx为js表达式，且xxx可以自动读取data中的所有属性<br><code>&lt;h2&gt;hello &#123;&#123;name&#125;&#125;&lt;/h2&gt;</code></p>\n<p>指令语法<br>功能：用于解析标签（包括标签属性、标签体内容、绑定事件…）<br><code>&lt;a v-bind:href=&quot;url&quot;&gt;点击前往百度&lt;/a&gt;</code></p>\n<blockquote>\n<p>v-bind 可以简写成 :<br><code>&lt;a :href=&quot;url&quot;&gt;点击前往百度&lt;/a&gt;</code></p>\n</blockquote>\n<blockquote>\n<p>vue中有很多指令，且形式都是 v-???</p>\n</blockquote>\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>单向绑定(v-bind)：数据只能从data流向页面。<br>双向绑定(v-model)：数据能从data流向页面，也能从页面流向data</p>\n<blockquote>\n<p>双向绑定一般用于表单类元素上（如input、select等）<br>v-model:value 可以简写 v-model，因为model默认收集的就是value的值</p>\n</blockquote>\n<h3 id=\"el与data的两种写法\"><a href=\"#el与data的两种写法\" class=\"headerlink\" title=\"el与data的两种写法\"></a>el与data的两种写法</h3><p>el两种写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// el: &#x27;#root&#x27;, //第一种写法：对象式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    v.$mount(<span class=\"string\">&#x27;#root&#x27;</span>) <span class=\"comment\">//第二种写法：函数式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>new Vue时配置el属性</li>\n<li>先创建vue实例，再通过函数$.mount指定el的值</li>\n</ol>\n<p>data两种写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> v = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//第一种写法：对象式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// data: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//     name: &#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//第二种写法：函数式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>:<span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>由vue管理的函数，不要使用箭头函数。使用箭头函数，this就不再是vue实例。</p>\n</blockquote>\n<h3 id=\"MVVM模型\"><a href=\"#MVVM模型\" class=\"headerlink\" title=\"MVVM模型\"></a>MVVM模型</h3><p>M：模型(Model)：对应data中的数据<br>V：视图(View)：模板<br>VM：视图模型(ViewModel)：Vue实例对象</p>\n<blockquote>\n<p>data中所有属性，都会出现在vm上<br>vm上所有属性 及 vue原型上的所有属性，在vue模板中都可以直接使用</p>\n</blockquote>\n<h3 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h3><p>通过一个对象代理对另一个对象中属性的操作（读/写）</p>\n<p>Object.defineProperty的使用<br>通过number操作person.age。即number代理了对person.age的操作</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> number = <span class=\"number\">20</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> person = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;张三&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">sex</span>: <span class=\"string\">&#x27;男&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// age: 18</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&#x27;age&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// value: 18,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// enumerable: true, //控制属性是否可以枚举，默认false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// writable: true, //控制属性是否可以被修改，默认false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// configurable: true, //控制属性是都可以被删除，默认false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//当读取person的age属性时，get函数会被调用，且返回值为age的值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> number</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//当修改person的age属性时，Set函数会被调用，且会收到修改的具体值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;修改person.age值，改为&#x27;</span>, value)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            number = value</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h3><h4 id=\"事件基本使用\"><a href=\"#事件基本使用\" class=\"headerlink\" title=\"事件基本使用\"></a>事件基本使用</h4><ol>\n<li>使用 v-on:xxx 或 @xxx 绑定事件，xxx为事件名</li>\n<li>事件的回调需要配置在methods对象中，最终会在vm上</li>\n<li>methods中配置的函数，不要使用箭头函数，否则this就不是vm了。</li>\n<li>@click=”function” 与 @click=”function($event)” 效果一致，但后者可以传参</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;showInfo1&quot;</span>&gt;</span>按钮1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showInfo2($event,&#x27;vue&#x27;)&quot;</span>&gt;</span>按钮2<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">showInfo1</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;hello&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">showInfo2</span>(<span class=\"params\">event, number</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(number)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h4><ol>\n<li>prevent：阻止默认事件</li>\n<li>stop：阻止事件冒泡</li>\n<li>once：事件只触发一次</li>\n<li>capture：使用事件的捕获模式</li>\n<li>self：只有event.target时当前操作的元素时才触发事件</li>\n<li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://www.bing.com&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span>点击提示信息<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 阻止事件冒泡 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span>点击提示信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 事件只触发一次 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.once</span>=<span class=\"string\">&quot;showInfo&quot;</span>&gt;</span>点击提示信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 使用事件捕获模式 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span> @<span class=\"attr\">click.capture</span>=<span class=\"string\">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class=\"line\">            div1</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class=\"line\">                div2</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 只有event.target时当前操作的元素时才触发事件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;showInfo2&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;showInfo2&quot;</span>&gt;</span>点击提示信息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> @<span class=\"attr\">scroll.passive</span>=<span class=\"string\">&quot;list&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">showInfo</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;hello&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">showInfo2</span>(<span class=\"params\">e</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(e.<span class=\"property\">target</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">showMsg</span>(<span class=\"params\">msg</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">alert</span>(msg)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">list</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;@&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h4><ol>\n<li>vue中常用按键别名：<ol>\n<li>回车：enter</li>\n<li>删除：delete （捕获“删除”和“退格”键）</li>\n<li>退出：esc</li>\n<li>空格：space</li>\n<li>换行：tab（必须配合keydown使用）</li>\n<li>上：up</li>\n<li>下：down</li>\n<li>左：left</li>\n<li>右：right</li>\n</ol>\n</li>\n<li>vue未提供别名的按键，可以使用按键原始key值绑定，但注意要转为kebab-case（短横线命名）</li>\n<li>系统修饰键（特殊）：ctrl、alt、shift、meta（win标键）<ol>\n<li>配合keyup使用：按下修饰键同时，再按下其他键，随后释放其他键，事件才被触发。</li>\n<li>配合keydown使用：正常触发时机</li>\n</ol>\n</li>\n<li>可以使用keyCode指定具体按键（不推荐，不同键盘编码可能不同）</li>\n<li>Vue.config.keyCodes.自定义键名 = 键码，可以定制按键别名</li>\n</ol>\n<h4 id=\"事件总结\"><a href=\"#事件总结\" class=\"headerlink\" title=\"事件总结\"></a>事件总结</h4><p>修饰符可以连写<br><code>&lt;a href=&quot;www.bing.com&quot; @click.stop.prevent=&quot;showInfo()&quot;&gt;点击提示信息&lt;/a&gt;</code></p>\n<p>系统修饰键也可以连写<br><code>&lt;input type=&quot;text&quot; placeholder=&quot;按下ctrl+y提示输入&quot; @keyup.ctrl.y=&quot;showInfo&quot; /&gt;</code></p>\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>计算属性：</p>\n<ol>\n<li>定义：要用的属性不存在，通过已有属性计算而来</li>\n<li>原理：借助Object.defineproperty方法提供的getter和setter</li>\n<li>get函数在 初次读取时会执行一次； 当依赖数据发生改变时再次调用</li>\n<li>优势：与methods实现相比，计算属性会有缓存机制（复用），效率更高，调试方便 </li>\n<li>备注：计算属性最终会出现在vm上，直接使用读取即可。如果计算属性要被修改，必须写set函数去相应修改，且set中要让计算时以来的数据发生修改。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        姓：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;firstName&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;lastName&quot;</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">        全名：<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;张&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;三&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">fullName</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// get调用时机：初次读取fullName；所依赖的数据发生变化时</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// this指vm</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// set调用时机：当fullName被修改时</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">set</span>(<span class=\"params\">value</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"keyword\">const</span> arr = value.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;-&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> = arr[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span> = arr[<span class=\"number\">1</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>计算属性的简写<br>将计算属性直接写成函数的形式</p>\n<blockquote>\n<p>当计算属性只考虑读取，不考虑修改时使用</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">   <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;张&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;三&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"title function_\">fullName</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">firstName</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">lastName</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">         &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">   &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"监视属性\"><a href=\"#监视属性\" class=\"headerlink\" title=\"监视属性\"></a>监视属性</h3><h4 id=\"切换天气案例\"><a href=\"#切换天气案例\" class=\"headerlink\" title=\"切换天气案例\"></a>切换天气案例</h4><p>嵌入表达式的方式实现</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>今天天气很&#123;&#123;isHot?&#x27;炎热&#x27;:&#x27;凉爽&#x27;&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>切换天气<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">change</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>计算属性的方式实现</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>切换天气<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 另一种写法，绑定事件时，@xxx=&quot;yyy&quot;，yyy可以写一些简单的语句 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- &lt;button @click=&quot;isHot=!isHot&quot;&gt;切换天气&lt;/button&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">info</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> ? <span class=\"string\">&#x27;炎热&#x27;</span> : <span class=\"string\">&#x27;凉爽&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">change</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"监视属性-1\"><a href=\"#监视属性-1\" class=\"headerlink\" title=\"监视属性\"></a>监视属性</h4><ol>\n<li>当监视的属性变化时，回调函数自动执行，进行相关操作</li>\n<li>监视的属性必须存在，在能进行监视</li>\n<li>两种写法：<ol>\n<li>new Vue时传入watch配置</li>\n<li>通过vm.$watch监视</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>切换天气<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">info</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> ? <span class=\"string\">&#x27;炎热&#x27;</span> : <span class=\"string\">&#x27;凉爽&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">change</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//初始化时让handler调用一下</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// handler在isHot发生改变时被调用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;isHot被修改：&quot;</span> + oldValue + <span class=\"string\">&quot;--&gt;&quot;</span> + newValue)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 另一种写法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// vm.$watch(&#x27;isHot&#x27;,&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// \timmediate: true, </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// \thandler(newValue, oldValue) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// \t\tconsole.log(&quot;isHot被修改：&quot; + oldValue + &quot;--&gt;&quot; + newValue)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// \t&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"深度监视\"><a href=\"#深度监视\" class=\"headerlink\" title=\"深度监视\"></a>深度监视</h4><ol>\n<li>Vue中watch默认不监视对象内部值的改变（一层）</li>\n<li>配置deep:true可以监视对象内部值的改变（多层）</li>\n</ol>\n<blockquote>\n<p>Vue自身可以检测对象内部值的改变，但提供的watch默认不支持<br>使用watch时根据数据的具体结构，决定是否使用深度监视（效率问题）</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>a的值是：&#123;&#123;numbers.a&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;numbers.a++&quot;</span>&gt;</span>点击使a+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>b的值是：&#123;&#123;numbers.b&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;numbers.b++&quot;</span>&gt;</span>点击使b+1<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">numbers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">b</span>: <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 监视多级结构中某个属性的变化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"string\">&#x27;numbers.a&#x27;</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">handler</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;numbers.a改变了&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 监视多级结构中所有属性的变化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">numbers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">handler</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;numbers改变了&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"监视属性的简写\"><a href=\"#监视属性的简写\" class=\"headerlink\" title=\"监视属性的简写\"></a>监视属性的简写</h4><p>当watch中只有handler函数时，才可以使用。即没有其他类似 immediate、deep 等配置</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;change&quot;</span>&gt;</span>切换天气<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#root&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">info</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> ? <span class=\"string\">&#x27;炎热&#x27;</span> : <span class=\"string\">&#x27;凉爽&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">change</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">isHot</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 完整写法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">isHot</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;isHot被修改：&quot;</span> + oldValue + <span class=\"string\">&quot;--&gt;&quot;</span> + newValue)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 简写</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">isHot</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;isHot被修改：&quot;</span> + oldValue + <span class=\"string\">&quot;--&gt;&quot;</span> + newValue)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 完整写法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        vm.$watch(<span class=\"string\">&#x27;isHot&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">handler</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;isHot被修改：&quot;</span> + oldValue + <span class=\"string\">&quot;--&gt;&quot;</span> + newValue)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//简写</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        vm.$watch(<span class=\"string\">&#x27;isHot&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">newValue, oldValue</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;isHot被修改：&quot;</span> + oldValue + <span class=\"string\">&quot;--&gt;&quot;</span> + newValue)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"computed与watch区别\"><a href=\"#computed与watch区别\" class=\"headerlink\" title=\"computed与watch区别\"></a>computed与watch区别</h4><ol>\n<li>computed能完成的功能，watch都能完成</li>\n<li>watch能完成的功能，computed不一定能完成。比如：watch可以进行异步操作</li>\n</ol>\n<blockquote>\n<p>原则<br>所有被vue管理的函数，最好写成普通函数，这样this指向vm或组件实例对象<br>所有不被vue管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this才指向vm或组件实例对象</p>\n</blockquote>\n<h3 id=\"绑定样式\"><a href=\"#绑定样式\" class=\"headerlink\" title=\"绑定样式\"></a>绑定样式</h3>"},{"title":"RabbitMQ笔记","date":"2022-08-20T05:19:48.000Z","_content":"\n## 概述\n\n### 什么是消息队列\n\n消息（message）是指在应用之间传送的数据。可以是简单的纯文本字符串，也可以很复杂，包含嵌入对象。\n\n消息队列（message queue）是一种应用间的通信方式，消息发送后立即返回，由消息系统来确保可靠传递。消息发布者只管把消息发布到MQ中而不管谁来取，消息使用者只管从MQ中取消息而不管谁发布。这样发布者和使用者都不需要知道对方的存在。\n\n### 为什么使用消息队列\n\n消息队列是一种应用之间的**异步协作机制**。\n\n例如驿站收发快递。快递员并不需要知道收件人的具体信息，只用送到对应驿站即可；收件人也并需要不知道快递员具体信息，只需到驿站取即可。\n但传统收发快递，快递员得等收件人接收后，再去送下一个快递。导致效率的降低。\n再例如订单系统。下单后的逻辑可能包括：扣减库存、生成订单信息、发送短信通知、发红包。最开始这些逻辑是放在一起同步执行。但为了提高服务效率，有些不需要立即生效的操作可以拆分出来异步执行，如发短信通知、发红包等。\n这种场景可以使用MQ，在主流程（扣减库存、生成订单）执行完毕后发送一条消息到MQ，由另外的线程拉取MQ的消息（或由MQ推送），执行相应的业务逻辑。\n\n以上是用于业务解耦的情况，其他常见场景包括最终一致性、广播、错峰控流等。\n\n### RabbitMQ特点\n\nRabbitMQ是由Erlang语言开发的AMQP的开源实现。\nAMQP（Advanced Message Queuing Protocol）：高级消息队列协议。是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。\nRabbitMQ最初起源于金融系统，用于在分布式系统中存储转发消息。在易用性、扩展性、高可用性等方面表现都不错。\n特点：\n1. 可靠性（Reliability）\n使用持久化、传输确认、发布确认等机制来保证可靠性。\n2. 灵活的路由（Flexible Routing）\n在消息进入队列之前，通过Exchange来路由消息。对于典型的路由功能，RabbitMQ提供了一些内置的Exchange实现。对于复杂的路由功能，可以将多个Exchange绑定在一起，也可以通过插件机制实现自己的Exchange。\n3. 消息集群（Clustering）\n多个RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。\n4. 高可用（Highly Availability Queues）\n队列可以在集群中的机器上进行镜像，防止单点故障。\n5. 多种协议（Multi-protocol）\nRabbitMQ支持多种消息队列协议，如 STOMP、MQTT等。\n6. 多语言客户端（Many Clients）\nRabbitMQ支持很多常用语言，如Java、.net、Ruby等。\n7. 管理界面（Management UI）\nRabbitMQ提供了一个易用的用户界面，使用户可以监控和管理消息Broker的许多方面。\n8. 跟踪机制（Tracing）\n如果消息异常，RabbitMQ提供了消息跟踪机制，使用者可以赵卒发生了什么。\n\n## RabbitMQ安装\n\n### 安装\n\n[RabbitMQ官网](https://www.rabbitmq.com/)\n[Erlang官网](https://www.erlang.org/)\n[Erlang和RabbitMQ版本对照](https://www.rabbitmq.com/which-erlang.html)\n\n依赖包安装 `yum install gcc glibc-devel make ncurses-devel openssl-devel xmlto -y`\n解压erlang源码包 `tar -zxvf otp_src_25.0.4.tar.gz`\n创建erlang的安装目录 `mkdir /usr/local/erlang`\n进入erlang的解压目录 `cd otp_src_25.0.4`\n配置erlang的安装信息 `./configure --prefix=/usr/local/erlang --without-javac`\n编译安装 `make && make install`\n配置环境变量 `vim /etc/profile`\n添加如下内容：\n~~~\nERL_HOME=/usr/local/erlang\nPATH=$ERL_HOME/bin:$PATH\nexport ERL_HOME PATH\n~~~\n更新环境变量 `source /etc/profile`\n查看erlang版本 `erl -version`\n![查看erlang版本](../images/RabbitMQ笔记/查看erlang版本.png)\n如上图，即为安装成功。然后开始安装RabbitMQ。\n\n安装RabbitMQ `rpm -ivh --nodeps rabbitmq-server-3.10.7-1.el8.noarch.rpm`\n\n### RabbitMQ常用命令\n\n#### 启动与关闭\n\n启动 `rabbitmq-server start`\n> 可能会出现错误，错误原因是/var/lib/rabbitmq/.erlang.cookie文件权限不够\n> 解决方案：`chmod rabbitmq:rabbitmq/var.lib.rabbitmq/.erlang.cookie` `chmod 400 /var/lib/rabbitmq/.erlang.cookie`\n\n停止服务 `rabbitmqctl stop`\n\n#### 插件管理\n\n添加插件 `rabbitmq-plugins enable {插件名}`\n> RabbitMQ启动后可以使用浏览器进入管控台，但默认情况RabbitMQ不允许直接使用浏览器访问。默认访问端口 15672\n> 因此需要添加插件 `rabbitmq-plugins enable rabbitmq_management`\n\n删除插件 `rabbitmq-plugins disable {插件名}`\n\n#### 用户管理\n\n浏览器访问管控台：\n![浏览器访问管控台](../images/RabbitMQ笔记/浏览器访问管控台.png)\n\n默认用户密码均为 guest\n但只能本机登录，否则报错`User can only log in via localhost`\n\n添加用户 `rabbitmqctl add_user {username} {password}`\n删除用户 `rabbitmqctl delete_user {username}`\n修改密码 `rabbitmqctl change_password {username} {newpassword}`\n设置用户角色 `rabbitmqctl set_user_tags {username} {tag}`\n\ntag参数表示用户角色取值为：management、monitoring、policymaker、administrator\n角色详解：\n\nmanagement：用户可以通过AMQP做的任何事外加\n1. 列出自己可以通过AMQP登入的 virtual hosts\n2. 查看自己的 virtual hosts 中的 queues、exchanges 和 bindings\n3. 查看和关闭自己的 channels 和 connections\n4. 查看有关自己的 virtual hosts 的“全局”的统计信息，包含其他用户在这些 virtual hosts 中的活动\n\npolicymaker：management 可以做的任何事外加\n1. 查看、创建和删除自己的 virtual hosts 所属的 policies 和 parameters\n\nmonitoring：management 可以做的任何事外加\n1. 列出所有的 virtual hosts ，包括他们不能登录的 virtual hosts\n2. 查看其他用户的 connections 和 channels\n3. 查看节点级别的数据如 clustering 和 memory 使用情况\n4. 查看真正的关于所有 virtual hosts 的全局统计信息\n\nadministrator：policymaker 和 monitoring 可以做的任何事外加\n1. 创建和删除 virtual hosts\n2. 查看、创建和删除 users\n3. 查看、创建和删除 permissions\n4. 关闭其他用户的 connections\n\n#### 权限管理\n\n授权命令 `rabbitmqctl set permissions [-p vhostpath] {user} {conf} {write} {read}`\n-p vhostpath:用于指定一个资源的命名空间，例如 -p / 表示根路径命名空间\nuser：用于指定要为哪个用户授权填写用户名\nconf：一个正则表达式match 哪些配置资源能被该用户配置\nwrite：一个正则表达式match 哪些配置资源能被该用户写\nread：一个正则表达式match 哪些配置资源能被该用户读\n\n查看指定命名空间下的用户权限 `rabbitmqctl list permissions [vhostpath]`\n\n查看指定用户下的权限 `rabbitmqctl list user_permissions {username}`\n\n#### vhost管理\n\nvhost是RabbitMQ中的一个命名空间，可以限制消息存放位置，利用这个命名空间进行权限的控制。类似windows文件夹，在不同文件夹存放不同文件。\n\n添加vhost `rabbitmqctl add vhost temp`\n删除vhost `rabbitmqctl delete vhost {name}`\n\n## 消息的发送和接收\n\n### 消息发送和接收机制\n\n所有的mq产品从模型抽象上来说都是一样的过程：\n消费者订阅某个队列。生产者创建消息，然后发布到队列中，最后将消息发送到监听的消费者。\n\n![AMQP协议机制](../images/RabbitMQ笔记/AMQP协议机制.png)\n\n1. Message：\n消息，消息是不具体的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括 routing-key （路由键）、 priority （相对于其他消息的优先权）、 delivery-mode （指出该消息可能需要持久性存储）等。\n2. Publisher：\n消息的生产者，也是一个向交换器发布消息的客户端程序。\n3. Exchange：\n交换机，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。\n4. Binging：\n绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。\n5. Queue：\n消息队列，用来保存消息直到发送给消费者。他是消息的容器，也是消息的终点。一个消息可以投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。\n6. Connection：\n网络连接，比如一个TCP连接。\n7. Channel：\n信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP命令都是通过信道发送出去的，不管是发布消息、订阅队列还是接收消息，都是通过信道完成的。因为对于操作系统来说，建立和销毁TCP连接开销较大，所以引入信道的概念，以复用一条TCP连接。\n8. Consumer：\n信息的消费者，表示一个从消息队列中取得消息的客户端应用程序。\n9. Virtual Host：\n虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质是一个缩小版的RabbitMQ服务器，有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在连接时指定，RabbitMQ默认的vhost是/。\n10. Broker：\n表示消息队列服务器实体。\n\n### AMQP中的消息路由\n\n生产者将消息发布到Exchange上，消息最终到达队列并被消费者接收，而binding决定交换器的消息应该发送到哪个队列。\n\n### Exchange类型\n\nExchange分发消息时根据类型的不同分发策略有区别，有四种类型：direct、fanout、topic、headers。\nheaders 匹配AMQP消息的 header 而不是路由键，此外 headers 交换器和 direct 交换器完全一致，但性能差很多。几乎用不到了。\n\n1. direct\n消息中的路由键如果和 Binding 中的 binding key 一致，交换器就将消息发送到对应的队列中。路由键与队列名完全一致。他是**完全匹配、单播模式**。\n如果没有 binding key 与路由键一致，数据会丢失。\n![direct交换器](../images/RabbitMQ笔记/direct交换器.png)\n\n2. fanout\n每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息会被转发到与该交换器绑定的所有队列上。类似**广播**，fanout 类型转发消息是最快的。\n![fanout交换器](../images/RabbitMQ笔记/fanout交换器.png)\n\n3. topic\ntopic 交换器通过匹配模式分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。他将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样会识别两个通配符：'#'和'\\*'。# 匹配0或多个单词，* 匹配一个单词。\n它也是一种广播，但是是**有一定条件的广播**。\n![topic交换器](../images/RabbitMQ笔记/topic交换器.png)\n\n### Java发送和接收Queue\n\nmaven依赖\n~~~xml\n    <dependency>\n      <groupId>com.rabbitmq</groupId>\n      <artifactId>amqp-client</artifactId>\n      <version>5.14.2</version>\n    </dependency>\n~~~\n\n消息发送：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class Send {\n    public static void main(String[] args) {\n        //创建连接工厂对象\n        ConnectionFactory factory = new ConnectionFactory();\n        //配置RabbitMQ的连接相关信息\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n        Connection connection = null;//定义连接对象\n        Channel channel = null;//定义通道对象\n        try {\n            connection = factory.newConnection();//实例化连接对象\n            channel = connection.createChannel();// 实例化通道对象\n            String message = \"hello MQ!\";\n            //创建队列，名为myQueue\n            /*\n            参数1为 队列名\n            参数2为 是否持久化队列\n            参数3为 是否排外 如果排外则这个队列只允许一个消费者监听\n            参数4为 是都自动删除队列 为true表示当队列中没有消息，也没有消费者连接时会自动删除这个队列\n            参数5为 队列的一些属性设置，通常为null\n            注意：\n                1. 声明队列时，队列名称如果已经存在则放弃声明。如果不存在，则会声明一个新的队列\n                2. 队列名可以取值任意，但是要与消息接收时完全一致\n                3. 这行代码是可有可无的，但是一定要在发送消息前确认队列名称已经存在，否则会出现问题\n             */\n            channel.queueDeclare(\"myQueue\", true, false, false, null);\n            //发送消息到指定队列\n            /*\n            参数1为 交换机名称，为空不使用交换机\n            参数2为 队列名或routing，当指定交换机名称后，这个值就是routingKey\n            参数3为 消息属性 通常为空\n            消息4为 具体的消息的字节数组\n            注意：队列名必须与接收时完全一致\n             */\n            channel.basicPublish(\"\", \"myQueue\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"成功发送消息：\" + message);\n\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    channel.close();\n                }\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (IOException | TimeoutException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n~~~\n\n> 连接时，使用的端口号为 **5672** 。15672 是访问web时使用的。\n> 另外，注意用户是否有连接权限，以及端口是否开放。\n\n消息接收:\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class Receive {\n    public static void main(String[] args) {\n        //创建连接工厂对象\n        ConnectionFactory factory = new ConnectionFactory();\n        //配置RabbitMQ的连接相关信息\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n        Connection connection = null;//定义连接对象\n        Channel channel = null;//定义通道对象\n        try {\n            connection = factory.newConnection();//实例化连接对象\n            channel = connection.createChannel();// 实例化通道对象\n            channel.queueDeclare(\"myQueue\", true, false, false, null);\n            //接收消息\n            /*\n            参数1为 当前消费者需要监听的队列名称 队列名必须要与发送时队列名完全一致\n            参数2为 消息是否自动确认。true表示自动确认，接受完消息会自动将消息从队列中溢出\n            参数3为 消息接收者的标签，用于当多个消费者同时监听一个队列时区分不同消费者，通常为空字符串\n            参数4为 消息接收的回调方法，这个方法具体完成对消息的处理代码\n            注意：使用了 basicConsume 方法后，会启动一个线程持续监听队列，如果队列中有新的数据进入，会自动接收消息\n                因此不能关闭通道和连接对象\n             */\n            channel.basicConsume(\"myQueue\", true, \"\", new DefaultConsumer(channel) {\n                //消息的具体接收和处理方法\n                @Override\n                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                    String message = new String(body, StandardCharsets.UTF_8);\n                    System.out.println(\"成功接收消息：\" + message);\n                }\n            });\n            //不能关闭通道和连接，关闭可能会造成接收时抛出异常或无法接收消息\n            //channel.close();\n            //connection.close();\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n### Java绑定Exchange发送和接收消息\n\nAMQP协议中的核心思想是生产者和消费者解耦，生产者从不直接将消息发送给队列。生产者通常不知道是否一个消息会被发送到队列中，只是将消息发送到一个交换机。\n由 Exchange 来接收，然后 Exchange 根据特定的策略转发到 Queue 进行存储。Exchange 类似一个交换机，将各个消息分发到对应的队列。\n\n实际应用中只需要定义好 Exchange 的路由策略。\n生产者只面向 Exchange 发布消息，消费者只面向 Queue 消费消息，Exchange 定义消息的路由，将各个层面的消息隔离开，降低了整体的耦合度。\n\n#### direct-消息发送与接收\n\n消息发送：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class SendDirect {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            String message = \"hello direct MQ!\";\n\n            channel.queueDeclare(\"myDirectQueue\", true, false, false, null);\n            //声明一个交换机\n            /*\n            参数1为 交换机的名称\n            参数2为 交换机的类型，取值 direct、fanout、topic、headers\n            参数3为 是否为持久化的交换机\n            注意：\n                声明交换机时，如果这个交换机已经存在，则会放弃声明。如果不存在，则声明交换机\n                这行代码是可有可无的，但是使用前必须确保这个交换机被声明\n             */\n            channel.exchangeDeclare(\"directExchange\", \"direct\", true);\n            //将队列绑定到交换机\n            /*\n            参数1为 队列的名称\n            参数2为 交换机名称\n            参数3为 消息的RoutingKey（BindingKey）\n            注意：\n                在进行队列和交换机的绑定时，必须确保交换机和队列已经成功声明\n             */\n            channel.queueBind(\"myDirectQueue\", \"directExchange\", \"directRoutingKey\");\n            //发送消息到指定队列\n            /*\n            参数1为 交换机名称\n            参数2为 消息的RoutingKey 如果消息的RoutingKey和某个队列与交换机绑定的RoutingKey一致，那么这个消息就会发送到指定队列中\n            注意：\n                发送消息时必须确保交换机已经创建并且确保已经正确绑定到某个队列\n             */\n            channel.basicPublish(\"directExchange\", \"directRoutingKey\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"成功发送消息：\" + message);\n\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    channel.close();\n                }\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (IOException | TimeoutException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n~~~\n\n消息接收：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class ReceiveDirect {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            \n            channel.queueDeclare(\"myDirectQueue\", true, false, false, null);\n            channel.exchangeDeclare(\"directExchange\", \"direct\", true);\n            channel.queueBind(\"myDirectQueue\", \"directExchange\", \"directRoutingKey\");\n            /*\n            监听某个队列并获取队列中的数据\n            注意：\n                当前被监听的队列必须已经存在并正确地绑定到了某个交换机中\n             */\n            channel.basicConsume(\"myDirectQueue\", true, \"\", new DefaultConsumer(channel) {\n                @Override\n                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                    String message = new String(body, StandardCharsets.UTF_8);\n                    System.out.println(\"成功接收消息：\" + message);\n                }\n            });\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n#### fanout-消息发送与接收\n\n类似电视调频道，需要先调到指定频道才能看想要的节目。\n所以需要消费者先监听，才能接收到消息。\n\n消息接收：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class ReceiveFanout {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            /*\n            由于 fanout 类型的交换机的消息是类似于广播的模式，它不需要绑定 RoutingKey\n            而又可能会有很多个消费者来接收这个交换机中的数据，因此创建队列是要创建一个随机的队列名称\n\n            没有参数的 queueDeclare方法会创建一个名字随机的队列\n            这个队列的数据是非持久的，是排外的（同时最多只允许有一个消费者监听当前队列），会自动删除（当没有任何消费者监听队列时，这个队列会自动删除）\n\n            getQueue方法用于获取这个随机的队列名\n             */\n            String queueName = channel.queueDeclare().getQueue();\n            channel.exchangeDeclare(\"fanoutExchange\", \"fanout\", true);\n            //将这个随机的队列绑定到交换机中，由于是fanout类型的交换机，因此不需要指定RoutingKey进行绑定\n            channel.queueBind(queueName, \"fanoutExchange\", \"\");\n            /*\n            监听某个队列并获取队列中的数据\n            注意：\n                当前被监听的队列必须已经存在并正确地绑定到了某个交换机中\n             */\n            channel.basicConsume(queueName, true, \"\", new DefaultConsumer(channel) {\n                @Override\n                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                    String message = new String(body, StandardCharsets.UTF_8);\n                    System.out.println(\"成功接收消息：\" + message);\n                }\n            });\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n消息发送：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class SendFanout {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            String message = \"hello fanout MQ!\";\n            /*\n            由于使用了fanout类型的交换机，因此消息接收方可能会有多个，不建议在消息发送时创建队列，以及绑定队列\n            建议在消费者中创建队列并绑定交换机\n            但是发送消息时至少应该确保交换机存在\n             */\n//            channel.queueDeclare(\"myDirectQueue\", true, false, false, null);\n//            channel.queueBind(\"myDirectQueue\", \"directExchange\", \"directRoutingKey\");\n            channel.exchangeDeclare(\"directExchange\", \"direct\", true);\n            channel.basicPublish(\"fanoutExchange\", \"\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"成功发送消息：\" + message);\n\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    channel.close();\n                }\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (IOException | TimeoutException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n~~~\n\n明确指定队列名称并进行了和交换机的绑定，可以保证fanout类型的消息不会丢失\n但是这么写没有意义，因为消费者最终可能有很多，不能让所有消费者监听同一个队列\n\n#### topic-消息发送与接收\n\n接收消息：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class ReceiveTopic {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n\n            channel.queueDeclare(\"topicQueue\",true,false,false,null);\n            channel.exchangeDeclare(\"topicExchange\", \"topic\", true);\n            channel.queueBind(\"topicQueue\", \"topicExchange\", \"aa.*\");\n            channel.basicConsume(\"topicQueue\", true, \"\", new DefaultConsumer(channel) {\n                @Override\n                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                    String message = new String(body, StandardCharsets.UTF_8);\n                    System.out.println(\"成功接收消息：\" + message);\n                }\n            });\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n发送消息：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class SendTopic {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            String message = \"hello topic MQ!\";\n\n            channel.exchangeDeclare(\"topicExchange\", \"topic\", true);\n            channel.basicPublish(\"topicExchange\", \"aa.a\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"成功发送消息：\" + message);\n\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    channel.close();\n                }\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (IOException | TimeoutException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n~~~\n\n#### fanout与topic使用场景对比\n\ntopic 类型的交换机和 fanout 类型的交换机一样，都是一对多的交换机类型，都可以实现将一个消息同时发送给多个队列 \n\nfanout 更适合于使用在一个功能不同的进程来获取数据\n例如手机app中的消息推送，一个app可能会有很多用户安装，然后他们都会启动一个随机队列来接受自己的数据\n\ntopic 更适合不同功能模块来接收同一个消息\n例如商城下单成功后需要发送消息到队列中\n假如 RoutingKey 为 order.success 。物流系统监听 order.* ；发票系统监听 order.*\n\nTopic 可以使用随机的队列名也可以使用明确的队列名，但如果功能比较重要，建议使用明确的队列名并要求持久化的队列。\n\n#### 事务消息\n\n事务消息和数据库的事务类似，只是MQ中的消息要保证消息是否全部发送成功，防止信息都是的一种策略。\n\nRabbitMQ有两种方式来解决这个问题：\n1. 通过AMQP提供的事务机制实现\n2. 使用发送者确认模式实现（效率要高一些）\n\n启用事务发送消息：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class SendTransaction {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            String message = \"hello Transaction!\";\n\n            channel.queueDeclare(\"transactionQueue\", true, false, false, null);\n            channel.exchangeDeclare(\"transactionExchange\", \"direct\", true);\n            channel.queueBind(\"transactionQueue\", \"transactionExchange\", \"transactionRoutingKey\");\n\n            //启动一个事务，启动事务后所有写入到队列的消息必须显式地调用 txCommit 提交事务或txRollback 回滚事务\n            channel.txSelect();\n            channel.basicPublish(\"transactionExchange\", \"transactionRoutingKey\", null, message.getBytes(StandardCharsets.UTF_8));\n            channel.basicPublish(\"transactionExchange\", \"transactionRoutingKey\", null, message.getBytes(StandardCharsets.UTF_8));\n            //提交事务，如果调用 txSelect 启动了事务，必须显示调用事物的提交\n            //否则消息不会真正写入队列，提交后会将内存中的消息写入队列并释放内存\n            channel.txCommit();\n            System.out.println(\"成功发送消息：\" + message);\n\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    //回滚事务，放弃当前事务中所有没有提交的消息，释放内存\n                    channel.txRollback();\n                    channel.close();\n                }\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (IOException | TimeoutException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n~~~\n\n> 当消费者开启事务后，即使不做提交。依然可以获取队列中的消息并且消息从队列中移除\n> **暂时 事务对接收者没有影响**\n\n#### 发送者确认模式\n\nConfirm 发送方确认模式使用和事务类似，也是通过设置 channel 进行发送方确认的，最终达到确保所有消息全部发送成功的目的。\n\n代码大部分相同（加减几行的区别），就不单独贴代码块了。~~上面大段重复好难受~~\n\n启用发送者确认模式\n`channel.confirmSelect();`\n\n方式一：\nchannel.waiForConfirms() 普通发送方确认模式\n可以有一个参数，超时时间（毫秒值）\n\n会阻塞线程等待服务返回响应，用于是否消息发送成功，如果服务器确认消息已经发送完成则返回true，都则返回false\n可以给这个方法一个毫秒值用于确认我们的需要等待服务确认的时间\n如果超过了指定时间以后则会抛出异常 InterruptedException 表示服务器出现了问题需要补发消息或将消息缓存到 redis 中，稍后利用定时任务补发\n无论返回false还是抛出异常，消息都有可能发送成功或发送失败\n如果要求这个消息一定要发送到队列，那么可以采用消息补发（重新发送）\n\n方式二：\nchannel.waitForConfirmsOrDie() 批量确认模式\n它会向服务中确认之前当前通道中发送的所有消息是否已经全部写入成功\n这个方法没有返回值，如果服务器中有一条消息没有能够成功或向服务器发送确认时服务不可访问，都被认定为消息发送失败。可能有消息没有发送成功，需要进行消息补发\n如果无法向服务器获取确认信息，那么方法会抛出 InterruptedException 异常，这时就需要补发\n这个方法也可以指定超时时间，同上\n\n> 批量消息确认的速度比普通消息确认要快，但是一旦出现需要补发的情况，不能确认具体是哪条消息没有发送完成，需要将本次所有消息全部补发\n\n方式三：\nchannel.addConfirmListener() 异步确认模式\n\n使用方法：\n~~~java\n            /*\n            异步消息确认监听器，需要在发送消息前启动\n             */\n            channel.addConfirmListener(new ConfirmListener() {\n                //消息确认以后的回调方法\n                /*\n                参数1 被确认的消息编号 从1开始自动递增标记当前是第几条消息\n                参数2 当前消息是否同时确认了多个\n                注意：如果参数2为true，则表示本次确认同时确认了多条消息；如果为false，则表示之确认了当前编号的消息\n                 */\n                @Override\n                public void handleAck(long l, boolean b) throws IOException {\n\n                }\n                //消息没有确认的回调方法，执行消息补发之类的操作\n                /*\n                参数1 没有被确认的消息编号 从1开始自动递增标记当前是第几条消息\n                参数2 当前消息是否同时没有确认了多个\n                注意：如果参数2为true 则表示小于当前编号的所有消息可能都没有发送成功，需要补发；为false 则表示当前编号的消息没有发送成功，需要补发\n                 */\n                @Override\n                public void handleNack(long l, boolean b) throws IOException {\n\n                }\n            });\n~~~\n\n#### 消费者确认模式\n\n为保证消息从队列可靠地到达消费者，消费者可以在队列声明时指定 noAck 参数，为 false 时，RabbitMQ会等待消费者显式发回ack信号后才从内存（和磁盘，如果持久化的话）中移去消息。否则，RabbitMQ会在队列中的消息被消费后立即删除它。\n\n手动确认主要使用以下方法：\n\nbasicAck() 用于肯定确认\nbasicRecover() 路由不成功的消息，使用recover重新发送到队列\nbasicReject() 拒收消息，可以设置是否放回到队列中。并且只能一次拒绝一条消息。批量拒绝消息使用 basicNack()\nbasicNack() 可以一次拒绝多条消息\n\n~~~java\n    //获取当前消息是否被接收过一次，false没被接受过，true被接收过，也可能处理完成，需要进行消息防重复处理\n    envelope.isRedeliver();\n\n    //获取消息的编号\n    long deliveryTag = envelope.getDeliveryTag();\n    //获取当前内部类的通道\n    Channel c = this.getChannel();\n    //手动确认这个消息，确认以后表示当前消息已经成功处理了，需要从队列中移除\n    //这个方法应该在当前消息处理程序全部完成后执行\n    //参数1 消息的序号\n    //参数2 为是否确认多个，为true表示确认小等于当前编号的所有消息，false单个确认，确认当前消息\n    //注意：如果启动事务，而消息确认模式为手动确认。那么必须要提交事务，否则即使调用确认调用方法，消息也不回从队列中移除\n    c.basicAck(deliveryTag,true);\n~~~\n\n## springboot集成RabbitMQ\n\n和上面单独使用Java进行收发消息的流程基本一致\n\nmaven依赖\n~~~xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-amqp</artifactId>\n        </dependency>\n~~~\n\n配置文件\n~~~\nspring.rabbitmq.host=0.0.0.0\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=root\nspring.rabbitmq.password=root\n~~~\n\n配置类（用于声明队列和交换机，以及绑定队列和交换机）\n~~~java\npackage com.example.springboottext.rabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class RabbitMQConfig {\n\n    //配置一个Direct类型的交换机\n    @Bean\n    public DirectExchange directExchange() {\n        return new DirectExchange(\"bootDirectExchange\", true, false);\n    }\n\n    //配置一个队列\n    @Bean\n    public Queue directQueue() {\n        return new Queue(\"bootDirectQueue\", true, false, false, null);\n    }\n\n    /**\n     * 配置一个队列和交换机的绑定\n     *\n     * @param directQueue    需要绑定的队列对象，参数名必须要和某个@Bean的方法名完全相同以进行自动注入\n     * @param directExchange 需要绑定的交换机对象，参数名必须要和某个@Bean的方法名完全相同以进行自动注入\n     * @return\n     */\n    @Bean\n    public Binding directBinding(Queue directQueue, DirectExchange directExchange) {\n        //完成绑定\n        // 参数1 需要绑定的队列\n        // 参数2 需要绑定的交换机\n        // 参数3 绑定时的RoutingKey\n        return BindingBuilder.bind(directQueue).to(directExchange).with(\"RoutingKey\");\n    }\n\n    //配置一个Fanout类型的交换机\n    @Bean\n    public FanoutExchange fanoutExchange() {\n        return new FanoutExchange(\"fanoutExchange\");\n    }\n\n    //配置一个Topic类型的交换机\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(\"topicExchange\");\n    }\n\n}\n~~~\n\nService类（发送消息）\n~~~java\npackage com.example.springboottext.rabbitmq.service.impl;\n\nimport com.example.springboottext.rabbitmq.service.SendService;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n@Service(\"sendService\")\npublic class SendServiceImpl implements SendService {\n\n    //注入amqp的模板类，里用这个对象来发送和接受消息\n    @Resource\n    private AmqpTemplate amqpTemplate;\n\n    @Override\n    public void sendMessage(String message) {\n\n        /*\n        发送消息\n        参数1 交换机名\n        参数2 RoutingKey\n        参数3 具体消息\n         */\n        amqpTemplate.convertAndSend(\"bootDirectExchange\", \"RoutingKey\", message);\n    }\n\n    @Override\n    public void sendFanoutMessage(String message) {\n        amqpTemplate.convertAndSend(\"fanoutExchange\", \"\", message);\n    }\n\n    @Override\n    public void sendTopicMessage(String message) {\n        amqpTemplate.convertAndSend(\"topicExchange\", \"aa\", message);\n    }\n}\n~~~\n\nService类（接收消息）\n~~~java\npackage com.example.springboottext.rabbitmq.service.impl;\n\nimport com.example.springboottext.rabbitmq.service.ReceiveService;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.amqp.rabbit.annotation.Exchange;\nimport org.springframework.amqp.rabbit.annotation.Queue;\nimport org.springframework.amqp.rabbit.annotation.QueueBinding;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n@Service(\"receiveService\")\npublic class ReceiveServiceImpl implements ReceiveService {\n\n    @Resource\n    private AmqpTemplate amqpTemplate;\n\n    /**\n     * 这个接收不是不间断的接收消息，每执行一次只能接收一次。如果有新消息，不会自动接收\n     */\n    @Override\n    public void receive() {\n        String bootDirectQueue = (String) amqpTemplate.receiveAndConvert(\"bootDirectQueue\");\n        System.out.println(bootDirectQueue);\n    }\n\n    /**\n     * @param message 接收到的具体消息数据\n     *                注意：如果当前监听方法正常结束Spring会自动确认消息，如果出现异常则不会确认消息\n     *                因此在消息处理时，应该做好消息的防重复处理\n     * @RabbitListener 注解用于标记当前方法是一个RabbitMQ的消息监听方法，作用是持续性的自动接收消息\n     * 这个方法不需要手动调用，Spring会自动运行这个监听\n     * queues 用于指定一个已经存在的队列名，用于进行队列的监听\n     */\n    @Override\n    @RabbitListener(queues = \"bootDirectQueue\")\n    public void directReceive(String message) {\n        System.out.println(message);\n    }\n\n    @Override\n    @RabbitListener(bindings = {\n            //@QueueBinding 注解完成队列和交换机的绑定\n            @QueueBinding(\n                    value = @Queue(), //@Queue 创建一个队列（没有指定参数则表示创建一个随机队列\n                    exchange = @Exchange(name = \"fanoutExchange\", type = \"fanout\") //@Exchange 创建一个交换机\n            )})\n    public void fanoutReceive01(String message) {\n        System.out.println(\"01--\" + message);\n    }\n\n    @Override\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue(),\n                    exchange = @Exchange(name = \"fanoutExchange\", type = \"fanout\")\n            )})\n    public void fanoutReceive02(String message) {\n        System.out.println(\"02--\" + message);\n    }\n\n    @Override\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue(\"topic01\"),\n                    key = \"aa\",\n                    exchange = @Exchange(name = \"topicExchange\", type = \"topic\"))\n    })\n    public void topicReceive01(String message) {\n        System.out.println(\"01--\" + message);\n    }\n\n    @Override\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue(\"topic02\"),\n                    key = \"aa.*\",\n                    exchange = @Exchange(name = \"topicExchange\", type = \"topic\"))\n    })\n    public void topicReceive02(String message) {\n        System.out.println(\"02--\" + message);\n    }\n\n    @Override\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue(\"topic03\"),\n                    key = \"aa.#\",\n                    exchange = @Exchange(name = \"topicExchange\", type = \"topic\"))\n    })\n    public void topicReceive03(String message) {\n        System.out.println(\"03--\" + message);\n    }\n}\n~~~\n\n## RabbitMQ集群\n\n普通模式（默认）：\n对于Queue来说，消息实体只存在于其中的一个节点A/B两个节点仅有相同的元数据，即队列结构。\n交换机的所有元数据在所有节点上是一致的，而队列的完整信息只有在创建它的节点上，各个节点仅有相同的元数据，即队列结构。\n当消息进入A节点的Queue中后，consumer从B节点拉取数据时，RabbitMQ会临时在A、B间进行消息传输，把A中的消息实体取出并经过B发送给consumer。\n所以consumer应尽量连接每个节点，从中取消息。即对于同一个逻辑队列要在多个节点建立物理Queue，否则无论consumer连A或B，出口总在A，会产生瓶颈。\n该模式存在一个问题就是当A节点故障后，B节点无法取到A节点中还未消费的消息实体。\n如果做个消息持久化，那么等A节点恢复，然后才可被消费；如果没有做持久化，那就会丢失消息。\n该模式非常适合非持久化队列，只有该队列是非持久化的，客户端才能重新连接到集群中的其他节点，并且重新创建队列。如果该队列是持久化的，那么唯一的办法就是将故障节点恢复起来。\n\n镜像模式（高可用模式）：\n把需要的队列做成镜像模式，存在于多个节点数据Rabbitmg的HA方案。\n该模式解决了上述问题，其实质和普通模式的不同之处在于，消息实体会主动在镜像节点间同步，而不会在consumer取数据时临时拉取。\n该模式带来的副作用也很明显，除了降低系统性能以外，如果镜像队列过多，加之有大量的消息进入，集群内部的网铬带宽将会被这种同步通讯大大消耗掉，所以在对可靠性要求较高的场合中适用。\n\n### 配置集群\n\n1. 配置cookie文件\nErlang Cookie 是保障不同节点可以互相通信的密钥，要保证集群中不同节点互相通信，必须共享相同的 Erlang Cookie，具体存放在 `/var/lib/rabbitmq/.erlang.cookie`\n> 跨服务器拷贝 `scp /var/lib/rabbitmq/.erlang.cookie ip:/var/lib/rabbitmq`\n\n2. 分别启动 RabbitMQ 服务\n3. 将某个 RabbitMQ 加入到某个服务器节点\n`rabbitmqctl stop_app`\n`rabbitmqctl join_cluster rabbit@A`\n`rabbitmqctl start_app`\nA 为某个机器的 hostname；在 hostname 为B的机器中执行这些命令\n\n查看集群状态：`rabbitmqctl cluster_status`\n\n### springboot链接集群\n\n配置\n~~~properties\nspring.rabbitmq.addresses=ip1:port,ip2:port\nspring.rabbitmq.username=root\nspring.rabbitmq.password=root\n~~~\n\n### 配置镜像模式\n\n任意节点执行：`rabbitmqctl set_policy ha-all \"^\" '{\"ha-mode\":\"all\"}'`\n~~~text\n$ rabbitmqctl set_policy [-p Vhost] Name Pattern Definition [Priority]\n\n-p Vhost: 可选参数，针对指定vhost下的queue进行设置\nName: policy的名称\nPattern: queue的匹配模式(正则表达式)\nDefinition: 镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode\n    ha-mode: 指明镜像队列的模式，有效值为 all/exactly/nodes\n        all: 表示在集群中所有的节点上进行镜像\n        exactly: 表示在指定个数的节点上进行镜像，节点的个数由ha-params指定\n        nodes: 表示在指定的节点上进行镜像，节点名称通过ha-params指定\n    ha-params: ha-mode模式需要用到的参数\n    ha-sync-mode: 进行队列中消息的同步方式，有效值为automatic和manual\npriority: 可选参数，policy的优先级\n~~~\n\n也可在web管控台中 Admin 中的 Policies 中进行配置。","source":"_posts/RabbitMQ笔记.md","raw":"---\ntitle: RabbitMQ笔记\ndate: 2022-08-20 13:19:48\ntags:\n- RabbitMQ\n- 消息队列\ncategories:\n- 学习笔记\n---\n\n## 概述\n\n### 什么是消息队列\n\n消息（message）是指在应用之间传送的数据。可以是简单的纯文本字符串，也可以很复杂，包含嵌入对象。\n\n消息队列（message queue）是一种应用间的通信方式，消息发送后立即返回，由消息系统来确保可靠传递。消息发布者只管把消息发布到MQ中而不管谁来取，消息使用者只管从MQ中取消息而不管谁发布。这样发布者和使用者都不需要知道对方的存在。\n\n### 为什么使用消息队列\n\n消息队列是一种应用之间的**异步协作机制**。\n\n例如驿站收发快递。快递员并不需要知道收件人的具体信息，只用送到对应驿站即可；收件人也并需要不知道快递员具体信息，只需到驿站取即可。\n但传统收发快递，快递员得等收件人接收后，再去送下一个快递。导致效率的降低。\n再例如订单系统。下单后的逻辑可能包括：扣减库存、生成订单信息、发送短信通知、发红包。最开始这些逻辑是放在一起同步执行。但为了提高服务效率，有些不需要立即生效的操作可以拆分出来异步执行，如发短信通知、发红包等。\n这种场景可以使用MQ，在主流程（扣减库存、生成订单）执行完毕后发送一条消息到MQ，由另外的线程拉取MQ的消息（或由MQ推送），执行相应的业务逻辑。\n\n以上是用于业务解耦的情况，其他常见场景包括最终一致性、广播、错峰控流等。\n\n### RabbitMQ特点\n\nRabbitMQ是由Erlang语言开发的AMQP的开源实现。\nAMQP（Advanced Message Queuing Protocol）：高级消息队列协议。是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。\nRabbitMQ最初起源于金融系统，用于在分布式系统中存储转发消息。在易用性、扩展性、高可用性等方面表现都不错。\n特点：\n1. 可靠性（Reliability）\n使用持久化、传输确认、发布确认等机制来保证可靠性。\n2. 灵活的路由（Flexible Routing）\n在消息进入队列之前，通过Exchange来路由消息。对于典型的路由功能，RabbitMQ提供了一些内置的Exchange实现。对于复杂的路由功能，可以将多个Exchange绑定在一起，也可以通过插件机制实现自己的Exchange。\n3. 消息集群（Clustering）\n多个RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。\n4. 高可用（Highly Availability Queues）\n队列可以在集群中的机器上进行镜像，防止单点故障。\n5. 多种协议（Multi-protocol）\nRabbitMQ支持多种消息队列协议，如 STOMP、MQTT等。\n6. 多语言客户端（Many Clients）\nRabbitMQ支持很多常用语言，如Java、.net、Ruby等。\n7. 管理界面（Management UI）\nRabbitMQ提供了一个易用的用户界面，使用户可以监控和管理消息Broker的许多方面。\n8. 跟踪机制（Tracing）\n如果消息异常，RabbitMQ提供了消息跟踪机制，使用者可以赵卒发生了什么。\n\n## RabbitMQ安装\n\n### 安装\n\n[RabbitMQ官网](https://www.rabbitmq.com/)\n[Erlang官网](https://www.erlang.org/)\n[Erlang和RabbitMQ版本对照](https://www.rabbitmq.com/which-erlang.html)\n\n依赖包安装 `yum install gcc glibc-devel make ncurses-devel openssl-devel xmlto -y`\n解压erlang源码包 `tar -zxvf otp_src_25.0.4.tar.gz`\n创建erlang的安装目录 `mkdir /usr/local/erlang`\n进入erlang的解压目录 `cd otp_src_25.0.4`\n配置erlang的安装信息 `./configure --prefix=/usr/local/erlang --without-javac`\n编译安装 `make && make install`\n配置环境变量 `vim /etc/profile`\n添加如下内容：\n~~~\nERL_HOME=/usr/local/erlang\nPATH=$ERL_HOME/bin:$PATH\nexport ERL_HOME PATH\n~~~\n更新环境变量 `source /etc/profile`\n查看erlang版本 `erl -version`\n![查看erlang版本](../images/RabbitMQ笔记/查看erlang版本.png)\n如上图，即为安装成功。然后开始安装RabbitMQ。\n\n安装RabbitMQ `rpm -ivh --nodeps rabbitmq-server-3.10.7-1.el8.noarch.rpm`\n\n### RabbitMQ常用命令\n\n#### 启动与关闭\n\n启动 `rabbitmq-server start`\n> 可能会出现错误，错误原因是/var/lib/rabbitmq/.erlang.cookie文件权限不够\n> 解决方案：`chmod rabbitmq:rabbitmq/var.lib.rabbitmq/.erlang.cookie` `chmod 400 /var/lib/rabbitmq/.erlang.cookie`\n\n停止服务 `rabbitmqctl stop`\n\n#### 插件管理\n\n添加插件 `rabbitmq-plugins enable {插件名}`\n> RabbitMQ启动后可以使用浏览器进入管控台，但默认情况RabbitMQ不允许直接使用浏览器访问。默认访问端口 15672\n> 因此需要添加插件 `rabbitmq-plugins enable rabbitmq_management`\n\n删除插件 `rabbitmq-plugins disable {插件名}`\n\n#### 用户管理\n\n浏览器访问管控台：\n![浏览器访问管控台](../images/RabbitMQ笔记/浏览器访问管控台.png)\n\n默认用户密码均为 guest\n但只能本机登录，否则报错`User can only log in via localhost`\n\n添加用户 `rabbitmqctl add_user {username} {password}`\n删除用户 `rabbitmqctl delete_user {username}`\n修改密码 `rabbitmqctl change_password {username} {newpassword}`\n设置用户角色 `rabbitmqctl set_user_tags {username} {tag}`\n\ntag参数表示用户角色取值为：management、monitoring、policymaker、administrator\n角色详解：\n\nmanagement：用户可以通过AMQP做的任何事外加\n1. 列出自己可以通过AMQP登入的 virtual hosts\n2. 查看自己的 virtual hosts 中的 queues、exchanges 和 bindings\n3. 查看和关闭自己的 channels 和 connections\n4. 查看有关自己的 virtual hosts 的“全局”的统计信息，包含其他用户在这些 virtual hosts 中的活动\n\npolicymaker：management 可以做的任何事外加\n1. 查看、创建和删除自己的 virtual hosts 所属的 policies 和 parameters\n\nmonitoring：management 可以做的任何事外加\n1. 列出所有的 virtual hosts ，包括他们不能登录的 virtual hosts\n2. 查看其他用户的 connections 和 channels\n3. 查看节点级别的数据如 clustering 和 memory 使用情况\n4. 查看真正的关于所有 virtual hosts 的全局统计信息\n\nadministrator：policymaker 和 monitoring 可以做的任何事外加\n1. 创建和删除 virtual hosts\n2. 查看、创建和删除 users\n3. 查看、创建和删除 permissions\n4. 关闭其他用户的 connections\n\n#### 权限管理\n\n授权命令 `rabbitmqctl set permissions [-p vhostpath] {user} {conf} {write} {read}`\n-p vhostpath:用于指定一个资源的命名空间，例如 -p / 表示根路径命名空间\nuser：用于指定要为哪个用户授权填写用户名\nconf：一个正则表达式match 哪些配置资源能被该用户配置\nwrite：一个正则表达式match 哪些配置资源能被该用户写\nread：一个正则表达式match 哪些配置资源能被该用户读\n\n查看指定命名空间下的用户权限 `rabbitmqctl list permissions [vhostpath]`\n\n查看指定用户下的权限 `rabbitmqctl list user_permissions {username}`\n\n#### vhost管理\n\nvhost是RabbitMQ中的一个命名空间，可以限制消息存放位置，利用这个命名空间进行权限的控制。类似windows文件夹，在不同文件夹存放不同文件。\n\n添加vhost `rabbitmqctl add vhost temp`\n删除vhost `rabbitmqctl delete vhost {name}`\n\n## 消息的发送和接收\n\n### 消息发送和接收机制\n\n所有的mq产品从模型抽象上来说都是一样的过程：\n消费者订阅某个队列。生产者创建消息，然后发布到队列中，最后将消息发送到监听的消费者。\n\n![AMQP协议机制](../images/RabbitMQ笔记/AMQP协议机制.png)\n\n1. Message：\n消息，消息是不具体的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括 routing-key （路由键）、 priority （相对于其他消息的优先权）、 delivery-mode （指出该消息可能需要持久性存储）等。\n2. Publisher：\n消息的生产者，也是一个向交换器发布消息的客户端程序。\n3. Exchange：\n交换机，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。\n4. Binging：\n绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。\n5. Queue：\n消息队列，用来保存消息直到发送给消费者。他是消息的容器，也是消息的终点。一个消息可以投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。\n6. Connection：\n网络连接，比如一个TCP连接。\n7. Channel：\n信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP命令都是通过信道发送出去的，不管是发布消息、订阅队列还是接收消息，都是通过信道完成的。因为对于操作系统来说，建立和销毁TCP连接开销较大，所以引入信道的概念，以复用一条TCP连接。\n8. Consumer：\n信息的消费者，表示一个从消息队列中取得消息的客户端应用程序。\n9. Virtual Host：\n虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质是一个缩小版的RabbitMQ服务器，有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在连接时指定，RabbitMQ默认的vhost是/。\n10. Broker：\n表示消息队列服务器实体。\n\n### AMQP中的消息路由\n\n生产者将消息发布到Exchange上，消息最终到达队列并被消费者接收，而binding决定交换器的消息应该发送到哪个队列。\n\n### Exchange类型\n\nExchange分发消息时根据类型的不同分发策略有区别，有四种类型：direct、fanout、topic、headers。\nheaders 匹配AMQP消息的 header 而不是路由键，此外 headers 交换器和 direct 交换器完全一致，但性能差很多。几乎用不到了。\n\n1. direct\n消息中的路由键如果和 Binding 中的 binding key 一致，交换器就将消息发送到对应的队列中。路由键与队列名完全一致。他是**完全匹配、单播模式**。\n如果没有 binding key 与路由键一致，数据会丢失。\n![direct交换器](../images/RabbitMQ笔记/direct交换器.png)\n\n2. fanout\n每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息会被转发到与该交换器绑定的所有队列上。类似**广播**，fanout 类型转发消息是最快的。\n![fanout交换器](../images/RabbitMQ笔记/fanout交换器.png)\n\n3. topic\ntopic 交换器通过匹配模式分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。他将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样会识别两个通配符：'#'和'\\*'。# 匹配0或多个单词，* 匹配一个单词。\n它也是一种广播，但是是**有一定条件的广播**。\n![topic交换器](../images/RabbitMQ笔记/topic交换器.png)\n\n### Java发送和接收Queue\n\nmaven依赖\n~~~xml\n    <dependency>\n      <groupId>com.rabbitmq</groupId>\n      <artifactId>amqp-client</artifactId>\n      <version>5.14.2</version>\n    </dependency>\n~~~\n\n消息发送：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class Send {\n    public static void main(String[] args) {\n        //创建连接工厂对象\n        ConnectionFactory factory = new ConnectionFactory();\n        //配置RabbitMQ的连接相关信息\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n        Connection connection = null;//定义连接对象\n        Channel channel = null;//定义通道对象\n        try {\n            connection = factory.newConnection();//实例化连接对象\n            channel = connection.createChannel();// 实例化通道对象\n            String message = \"hello MQ!\";\n            //创建队列，名为myQueue\n            /*\n            参数1为 队列名\n            参数2为 是否持久化队列\n            参数3为 是否排外 如果排外则这个队列只允许一个消费者监听\n            参数4为 是都自动删除队列 为true表示当队列中没有消息，也没有消费者连接时会自动删除这个队列\n            参数5为 队列的一些属性设置，通常为null\n            注意：\n                1. 声明队列时，队列名称如果已经存在则放弃声明。如果不存在，则会声明一个新的队列\n                2. 队列名可以取值任意，但是要与消息接收时完全一致\n                3. 这行代码是可有可无的，但是一定要在发送消息前确认队列名称已经存在，否则会出现问题\n             */\n            channel.queueDeclare(\"myQueue\", true, false, false, null);\n            //发送消息到指定队列\n            /*\n            参数1为 交换机名称，为空不使用交换机\n            参数2为 队列名或routing，当指定交换机名称后，这个值就是routingKey\n            参数3为 消息属性 通常为空\n            消息4为 具体的消息的字节数组\n            注意：队列名必须与接收时完全一致\n             */\n            channel.basicPublish(\"\", \"myQueue\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"成功发送消息：\" + message);\n\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    channel.close();\n                }\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (IOException | TimeoutException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n~~~\n\n> 连接时，使用的端口号为 **5672** 。15672 是访问web时使用的。\n> 另外，注意用户是否有连接权限，以及端口是否开放。\n\n消息接收:\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class Receive {\n    public static void main(String[] args) {\n        //创建连接工厂对象\n        ConnectionFactory factory = new ConnectionFactory();\n        //配置RabbitMQ的连接相关信息\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n        Connection connection = null;//定义连接对象\n        Channel channel = null;//定义通道对象\n        try {\n            connection = factory.newConnection();//实例化连接对象\n            channel = connection.createChannel();// 实例化通道对象\n            channel.queueDeclare(\"myQueue\", true, false, false, null);\n            //接收消息\n            /*\n            参数1为 当前消费者需要监听的队列名称 队列名必须要与发送时队列名完全一致\n            参数2为 消息是否自动确认。true表示自动确认，接受完消息会自动将消息从队列中溢出\n            参数3为 消息接收者的标签，用于当多个消费者同时监听一个队列时区分不同消费者，通常为空字符串\n            参数4为 消息接收的回调方法，这个方法具体完成对消息的处理代码\n            注意：使用了 basicConsume 方法后，会启动一个线程持续监听队列，如果队列中有新的数据进入，会自动接收消息\n                因此不能关闭通道和连接对象\n             */\n            channel.basicConsume(\"myQueue\", true, \"\", new DefaultConsumer(channel) {\n                //消息的具体接收和处理方法\n                @Override\n                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                    String message = new String(body, StandardCharsets.UTF_8);\n                    System.out.println(\"成功接收消息：\" + message);\n                }\n            });\n            //不能关闭通道和连接，关闭可能会造成接收时抛出异常或无法接收消息\n            //channel.close();\n            //connection.close();\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n### Java绑定Exchange发送和接收消息\n\nAMQP协议中的核心思想是生产者和消费者解耦，生产者从不直接将消息发送给队列。生产者通常不知道是否一个消息会被发送到队列中，只是将消息发送到一个交换机。\n由 Exchange 来接收，然后 Exchange 根据特定的策略转发到 Queue 进行存储。Exchange 类似一个交换机，将各个消息分发到对应的队列。\n\n实际应用中只需要定义好 Exchange 的路由策略。\n生产者只面向 Exchange 发布消息，消费者只面向 Queue 消费消息，Exchange 定义消息的路由，将各个层面的消息隔离开，降低了整体的耦合度。\n\n#### direct-消息发送与接收\n\n消息发送：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class SendDirect {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            String message = \"hello direct MQ!\";\n\n            channel.queueDeclare(\"myDirectQueue\", true, false, false, null);\n            //声明一个交换机\n            /*\n            参数1为 交换机的名称\n            参数2为 交换机的类型，取值 direct、fanout、topic、headers\n            参数3为 是否为持久化的交换机\n            注意：\n                声明交换机时，如果这个交换机已经存在，则会放弃声明。如果不存在，则声明交换机\n                这行代码是可有可无的，但是使用前必须确保这个交换机被声明\n             */\n            channel.exchangeDeclare(\"directExchange\", \"direct\", true);\n            //将队列绑定到交换机\n            /*\n            参数1为 队列的名称\n            参数2为 交换机名称\n            参数3为 消息的RoutingKey（BindingKey）\n            注意：\n                在进行队列和交换机的绑定时，必须确保交换机和队列已经成功声明\n             */\n            channel.queueBind(\"myDirectQueue\", \"directExchange\", \"directRoutingKey\");\n            //发送消息到指定队列\n            /*\n            参数1为 交换机名称\n            参数2为 消息的RoutingKey 如果消息的RoutingKey和某个队列与交换机绑定的RoutingKey一致，那么这个消息就会发送到指定队列中\n            注意：\n                发送消息时必须确保交换机已经创建并且确保已经正确绑定到某个队列\n             */\n            channel.basicPublish(\"directExchange\", \"directRoutingKey\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"成功发送消息：\" + message);\n\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    channel.close();\n                }\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (IOException | TimeoutException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n~~~\n\n消息接收：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class ReceiveDirect {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            \n            channel.queueDeclare(\"myDirectQueue\", true, false, false, null);\n            channel.exchangeDeclare(\"directExchange\", \"direct\", true);\n            channel.queueBind(\"myDirectQueue\", \"directExchange\", \"directRoutingKey\");\n            /*\n            监听某个队列并获取队列中的数据\n            注意：\n                当前被监听的队列必须已经存在并正确地绑定到了某个交换机中\n             */\n            channel.basicConsume(\"myDirectQueue\", true, \"\", new DefaultConsumer(channel) {\n                @Override\n                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                    String message = new String(body, StandardCharsets.UTF_8);\n                    System.out.println(\"成功接收消息：\" + message);\n                }\n            });\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n#### fanout-消息发送与接收\n\n类似电视调频道，需要先调到指定频道才能看想要的节目。\n所以需要消费者先监听，才能接收到消息。\n\n消息接收：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class ReceiveFanout {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            /*\n            由于 fanout 类型的交换机的消息是类似于广播的模式，它不需要绑定 RoutingKey\n            而又可能会有很多个消费者来接收这个交换机中的数据，因此创建队列是要创建一个随机的队列名称\n\n            没有参数的 queueDeclare方法会创建一个名字随机的队列\n            这个队列的数据是非持久的，是排外的（同时最多只允许有一个消费者监听当前队列），会自动删除（当没有任何消费者监听队列时，这个队列会自动删除）\n\n            getQueue方法用于获取这个随机的队列名\n             */\n            String queueName = channel.queueDeclare().getQueue();\n            channel.exchangeDeclare(\"fanoutExchange\", \"fanout\", true);\n            //将这个随机的队列绑定到交换机中，由于是fanout类型的交换机，因此不需要指定RoutingKey进行绑定\n            channel.queueBind(queueName, \"fanoutExchange\", \"\");\n            /*\n            监听某个队列并获取队列中的数据\n            注意：\n                当前被监听的队列必须已经存在并正确地绑定到了某个交换机中\n             */\n            channel.basicConsume(queueName, true, \"\", new DefaultConsumer(channel) {\n                @Override\n                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                    String message = new String(body, StandardCharsets.UTF_8);\n                    System.out.println(\"成功接收消息：\" + message);\n                }\n            });\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n消息发送：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class SendFanout {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            String message = \"hello fanout MQ!\";\n            /*\n            由于使用了fanout类型的交换机，因此消息接收方可能会有多个，不建议在消息发送时创建队列，以及绑定队列\n            建议在消费者中创建队列并绑定交换机\n            但是发送消息时至少应该确保交换机存在\n             */\n//            channel.queueDeclare(\"myDirectQueue\", true, false, false, null);\n//            channel.queueBind(\"myDirectQueue\", \"directExchange\", \"directRoutingKey\");\n            channel.exchangeDeclare(\"directExchange\", \"direct\", true);\n            channel.basicPublish(\"fanoutExchange\", \"\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"成功发送消息：\" + message);\n\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    channel.close();\n                }\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (IOException | TimeoutException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n~~~\n\n明确指定队列名称并进行了和交换机的绑定，可以保证fanout类型的消息不会丢失\n但是这么写没有意义，因为消费者最终可能有很多，不能让所有消费者监听同一个队列\n\n#### topic-消息发送与接收\n\n接收消息：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.*;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class ReceiveTopic {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n\n            channel.queueDeclare(\"topicQueue\",true,false,false,null);\n            channel.exchangeDeclare(\"topicExchange\", \"topic\", true);\n            channel.queueBind(\"topicQueue\", \"topicExchange\", \"aa.*\");\n            channel.basicConsume(\"topicQueue\", true, \"\", new DefaultConsumer(channel) {\n                @Override\n                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                    String message = new String(body, StandardCharsets.UTF_8);\n                    System.out.println(\"成功接收消息：\" + message);\n                }\n            });\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        }\n    }\n}\n~~~\n\n发送消息：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class SendTopic {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            String message = \"hello topic MQ!\";\n\n            channel.exchangeDeclare(\"topicExchange\", \"topic\", true);\n            channel.basicPublish(\"topicExchange\", \"aa.a\", null, message.getBytes(StandardCharsets.UTF_8));\n            System.out.println(\"成功发送消息：\" + message);\n\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    channel.close();\n                }\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (IOException | TimeoutException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n~~~\n\n#### fanout与topic使用场景对比\n\ntopic 类型的交换机和 fanout 类型的交换机一样，都是一对多的交换机类型，都可以实现将一个消息同时发送给多个队列 \n\nfanout 更适合于使用在一个功能不同的进程来获取数据\n例如手机app中的消息推送，一个app可能会有很多用户安装，然后他们都会启动一个随机队列来接受自己的数据\n\ntopic 更适合不同功能模块来接收同一个消息\n例如商城下单成功后需要发送消息到队列中\n假如 RoutingKey 为 order.success 。物流系统监听 order.* ；发票系统监听 order.*\n\nTopic 可以使用随机的队列名也可以使用明确的队列名，但如果功能比较重要，建议使用明确的队列名并要求持久化的队列。\n\n#### 事务消息\n\n事务消息和数据库的事务类似，只是MQ中的消息要保证消息是否全部发送成功，防止信息都是的一种策略。\n\nRabbitMQ有两种方式来解决这个问题：\n1. 通过AMQP提供的事务机制实现\n2. 使用发送者确认模式实现（效率要高一些）\n\n启用事务发送消息：\n~~~java\npackage org.example.rabbitmq;\n\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.TimeoutException;\n\npublic class SendTransaction {\n    public static void main(String[] args) {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"0.0.0.0\");\n        factory.setPort(5672);\n        factory.setUsername(\"root\");\n        factory.setPassword(\"root\");\n\n        Connection connection = null;\n        Channel channel = null;\n        try {\n            connection = factory.newConnection();\n            channel = connection.createChannel();\n            String message = \"hello Transaction!\";\n\n            channel.queueDeclare(\"transactionQueue\", true, false, false, null);\n            channel.exchangeDeclare(\"transactionExchange\", \"direct\", true);\n            channel.queueBind(\"transactionQueue\", \"transactionExchange\", \"transactionRoutingKey\");\n\n            //启动一个事务，启动事务后所有写入到队列的消息必须显式地调用 txCommit 提交事务或txRollback 回滚事务\n            channel.txSelect();\n            channel.basicPublish(\"transactionExchange\", \"transactionRoutingKey\", null, message.getBytes(StandardCharsets.UTF_8));\n            channel.basicPublish(\"transactionExchange\", \"transactionRoutingKey\", null, message.getBytes(StandardCharsets.UTF_8));\n            //提交事务，如果调用 txSelect 启动了事务，必须显示调用事物的提交\n            //否则消息不会真正写入队列，提交后会将内存中的消息写入队列并释放内存\n            channel.txCommit();\n            System.out.println(\"成功发送消息：\" + message);\n\n        } catch (IOException | TimeoutException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    //回滚事务，放弃当前事务中所有没有提交的消息，释放内存\n                    channel.txRollback();\n                    channel.close();\n                }\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (IOException | TimeoutException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n~~~\n\n> 当消费者开启事务后，即使不做提交。依然可以获取队列中的消息并且消息从队列中移除\n> **暂时 事务对接收者没有影响**\n\n#### 发送者确认模式\n\nConfirm 发送方确认模式使用和事务类似，也是通过设置 channel 进行发送方确认的，最终达到确保所有消息全部发送成功的目的。\n\n代码大部分相同（加减几行的区别），就不单独贴代码块了。~~上面大段重复好难受~~\n\n启用发送者确认模式\n`channel.confirmSelect();`\n\n方式一：\nchannel.waiForConfirms() 普通发送方确认模式\n可以有一个参数，超时时间（毫秒值）\n\n会阻塞线程等待服务返回响应，用于是否消息发送成功，如果服务器确认消息已经发送完成则返回true，都则返回false\n可以给这个方法一个毫秒值用于确认我们的需要等待服务确认的时间\n如果超过了指定时间以后则会抛出异常 InterruptedException 表示服务器出现了问题需要补发消息或将消息缓存到 redis 中，稍后利用定时任务补发\n无论返回false还是抛出异常，消息都有可能发送成功或发送失败\n如果要求这个消息一定要发送到队列，那么可以采用消息补发（重新发送）\n\n方式二：\nchannel.waitForConfirmsOrDie() 批量确认模式\n它会向服务中确认之前当前通道中发送的所有消息是否已经全部写入成功\n这个方法没有返回值，如果服务器中有一条消息没有能够成功或向服务器发送确认时服务不可访问，都被认定为消息发送失败。可能有消息没有发送成功，需要进行消息补发\n如果无法向服务器获取确认信息，那么方法会抛出 InterruptedException 异常，这时就需要补发\n这个方法也可以指定超时时间，同上\n\n> 批量消息确认的速度比普通消息确认要快，但是一旦出现需要补发的情况，不能确认具体是哪条消息没有发送完成，需要将本次所有消息全部补发\n\n方式三：\nchannel.addConfirmListener() 异步确认模式\n\n使用方法：\n~~~java\n            /*\n            异步消息确认监听器，需要在发送消息前启动\n             */\n            channel.addConfirmListener(new ConfirmListener() {\n                //消息确认以后的回调方法\n                /*\n                参数1 被确认的消息编号 从1开始自动递增标记当前是第几条消息\n                参数2 当前消息是否同时确认了多个\n                注意：如果参数2为true，则表示本次确认同时确认了多条消息；如果为false，则表示之确认了当前编号的消息\n                 */\n                @Override\n                public void handleAck(long l, boolean b) throws IOException {\n\n                }\n                //消息没有确认的回调方法，执行消息补发之类的操作\n                /*\n                参数1 没有被确认的消息编号 从1开始自动递增标记当前是第几条消息\n                参数2 当前消息是否同时没有确认了多个\n                注意：如果参数2为true 则表示小于当前编号的所有消息可能都没有发送成功，需要补发；为false 则表示当前编号的消息没有发送成功，需要补发\n                 */\n                @Override\n                public void handleNack(long l, boolean b) throws IOException {\n\n                }\n            });\n~~~\n\n#### 消费者确认模式\n\n为保证消息从队列可靠地到达消费者，消费者可以在队列声明时指定 noAck 参数，为 false 时，RabbitMQ会等待消费者显式发回ack信号后才从内存（和磁盘，如果持久化的话）中移去消息。否则，RabbitMQ会在队列中的消息被消费后立即删除它。\n\n手动确认主要使用以下方法：\n\nbasicAck() 用于肯定确认\nbasicRecover() 路由不成功的消息，使用recover重新发送到队列\nbasicReject() 拒收消息，可以设置是否放回到队列中。并且只能一次拒绝一条消息。批量拒绝消息使用 basicNack()\nbasicNack() 可以一次拒绝多条消息\n\n~~~java\n    //获取当前消息是否被接收过一次，false没被接受过，true被接收过，也可能处理完成，需要进行消息防重复处理\n    envelope.isRedeliver();\n\n    //获取消息的编号\n    long deliveryTag = envelope.getDeliveryTag();\n    //获取当前内部类的通道\n    Channel c = this.getChannel();\n    //手动确认这个消息，确认以后表示当前消息已经成功处理了，需要从队列中移除\n    //这个方法应该在当前消息处理程序全部完成后执行\n    //参数1 消息的序号\n    //参数2 为是否确认多个，为true表示确认小等于当前编号的所有消息，false单个确认，确认当前消息\n    //注意：如果启动事务，而消息确认模式为手动确认。那么必须要提交事务，否则即使调用确认调用方法，消息也不回从队列中移除\n    c.basicAck(deliveryTag,true);\n~~~\n\n## springboot集成RabbitMQ\n\n和上面单独使用Java进行收发消息的流程基本一致\n\nmaven依赖\n~~~xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-amqp</artifactId>\n        </dependency>\n~~~\n\n配置文件\n~~~\nspring.rabbitmq.host=0.0.0.0\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=root\nspring.rabbitmq.password=root\n~~~\n\n配置类（用于声明队列和交换机，以及绑定队列和交换机）\n~~~java\npackage com.example.springboottext.rabbitmq.config;\n\nimport org.springframework.amqp.core.*;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class RabbitMQConfig {\n\n    //配置一个Direct类型的交换机\n    @Bean\n    public DirectExchange directExchange() {\n        return new DirectExchange(\"bootDirectExchange\", true, false);\n    }\n\n    //配置一个队列\n    @Bean\n    public Queue directQueue() {\n        return new Queue(\"bootDirectQueue\", true, false, false, null);\n    }\n\n    /**\n     * 配置一个队列和交换机的绑定\n     *\n     * @param directQueue    需要绑定的队列对象，参数名必须要和某个@Bean的方法名完全相同以进行自动注入\n     * @param directExchange 需要绑定的交换机对象，参数名必须要和某个@Bean的方法名完全相同以进行自动注入\n     * @return\n     */\n    @Bean\n    public Binding directBinding(Queue directQueue, DirectExchange directExchange) {\n        //完成绑定\n        // 参数1 需要绑定的队列\n        // 参数2 需要绑定的交换机\n        // 参数3 绑定时的RoutingKey\n        return BindingBuilder.bind(directQueue).to(directExchange).with(\"RoutingKey\");\n    }\n\n    //配置一个Fanout类型的交换机\n    @Bean\n    public FanoutExchange fanoutExchange() {\n        return new FanoutExchange(\"fanoutExchange\");\n    }\n\n    //配置一个Topic类型的交换机\n    @Bean\n    public TopicExchange topicExchange() {\n        return new TopicExchange(\"topicExchange\");\n    }\n\n}\n~~~\n\nService类（发送消息）\n~~~java\npackage com.example.springboottext.rabbitmq.service.impl;\n\nimport com.example.springboottext.rabbitmq.service.SendService;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n@Service(\"sendService\")\npublic class SendServiceImpl implements SendService {\n\n    //注入amqp的模板类，里用这个对象来发送和接受消息\n    @Resource\n    private AmqpTemplate amqpTemplate;\n\n    @Override\n    public void sendMessage(String message) {\n\n        /*\n        发送消息\n        参数1 交换机名\n        参数2 RoutingKey\n        参数3 具体消息\n         */\n        amqpTemplate.convertAndSend(\"bootDirectExchange\", \"RoutingKey\", message);\n    }\n\n    @Override\n    public void sendFanoutMessage(String message) {\n        amqpTemplate.convertAndSend(\"fanoutExchange\", \"\", message);\n    }\n\n    @Override\n    public void sendTopicMessage(String message) {\n        amqpTemplate.convertAndSend(\"topicExchange\", \"aa\", message);\n    }\n}\n~~~\n\nService类（接收消息）\n~~~java\npackage com.example.springboottext.rabbitmq.service.impl;\n\nimport com.example.springboottext.rabbitmq.service.ReceiveService;\nimport org.springframework.amqp.core.AmqpTemplate;\nimport org.springframework.amqp.rabbit.annotation.Exchange;\nimport org.springframework.amqp.rabbit.annotation.Queue;\nimport org.springframework.amqp.rabbit.annotation.QueueBinding;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n@Service(\"receiveService\")\npublic class ReceiveServiceImpl implements ReceiveService {\n\n    @Resource\n    private AmqpTemplate amqpTemplate;\n\n    /**\n     * 这个接收不是不间断的接收消息，每执行一次只能接收一次。如果有新消息，不会自动接收\n     */\n    @Override\n    public void receive() {\n        String bootDirectQueue = (String) amqpTemplate.receiveAndConvert(\"bootDirectQueue\");\n        System.out.println(bootDirectQueue);\n    }\n\n    /**\n     * @param message 接收到的具体消息数据\n     *                注意：如果当前监听方法正常结束Spring会自动确认消息，如果出现异常则不会确认消息\n     *                因此在消息处理时，应该做好消息的防重复处理\n     * @RabbitListener 注解用于标记当前方法是一个RabbitMQ的消息监听方法，作用是持续性的自动接收消息\n     * 这个方法不需要手动调用，Spring会自动运行这个监听\n     * queues 用于指定一个已经存在的队列名，用于进行队列的监听\n     */\n    @Override\n    @RabbitListener(queues = \"bootDirectQueue\")\n    public void directReceive(String message) {\n        System.out.println(message);\n    }\n\n    @Override\n    @RabbitListener(bindings = {\n            //@QueueBinding 注解完成队列和交换机的绑定\n            @QueueBinding(\n                    value = @Queue(), //@Queue 创建一个队列（没有指定参数则表示创建一个随机队列\n                    exchange = @Exchange(name = \"fanoutExchange\", type = \"fanout\") //@Exchange 创建一个交换机\n            )})\n    public void fanoutReceive01(String message) {\n        System.out.println(\"01--\" + message);\n    }\n\n    @Override\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue(),\n                    exchange = @Exchange(name = \"fanoutExchange\", type = \"fanout\")\n            )})\n    public void fanoutReceive02(String message) {\n        System.out.println(\"02--\" + message);\n    }\n\n    @Override\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue(\"topic01\"),\n                    key = \"aa\",\n                    exchange = @Exchange(name = \"topicExchange\", type = \"topic\"))\n    })\n    public void topicReceive01(String message) {\n        System.out.println(\"01--\" + message);\n    }\n\n    @Override\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue(\"topic02\"),\n                    key = \"aa.*\",\n                    exchange = @Exchange(name = \"topicExchange\", type = \"topic\"))\n    })\n    public void topicReceive02(String message) {\n        System.out.println(\"02--\" + message);\n    }\n\n    @Override\n    @RabbitListener(bindings = {\n            @QueueBinding(\n                    value = @Queue(\"topic03\"),\n                    key = \"aa.#\",\n                    exchange = @Exchange(name = \"topicExchange\", type = \"topic\"))\n    })\n    public void topicReceive03(String message) {\n        System.out.println(\"03--\" + message);\n    }\n}\n~~~\n\n## RabbitMQ集群\n\n普通模式（默认）：\n对于Queue来说，消息实体只存在于其中的一个节点A/B两个节点仅有相同的元数据，即队列结构。\n交换机的所有元数据在所有节点上是一致的，而队列的完整信息只有在创建它的节点上，各个节点仅有相同的元数据，即队列结构。\n当消息进入A节点的Queue中后，consumer从B节点拉取数据时，RabbitMQ会临时在A、B间进行消息传输，把A中的消息实体取出并经过B发送给consumer。\n所以consumer应尽量连接每个节点，从中取消息。即对于同一个逻辑队列要在多个节点建立物理Queue，否则无论consumer连A或B，出口总在A，会产生瓶颈。\n该模式存在一个问题就是当A节点故障后，B节点无法取到A节点中还未消费的消息实体。\n如果做个消息持久化，那么等A节点恢复，然后才可被消费；如果没有做持久化，那就会丢失消息。\n该模式非常适合非持久化队列，只有该队列是非持久化的，客户端才能重新连接到集群中的其他节点，并且重新创建队列。如果该队列是持久化的，那么唯一的办法就是将故障节点恢复起来。\n\n镜像模式（高可用模式）：\n把需要的队列做成镜像模式，存在于多个节点数据Rabbitmg的HA方案。\n该模式解决了上述问题，其实质和普通模式的不同之处在于，消息实体会主动在镜像节点间同步，而不会在consumer取数据时临时拉取。\n该模式带来的副作用也很明显，除了降低系统性能以外，如果镜像队列过多，加之有大量的消息进入，集群内部的网铬带宽将会被这种同步通讯大大消耗掉，所以在对可靠性要求较高的场合中适用。\n\n### 配置集群\n\n1. 配置cookie文件\nErlang Cookie 是保障不同节点可以互相通信的密钥，要保证集群中不同节点互相通信，必须共享相同的 Erlang Cookie，具体存放在 `/var/lib/rabbitmq/.erlang.cookie`\n> 跨服务器拷贝 `scp /var/lib/rabbitmq/.erlang.cookie ip:/var/lib/rabbitmq`\n\n2. 分别启动 RabbitMQ 服务\n3. 将某个 RabbitMQ 加入到某个服务器节点\n`rabbitmqctl stop_app`\n`rabbitmqctl join_cluster rabbit@A`\n`rabbitmqctl start_app`\nA 为某个机器的 hostname；在 hostname 为B的机器中执行这些命令\n\n查看集群状态：`rabbitmqctl cluster_status`\n\n### springboot链接集群\n\n配置\n~~~properties\nspring.rabbitmq.addresses=ip1:port,ip2:port\nspring.rabbitmq.username=root\nspring.rabbitmq.password=root\n~~~\n\n### 配置镜像模式\n\n任意节点执行：`rabbitmqctl set_policy ha-all \"^\" '{\"ha-mode\":\"all\"}'`\n~~~text\n$ rabbitmqctl set_policy [-p Vhost] Name Pattern Definition [Priority]\n\n-p Vhost: 可选参数，针对指定vhost下的queue进行设置\nName: policy的名称\nPattern: queue的匹配模式(正则表达式)\nDefinition: 镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode\n    ha-mode: 指明镜像队列的模式，有效值为 all/exactly/nodes\n        all: 表示在集群中所有的节点上进行镜像\n        exactly: 表示在指定个数的节点上进行镜像，节点的个数由ha-params指定\n        nodes: 表示在指定的节点上进行镜像，节点名称通过ha-params指定\n    ha-params: ha-mode模式需要用到的参数\n    ha-sync-mode: 进行队列中消息的同步方式，有效值为automatic和manual\npriority: 可选参数，policy的优先级\n~~~\n\n也可在web管控台中 Admin 中的 Policies 中进行配置。","slug":"RabbitMQ笔记","published":1,"updated":"2022-08-25T09:14:13.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbe8002qo8ttbac3g6kr","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"什么是消息队列\"><a href=\"#什么是消息队列\" class=\"headerlink\" title=\"什么是消息队列\"></a>什么是消息队列</h3><p>消息（message）是指在应用之间传送的数据。可以是简单的纯文本字符串，也可以很复杂，包含嵌入对象。</p>\n<p>消息队列（message queue）是一种应用间的通信方式，消息发送后立即返回，由消息系统来确保可靠传递。消息发布者只管把消息发布到MQ中而不管谁来取，消息使用者只管从MQ中取消息而不管谁发布。这样发布者和使用者都不需要知道对方的存在。</p>\n<h3 id=\"为什么使用消息队列\"><a href=\"#为什么使用消息队列\" class=\"headerlink\" title=\"为什么使用消息队列\"></a>为什么使用消息队列</h3><p>消息队列是一种应用之间的<strong>异步协作机制</strong>。</p>\n<p>例如驿站收发快递。快递员并不需要知道收件人的具体信息，只用送到对应驿站即可；收件人也并需要不知道快递员具体信息，只需到驿站取即可。<br>但传统收发快递，快递员得等收件人接收后，再去送下一个快递。导致效率的降低。<br>再例如订单系统。下单后的逻辑可能包括：扣减库存、生成订单信息、发送短信通知、发红包。最开始这些逻辑是放在一起同步执行。但为了提高服务效率，有些不需要立即生效的操作可以拆分出来异步执行，如发短信通知、发红包等。<br>这种场景可以使用MQ，在主流程（扣减库存、生成订单）执行完毕后发送一条消息到MQ，由另外的线程拉取MQ的消息（或由MQ推送），执行相应的业务逻辑。</p>\n<p>以上是用于业务解耦的情况，其他常见场景包括最终一致性、广播、错峰控流等。</p>\n<h3 id=\"RabbitMQ特点\"><a href=\"#RabbitMQ特点\" class=\"headerlink\" title=\"RabbitMQ特点\"></a>RabbitMQ特点</h3><p>RabbitMQ是由Erlang语言开发的AMQP的开源实现。<br>AMQP（Advanced Message Queuing Protocol）：高级消息队列协议。是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。<br>RabbitMQ最初起源于金融系统，用于在分布式系统中存储转发消息。在易用性、扩展性、高可用性等方面表现都不错。<br>特点：</p>\n<ol>\n<li>可靠性（Reliability）<br>使用持久化、传输确认、发布确认等机制来保证可靠性。</li>\n<li>灵活的路由（Flexible Routing）<br>在消息进入队列之前，通过Exchange来路由消息。对于典型的路由功能，RabbitMQ提供了一些内置的Exchange实现。对于复杂的路由功能，可以将多个Exchange绑定在一起，也可以通过插件机制实现自己的Exchange。</li>\n<li>消息集群（Clustering）<br>多个RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。</li>\n<li>高可用（Highly Availability Queues）<br>队列可以在集群中的机器上进行镜像，防止单点故障。</li>\n<li>多种协议（Multi-protocol）<br>RabbitMQ支持多种消息队列协议，如 STOMP、MQTT等。</li>\n<li>多语言客户端（Many Clients）<br>RabbitMQ支持很多常用语言，如Java、.net、Ruby等。</li>\n<li>管理界面（Management UI）<br>RabbitMQ提供了一个易用的用户界面，使用户可以监控和管理消息Broker的许多方面。</li>\n<li>跟踪机制（Tracing）<br>如果消息异常，RabbitMQ提供了消息跟踪机制，使用者可以赵卒发生了什么。</li>\n</ol>\n<h2 id=\"RabbitMQ安装\"><a href=\"#RabbitMQ安装\" class=\"headerlink\" title=\"RabbitMQ安装\"></a>RabbitMQ安装</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><a class=\"link\"   href=\"https://www.rabbitmq.com/\" >RabbitMQ官网<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.erlang.org/\" >Erlang官网<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.rabbitmq.com/which-erlang.html\" >Erlang和RabbitMQ版本对照<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>依赖包安装 <code>yum install gcc glibc-devel make ncurses-devel openssl-devel xmlto -y</code><br>解压erlang源码包 <code>tar -zxvf otp_src_25.0.4.tar.gz</code><br>创建erlang的安装目录 <code>mkdir /usr/local/erlang</code><br>进入erlang的解压目录 <code>cd otp_src_25.0.4</code><br>配置erlang的安装信息 <code>./configure --prefix=/usr/local/erlang --without-javac</code><br>编译安装 <code>make &amp;&amp; make install</code><br>配置环境变量 <code>vim /etc/profile</code><br>添加如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERL_HOME=/usr/local/erlang</span><br><span class=\"line\">PATH=$ERL_HOME/bin:$PATH</span><br><span class=\"line\">export ERL_HOME PATH</span><br></pre></td></tr></table></figure>\n<p>更新环境变量 <code>source /etc/profile</code><br>查看erlang版本 <code>erl -version</code><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/%E6%9F%A5%E7%9C%8Berlang%E7%89%88%E6%9C%AC.png\"\n                      alt=\"查看erlang版本\"\n                ><br>如上图，即为安装成功。然后开始安装RabbitMQ。</p>\n<p>安装RabbitMQ <code>rpm -ivh --nodeps rabbitmq-server-3.10.7-1.el8.noarch.rpm</code></p>\n<h3 id=\"RabbitMQ常用命令\"><a href=\"#RabbitMQ常用命令\" class=\"headerlink\" title=\"RabbitMQ常用命令\"></a>RabbitMQ常用命令</h3><h4 id=\"启动与关闭\"><a href=\"#启动与关闭\" class=\"headerlink\" title=\"启动与关闭\"></a>启动与关闭</h4><p>启动 <code>rabbitmq-server start</code></p>\n<blockquote>\n<p>可能会出现错误，错误原因是/var/lib/rabbitmq/.erlang.cookie文件权限不够<br>解决方案：<code>chmod rabbitmq:rabbitmq/var.lib.rabbitmq/.erlang.cookie</code> <code>chmod 400 /var/lib/rabbitmq/.erlang.cookie</code></p>\n</blockquote>\n<p>停止服务 <code>rabbitmqctl stop</code></p>\n<h4 id=\"插件管理\"><a href=\"#插件管理\" class=\"headerlink\" title=\"插件管理\"></a>插件管理</h4><p>添加插件 <code>rabbitmq-plugins enable &#123;插件名&#125;</code></p>\n<blockquote>\n<p>RabbitMQ启动后可以使用浏览器进入管控台，但默认情况RabbitMQ不允许直接使用浏览器访问。默认访问端口 15672<br>因此需要添加插件 <code>rabbitmq-plugins enable rabbitmq_management</code></p>\n</blockquote>\n<p>删除插件 <code>rabbitmq-plugins disable &#123;插件名&#125;</code></p>\n<h4 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h4><p>浏览器访问管控台：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E7%AE%A1%E6%8E%A7%E5%8F%B0.png\"\n                      alt=\"浏览器访问管控台\"\n                ></p>\n<p>默认用户密码均为 guest<br>但只能本机登录，否则报错<code>User can only log in via localhost</code></p>\n<p>添加用户 <code>rabbitmqctl add_user &#123;username&#125; &#123;password&#125;</code><br>删除用户 <code>rabbitmqctl delete_user &#123;username&#125;</code><br>修改密码 <code>rabbitmqctl change_password &#123;username&#125; &#123;newpassword&#125;</code><br>设置用户角色 <code>rabbitmqctl set_user_tags &#123;username&#125; &#123;tag&#125;</code></p>\n<p>tag参数表示用户角色取值为：management、monitoring、policymaker、administrator<br>角色详解：</p>\n<p>management：用户可以通过AMQP做的任何事外加</p>\n<ol>\n<li>列出自己可以通过AMQP登入的 virtual hosts</li>\n<li>查看自己的 virtual hosts 中的 queues、exchanges 和 bindings</li>\n<li>查看和关闭自己的 channels 和 connections</li>\n<li>查看有关自己的 virtual hosts 的“全局”的统计信息，包含其他用户在这些 virtual hosts 中的活动</li>\n</ol>\n<p>policymaker：management 可以做的任何事外加</p>\n<ol>\n<li>查看、创建和删除自己的 virtual hosts 所属的 policies 和 parameters</li>\n</ol>\n<p>monitoring：management 可以做的任何事外加</p>\n<ol>\n<li>列出所有的 virtual hosts ，包括他们不能登录的 virtual hosts</li>\n<li>查看其他用户的 connections 和 channels</li>\n<li>查看节点级别的数据如 clustering 和 memory 使用情况</li>\n<li>查看真正的关于所有 virtual hosts 的全局统计信息</li>\n</ol>\n<p>administrator：policymaker 和 monitoring 可以做的任何事外加</p>\n<ol>\n<li>创建和删除 virtual hosts</li>\n<li>查看、创建和删除 users</li>\n<li>查看、创建和删除 permissions</li>\n<li>关闭其他用户的 connections</li>\n</ol>\n<h4 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h4><p>授权命令 <code>rabbitmqctl set permissions [-p vhostpath] &#123;user&#125; &#123;conf&#125; &#123;write&#125; &#123;read&#125;</code><br>-p vhostpath:用于指定一个资源的命名空间，例如 -p / 表示根路径命名空间<br>user：用于指定要为哪个用户授权填写用户名<br>conf：一个正则表达式match 哪些配置资源能被该用户配置<br>write：一个正则表达式match 哪些配置资源能被该用户写<br>read：一个正则表达式match 哪些配置资源能被该用户读</p>\n<p>查看指定命名空间下的用户权限 <code>rabbitmqctl list permissions [vhostpath]</code></p>\n<p>查看指定用户下的权限 <code>rabbitmqctl list user_permissions &#123;username&#125;</code></p>\n<h4 id=\"vhost管理\"><a href=\"#vhost管理\" class=\"headerlink\" title=\"vhost管理\"></a>vhost管理</h4><p>vhost是RabbitMQ中的一个命名空间，可以限制消息存放位置，利用这个命名空间进行权限的控制。类似windows文件夹，在不同文件夹存放不同文件。</p>\n<p>添加vhost <code>rabbitmqctl add vhost temp</code><br>删除vhost <code>rabbitmqctl delete vhost &#123;name&#125;</code></p>\n<h2 id=\"消息的发送和接收\"><a href=\"#消息的发送和接收\" class=\"headerlink\" title=\"消息的发送和接收\"></a>消息的发送和接收</h2><h3 id=\"消息发送和接收机制\"><a href=\"#消息发送和接收机制\" class=\"headerlink\" title=\"消息发送和接收机制\"></a>消息发送和接收机制</h3><p>所有的mq产品从模型抽象上来说都是一样的过程：<br>消费者订阅某个队列。生产者创建消息，然后发布到队列中，最后将消息发送到监听的消费者。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/AMQP%E5%8D%8F%E8%AE%AE%E6%9C%BA%E5%88%B6.png\"\n                      alt=\"AMQP协议机制\"\n                ></p>\n<ol>\n<li>Message：<br>消息，消息是不具体的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括 routing-key （路由键）、 priority （相对于其他消息的优先权）、 delivery-mode （指出该消息可能需要持久性存储）等。</li>\n<li>Publisher：<br>消息的生产者，也是一个向交换器发布消息的客户端程序。</li>\n<li>Exchange：<br>交换机，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。</li>\n<li>Binging：<br>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</li>\n<li>Queue：<br>消息队列，用来保存消息直到发送给消费者。他是消息的容器，也是消息的终点。一个消息可以投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。</li>\n<li>Connection：<br>网络连接，比如一个TCP连接。</li>\n<li>Channel：<br>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP命令都是通过信道发送出去的，不管是发布消息、订阅队列还是接收消息，都是通过信道完成的。因为对于操作系统来说，建立和销毁TCP连接开销较大，所以引入信道的概念，以复用一条TCP连接。</li>\n<li>Consumer：<br>信息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</li>\n<li>Virtual Host：<br>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质是一个缩小版的RabbitMQ服务器，有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在连接时指定，RabbitMQ默认的vhost是/。</li>\n<li>Broker：<br>表示消息队列服务器实体。</li>\n</ol>\n<h3 id=\"AMQP中的消息路由\"><a href=\"#AMQP中的消息路由\" class=\"headerlink\" title=\"AMQP中的消息路由\"></a>AMQP中的消息路由</h3><p>生产者将消息发布到Exchange上，消息最终到达队列并被消费者接收，而binding决定交换器的消息应该发送到哪个队列。</p>\n<h3 id=\"Exchange类型\"><a href=\"#Exchange类型\" class=\"headerlink\" title=\"Exchange类型\"></a>Exchange类型</h3><p>Exchange分发消息时根据类型的不同分发策略有区别，有四种类型：direct、fanout、topic、headers。<br>headers 匹配AMQP消息的 header 而不是路由键，此外 headers 交换器和 direct 交换器完全一致，但性能差很多。几乎用不到了。</p>\n<ol>\n<li><p>direct<br>消息中的路由键如果和 Binding 中的 binding key 一致，交换器就将消息发送到对应的队列中。路由键与队列名完全一致。他是<strong>完全匹配、单播模式</strong>。<br>如果没有 binding key 与路由键一致，数据会丢失。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/direct%E4%BA%A4%E6%8D%A2%E5%99%A8.png\"\n                      alt=\"direct交换器\"\n                ></p>\n</li>\n<li><p>fanout<br>每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息会被转发到与该交换器绑定的所有队列上。类似<strong>广播</strong>，fanout 类型转发消息是最快的。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/fanout%E4%BA%A4%E6%8D%A2%E5%99%A8.png\"\n                      alt=\"fanout交换器\"\n                ></p>\n</li>\n<li><p>topic<br>topic 交换器通过匹配模式分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。他将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样会识别两个通配符：’#’和’*‘。# 匹配0或多个单词，* 匹配一个单词。<br>它也是一种广播，但是是<strong>有一定条件的广播</strong>。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/topic%E4%BA%A4%E6%8D%A2%E5%99%A8.png\"\n                      alt=\"topic交换器\"\n                ></p>\n</li>\n</ol>\n<h3 id=\"Java发送和接收Queue\"><a href=\"#Java发送和接收Queue\" class=\"headerlink\" title=\"Java发送和接收Queue\"></a>Java发送和接收Queue</h3><p>maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.rabbitmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>amqp-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.14.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>消息发送：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Send</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建连接工厂对象</span></span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">//配置RabbitMQ的连接相关信息</span></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;<span class=\"comment\">//定义连接对象</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;<span class=\"comment\">//定义通道对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();<span class=\"comment\">//实例化连接对象</span></span><br><span class=\"line\">            channel = connection.createChannel();<span class=\"comment\">// 实例化通道对象</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello MQ!&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">//创建队列，名为myQueue</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 队列名</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 是否持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">            参数3为 是否排外 如果排外则这个队列只允许一个消费者监听</span></span><br><span class=\"line\"><span class=\"comment\">            参数4为 是都自动删除队列 为true表示当队列中没有消息，也没有消费者连接时会自动删除这个队列</span></span><br><span class=\"line\"><span class=\"comment\">            参数5为 队列的一些属性设置，通常为null</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                1. 声明队列时，队列名称如果已经存在则放弃声明。如果不存在，则会声明一个新的队列</span></span><br><span class=\"line\"><span class=\"comment\">                2. 队列名可以取值任意，但是要与消息接收时完全一致</span></span><br><span class=\"line\"><span class=\"comment\">                3. 这行代码是可有可无的，但是一定要在发送消息前确认队列名称已经存在，否则会出现问题</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;myQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">//发送消息到指定队列</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 交换机名称，为空不使用交换机</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 队列名或routing，当指定交换机名称后，这个值就是routingKey</span></span><br><span class=\"line\"><span class=\"comment\">            参数3为 消息属性 通常为空</span></span><br><span class=\"line\"><span class=\"comment\">            消息4为 具体的消息的字节数组</span></span><br><span class=\"line\"><span class=\"comment\">            注意：队列名必须与接收时完全一致</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;myQueue&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    channel.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>连接时，使用的端口号为 <strong>5672</strong> 。15672 是访问web时使用的。<br>另外，注意用户是否有连接权限，以及端口是否开放。</p>\n</blockquote>\n<p>消息接收:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receive</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建连接工厂对象</span></span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">//配置RabbitMQ的连接相关信息</span></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;<span class=\"comment\">//定义连接对象</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;<span class=\"comment\">//定义通道对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();<span class=\"comment\">//实例化连接对象</span></span><br><span class=\"line\">            channel = connection.createChannel();<span class=\"comment\">// 实例化通道对象</span></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;myQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">//接收消息</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 当前消费者需要监听的队列名称 队列名必须要与发送时队列名完全一致</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 消息是否自动确认。true表示自动确认，接受完消息会自动将消息从队列中溢出</span></span><br><span class=\"line\"><span class=\"comment\">            参数3为 消息接收者的标签，用于当多个消费者同时监听一个队列时区分不同消费者，通常为空字符串</span></span><br><span class=\"line\"><span class=\"comment\">            参数4为 消息接收的回调方法，这个方法具体完成对消息的处理代码</span></span><br><span class=\"line\"><span class=\"comment\">            注意：使用了 basicConsume 方法后，会启动一个线程持续监听队列，如果队列中有新的数据进入，会自动接收消息</span></span><br><span class=\"line\"><span class=\"comment\">                因此不能关闭通道和连接对象</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicConsume(<span class=\"string\">&quot;myQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//消息的具体接收和处理方法</span></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, StandardCharsets.UTF_8);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;成功接收消息：&quot;</span> + message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">//不能关闭通道和连接，关闭可能会造成接收时抛出异常或无法接收消息</span></span><br><span class=\"line\">            <span class=\"comment\">//channel.close();</span></span><br><span class=\"line\">            <span class=\"comment\">//connection.close();</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java绑定Exchange发送和接收消息\"><a href=\"#Java绑定Exchange发送和接收消息\" class=\"headerlink\" title=\"Java绑定Exchange发送和接收消息\"></a>Java绑定Exchange发送和接收消息</h3><p>AMQP协议中的核心思想是生产者和消费者解耦，生产者从不直接将消息发送给队列。生产者通常不知道是否一个消息会被发送到队列中，只是将消息发送到一个交换机。<br>由 Exchange 来接收，然后 Exchange 根据特定的策略转发到 Queue 进行存储。Exchange 类似一个交换机，将各个消息分发到对应的队列。</p>\n<p>实际应用中只需要定义好 Exchange 的路由策略。<br>生产者只面向 Exchange 发布消息，消费者只面向 Queue 消费消息，Exchange 定义消息的路由，将各个层面的消息隔离开，降低了整体的耦合度。</p>\n<h4 id=\"direct-消息发送与接收\"><a href=\"#direct-消息发送与接收\" class=\"headerlink\" title=\"direct-消息发送与接收\"></a>direct-消息发送与接收</h4><p>消息发送：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendDirect</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello direct MQ!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;myDirectQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">//声明一个交换机</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 交换机的名称</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 交换机的类型，取值 direct、fanout、topic、headers</span></span><br><span class=\"line\"><span class=\"comment\">            参数3为 是否为持久化的交换机</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                声明交换机时，如果这个交换机已经存在，则会放弃声明。如果不存在，则声明交换机</span></span><br><span class=\"line\"><span class=\"comment\">                这行代码是可有可无的，但是使用前必须确保这个交换机被声明</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;direct&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//将队列绑定到交换机</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 队列的名称</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">            参数3为 消息的RoutingKey（BindingKey）</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                在进行队列和交换机的绑定时，必须确保交换机和队列已经成功声明</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;myDirectQueue&quot;</span>, <span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;directRoutingKey&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//发送消息到指定队列</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 消息的RoutingKey 如果消息的RoutingKey和某个队列与交换机绑定的RoutingKey一致，那么这个消息就会发送到指定队列中</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                发送消息时必须确保交换机已经创建并且确保已经正确绑定到某个队列</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;directRoutingKey&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    channel.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消息接收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveDirect</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            </span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;myDirectQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;direct&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;myDirectQueue&quot;</span>, <span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;directRoutingKey&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            监听某个队列并获取队列中的数据</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                当前被监听的队列必须已经存在并正确地绑定到了某个交换机中</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicConsume(<span class=\"string\">&quot;myDirectQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, StandardCharsets.UTF_8);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;成功接收消息：&quot;</span> + message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fanout-消息发送与接收\"><a href=\"#fanout-消息发送与接收\" class=\"headerlink\" title=\"fanout-消息发送与接收\"></a>fanout-消息发送与接收</h4><p>类似电视调频道，需要先调到指定频道才能看想要的节目。<br>所以需要消费者先监听，才能接收到消息。</p>\n<p>消息接收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveFanout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            由于 fanout 类型的交换机的消息是类似于广播的模式，它不需要绑定 RoutingKey</span></span><br><span class=\"line\"><span class=\"comment\">            而又可能会有很多个消费者来接收这个交换机中的数据，因此创建队列是要创建一个随机的队列名称</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            没有参数的 queueDeclare方法会创建一个名字随机的队列</span></span><br><span class=\"line\"><span class=\"comment\">            这个队列的数据是非持久的，是排外的（同时最多只允许有一个消费者监听当前队列），会自动删除（当没有任何消费者监听队列时，这个队列会自动删除）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            getQueue方法用于获取这个随机的队列名</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">queueName</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;fanoutExchange&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//将这个随机的队列绑定到交换机中，由于是fanout类型的交换机，因此不需要指定RoutingKey进行绑定</span></span><br><span class=\"line\">            channel.queueBind(queueName, <span class=\"string\">&quot;fanoutExchange&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            监听某个队列并获取队列中的数据</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                当前被监听的队列必须已经存在并正确地绑定到了某个交换机中</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicConsume(queueName, <span class=\"literal\">true</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, StandardCharsets.UTF_8);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;成功接收消息：&quot;</span> + message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消息发送：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendFanout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello fanout MQ!&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            由于使用了fanout类型的交换机，因此消息接收方可能会有多个，不建议在消息发送时创建队列，以及绑定队列</span></span><br><span class=\"line\"><span class=\"comment\">            建议在消费者中创建队列并绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">            但是发送消息时至少应该确保交换机存在</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\"><span class=\"comment\">//            channel.queueDeclare(&quot;myDirectQueue&quot;, true, false, false, null);</span></span><br><span class=\"line\"><span class=\"comment\">//            channel.queueBind(&quot;myDirectQueue&quot;, &quot;directExchange&quot;, &quot;directRoutingKey&quot;);</span></span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;direct&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;fanoutExchange&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    channel.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>明确指定队列名称并进行了和交换机的绑定，可以保证fanout类型的消息不会丢失<br>但是这么写没有意义，因为消费者最终可能有很多，不能让所有消费者监听同一个队列</p>\n<h4 id=\"topic-消息发送与接收\"><a href=\"#topic-消息发送与接收\" class=\"headerlink\" title=\"topic-消息发送与接收\"></a>topic-消息发送与接收</h4><p>接收消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveTopic</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;topicQueue&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;topicExchange&quot;</span>, <span class=\"string\">&quot;topic&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;topicQueue&quot;</span>, <span class=\"string\">&quot;topicExchange&quot;</span>, <span class=\"string\">&quot;aa.*&quot;</span>);</span><br><span class=\"line\">            channel.basicConsume(<span class=\"string\">&quot;topicQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, StandardCharsets.UTF_8);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;成功接收消息：&quot;</span> + message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发送消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendTopic</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello topic MQ!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;topicExchange&quot;</span>, <span class=\"string\">&quot;topic&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;topicExchange&quot;</span>, <span class=\"string\">&quot;aa.a&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    channel.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fanout与topic使用场景对比\"><a href=\"#fanout与topic使用场景对比\" class=\"headerlink\" title=\"fanout与topic使用场景对比\"></a>fanout与topic使用场景对比</h4><p>topic 类型的交换机和 fanout 类型的交换机一样，都是一对多的交换机类型，都可以实现将一个消息同时发送给多个队列 </p>\n<p>fanout 更适合于使用在一个功能不同的进程来获取数据<br>例如手机app中的消息推送，一个app可能会有很多用户安装，然后他们都会启动一个随机队列来接受自己的数据</p>\n<p>topic 更适合不同功能模块来接收同一个消息<br>例如商城下单成功后需要发送消息到队列中<br>假如 RoutingKey 为 order.success 。物流系统监听 order.* ；发票系统监听 order.*</p>\n<p>Topic 可以使用随机的队列名也可以使用明确的队列名，但如果功能比较重要，建议使用明确的队列名并要求持久化的队列。</p>\n<h4 id=\"事务消息\"><a href=\"#事务消息\" class=\"headerlink\" title=\"事务消息\"></a>事务消息</h4><p>事务消息和数据库的事务类似，只是MQ中的消息要保证消息是否全部发送成功，防止信息都是的一种策略。</p>\n<p>RabbitMQ有两种方式来解决这个问题：</p>\n<ol>\n<li>通过AMQP提供的事务机制实现</li>\n<li>使用发送者确认模式实现（效率要高一些）</li>\n</ol>\n<p>启用事务发送消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendTransaction</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello Transaction!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;transactionQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;transactionExchange&quot;</span>, <span class=\"string\">&quot;direct&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;transactionQueue&quot;</span>, <span class=\"string\">&quot;transactionExchange&quot;</span>, <span class=\"string\">&quot;transactionRoutingKey&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动一个事务，启动事务后所有写入到队列的消息必须显式地调用 txCommit 提交事务或txRollback 回滚事务</span></span><br><span class=\"line\">            channel.txSelect();</span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;transactionExchange&quot;</span>, <span class=\"string\">&quot;transactionRoutingKey&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;transactionExchange&quot;</span>, <span class=\"string\">&quot;transactionRoutingKey&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            <span class=\"comment\">//提交事务，如果调用 txSelect 启动了事务，必须显示调用事物的提交</span></span><br><span class=\"line\">            <span class=\"comment\">//否则消息不会真正写入队列，提交后会将内存中的消息写入队列并释放内存</span></span><br><span class=\"line\">            channel.txCommit();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//回滚事务，放弃当前事务中所有没有提交的消息，释放内存</span></span><br><span class=\"line\">                    channel.txRollback();</span><br><span class=\"line\">                    channel.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当消费者开启事务后，即使不做提交。依然可以获取队列中的消息并且消息从队列中移除<br><strong>暂时 事务对接收者没有影响</strong></p>\n</blockquote>\n<h4 id=\"发送者确认模式\"><a href=\"#发送者确认模式\" class=\"headerlink\" title=\"发送者确认模式\"></a>发送者确认模式</h4><p>Confirm 发送方确认模式使用和事务类似，也是通过设置 channel 进行发送方确认的，最终达到确保所有消息全部发送成功的目的。</p>\n<p>代码大部分相同（加减几行的区别），就不单独贴代码块了。<del>上面大段重复好难受</del></p>\n<p>启用发送者确认模式<br><code>channel.confirmSelect();</code></p>\n<p>方式一：<br>channel.waiForConfirms() 普通发送方确认模式<br>可以有一个参数，超时时间（毫秒值）</p>\n<p>会阻塞线程等待服务返回响应，用于是否消息发送成功，如果服务器确认消息已经发送完成则返回true，都则返回false<br>可以给这个方法一个毫秒值用于确认我们的需要等待服务确认的时间<br>如果超过了指定时间以后则会抛出异常 InterruptedException 表示服务器出现了问题需要补发消息或将消息缓存到 redis 中，稍后利用定时任务补发<br>无论返回false还是抛出异常，消息都有可能发送成功或发送失败<br>如果要求这个消息一定要发送到队列，那么可以采用消息补发（重新发送）</p>\n<p>方式二：<br>channel.waitForConfirmsOrDie() 批量确认模式<br>它会向服务中确认之前当前通道中发送的所有消息是否已经全部写入成功<br>这个方法没有返回值，如果服务器中有一条消息没有能够成功或向服务器发送确认时服务不可访问，都被认定为消息发送失败。可能有消息没有发送成功，需要进行消息补发<br>如果无法向服务器获取确认信息，那么方法会抛出 InterruptedException 异常，这时就需要补发<br>这个方法也可以指定超时时间，同上</p>\n<blockquote>\n<p>批量消息确认的速度比普通消息确认要快，但是一旦出现需要补发的情况，不能确认具体是哪条消息没有发送完成，需要将本次所有消息全部补发</p>\n</blockquote>\n<p>方式三：<br>channel.addConfirmListener() 异步确认模式</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">异步消息确认监听器，需要在发送消息前启动</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">channel.addConfirmListener(<span class=\"keyword\">new</span> <span class=\"title class_\">ConfirmListener</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//消息确认以后的回调方法</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    参数1 被确认的消息编号 从1开始自动递增标记当前是第几条消息</span></span><br><span class=\"line\"><span class=\"comment\">    参数2 当前消息是否同时确认了多个</span></span><br><span class=\"line\"><span class=\"comment\">    注意：如果参数2为true，则表示本次确认同时确认了多条消息；如果为false，则表示之确认了当前编号的消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleAck</span><span class=\"params\">(<span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//消息没有确认的回调方法，执行消息补发之类的操作</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    参数1 没有被确认的消息编号 从1开始自动递增标记当前是第几条消息</span></span><br><span class=\"line\"><span class=\"comment\">    参数2 当前消息是否同时没有确认了多个</span></span><br><span class=\"line\"><span class=\"comment\">    注意：如果参数2为true 则表示小于当前编号的所有消息可能都没有发送成功，需要补发；为false 则表示当前编号的消息没有发送成功，需要补发</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleNack</span><span class=\"params\">(<span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"消费者确认模式\"><a href=\"#消费者确认模式\" class=\"headerlink\" title=\"消费者确认模式\"></a>消费者确认模式</h4><p>为保证消息从队列可靠地到达消费者，消费者可以在队列声明时指定 noAck 参数，为 false 时，RabbitMQ会等待消费者显式发回ack信号后才从内存（和磁盘，如果持久化的话）中移去消息。否则，RabbitMQ会在队列中的消息被消费后立即删除它。</p>\n<p>手动确认主要使用以下方法：</p>\n<p>basicAck() 用于肯定确认<br>basicRecover() 路由不成功的消息，使用recover重新发送到队列<br>basicReject() 拒收消息，可以设置是否放回到队列中。并且只能一次拒绝一条消息。批量拒绝消息使用 basicNack()<br>basicNack() 可以一次拒绝多条消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取当前消息是否被接收过一次，false没被接受过，true被接收过，也可能处理完成，需要进行消息防重复处理</span></span><br><span class=\"line\">envelope.isRedeliver();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取消息的编号</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">deliveryTag</span> <span class=\"operator\">=</span> envelope.getDeliveryTag();</span><br><span class=\"line\"><span class=\"comment\">//获取当前内部类的通道</span></span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getChannel();</span><br><span class=\"line\"><span class=\"comment\">//手动确认这个消息，确认以后表示当前消息已经成功处理了，需要从队列中移除</span></span><br><span class=\"line\"><span class=\"comment\">//这个方法应该在当前消息处理程序全部完成后执行</span></span><br><span class=\"line\"><span class=\"comment\">//参数1 消息的序号</span></span><br><span class=\"line\"><span class=\"comment\">//参数2 为是否确认多个，为true表示确认小等于当前编号的所有消息，false单个确认，确认当前消息</span></span><br><span class=\"line\"><span class=\"comment\">//注意：如果启动事务，而消息确认模式为手动确认。那么必须要提交事务，否则即使调用确认调用方法，消息也不回从队列中移除</span></span><br><span class=\"line\">c.basicAck(deliveryTag,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"springboot集成RabbitMQ\"><a href=\"#springboot集成RabbitMQ\" class=\"headerlink\" title=\"springboot集成RabbitMQ\"></a>springboot集成RabbitMQ</h2><p>和上面单独使用Java进行收发消息的流程基本一致</p>\n<p>maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.rabbitmq.host=0.0.0.0</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br><span class=\"line\">spring.rabbitmq.username=root</span><br><span class=\"line\">spring.rabbitmq.password=root</span><br></pre></td></tr></table></figure>\n\n<p>配置类（用于声明队列和交换机，以及绑定队列和交换机）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.springboottext.rabbitmq.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置一个Direct类型的交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DirectExchange <span class=\"title function_\">directExchange</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DirectExchange</span>(<span class=\"string\">&quot;bootDirectExchange&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置一个队列</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">directQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;bootDirectQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置一个队列和交换机的绑定</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> directQueue    需要绑定的队列对象，参数名必须要和某个<span class=\"doctag\">@Bean</span>的方法名完全相同以进行自动注入</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> directExchange 需要绑定的交换机对象，参数名必须要和某个<span class=\"doctag\">@Bean</span>的方法名完全相同以进行自动注入</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Binding <span class=\"title function_\">directBinding</span><span class=\"params\">(Queue directQueue, DirectExchange directExchange)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//完成绑定</span></span><br><span class=\"line\">        <span class=\"comment\">// 参数1 需要绑定的队列</span></span><br><span class=\"line\">        <span class=\"comment\">// 参数2 需要绑定的交换机</span></span><br><span class=\"line\">        <span class=\"comment\">// 参数3 绑定时的RoutingKey</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue).to(directExchange).with(<span class=\"string\">&quot;RoutingKey&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置一个Fanout类型的交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FanoutExchange <span class=\"title function_\">fanoutExchange</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FanoutExchange</span>(<span class=\"string\">&quot;fanoutExchange&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置一个Topic类型的交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TopicExchange <span class=\"title function_\">topicExchange</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TopicExchange</span>(<span class=\"string\">&quot;topicExchange&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Service类（发送消息）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.springboottext.rabbitmq.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.springboottext.rabbitmq.service.SendService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;sendService&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SendService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注入amqp的模板类，里用这个对象来发送和接受消息</span></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate amqpTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        发送消息</span></span><br><span class=\"line\"><span class=\"comment\">        参数1 交换机名</span></span><br><span class=\"line\"><span class=\"comment\">        参数2 RoutingKey</span></span><br><span class=\"line\"><span class=\"comment\">        参数3 具体消息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        amqpTemplate.convertAndSend(<span class=\"string\">&quot;bootDirectExchange&quot;</span>, <span class=\"string\">&quot;RoutingKey&quot;</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendFanoutMessage</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        amqpTemplate.convertAndSend(<span class=\"string\">&quot;fanoutExchange&quot;</span>, <span class=\"string\">&quot;&quot;</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendTopicMessage</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        amqpTemplate.convertAndSend(<span class=\"string\">&quot;topicExchange&quot;</span>, <span class=\"string\">&quot;aa&quot;</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Service类（接收消息）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.springboottext.rabbitmq.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.springboottext.rabbitmq.service.ReceiveService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;receiveService&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ReceiveService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate amqpTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个接收不是不间断的接收消息，每执行一次只能接收一次。如果有新消息，不会自动接收</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">bootDirectQueue</span> <span class=\"operator\">=</span> (String) amqpTemplate.receiveAndConvert(<span class=\"string\">&quot;bootDirectQueue&quot;</span>);</span><br><span class=\"line\">        System.out.println(bootDirectQueue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> message 接收到的具体消息数据</span></span><br><span class=\"line\"><span class=\"comment\">     *                注意：如果当前监听方法正常结束Spring会自动确认消息，如果出现异常则不会确认消息</span></span><br><span class=\"line\"><span class=\"comment\">     *                因此在消息处理时，应该做好消息的防重复处理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@RabbitListener</span> 注解用于标记当前方法是一个RabbitMQ的消息监听方法，作用是持续性的自动接收消息</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法不需要手动调用，Spring会自动运行这个监听</span></span><br><span class=\"line\"><span class=\"comment\">     * queues 用于指定一个已经存在的队列名，用于进行队列的监听</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;bootDirectQueue&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">directReceive</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            //@QueueBinding 注解完成队列和交换机的绑定</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue(), //@Queue 创建一个队列（没有指定参数则表示创建一个随机队列</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(name = &quot;fanoutExchange&quot;, type = &quot;fanout&quot;) //@Exchange 创建一个交换机</span></span><br><span class=\"line\"><span class=\"meta\">            )&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fanoutReceive01</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;01--&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue(),</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(name = &quot;fanoutExchange&quot;, type = &quot;fanout&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">            )&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fanoutReceive02</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;02--&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue(&quot;topic01&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">                    key = &quot;aa&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(name = &quot;topicExchange&quot;, type = &quot;topic&quot;))</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">topicReceive01</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;01--&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue(&quot;topic02&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">                    key = &quot;aa.*&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(name = &quot;topicExchange&quot;, type = &quot;topic&quot;))</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">topicReceive02</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;02--&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue(&quot;topic03&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">                    key = &quot;aa.#&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(name = &quot;topicExchange&quot;, type = &quot;topic&quot;))</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">topicReceive03</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;03--&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RabbitMQ集群\"><a href=\"#RabbitMQ集群\" class=\"headerlink\" title=\"RabbitMQ集群\"></a>RabbitMQ集群</h2><p>普通模式（默认）：<br>对于Queue来说，消息实体只存在于其中的一个节点A/B两个节点仅有相同的元数据，即队列结构。<br>交换机的所有元数据在所有节点上是一致的，而队列的完整信息只有在创建它的节点上，各个节点仅有相同的元数据，即队列结构。<br>当消息进入A节点的Queue中后，consumer从B节点拉取数据时，RabbitMQ会临时在A、B间进行消息传输，把A中的消息实体取出并经过B发送给consumer。<br>所以consumer应尽量连接每个节点，从中取消息。即对于同一个逻辑队列要在多个节点建立物理Queue，否则无论consumer连A或B，出口总在A，会产生瓶颈。<br>该模式存在一个问题就是当A节点故障后，B节点无法取到A节点中还未消费的消息实体。<br>如果做个消息持久化，那么等A节点恢复，然后才可被消费；如果没有做持久化，那就会丢失消息。<br>该模式非常适合非持久化队列，只有该队列是非持久化的，客户端才能重新连接到集群中的其他节点，并且重新创建队列。如果该队列是持久化的，那么唯一的办法就是将故障节点恢复起来。</p>\n<p>镜像模式（高可用模式）：<br>把需要的队列做成镜像模式，存在于多个节点数据Rabbitmg的HA方案。<br>该模式解决了上述问题，其实质和普通模式的不同之处在于，消息实体会主动在镜像节点间同步，而不会在consumer取数据时临时拉取。<br>该模式带来的副作用也很明显，除了降低系统性能以外，如果镜像队列过多，加之有大量的消息进入，集群内部的网铬带宽将会被这种同步通讯大大消耗掉，所以在对可靠性要求较高的场合中适用。</p>\n<h3 id=\"配置集群\"><a href=\"#配置集群\" class=\"headerlink\" title=\"配置集群\"></a>配置集群</h3><ol>\n<li><p>配置cookie文件<br>Erlang Cookie 是保障不同节点可以互相通信的密钥，要保证集群中不同节点互相通信，必须共享相同的 Erlang Cookie，具体存放在 <code>/var/lib/rabbitmq/.erlang.cookie</code></p>\n<blockquote>\n<p>跨服务器拷贝 <code>scp /var/lib/rabbitmq/.erlang.cookie ip:/var/lib/rabbitmq</code></p>\n</blockquote>\n</li>\n<li><p>分别启动 RabbitMQ 服务</p>\n</li>\n<li><p>将某个 RabbitMQ 加入到某个服务器节点<br><code>rabbitmqctl stop_app</code><br><code>rabbitmqctl join_cluster rabbit@A</code><br><code>rabbitmqctl start_app</code><br>A 为某个机器的 hostname；在 hostname 为B的机器中执行这些命令</p>\n</li>\n</ol>\n<p>查看集群状态：<code>rabbitmqctl cluster_status</code></p>\n<h3 id=\"springboot链接集群\"><a href=\"#springboot链接集群\" class=\"headerlink\" title=\"springboot链接集群\"></a>springboot链接集群</h3><p>配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.rabbitmq.addresses</span>=<span class=\"string\">ip1:port,ip2:port</span></span><br><span class=\"line\"><span class=\"attr\">spring.rabbitmq.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">spring.rabbitmq.password</span>=<span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置镜像模式\"><a href=\"#配置镜像模式\" class=\"headerlink\" title=\"配置镜像模式\"></a>配置镜像模式</h3><p>任意节点执行：<code>rabbitmqctl set_policy ha-all &quot;^&quot; &#39;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#39;</code></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rabbitmqctl set_policy [-p Vhost] Name Pattern Definition [Priority]</span><br><span class=\"line\"></span><br><span class=\"line\">-p Vhost: 可选参数，针对指定vhost下的queue进行设置</span><br><span class=\"line\">Name: policy的名称</span><br><span class=\"line\">Pattern: queue的匹配模式(正则表达式)</span><br><span class=\"line\">Definition: 镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode</span><br><span class=\"line\">    ha-mode: 指明镜像队列的模式，有效值为 all/exactly/nodes</span><br><span class=\"line\">        all: 表示在集群中所有的节点上进行镜像</span><br><span class=\"line\">        exactly: 表示在指定个数的节点上进行镜像，节点的个数由ha-params指定</span><br><span class=\"line\">        nodes: 表示在指定的节点上进行镜像，节点名称通过ha-params指定</span><br><span class=\"line\">    ha-params: ha-mode模式需要用到的参数</span><br><span class=\"line\">    ha-sync-mode: 进行队列中消息的同步方式，有效值为automatic和manual</span><br><span class=\"line\">priority: 可选参数，policy的优先级</span><br></pre></td></tr></table></figure>\n\n<p>也可在web管控台中 Admin 中的 Policies 中进行配置。</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"什么是消息队列\"><a href=\"#什么是消息队列\" class=\"headerlink\" title=\"什么是消息队列\"></a>什么是消息队列</h3><p>消息（message）是指在应用之间传送的数据。可以是简单的纯文本字符串，也可以很复杂，包含嵌入对象。</p>\n<p>消息队列（message queue）是一种应用间的通信方式，消息发送后立即返回，由消息系统来确保可靠传递。消息发布者只管把消息发布到MQ中而不管谁来取，消息使用者只管从MQ中取消息而不管谁发布。这样发布者和使用者都不需要知道对方的存在。</p>\n<h3 id=\"为什么使用消息队列\"><a href=\"#为什么使用消息队列\" class=\"headerlink\" title=\"为什么使用消息队列\"></a>为什么使用消息队列</h3><p>消息队列是一种应用之间的<strong>异步协作机制</strong>。</p>\n<p>例如驿站收发快递。快递员并不需要知道收件人的具体信息，只用送到对应驿站即可；收件人也并需要不知道快递员具体信息，只需到驿站取即可。<br>但传统收发快递，快递员得等收件人接收后，再去送下一个快递。导致效率的降低。<br>再例如订单系统。下单后的逻辑可能包括：扣减库存、生成订单信息、发送短信通知、发红包。最开始这些逻辑是放在一起同步执行。但为了提高服务效率，有些不需要立即生效的操作可以拆分出来异步执行，如发短信通知、发红包等。<br>这种场景可以使用MQ，在主流程（扣减库存、生成订单）执行完毕后发送一条消息到MQ，由另外的线程拉取MQ的消息（或由MQ推送），执行相应的业务逻辑。</p>\n<p>以上是用于业务解耦的情况，其他常见场景包括最终一致性、广播、错峰控流等。</p>\n<h3 id=\"RabbitMQ特点\"><a href=\"#RabbitMQ特点\" class=\"headerlink\" title=\"RabbitMQ特点\"></a>RabbitMQ特点</h3><p>RabbitMQ是由Erlang语言开发的AMQP的开源实现。<br>AMQP（Advanced Message Queuing Protocol）：高级消息队列协议。是应用层协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。<br>RabbitMQ最初起源于金融系统，用于在分布式系统中存储转发消息。在易用性、扩展性、高可用性等方面表现都不错。<br>特点：</p>\n<ol>\n<li>可靠性（Reliability）<br>使用持久化、传输确认、发布确认等机制来保证可靠性。</li>\n<li>灵活的路由（Flexible Routing）<br>在消息进入队列之前，通过Exchange来路由消息。对于典型的路由功能，RabbitMQ提供了一些内置的Exchange实现。对于复杂的路由功能，可以将多个Exchange绑定在一起，也可以通过插件机制实现自己的Exchange。</li>\n<li>消息集群（Clustering）<br>多个RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。</li>\n<li>高可用（Highly Availability Queues）<br>队列可以在集群中的机器上进行镜像，防止单点故障。</li>\n<li>多种协议（Multi-protocol）<br>RabbitMQ支持多种消息队列协议，如 STOMP、MQTT等。</li>\n<li>多语言客户端（Many Clients）<br>RabbitMQ支持很多常用语言，如Java、.net、Ruby等。</li>\n<li>管理界面（Management UI）<br>RabbitMQ提供了一个易用的用户界面，使用户可以监控和管理消息Broker的许多方面。</li>\n<li>跟踪机制（Tracing）<br>如果消息异常，RabbitMQ提供了消息跟踪机制，使用者可以赵卒发生了什么。</li>\n</ol>\n<h2 id=\"RabbitMQ安装\"><a href=\"#RabbitMQ安装\" class=\"headerlink\" title=\"RabbitMQ安装\"></a>RabbitMQ安装</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><a class=\"link\"   href=\"https://www.rabbitmq.com/\" >RabbitMQ官网<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.erlang.org/\" >Erlang官网<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.rabbitmq.com/which-erlang.html\" >Erlang和RabbitMQ版本对照<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>依赖包安装 <code>yum install gcc glibc-devel make ncurses-devel openssl-devel xmlto -y</code><br>解压erlang源码包 <code>tar -zxvf otp_src_25.0.4.tar.gz</code><br>创建erlang的安装目录 <code>mkdir /usr/local/erlang</code><br>进入erlang的解压目录 <code>cd otp_src_25.0.4</code><br>配置erlang的安装信息 <code>./configure --prefix=/usr/local/erlang --without-javac</code><br>编译安装 <code>make &amp;&amp; make install</code><br>配置环境变量 <code>vim /etc/profile</code><br>添加如下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERL_HOME=/usr/local/erlang</span><br><span class=\"line\">PATH=$ERL_HOME/bin:$PATH</span><br><span class=\"line\">export ERL_HOME PATH</span><br></pre></td></tr></table></figure>\n<p>更新环境变量 <code>source /etc/profile</code><br>查看erlang版本 <code>erl -version</code><br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/%E6%9F%A5%E7%9C%8Berlang%E7%89%88%E6%9C%AC.png\"\n                      alt=\"查看erlang版本\"\n                ><br>如上图，即为安装成功。然后开始安装RabbitMQ。</p>\n<p>安装RabbitMQ <code>rpm -ivh --nodeps rabbitmq-server-3.10.7-1.el8.noarch.rpm</code></p>\n<h3 id=\"RabbitMQ常用命令\"><a href=\"#RabbitMQ常用命令\" class=\"headerlink\" title=\"RabbitMQ常用命令\"></a>RabbitMQ常用命令</h3><h4 id=\"启动与关闭\"><a href=\"#启动与关闭\" class=\"headerlink\" title=\"启动与关闭\"></a>启动与关闭</h4><p>启动 <code>rabbitmq-server start</code></p>\n<blockquote>\n<p>可能会出现错误，错误原因是/var/lib/rabbitmq/.erlang.cookie文件权限不够<br>解决方案：<code>chmod rabbitmq:rabbitmq/var.lib.rabbitmq/.erlang.cookie</code> <code>chmod 400 /var/lib/rabbitmq/.erlang.cookie</code></p>\n</blockquote>\n<p>停止服务 <code>rabbitmqctl stop</code></p>\n<h4 id=\"插件管理\"><a href=\"#插件管理\" class=\"headerlink\" title=\"插件管理\"></a>插件管理</h4><p>添加插件 <code>rabbitmq-plugins enable &#123;插件名&#125;</code></p>\n<blockquote>\n<p>RabbitMQ启动后可以使用浏览器进入管控台，但默认情况RabbitMQ不允许直接使用浏览器访问。默认访问端口 15672<br>因此需要添加插件 <code>rabbitmq-plugins enable rabbitmq_management</code></p>\n</blockquote>\n<p>删除插件 <code>rabbitmq-plugins disable &#123;插件名&#125;</code></p>\n<h4 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h4><p>浏览器访问管控台：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E7%AE%A1%E6%8E%A7%E5%8F%B0.png\"\n                      alt=\"浏览器访问管控台\"\n                ></p>\n<p>默认用户密码均为 guest<br>但只能本机登录，否则报错<code>User can only log in via localhost</code></p>\n<p>添加用户 <code>rabbitmqctl add_user &#123;username&#125; &#123;password&#125;</code><br>删除用户 <code>rabbitmqctl delete_user &#123;username&#125;</code><br>修改密码 <code>rabbitmqctl change_password &#123;username&#125; &#123;newpassword&#125;</code><br>设置用户角色 <code>rabbitmqctl set_user_tags &#123;username&#125; &#123;tag&#125;</code></p>\n<p>tag参数表示用户角色取值为：management、monitoring、policymaker、administrator<br>角色详解：</p>\n<p>management：用户可以通过AMQP做的任何事外加</p>\n<ol>\n<li>列出自己可以通过AMQP登入的 virtual hosts</li>\n<li>查看自己的 virtual hosts 中的 queues、exchanges 和 bindings</li>\n<li>查看和关闭自己的 channels 和 connections</li>\n<li>查看有关自己的 virtual hosts 的“全局”的统计信息，包含其他用户在这些 virtual hosts 中的活动</li>\n</ol>\n<p>policymaker：management 可以做的任何事外加</p>\n<ol>\n<li>查看、创建和删除自己的 virtual hosts 所属的 policies 和 parameters</li>\n</ol>\n<p>monitoring：management 可以做的任何事外加</p>\n<ol>\n<li>列出所有的 virtual hosts ，包括他们不能登录的 virtual hosts</li>\n<li>查看其他用户的 connections 和 channels</li>\n<li>查看节点级别的数据如 clustering 和 memory 使用情况</li>\n<li>查看真正的关于所有 virtual hosts 的全局统计信息</li>\n</ol>\n<p>administrator：policymaker 和 monitoring 可以做的任何事外加</p>\n<ol>\n<li>创建和删除 virtual hosts</li>\n<li>查看、创建和删除 users</li>\n<li>查看、创建和删除 permissions</li>\n<li>关闭其他用户的 connections</li>\n</ol>\n<h4 id=\"权限管理\"><a href=\"#权限管理\" class=\"headerlink\" title=\"权限管理\"></a>权限管理</h4><p>授权命令 <code>rabbitmqctl set permissions [-p vhostpath] &#123;user&#125; &#123;conf&#125; &#123;write&#125; &#123;read&#125;</code><br>-p vhostpath:用于指定一个资源的命名空间，例如 -p / 表示根路径命名空间<br>user：用于指定要为哪个用户授权填写用户名<br>conf：一个正则表达式match 哪些配置资源能被该用户配置<br>write：一个正则表达式match 哪些配置资源能被该用户写<br>read：一个正则表达式match 哪些配置资源能被该用户读</p>\n<p>查看指定命名空间下的用户权限 <code>rabbitmqctl list permissions [vhostpath]</code></p>\n<p>查看指定用户下的权限 <code>rabbitmqctl list user_permissions &#123;username&#125;</code></p>\n<h4 id=\"vhost管理\"><a href=\"#vhost管理\" class=\"headerlink\" title=\"vhost管理\"></a>vhost管理</h4><p>vhost是RabbitMQ中的一个命名空间，可以限制消息存放位置，利用这个命名空间进行权限的控制。类似windows文件夹，在不同文件夹存放不同文件。</p>\n<p>添加vhost <code>rabbitmqctl add vhost temp</code><br>删除vhost <code>rabbitmqctl delete vhost &#123;name&#125;</code></p>\n<h2 id=\"消息的发送和接收\"><a href=\"#消息的发送和接收\" class=\"headerlink\" title=\"消息的发送和接收\"></a>消息的发送和接收</h2><h3 id=\"消息发送和接收机制\"><a href=\"#消息发送和接收机制\" class=\"headerlink\" title=\"消息发送和接收机制\"></a>消息发送和接收机制</h3><p>所有的mq产品从模型抽象上来说都是一样的过程：<br>消费者订阅某个队列。生产者创建消息，然后发布到队列中，最后将消息发送到监听的消费者。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/AMQP%E5%8D%8F%E8%AE%AE%E6%9C%BA%E5%88%B6.png\"\n                      alt=\"AMQP协议机制\"\n                ></p>\n<ol>\n<li>Message：<br>消息，消息是不具体的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括 routing-key （路由键）、 priority （相对于其他消息的优先权）、 delivery-mode （指出该消息可能需要持久性存储）等。</li>\n<li>Publisher：<br>消息的生产者，也是一个向交换器发布消息的客户端程序。</li>\n<li>Exchange：<br>交换机，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。</li>\n<li>Binging：<br>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</li>\n<li>Queue：<br>消息队列，用来保存消息直到发送给消费者。他是消息的容器，也是消息的终点。一个消息可以投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。</li>\n<li>Connection：<br>网络连接，比如一个TCP连接。</li>\n<li>Channel：<br>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP命令都是通过信道发送出去的，不管是发布消息、订阅队列还是接收消息，都是通过信道完成的。因为对于操作系统来说，建立和销毁TCP连接开销较大，所以引入信道的概念，以复用一条TCP连接。</li>\n<li>Consumer：<br>信息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</li>\n<li>Virtual Host：<br>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质是一个缩小版的RabbitMQ服务器，有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在连接时指定，RabbitMQ默认的vhost是/。</li>\n<li>Broker：<br>表示消息队列服务器实体。</li>\n</ol>\n<h3 id=\"AMQP中的消息路由\"><a href=\"#AMQP中的消息路由\" class=\"headerlink\" title=\"AMQP中的消息路由\"></a>AMQP中的消息路由</h3><p>生产者将消息发布到Exchange上，消息最终到达队列并被消费者接收，而binding决定交换器的消息应该发送到哪个队列。</p>\n<h3 id=\"Exchange类型\"><a href=\"#Exchange类型\" class=\"headerlink\" title=\"Exchange类型\"></a>Exchange类型</h3><p>Exchange分发消息时根据类型的不同分发策略有区别，有四种类型：direct、fanout、topic、headers。<br>headers 匹配AMQP消息的 header 而不是路由键，此外 headers 交换器和 direct 交换器完全一致，但性能差很多。几乎用不到了。</p>\n<ol>\n<li><p>direct<br>消息中的路由键如果和 Binding 中的 binding key 一致，交换器就将消息发送到对应的队列中。路由键与队列名完全一致。他是<strong>完全匹配、单播模式</strong>。<br>如果没有 binding key 与路由键一致，数据会丢失。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/direct%E4%BA%A4%E6%8D%A2%E5%99%A8.png\"\n                      alt=\"direct交换器\"\n                ></p>\n</li>\n<li><p>fanout<br>每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息会被转发到与该交换器绑定的所有队列上。类似<strong>广播</strong>，fanout 类型转发消息是最快的。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/fanout%E4%BA%A4%E6%8D%A2%E5%99%A8.png\"\n                      alt=\"fanout交换器\"\n                ></p>\n</li>\n<li><p>topic<br>topic 交换器通过匹配模式分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。他将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样会识别两个通配符：’#’和’*‘。# 匹配0或多个单词，* 匹配一个单词。<br>它也是一种广播，但是是<strong>有一定条件的广播</strong>。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/RabbitMQ%E7%AC%94%E8%AE%B0/topic%E4%BA%A4%E6%8D%A2%E5%99%A8.png\"\n                      alt=\"topic交换器\"\n                ></p>\n</li>\n</ol>\n<h3 id=\"Java发送和接收Queue\"><a href=\"#Java发送和接收Queue\" class=\"headerlink\" title=\"Java发送和接收Queue\"></a>Java发送和接收Queue</h3><p>maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.rabbitmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>amqp-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.14.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>消息发送：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Send</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建连接工厂对象</span></span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">//配置RabbitMQ的连接相关信息</span></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;<span class=\"comment\">//定义连接对象</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;<span class=\"comment\">//定义通道对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();<span class=\"comment\">//实例化连接对象</span></span><br><span class=\"line\">            channel = connection.createChannel();<span class=\"comment\">// 实例化通道对象</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello MQ!&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">//创建队列，名为myQueue</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 队列名</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 是否持久化队列</span></span><br><span class=\"line\"><span class=\"comment\">            参数3为 是否排外 如果排外则这个队列只允许一个消费者监听</span></span><br><span class=\"line\"><span class=\"comment\">            参数4为 是都自动删除队列 为true表示当队列中没有消息，也没有消费者连接时会自动删除这个队列</span></span><br><span class=\"line\"><span class=\"comment\">            参数5为 队列的一些属性设置，通常为null</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                1. 声明队列时，队列名称如果已经存在则放弃声明。如果不存在，则会声明一个新的队列</span></span><br><span class=\"line\"><span class=\"comment\">                2. 队列名可以取值任意，但是要与消息接收时完全一致</span></span><br><span class=\"line\"><span class=\"comment\">                3. 这行代码是可有可无的，但是一定要在发送消息前确认队列名称已经存在，否则会出现问题</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;myQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">//发送消息到指定队列</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 交换机名称，为空不使用交换机</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 队列名或routing，当指定交换机名称后，这个值就是routingKey</span></span><br><span class=\"line\"><span class=\"comment\">            参数3为 消息属性 通常为空</span></span><br><span class=\"line\"><span class=\"comment\">            消息4为 具体的消息的字节数组</span></span><br><span class=\"line\"><span class=\"comment\">            注意：队列名必须与接收时完全一致</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;myQueue&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    channel.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>连接时，使用的端口号为 <strong>5672</strong> 。15672 是访问web时使用的。<br>另外，注意用户是否有连接权限，以及端口是否开放。</p>\n</blockquote>\n<p>消息接收:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receive</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建连接工厂对象</span></span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">//配置RabbitMQ的连接相关信息</span></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;<span class=\"comment\">//定义连接对象</span></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;<span class=\"comment\">//定义通道对象</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();<span class=\"comment\">//实例化连接对象</span></span><br><span class=\"line\">            channel = connection.createChannel();<span class=\"comment\">// 实例化通道对象</span></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;myQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">//接收消息</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 当前消费者需要监听的队列名称 队列名必须要与发送时队列名完全一致</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 消息是否自动确认。true表示自动确认，接受完消息会自动将消息从队列中溢出</span></span><br><span class=\"line\"><span class=\"comment\">            参数3为 消息接收者的标签，用于当多个消费者同时监听一个队列时区分不同消费者，通常为空字符串</span></span><br><span class=\"line\"><span class=\"comment\">            参数4为 消息接收的回调方法，这个方法具体完成对消息的处理代码</span></span><br><span class=\"line\"><span class=\"comment\">            注意：使用了 basicConsume 方法后，会启动一个线程持续监听队列，如果队列中有新的数据进入，会自动接收消息</span></span><br><span class=\"line\"><span class=\"comment\">                因此不能关闭通道和连接对象</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicConsume(<span class=\"string\">&quot;myQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//消息的具体接收和处理方法</span></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, StandardCharsets.UTF_8);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;成功接收消息：&quot;</span> + message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">//不能关闭通道和连接，关闭可能会造成接收时抛出异常或无法接收消息</span></span><br><span class=\"line\">            <span class=\"comment\">//channel.close();</span></span><br><span class=\"line\">            <span class=\"comment\">//connection.close();</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java绑定Exchange发送和接收消息\"><a href=\"#Java绑定Exchange发送和接收消息\" class=\"headerlink\" title=\"Java绑定Exchange发送和接收消息\"></a>Java绑定Exchange发送和接收消息</h3><p>AMQP协议中的核心思想是生产者和消费者解耦，生产者从不直接将消息发送给队列。生产者通常不知道是否一个消息会被发送到队列中，只是将消息发送到一个交换机。<br>由 Exchange 来接收，然后 Exchange 根据特定的策略转发到 Queue 进行存储。Exchange 类似一个交换机，将各个消息分发到对应的队列。</p>\n<p>实际应用中只需要定义好 Exchange 的路由策略。<br>生产者只面向 Exchange 发布消息，消费者只面向 Queue 消费消息，Exchange 定义消息的路由，将各个层面的消息隔离开，降低了整体的耦合度。</p>\n<h4 id=\"direct-消息发送与接收\"><a href=\"#direct-消息发送与接收\" class=\"headerlink\" title=\"direct-消息发送与接收\"></a>direct-消息发送与接收</h4><p>消息发送：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendDirect</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello direct MQ!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;myDirectQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">//声明一个交换机</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 交换机的名称</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 交换机的类型，取值 direct、fanout、topic、headers</span></span><br><span class=\"line\"><span class=\"comment\">            参数3为 是否为持久化的交换机</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                声明交换机时，如果这个交换机已经存在，则会放弃声明。如果不存在，则声明交换机</span></span><br><span class=\"line\"><span class=\"comment\">                这行代码是可有可无的，但是使用前必须确保这个交换机被声明</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;direct&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//将队列绑定到交换机</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 队列的名称</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">            参数3为 消息的RoutingKey（BindingKey）</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                在进行队列和交换机的绑定时，必须确保交换机和队列已经成功声明</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;myDirectQueue&quot;</span>, <span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;directRoutingKey&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//发送消息到指定队列</span></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            参数1为 交换机名称</span></span><br><span class=\"line\"><span class=\"comment\">            参数2为 消息的RoutingKey 如果消息的RoutingKey和某个队列与交换机绑定的RoutingKey一致，那么这个消息就会发送到指定队列中</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                发送消息时必须确保交换机已经创建并且确保已经正确绑定到某个队列</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;directRoutingKey&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    channel.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消息接收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveDirect</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            </span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;myDirectQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;direct&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;myDirectQueue&quot;</span>, <span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;directRoutingKey&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            监听某个队列并获取队列中的数据</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                当前被监听的队列必须已经存在并正确地绑定到了某个交换机中</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicConsume(<span class=\"string\">&quot;myDirectQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, StandardCharsets.UTF_8);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;成功接收消息：&quot;</span> + message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fanout-消息发送与接收\"><a href=\"#fanout-消息发送与接收\" class=\"headerlink\" title=\"fanout-消息发送与接收\"></a>fanout-消息发送与接收</h4><p>类似电视调频道，需要先调到指定频道才能看想要的节目。<br>所以需要消费者先监听，才能接收到消息。</p>\n<p>消息接收：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveFanout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            由于 fanout 类型的交换机的消息是类似于广播的模式，它不需要绑定 RoutingKey</span></span><br><span class=\"line\"><span class=\"comment\">            而又可能会有很多个消费者来接收这个交换机中的数据，因此创建队列是要创建一个随机的队列名称</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            没有参数的 queueDeclare方法会创建一个名字随机的队列</span></span><br><span class=\"line\"><span class=\"comment\">            这个队列的数据是非持久的，是排外的（同时最多只允许有一个消费者监听当前队列），会自动删除（当没有任何消费者监听队列时，这个队列会自动删除）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            getQueue方法用于获取这个随机的队列名</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">queueName</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue();</span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;fanoutExchange&quot;</span>, <span class=\"string\">&quot;fanout&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//将这个随机的队列绑定到交换机中，由于是fanout类型的交换机，因此不需要指定RoutingKey进行绑定</span></span><br><span class=\"line\">            channel.queueBind(queueName, <span class=\"string\">&quot;fanoutExchange&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            监听某个队列并获取队列中的数据</span></span><br><span class=\"line\"><span class=\"comment\">            注意：</span></span><br><span class=\"line\"><span class=\"comment\">                当前被监听的队列必须已经存在并正确地绑定到了某个交换机中</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicConsume(queueName, <span class=\"literal\">true</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, StandardCharsets.UTF_8);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;成功接收消息：&quot;</span> + message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消息发送：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendFanout</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello fanout MQ!&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            由于使用了fanout类型的交换机，因此消息接收方可能会有多个，不建议在消息发送时创建队列，以及绑定队列</span></span><br><span class=\"line\"><span class=\"comment\">            建议在消费者中创建队列并绑定交换机</span></span><br><span class=\"line\"><span class=\"comment\">            但是发送消息时至少应该确保交换机存在</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\"><span class=\"comment\">//            channel.queueDeclare(&quot;myDirectQueue&quot;, true, false, false, null);</span></span><br><span class=\"line\"><span class=\"comment\">//            channel.queueBind(&quot;myDirectQueue&quot;, &quot;directExchange&quot;, &quot;directRoutingKey&quot;);</span></span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;directExchange&quot;</span>, <span class=\"string\">&quot;direct&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;fanoutExchange&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    channel.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>明确指定队列名称并进行了和交换机的绑定，可以保证fanout类型的消息不会丢失<br>但是这么写没有意义，因为消费者最终可能有很多，不能让所有消费者监听同一个队列</p>\n<h4 id=\"topic-消息发送与接收\"><a href=\"#topic-消息发送与接收\" class=\"headerlink\" title=\"topic-消息发送与接收\"></a>topic-消息发送与接收</h4><p>接收消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveTopic</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;topicQueue&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;topicExchange&quot;</span>, <span class=\"string\">&quot;topic&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;topicQueue&quot;</span>, <span class=\"string\">&quot;topicExchange&quot;</span>, <span class=\"string\">&quot;aa.*&quot;</span>);</span><br><span class=\"line\">            channel.basicConsume(<span class=\"string\">&quot;topicQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body, StandardCharsets.UTF_8);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;成功接收消息：&quot;</span> + message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发送消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendTopic</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello topic MQ!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;topicExchange&quot;</span>, <span class=\"string\">&quot;topic&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;topicExchange&quot;</span>, <span class=\"string\">&quot;aa.a&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    channel.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"fanout与topic使用场景对比\"><a href=\"#fanout与topic使用场景对比\" class=\"headerlink\" title=\"fanout与topic使用场景对比\"></a>fanout与topic使用场景对比</h4><p>topic 类型的交换机和 fanout 类型的交换机一样，都是一对多的交换机类型，都可以实现将一个消息同时发送给多个队列 </p>\n<p>fanout 更适合于使用在一个功能不同的进程来获取数据<br>例如手机app中的消息推送，一个app可能会有很多用户安装，然后他们都会启动一个随机队列来接受自己的数据</p>\n<p>topic 更适合不同功能模块来接收同一个消息<br>例如商城下单成功后需要发送消息到队列中<br>假如 RoutingKey 为 order.success 。物流系统监听 order.* ；发票系统监听 order.*</p>\n<p>Topic 可以使用随机的队列名也可以使用明确的队列名，但如果功能比较重要，建议使用明确的队列名并要求持久化的队列。</p>\n<h4 id=\"事务消息\"><a href=\"#事务消息\" class=\"headerlink\" title=\"事务消息\"></a>事务消息</h4><p>事务消息和数据库的事务类似，只是MQ中的消息要保证消息是否全部发送成功，防止信息都是的一种策略。</p>\n<p>RabbitMQ有两种方式来解决这个问题：</p>\n<ol>\n<li>通过AMQP提供的事务机制实现</li>\n<li>使用发送者确认模式实现（效率要高一些）</li>\n</ol>\n<p>启用事务发送消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example.rabbitmq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeoutException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendTransaction</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>();</span><br><span class=\"line\">        factory.setHost(<span class=\"string\">&quot;0.0.0.0&quot;</span>);</span><br><span class=\"line\">        factory.setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">        factory.setUsername(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        factory.setPassword(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            connection = factory.newConnection();</span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello Transaction!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;transactionQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;transactionExchange&quot;</span>, <span class=\"string\">&quot;direct&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;transactionQueue&quot;</span>, <span class=\"string\">&quot;transactionExchange&quot;</span>, <span class=\"string\">&quot;transactionRoutingKey&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动一个事务，启动事务后所有写入到队列的消息必须显式地调用 txCommit 提交事务或txRollback 回滚事务</span></span><br><span class=\"line\">            channel.txSelect();</span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;transactionExchange&quot;</span>, <span class=\"string\">&quot;transactionRoutingKey&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;transactionExchange&quot;</span>, <span class=\"string\">&quot;transactionRoutingKey&quot;</span>, <span class=\"literal\">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            <span class=\"comment\">//提交事务，如果调用 txSelect 启动了事务，必须显示调用事物的提交</span></span><br><span class=\"line\">            <span class=\"comment\">//否则消息不会真正写入队列，提交后会将内存中的消息写入队列并释放内存</span></span><br><span class=\"line\">            channel.txCommit();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span> + message);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (channel != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//回滚事务，放弃当前事务中所有没有提交的消息，释放内存</span></span><br><span class=\"line\">                    channel.txRollback();</span><br><span class=\"line\">                    channel.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (connection != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | TimeoutException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当消费者开启事务后，即使不做提交。依然可以获取队列中的消息并且消息从队列中移除<br><strong>暂时 事务对接收者没有影响</strong></p>\n</blockquote>\n<h4 id=\"发送者确认模式\"><a href=\"#发送者确认模式\" class=\"headerlink\" title=\"发送者确认模式\"></a>发送者确认模式</h4><p>Confirm 发送方确认模式使用和事务类似，也是通过设置 channel 进行发送方确认的，最终达到确保所有消息全部发送成功的目的。</p>\n<p>代码大部分相同（加减几行的区别），就不单独贴代码块了。<del>上面大段重复好难受</del></p>\n<p>启用发送者确认模式<br><code>channel.confirmSelect();</code></p>\n<p>方式一：<br>channel.waiForConfirms() 普通发送方确认模式<br>可以有一个参数，超时时间（毫秒值）</p>\n<p>会阻塞线程等待服务返回响应，用于是否消息发送成功，如果服务器确认消息已经发送完成则返回true，都则返回false<br>可以给这个方法一个毫秒值用于确认我们的需要等待服务确认的时间<br>如果超过了指定时间以后则会抛出异常 InterruptedException 表示服务器出现了问题需要补发消息或将消息缓存到 redis 中，稍后利用定时任务补发<br>无论返回false还是抛出异常，消息都有可能发送成功或发送失败<br>如果要求这个消息一定要发送到队列，那么可以采用消息补发（重新发送）</p>\n<p>方式二：<br>channel.waitForConfirmsOrDie() 批量确认模式<br>它会向服务中确认之前当前通道中发送的所有消息是否已经全部写入成功<br>这个方法没有返回值，如果服务器中有一条消息没有能够成功或向服务器发送确认时服务不可访问，都被认定为消息发送失败。可能有消息没有发送成功，需要进行消息补发<br>如果无法向服务器获取确认信息，那么方法会抛出 InterruptedException 异常，这时就需要补发<br>这个方法也可以指定超时时间，同上</p>\n<blockquote>\n<p>批量消息确认的速度比普通消息确认要快，但是一旦出现需要补发的情况，不能确认具体是哪条消息没有发送完成，需要将本次所有消息全部补发</p>\n</blockquote>\n<p>方式三：<br>channel.addConfirmListener() 异步确认模式</p>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">异步消息确认监听器，需要在发送消息前启动</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">channel.addConfirmListener(<span class=\"keyword\">new</span> <span class=\"title class_\">ConfirmListener</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//消息确认以后的回调方法</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    参数1 被确认的消息编号 从1开始自动递增标记当前是第几条消息</span></span><br><span class=\"line\"><span class=\"comment\">    参数2 当前消息是否同时确认了多个</span></span><br><span class=\"line\"><span class=\"comment\">    注意：如果参数2为true，则表示本次确认同时确认了多条消息；如果为false，则表示之确认了当前编号的消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleAck</span><span class=\"params\">(<span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//消息没有确认的回调方法，执行消息补发之类的操作</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    参数1 没有被确认的消息编号 从1开始自动递增标记当前是第几条消息</span></span><br><span class=\"line\"><span class=\"comment\">    参数2 当前消息是否同时没有确认了多个</span></span><br><span class=\"line\"><span class=\"comment\">    注意：如果参数2为true 则表示小于当前编号的所有消息可能都没有发送成功，需要补发；为false 则表示当前编号的消息没有发送成功，需要补发</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleNack</span><span class=\"params\">(<span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"消费者确认模式\"><a href=\"#消费者确认模式\" class=\"headerlink\" title=\"消费者确认模式\"></a>消费者确认模式</h4><p>为保证消息从队列可靠地到达消费者，消费者可以在队列声明时指定 noAck 参数，为 false 时，RabbitMQ会等待消费者显式发回ack信号后才从内存（和磁盘，如果持久化的话）中移去消息。否则，RabbitMQ会在队列中的消息被消费后立即删除它。</p>\n<p>手动确认主要使用以下方法：</p>\n<p>basicAck() 用于肯定确认<br>basicRecover() 路由不成功的消息，使用recover重新发送到队列<br>basicReject() 拒收消息，可以设置是否放回到队列中。并且只能一次拒绝一条消息。批量拒绝消息使用 basicNack()<br>basicNack() 可以一次拒绝多条消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取当前消息是否被接收过一次，false没被接受过，true被接收过，也可能处理完成，需要进行消息防重复处理</span></span><br><span class=\"line\">envelope.isRedeliver();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取消息的编号</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">deliveryTag</span> <span class=\"operator\">=</span> envelope.getDeliveryTag();</span><br><span class=\"line\"><span class=\"comment\">//获取当前内部类的通道</span></span><br><span class=\"line\"><span class=\"type\">Channel</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getChannel();</span><br><span class=\"line\"><span class=\"comment\">//手动确认这个消息，确认以后表示当前消息已经成功处理了，需要从队列中移除</span></span><br><span class=\"line\"><span class=\"comment\">//这个方法应该在当前消息处理程序全部完成后执行</span></span><br><span class=\"line\"><span class=\"comment\">//参数1 消息的序号</span></span><br><span class=\"line\"><span class=\"comment\">//参数2 为是否确认多个，为true表示确认小等于当前编号的所有消息，false单个确认，确认当前消息</span></span><br><span class=\"line\"><span class=\"comment\">//注意：如果启动事务，而消息确认模式为手动确认。那么必须要提交事务，否则即使调用确认调用方法，消息也不回从队列中移除</span></span><br><span class=\"line\">c.basicAck(deliveryTag,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"springboot集成RabbitMQ\"><a href=\"#springboot集成RabbitMQ\" class=\"headerlink\" title=\"springboot集成RabbitMQ\"></a>springboot集成RabbitMQ</h2><p>和上面单独使用Java进行收发消息的流程基本一致</p>\n<p>maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.rabbitmq.host=0.0.0.0</span><br><span class=\"line\">spring.rabbitmq.port=5672</span><br><span class=\"line\">spring.rabbitmq.username=root</span><br><span class=\"line\">spring.rabbitmq.password=root</span><br></pre></td></tr></table></figure>\n\n<p>配置类（用于声明队列和交换机，以及绑定队列和交换机）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.springboottext.rabbitmq.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置一个Direct类型的交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DirectExchange <span class=\"title function_\">directExchange</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DirectExchange</span>(<span class=\"string\">&quot;bootDirectExchange&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置一个队列</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">directQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;bootDirectQueue&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 配置一个队列和交换机的绑定</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> directQueue    需要绑定的队列对象，参数名必须要和某个<span class=\"doctag\">@Bean</span>的方法名完全相同以进行自动注入</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> directExchange 需要绑定的交换机对象，参数名必须要和某个<span class=\"doctag\">@Bean</span>的方法名完全相同以进行自动注入</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Binding <span class=\"title function_\">directBinding</span><span class=\"params\">(Queue directQueue, DirectExchange directExchange)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//完成绑定</span></span><br><span class=\"line\">        <span class=\"comment\">// 参数1 需要绑定的队列</span></span><br><span class=\"line\">        <span class=\"comment\">// 参数2 需要绑定的交换机</span></span><br><span class=\"line\">        <span class=\"comment\">// 参数3 绑定时的RoutingKey</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> BindingBuilder.bind(directQueue).to(directExchange).with(<span class=\"string\">&quot;RoutingKey&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置一个Fanout类型的交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FanoutExchange <span class=\"title function_\">fanoutExchange</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FanoutExchange</span>(<span class=\"string\">&quot;fanoutExchange&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置一个Topic类型的交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TopicExchange <span class=\"title function_\">topicExchange</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TopicExchange</span>(<span class=\"string\">&quot;topicExchange&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Service类（发送消息）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.springboottext.rabbitmq.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.springboottext.rabbitmq.service.SendService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;sendService&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SendServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SendService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//注入amqp的模板类，里用这个对象来发送和接受消息</span></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate amqpTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessage</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        发送消息</span></span><br><span class=\"line\"><span class=\"comment\">        参数1 交换机名</span></span><br><span class=\"line\"><span class=\"comment\">        参数2 RoutingKey</span></span><br><span class=\"line\"><span class=\"comment\">        参数3 具体消息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        amqpTemplate.convertAndSend(<span class=\"string\">&quot;bootDirectExchange&quot;</span>, <span class=\"string\">&quot;RoutingKey&quot;</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendFanoutMessage</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        amqpTemplate.convertAndSend(<span class=\"string\">&quot;fanoutExchange&quot;</span>, <span class=\"string\">&quot;&quot;</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendTopicMessage</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        amqpTemplate.convertAndSend(<span class=\"string\">&quot;topicExchange&quot;</span>, <span class=\"string\">&quot;aa&quot;</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Service类（接收消息）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.springboottext.rabbitmq.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.springboottext.rabbitmq.service.ReceiveService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service(&quot;receiveService&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReceiveServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ReceiveService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AmqpTemplate amqpTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个接收不是不间断的接收消息，每执行一次只能接收一次。如果有新消息，不会自动接收</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">bootDirectQueue</span> <span class=\"operator\">=</span> (String) amqpTemplate.receiveAndConvert(<span class=\"string\">&quot;bootDirectQueue&quot;</span>);</span><br><span class=\"line\">        System.out.println(bootDirectQueue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> message 接收到的具体消息数据</span></span><br><span class=\"line\"><span class=\"comment\">     *                注意：如果当前监听方法正常结束Spring会自动确认消息，如果出现异常则不会确认消息</span></span><br><span class=\"line\"><span class=\"comment\">     *                因此在消息处理时，应该做好消息的防重复处理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@RabbitListener</span> 注解用于标记当前方法是一个RabbitMQ的消息监听方法，作用是持续性的自动接收消息</span></span><br><span class=\"line\"><span class=\"comment\">     * 这个方法不需要手动调用，Spring会自动运行这个监听</span></span><br><span class=\"line\"><span class=\"comment\">     * queues 用于指定一个已经存在的队列名，用于进行队列的监听</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(queues = &quot;bootDirectQueue&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">directReceive</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            //@QueueBinding 注解完成队列和交换机的绑定</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue(), //@Queue 创建一个队列（没有指定参数则表示创建一个随机队列</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(name = &quot;fanoutExchange&quot;, type = &quot;fanout&quot;) //@Exchange 创建一个交换机</span></span><br><span class=\"line\"><span class=\"meta\">            )&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fanoutReceive01</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;01--&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue(),</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(name = &quot;fanoutExchange&quot;, type = &quot;fanout&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">            )&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fanoutReceive02</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;02--&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue(&quot;topic01&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">                    key = &quot;aa&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(name = &quot;topicExchange&quot;, type = &quot;topic&quot;))</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">topicReceive01</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;01--&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue(&quot;topic02&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">                    key = &quot;aa.*&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(name = &quot;topicExchange&quot;, type = &quot;topic&quot;))</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">topicReceive02</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;02--&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@RabbitListener(bindings = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">            @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                    value = @Queue(&quot;topic03&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">                    key = &quot;aa.#&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                    exchange = @Exchange(name = &quot;topicExchange&quot;, type = &quot;topic&quot;))</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">topicReceive03</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;03--&quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RabbitMQ集群\"><a href=\"#RabbitMQ集群\" class=\"headerlink\" title=\"RabbitMQ集群\"></a>RabbitMQ集群</h2><p>普通模式（默认）：<br>对于Queue来说，消息实体只存在于其中的一个节点A/B两个节点仅有相同的元数据，即队列结构。<br>交换机的所有元数据在所有节点上是一致的，而队列的完整信息只有在创建它的节点上，各个节点仅有相同的元数据，即队列结构。<br>当消息进入A节点的Queue中后，consumer从B节点拉取数据时，RabbitMQ会临时在A、B间进行消息传输，把A中的消息实体取出并经过B发送给consumer。<br>所以consumer应尽量连接每个节点，从中取消息。即对于同一个逻辑队列要在多个节点建立物理Queue，否则无论consumer连A或B，出口总在A，会产生瓶颈。<br>该模式存在一个问题就是当A节点故障后，B节点无法取到A节点中还未消费的消息实体。<br>如果做个消息持久化，那么等A节点恢复，然后才可被消费；如果没有做持久化，那就会丢失消息。<br>该模式非常适合非持久化队列，只有该队列是非持久化的，客户端才能重新连接到集群中的其他节点，并且重新创建队列。如果该队列是持久化的，那么唯一的办法就是将故障节点恢复起来。</p>\n<p>镜像模式（高可用模式）：<br>把需要的队列做成镜像模式，存在于多个节点数据Rabbitmg的HA方案。<br>该模式解决了上述问题，其实质和普通模式的不同之处在于，消息实体会主动在镜像节点间同步，而不会在consumer取数据时临时拉取。<br>该模式带来的副作用也很明显，除了降低系统性能以外，如果镜像队列过多，加之有大量的消息进入，集群内部的网铬带宽将会被这种同步通讯大大消耗掉，所以在对可靠性要求较高的场合中适用。</p>\n<h3 id=\"配置集群\"><a href=\"#配置集群\" class=\"headerlink\" title=\"配置集群\"></a>配置集群</h3><ol>\n<li><p>配置cookie文件<br>Erlang Cookie 是保障不同节点可以互相通信的密钥，要保证集群中不同节点互相通信，必须共享相同的 Erlang Cookie，具体存放在 <code>/var/lib/rabbitmq/.erlang.cookie</code></p>\n<blockquote>\n<p>跨服务器拷贝 <code>scp /var/lib/rabbitmq/.erlang.cookie ip:/var/lib/rabbitmq</code></p>\n</blockquote>\n</li>\n<li><p>分别启动 RabbitMQ 服务</p>\n</li>\n<li><p>将某个 RabbitMQ 加入到某个服务器节点<br><code>rabbitmqctl stop_app</code><br><code>rabbitmqctl join_cluster rabbit@A</code><br><code>rabbitmqctl start_app</code><br>A 为某个机器的 hostname；在 hostname 为B的机器中执行这些命令</p>\n</li>\n</ol>\n<p>查看集群状态：<code>rabbitmqctl cluster_status</code></p>\n<h3 id=\"springboot链接集群\"><a href=\"#springboot链接集群\" class=\"headerlink\" title=\"springboot链接集群\"></a>springboot链接集群</h3><p>配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.rabbitmq.addresses</span>=<span class=\"string\">ip1:port,ip2:port</span></span><br><span class=\"line\"><span class=\"attr\">spring.rabbitmq.username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">spring.rabbitmq.password</span>=<span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置镜像模式\"><a href=\"#配置镜像模式\" class=\"headerlink\" title=\"配置镜像模式\"></a>配置镜像模式</h3><p>任意节点执行：<code>rabbitmqctl set_policy ha-all &quot;^&quot; &#39;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#39;</code></p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rabbitmqctl set_policy [-p Vhost] Name Pattern Definition [Priority]</span><br><span class=\"line\"></span><br><span class=\"line\">-p Vhost: 可选参数，针对指定vhost下的queue进行设置</span><br><span class=\"line\">Name: policy的名称</span><br><span class=\"line\">Pattern: queue的匹配模式(正则表达式)</span><br><span class=\"line\">Definition: 镜像定义，包括三个部分ha-mode, ha-params, ha-sync-mode</span><br><span class=\"line\">    ha-mode: 指明镜像队列的模式，有效值为 all/exactly/nodes</span><br><span class=\"line\">        all: 表示在集群中所有的节点上进行镜像</span><br><span class=\"line\">        exactly: 表示在指定个数的节点上进行镜像，节点的个数由ha-params指定</span><br><span class=\"line\">        nodes: 表示在指定的节点上进行镜像，节点名称通过ha-params指定</span><br><span class=\"line\">    ha-params: ha-mode模式需要用到的参数</span><br><span class=\"line\">    ha-sync-mode: 进行队列中消息的同步方式，有效值为automatic和manual</span><br><span class=\"line\">priority: 可选参数，policy的优先级</span><br></pre></td></tr></table></figure>\n\n<p>也可在web管控台中 Admin 中的 Policies 中进行配置。</p>\n"},{"title":"SpringBoot笔记","date":"2022-05-09T01:12:18.000Z","_content":"\n# 第一章 xml与JavaConfig\n\n1. 为什么要使用springboot  \n   因为Spring、SpringMVC需要使用大量的配置文件（xml文件）\n   还需要配置各种对象，把使用的对象放到spring容器中才能使用对象\n   需要了解其他框架的配置规则\n   比较繁琐\n2. SpringBoot相当于 不需要配置文件的Spring+SpringMVC。常用的框架和第三方库都已经配置好了，直接用。\n3. SpringBoot开发效率高，使用更方便。\n\n## @JavaConfig\n\njavaConfig：使用java类作为xml配置文件的代替，是配置spring容器的纯Java方式。在这个Java类中可以创建Java对象，把对象放入sprig容器中（注入到容器）。  \n使用两个注解：\n1. @Configuration：放在一个类上，表示这个类作为配置文件使用。\n2. @Bean：放在方法上，声明对象，把这个对象注入到容器。相当于<bean>\n\n使用示例\n~~~java\npackage org.example;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration：表示当前类作为配置文件使用。是用来配置容器的\n * 位置：在类上\n * \n * 这个类相当于beans.xml\n */\n@Configuration\npublic class SpringConfig {\n\n    /**\n     * 创建方法，方法返回值为对象。方法上加入@bean注解\n     * 方法返回值对象就注入到容器中\n     *\n     * @Bean: 把对象注入到Spring容器中。作用相当于<bean>\n     * 位置：在方法上\n     * 说明：@Bean，不指定对象名称，默认方法名是id\n     */\n    @Bean\n    public Student createStudent() {\n        Student s1 = new Student();\n        s1.setName(\"张三\");\n        s1.setId(1);\n        return s1;\n    }\n\n    @Bean(name = \"student2\")\n    public Student createStudent2() {\n        Student s2 = new Student();\n        s2.setName(\"李四\");\n        s2.setId(2);\n        return s2;\n    }\n}\n~~~\n\n## @ImportResource\n\n@ImportResource：导入其他的xml配置文件，等于在xml `<import resources=\"其他配置文件\"/>`  \n使用示例\n~~~java\n@ImportResource(value = {\"classpath:applicationContext.xml\",\"classpath:beans.xml\"})\npublic class SpringConfig {\n}\n~~~\nvalue参数可以是数组，以导入多个xml配置文件  \n\n## @PropertyResource\n\n@PropertyResource： 读取properties属性配置文件可以实现外部化配置，在程序代码之外提供数据。  \n步骤：\n1. 在resources目录下，创建properties文件，使用key=value的格式提供数据\n2. 在PropertyResource指定properties文件的位置\n3. 使用@Value(value=\"${key}\")\n\n~~~java\n@Configuration\n@ImportResource(value = \"classpath:applicationContext.xml\")\n@PropertySource(value = \"classpath:config.properties\")\n@ComponentScan(basePackages = \"org.example.vo\")\npublic class SpringConfig {\n}\n~~~\n\n# 第二章 SpringBoot\n\n## 介绍\n\n[Spring官网](https://spring.io/)\nSpringBoot是Spring中的一个成员，可以简化Spring，SpringMVC的使用。核心还是IOC容器。\n\n特点\n* Create stand-alone Spring applications\n    创建Spring应用\n* Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\n    内嵌的tomcat，jetty，undertow服务器（不用部署war包）\n* Provide opinionated 'starter' dependencies to simplify your build configuration  \n    提供了starter起步依赖，来简化应用的配置  \n    比如使用MyBatis框架，需要在Spring项目中，配置MyBatis的对象SqlSessionFactory，Dao的代理对象  \n    在SpringBoot项目中，在pom.xml中，加入一个mybatis-spring-boot-starter依赖\n* Automatically configure Spring and 3rd party libraries whenever possible\n    尽可能去配置spring和第三方库，自动配置（将spring和第三方库中的对象创建好，放入容器中，以便于使用）\n* Provide production-ready features such as metrics, health checks, and externalized configuration\n    提供了健康检查，统计，外部化配置\n* Absolutely no code generation and no requirement for XML configuration\n    不用生成代码，不用使用xml做配置\n\n## 创建SpringBoot项目\n\n使用Spring提供的初始化器，即向导创建SpringBoot应用\n\n使用的地址：https://start.spring.io  \n国内的地址：https://start.springboot.io\n也可以直接访问网址，创建并下载。\n\nSpringBoot的目录结构：\n![SpringBoot目录结构.png](../images/SpringBoot笔记/SpringBoot目录结构.png)\n\n## 注解的使用\n\n@SpringBootApplication\n复合注解：由\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan\n组成\n\n1. @SpringBootConfiguration\n部分源码：\n~~~java\n@Configuration\npublic @interface SpringBootConfiguration {\n    @AliasFor(\n        annotation = Configuration.class\n    )\n    boolean proxyBeanMethods() default true;\n}\n~~~\n说明：使用了@SpringBootConfiguration注解标注的类，可以作为配置文件使用，可以使用BEAN声明对象，注入到容器。\n2. @SpringBootConfiguration\n启用自动配置，把java对象配置好，注入到spring容器中。例如：将MyBatis对象创建好，放入到容器中。\n3. @ComponentScan\n扫描器，找到注解，根据注解功能创建对象，给属性赋值等。\n默认扫描的包：@ComponentScan所在的包和子包。\n\n## SpringBoot的配置文件\n\n配置文件名称：application\n拓展名：properties(key=value);yml(ket:value)\n使用application.properties或application.yml\n\napplication.properties示例：\n~~~properties\n#设置端口号\nserver.port=8080\n#设置访问应用上下文路径，contextpath\nserver.servlet.context-path=/boot\n~~~\n\napplication.yml示例：\n~~~yaml\nserver:\n  port: 8080\n  servlet:\n    context-path: /boot\n~~~\n\n注：properties与yml同时存在时，会使用properties。（一般只是用一个，不要两个一起用）\n\n## 多环境配置\n\n有开发环境，测试环境，上线环境。  \n每个环节都有不同的配置信息，例如端口，上下文件，数据库url，用户名，密码等。\n\n使用多环境配置文件，可以方便切换不同的配置。  \n使用方式：创建多个配置文件，名称规则：application-环境名称.properties(yml)\n\n创建开发环境的配置文件：application-dev.properties(application-dev.yml)\n创建测试环境的配置文件：application-test.properties\n\n在application.properties中指定使用哪个配置文件\n~~~properties\n#激活使用哪个配置文件\nspring.profiles.active=dev\n~~~\n\n## 自定义配置\n\n### @Value(\"${key}\")\n\nkey来自application.properties\n~~~properties\nstudent.name=咕咕咕\nstudent.age=20\n~~~\n注解加在属性定义上，便能读取配置中的数据。\n~~~java\n@Controller\npublic class SpringBoot {\n\n    @Value(\"${student.name}\")\n    private String name;\n\n    @RequestMapping(value = \"/hello\", produces = \"application/json\")\n    @ResponseBody\n    public String hello() {\n        return \"hello,\" + name;\n    }\n}\n~~~\n\n### @ConfigurationProperties(prefix=\"...\")\n\n将整个文件映射为一个对象，用于自定义配置项比较多的情况。\n在类上加上\n@Component\n@ConfigurationProperties(prefix = \"student\")\n注解，prefix内为属性名\n~~~java\npackage com.example.vo;\n\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Component\n@ConfigurationProperties(prefix = \"student\")\npublic class Student {\n    private String name;\n    private String age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getAge() {\n        return age;\n    }\n\n    public void setAge(String age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"name='\" + name + '\\'' +\n                \", age='\" + age + '\\'' +\n                '}';\n    }\n}\n~~~\n\n在Controller中使用@Resource自动注入，从容其中拿到对象，进行赋值使用。\n\n## SpringBoot中使用jsp(不推荐使用jsp，因为前后端要分离)\n\nSpringBoot不推荐使用jsp，而是使用模板技术代替jsp  \nSpringBoot原生不支持jsp，需要配置依赖项。  \n1. 加入一个处理jsp的依赖，负责编译jsp文件。  \n~~~xml\n<dependency>\n    <groupId>org.apache.tomcat.embed</groupId>\n    <artifactId>tomcat-embed-jasper</artifactId>\n</dependency>\n~~~\n2. 如果需要使用servlet，jsp，jstl的功能，还需要添加额外的依赖项。\n~~~xml\n<dependencys>\n    <!--jstl的依赖-->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>jstl</artifactId>\n    </dependency>\n    <!--servlet的依赖-->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n    </dependency>\n    <!--jsp的依赖-->\n    <dependency>\n        <groupId>javax.servlet.jsp</groupId>\n        <artifactId>javax.servlet.jsp-api</artifactId>\n        <version>2.3.3</version>\n    </dependency>\n</dependencys>\n~~~\n\n3. 创建一个存放jsp的目录，一般叫webapp\n    index.jsp\n4. 需要在pom.xml指定jsp文件编译后的存放目录\n    META-INF/resources\n5. 创建Controller，访问jsp\n6. 在application.properties文件中配置视图解析器\n\n使用示例：\nindex.jsp\n~~~jsp\n<%@ page contextType=\"text/html;charset=UTF-8” language=\"java\" %>\n<html>\n<head>\n    <title>jsp文件</title>\n</head>\n<body>\n<h3>使用jsp显示Controller中的数据 ${data}</h3>\n</body>\n</html>\n~~~\nController类\n~~~java\npackage com.example;\n\nimport org.springfarmework.stereotype.Controller;\n\n@Controller\npublic class JspController{\n//    public String Jsp(HttpServletRequest request){\n//        request.setAttribute(\"data\",\"SpringBoot使用jsp\");\n//        //视图的逻辑名称\n//        return \"index\";\n//    }\n\n    /**\n     * \n     * @param model\n     * @return\n     */\n    public String Jsp(Model model){\n        //将数据放入到request作用域\n        model.addAttribute(\"data\",\"SpringBoot使用jsp\");\n        //视图的逻辑名称\n        return \"index\";\n    }\n    \n}\n~~~\napplication.properties中添加\n~~~properties\n#配置视图解析器 前缀及后缀\n#/ = src/main/webapp\nspring.mvc.view.prefix=/\nspring.mvc.view.suffix=.jsp\n~~~\npom.xml文件中，指定jsp编译后存放的目录。\n~~~xml\n<resources>\n    <resource>\n        <!--jsp原来的目录-->\n        <directory>src/main/webapp</directory>\n        <!--指定编译后的存放目录-->\n        <directory>META_INF/resources</directory>\n        <!--指定处理的目录和文件-->\n        <includes>\n            <include>**/*.*</include>\n        </includes>\n    </resource>\n\n</resources>\n~~~\n\njsp正在被逐渐淘汰，因为它在页面中嵌入了java代码。使得前后端不能分离，从而加大了前端与后端的沟通成本，降低了开发效率。\n比如下面的对话(来自网络)\n> 后端：你写的页面有问题啊，不显示数据。\n前端：不可能，我这边都是好的。\n后端：你自己来看啊。\n前端：你写的这是什么玩意？我给你的代码不是这样的。\n后端：我得把你的代码加到 JSP 里啊。\n前端：我又不懂 JSP 啊，你再把代码摘出来吧，我帮你看看问题。\n后端：......\n\n可以使用ajax技术，实现前后端分离。\n\n## 使用容器\n通过代码，从容器中获取对象。  \n在main方法中SpringApplication.run()方法获取返回的String容器对象，再获取业务bean进行调用。\n\nrun()方法的源码：\n~~~java\n    public static ConfigurableApplicationContext run(Class<?> primarySource, String... args) {\n        return run(new Class[]{primarySource}, args);\n    }\n~~~\nConfigurableApplicationContext：接口，是ApplicationContext的子接口\n\n使用示例：\n手动从容器中获取UserService对象，调用其中的sayHello方法。\n~~~java\n@SpringBootApplication\npublic class SpringBootDemo001Application {\n\n    public static void main(String[] args) {\n        //获取容器对象\n        //ConfigurableApplicationContext ctx = SpringApplication.run(SpringBootDemo001Application.class, args);\n        ApplicationContext ctx = SpringApplication.run(SpringBootDemo001Application.class, args);\n        //从容器中获取对象\n        UserService userService = (UserService) ctx.getBean(\"UserService\");\n        userService.sayHello(\"张三\");\n    }\n}\n~~~\n\n## CommandLineRunner接口、ApplicationRunner接口\n\n这两个接口都有一个run方法。执行时间在容器对象创建好后，自动执行run()方法。\n可以完成自定义的在容器对象创建好的一些操作。\n\n源码：\n~~~java\n@FunctionalInterface\npublic interface CommandLineRunner {\n    void run(String... args) throws Exception;\n}\n\n@FunctionalInterface\npublic interface ApplicationRunner {\n    void run(ApplicationArguments args) throws Exception;\n}\n~~~\n\n他们在容器启动完成后执行。\n我们只需要实现这个方法，就可以在容器启动后执行一些内容。比如读取配置文件，数据库连接之类。\n\n使用示例：\n~~~java\npublic class AfterRun implements CommandLineRunner {\n    @Override\n    public void run(String... args) throws Exception {\n        //可做自定义操作\n        System.out.println(\"在容器对象创建好，执行的方法\");\n    }\n}\n~~~\n\n# 第三章 Web组件\n\n拦截器、servlet、Filter\n\n## 拦截器\n\n拦截器是SpringMVC中的一种对象，能拦截对Controller的请求。\n拦截器框架中由系统的拦截器，可以自定义拦截器。实现对请求的预先处理。\n\nSpringMVC实现自定义拦截器：\n1. 创建类实现SpringMVC框架的HandlerInterceptor接口\n~~~java\npublic interface HandlerInterceptor {\n    default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        return true;\n    }\n\n    default void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {\n    }\n\n    default void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {\n    }\n}\n~~~\n2. 需在SpringMVC的配置文件中，声明拦截器\n~~~xml\n<mvc:interceptors>\n    <mvc:interceptor>\n        <mvc:mapping path=\"url\"/>\n        <bean class=\"拦截器的全限定名称\"/>\n    </mvc:interceptor>\n</mvc:interceptors>\n~~~\n\nSpringBoot实现拦截器：\n1. 自定义拦截器\n~~~java\npackage com.example.web;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * 自定义的拦截器\n */\npublic class LoginInterceptor implements HandlerInterceptor {\n\n    /**\n     * @param request\n     * @param response\n     * @param handler  被拦截的控制器对象\n     * @return boolean\n     * true：请求被Controller处理\n     * false：请求被拦截\n     */\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        //判断是否通过拦截器的代码\n        System.out.println(\"拦截器被执行\");\n        return true;\n    }\n}\n~~~\n2. 将拦截器对象注入容器\n~~~java\npackage com.example.config;\n\nimport com.example.web.LoginInterceptor;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class HandlerInterceptorConfig implements WebMvcConfigurer {\n\n    //添加拦截器对象，注入到容器中\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n\n        //创建拦截器对象\n        HandlerInterceptor interceptor = new LoginInterceptor();\n        //指定拦截的url请求\n        String path[] = {\"/user/**\"};\n        //指定不拦截的地址\n        String excludePath[] = {\"/user/login\"};\n        registry.addInterceptor(interceptor).addPathPatterns(path).excludePathPatterns(excludePath);\n    }\n}\n~~~\n3. 写Controller类进行测试\n~~~java\npackage com.example.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class HandlerInterceptorController {\n\n    @RequestMapping(\"/user/register\")\n    @ResponseBody\n    public String userRegister(){\n        return \"访问/user/register\";\n    }\n\n    @RequestMapping(\"/user/login\")\n    @ResponseBody\n    public String userLogin(){\n        return \"访问/user/login\";\n    }\n}\n~~~\n\n## Servlet\n\n在SpringBoot中使用Servlet对象\n使用步骤：\n1. 创建Servlet类。创建类继承HttpServlet。\n~~~java\npackage com.example.web;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n//创建Servlet类\npublic class Servlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doPost(req, resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        //使用HttpServletResponse输出数据，应答结果\n        resp.setContentType(\"text/html;charset=utf-8\");\n        PrintWriter out = resp.getWriter();\n        out.println(\"执行servlet\");\n        out.flush();\n        out.close();\n    }\n}\n~~~\n2. 注册Servlet，让框架能找到Servlet。\n~~~java\npackage com.example.config;\n\nimport com.example.web.Servlet;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class ServletConfig {\n    //定义方法，注册Servlet对象\n    @Bean\n    public ServletRegistrationBean servletRegistrationBean(){\n        //public ServletRegistrationBean(T servlet, String... urlMappings)\n        //第一个参数是Servlet对象，第二个参数是url地址\n        //ServletRegistrationBean bean = new ServletRegistrationBean(new Servlet(),\"/servlet\");\n\n        //无参构造，单独设置参数\n        ServletRegistrationBean bean = new ServletRegistrationBean();\n        bean.setServlet(new Servlet());\n        bean.addUrlMappings(\"/servlet_01\",\"/servlet_02\"); // <url-pattern>\n\n        return bean;\n    }\n}\n~~~\n\n## Filter过滤器\n\nFilter是Servlet规范中的过滤器，可以处理请求，对请求的参数、属性进行调整。常常在过滤器中处理字符编码\n使用步骤：\n1. 创建自定义的过滤器类\n~~~java\npackage com.example.config;\n\nimport com.example.web.MyFilter;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class FilterConfig {\n\n    @Bean\n    public FilterRegistrationBean filterRegistration() {\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new MyFilter());\n        bean.addUrlPatterns(\"/user/*\");\n        return bean;\n    }\n}\n~~~\n2. 注册Filter过滤器对象\n~~~java\npackage com.example.config;\n\nimport com.example.web.MyFilter;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class FilterConfig {\n\n    @Bean\n    public FilterRegistrationBean filterRegistration() {\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new MyFilter());\n        bean.addUrlPatterns(\"/user/*\");\n        return bean;\n    }\n}\n~~~\n3. 写Controller类进行测试\n~~~java\npackage com.example.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class HandlerInterceptorController {\n\n    @RequestMapping(\"/user/register\")\n    @ResponseBody\n    public String userRegister(){\n        return \"访问/user/register\";\n    }\n\n    @RequestMapping(\"/user/login\")\n    @ResponseBody\n    public String userLogin(){\n        return \"访问/user/login\";\n    }\n\n    @RequestMapping(\"/query\")\n    @ResponseBody\n    public String query(){\n        return \"访问/query\";\n    }\n}\n~~~\n\n## 字符集过滤器\n\nCharacterEncodingFilter：解决post请求中乱码的问题\n在SpringMVC框架，在web.xml中注册过滤器。配置它的属性\n\n1. 使用系统提供的字符集过滤器类\n过滤器的注册\n~~~java\npackage com.example.config;\n\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.filter.CharacterEncodingFilter;\n\n@Configuration\npublic class FilterConfig {\n\n    @Bean\n    public FilterRegistrationBean filterRegistration() {\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        //使用框架中的过滤器类\n        CharacterEncodingFilter filter = new CharacterEncodingFilter();\n        //指定使用的编码方式\n        filter.setEncoding(\"utf-8\");\n        //指定request，response都使用encoding的值\n        filter.setForceEncoding(true);\n\n        bean.setFilter(filter);\n        //指定过滤的url地址\n        bean.addUrlPatterns(\"/*\");\n\n        return bean;\n    }\n}\n~~~\n同时需要关闭SpringBoot中默认配置的字符集过滤器，使自定义的过滤器起作用。\n~~~properties\n#SpringBoot中默认已经配置了Character Encoding Filter，默认编码ISO-8859-1\n#设置enable=false 作用是关闭系统中配置好的过滤器，使用自定义的CharacterEncodingFilter\nserver.servlet.encoding.enabled=false\n~~~\n2. 直接修改application.properties配置\n~~~properties\n#让系统的CharacterEncodingFilter生效\nserver.servlet.encoding.enabled=true\n#指定使用的编码方式\nserver.servlet.encoding.charset=UTF-8\n#强制request、response都使用charset属性的值\nserver.servlet.encoding.force=true\n~~~\n\n# 第四章 ORM操作MySQL\n\nORM是“对象-关系-映射”的简称。（Object Relational Mapping，简称ORM）\norm其实就是将类对象的语法翻译成sql语句的一个引擎\n\n使用MyBatis框架操作数据库，在SpringBoot框架集成MyBatis\n使用步骤：\n1. mybatis起步依赖：完成mybatis对象自动配置，对象放在容器中。\n2. pom.xml指定把src/main/java目录中的xml文件包含到classpath中。\n3. 创建实体类Student。\n4. 创建Dao接口StudentDao，创建一个查询学生的方法。\n5. 穿啊关键Dao接口对应的Mapper文件，xml文件，写sql语句。\n6. 创建Service层对象，创建StudentService接口和他的实现类。调dao对象的方法，完成数据库的操作。\n7. 创建Controller对象，访问Service。\n8. 写application.properties文件\n   配置数据库的连接信息\n\n## 第一种方式：@Mapper\n\n@Mapper：放在dao接口上，每个接口都需要使用这个注解。\n~~~java\n/**\n * @Mapper： 告诉MyBatis这是dao接口，创建此接口的代理对象\n *      位置：在类上\n */\n@Mapper\npublic interface StudentDao {\n\n    Student selectById(@Param(\"stuId\") Integer id);\n}\n~~~\n\n## 第二种方式：@MapperScan\n\n@MapperScan：放在SpringBoot启动类上，在包下所有接口在编译后会生成相应的实现类。\n~~~java\n@SpringBootApplication\n/**\n * @MapperScan：找到Dao接口和Mapper文件\n *      basePackages：Dao接口所在的包名\n */\n@MapperScan(basePackages = {\"com.example.dao\"})\npublic class SpringBootDemo001Application implements CommandLineRunner {\n    //..\n}\n~~~\n\n## 第三种方式：Mapper文件和Dao接口分开管理\n\n将mapper文件放在resources目录下\n\n1. 在resources目录中创建子目录（自定义），例如mapper\n2. 将mapper文件放在mapper目录\n3. 在application文件中指定mapper文件的目录\n~~~properties\n#指定mapper文件的位置\nmybatis.mapper-locations=classpath:mapper/*.xml\n#指定mybatis的日志\nmybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl\n~~~\n4. 在pom文件中指定resources目录中的文件，编译到目标目录中\n~~~xml\n<!--resources插件-->\n<resources>\n    <resource>\n        <directory>src/main/resources</directory>\n        <includes>\n            <include>**/*.*</include>\n        </includes>\n    </resource>\n</resources>\n~~~\n\n## 事务\n\nSpring框架中的事务：\n1. 管理事务的对象：事务管理器（接口，接口有很多实现类）\n    例如：使用jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager\n2. 声明式事务：在xml配置文件或使用注释说明事务控制的内容\n    控制事务：隔离级别，传播行为，超时时间\n3. 事务处理方式：\n   1. spring框架中的@Transactional\n   2. aspectj框架可以在xml配置文件中，声明事务控制的内容\n\nSpringBoot中使用事务：\n1. 在业务方法上加入@Transactional，加入注解后，方法有事务功能。\n2. 明确的在启动类上，加入@EnableTransactionManager\n\n# 第五章 接口的架构风格——RESTful\n\n[API百度百科](https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3/3350958?fromtitle=API&fromid=10154)\n接口：应用程序接口（英语：Application Programming Interface，简称：API），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。由于近年来软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。程序设计的实践中，编程接口的设计首先要使软件系统的职责得到合理划分。良好的接口设计可以降低系统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高系统的维护性和扩展性。\n接口：可以指访问servlet、controller的url，调用其他程序的 函数\n\n架构风格：api的组织样式\n    就是一个传统的：http://localhost:8080/dev/student/query?id=2\n\n## REST  \n[RESTful架构风格](https://baike.baidu.com/item/RESTful/4406165)\n1. REST：(Representational State Transfer)表现层状态转移\n    是一种接口的架构风格和设计的理念，不是标准。\n    优点：更简洁，更有层次。\n    表现层状态转移： \n    表现层就是视图层，显示资源的。通过视图页面、jsp等显示操作资源的结果。\n    状态：资源变化\n    转移：资源是可以变化的。资源能创建，new状态，资源创建后可以查询资源，可以被修改。\n2. RESt中的要素：\n    用RESt表示资源和对应资源的操作。在互联网中，表示一个资源或者一个操作。\n    资源是用url表示的，在互联网中，使用的图片、视频、文本、网页等都是资源。\n    对于资源：\n   1. 查询资源：通过url找到资源\n   2. 创建资源：添加资源\n   3. 更新资源：更新资源，编辑\n   4. 删除资源：删除\n    资源使用url表示，通过名称表示资源\n        在url中，使用名词表示资源，以及访问资源的信息，在url中，使用\"/\"分割对资源的信息\n    使用http中的动作（请求方式），表示对资源的操作（CURD）\n    * GET：查询资源——sql select\n      处理单个资源：\n      http://localhost:8080/dev/student/query/2\n      处理多个资源：\n      http://localhost:8080/dev/student/query/2/3\n    * POST：创建资源——sql insert\n      http://localhost:8080/dev/student/add\n      在post请求中传递数据\n    * PUT：更新资源——sql update\n      http://localhost:8080/dev/student/query/2\n      在post中传递数据\n    * DELETE：删除资源——sql delete\n      http://localhost:8080/dev/student/query/2\n    需要分页、排序等参数，依然可以加在url后，比如：\n    http://localhost:8080/dev/student/query/2?page=2&pageSize=10\n3. REST即使用url表示资源，使用http动作操作资源。\n\n## RESTful的注解\n\n1. @PathVariable：从url中获取数据\n2. @GetMapping：支持get请求方式，等同于@RequestMapping（method=RequestMethod.GET）\n3. @PostMapping：支持post请求方式，等同于@RequestMapping（method=RequestMethod.POST）\n4. @PutMapping：支持put请求方式，等同于@RequestMapping（method=RequestMethod.PUT）\n5. @DeleteMapping：支持delete请求方式，等同于@RequestMapping（method=RequestMethod.DELETE）\n6. @RestController：复合注解，是@Controller和@ResponseBody组合\n    在类上使用，表示当前类的所有方法都加入了@ResponseBody\n\nPostman：测试工具\n可以用来测试get、post、put、delete等请求。\n\n注意：**url请求地址加请求方式** 得是唯一的，否则会有歧义\n@**GetMapping**(\"**/student/{stuId}**\")\n\n## 在页面中或ajax中，支持pub、delete请求\n\n在SpringMVC中，有一个过滤器，支持post请求转为put、delete\n\n过滤器：org.springframework.web.filter.HiddenHttpMethodFilter\n作用：将请求中的post请求转为put、delete\n\n使用步骤：\n1. application.properties：开启使用HiddenHttpMethodMFilter过滤器\n2. 在请求页面中，包含_method参数，他的值是put、delete，发起这个请求使用的post方式\n~~~html\n<form action=\"student/put\" method=\"post\">\n    <input type=\"hidden\" name=\"_method\" value=\"put\">\n    <input type=\"submit\" value=\"put请求方式\">\n</form>\n<form action=\"student/delete\" method=\"post\">\n    <input type=\"hidden\" name=\"_method\" value=\"delete\">\n    <input type=\"submit\" value=\"delete请求方式\">\n</form>\n~~~\n\n# 第六章 SpringBoot集成Redis\n\nRedis：一个NoSQL（not only）数据库，常用作缓存使用（cache）\nRedis的数据类型：string、hash、set、zset、list\n\nRedis是一个中间件：是一个独立的服务器。\nJava中著名的客户端：Jedis、lettuce、Redisson\n\nSpring、SpringBoot中有一个RedisTemplate（StringRedisTemplate），用于处理和redis的交互\n\n## redis的使用\n\n导入起步依赖\n~~~xml\n<!--redis起步依赖-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n~~~\ndata-redis使用的是 lettuce客户端库\n在程序中使用RedisTemplate类的方法 操作redis数据，实际就是调用的lettuce客户端中的方法\n\n使用示例\n~~~java\npackage com.example.controller;\n\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.data.redis.core.ValueOperations;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\n\n@RestController\npublic class RedisController {\n\n    /**\n     * 注入RedisTemplate\n     * \n     * RedisTemplate 泛型\n     * RedisTemplate<String,String>\n     * RedisTemplate<Object,Object>\n     * RedisTemplate\n     * \n     * 注意：RedisTemplate对象的名称 redisTemplate\n     */\n    @Resource\n    private RedisTemplate redisTemplate;\n\n    @Resource\n    private StringRedisTemplate stringRedisTemplate;\n\n    //添加数据到redis\n    @PostMapping(\"/redis/add\")\n    public String addToRedis(String name, String value) {\n        //操作Redis中的String类型的数据，先获取ValueOperations对象\n        ValueOperations valueOperations = redisTemplate.opsForValue();\n\n        valueOperations.set(name, value);\n        return \"向redis添加String数据\";\n    }\n\n    //从redis获取数据\n    @GetMapping(\"/redis/getKey\")\n    public String getData(String key) {\n        ValueOperations valueOperations = redisTemplate.opsForValue();\n        Object value = valueOperations.get(key);\n        return \"key:\" + key + \"value:\" + value;\n    }\n\n    @PostMapping(\"/redis/{key}/{value}\")\n    public String addStringKV(@PathVariable String key, @PathVariable String value) {\n        //使用StringRedisTemplate对象\n        stringRedisTemplate.opsForValue().set(key, value);\n        return \"使用StringRedisTemplate对象，\" + \"key:\" + key + \"value:\" + value;\n    }\n\n    @PostMapping(\"/redis/getstr/{key}\")\n    public String getStringValue(@PathVariable String key) {\n        //使用StringRedisTemplate对象\n        stringRedisTemplate.opsForValue().get(key);\n        return \"使用StringRedisTemplate对象，\" + \"key:\" + key;\n    }\n}\n~~~\n\n## StringRedisTemplate 和 RedisTemplate\n\nStringRedisTemplate：把key、value都作为String处理，使用的是String的序列化，可读性好。\nRedisTemplate：把key、value经过了序列化存到redis。key、value是序列化的内容，不能直接识别。默认使用jdk的序列化，可以修改为其他的序列化。\n\n设置key或value的序列化方式\n~~~java\n/**\n * 设置 RedisTemplate 序列化\n */\npublic String addString(String key,String value){\n    //使用RedisTemplate，在存取值之前，设置序列化方式。\n    //设置key使用String的序列化\n    redisTemplate.setKeySerializer(new StringRedisSerializer());\n    //设置value的序列化\n    redisTemplate.setValueSerializer(new StringRedisSerializer());\n\n    redisTemplate.opsForValue().set(key,value);\n    return \"定义RedisTemplate对象key、value的序列化\";\n}\n~~~\n\n# 第七章 SpringBoot集成Dubbo\n\n## SpringBoot集成Dubbo的文档\n\n[文档](https://github.com/apache/dubbo-spring-boot-project/blob/master/README.md)\n\n## 公共项目\n\n独立的maven项目：定义了接口和数据类\n\n~~~java\npublic class Student implements Serializable{\n    private static final long serialVersionUID = 3941539077791951521L;\n    \n    private Integer id;\n    private String name;\n    private Integer age;\n}\n~~~\n~~~java\npublic interface StudentService{\n    Student queryStudent(Integer id);\n}\n~~~\n\n2. 创建服务提供者模块，实现接口模块\n\ndubbo依赖 和 zookeeper依赖\n~~~xml\n<!--dubbo依赖-->\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.0.7</version>\n</dependency>\n<!--zookeeper依赖-->\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-dependencies-zookeeper</artifactId>\n    <version>3.0.7</version>\n    <type>pom</type>\n    <exclusions>\n        <!--排除log4h依赖，因为重复-->\n        <exclusion>\n            <groupId>slf4j-log4j12</groupId>\n            <artifactId>org.slf4j</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n~~~\n注：在pom文件中使用 <exclusions> 标签排除包含的依赖，已解决重复引入依赖的问题\n\n实现接口\n~~~java\n/*\n使用dubbo中的注解暴露服务\n@Component可以不加\n */\n@DubboService(interfaceClass = StudentService.class,version = \"1.0\",timeout = 5000)\npublic class StudentServiceImpl implements StudentService {\n    @Override\n    public Student queryStudent(Integer id) {\n        Student student = studentDao.selectById(id);\n        return student;\n    }\n}\n~~~\n\n外部化配置\n~~~properties\n#配置服务名称 dubbo:application name=\"名称\"\nspring.application.name=studentService-provider\n\n#配置扫描的包，扫描的@DubboService\ndubbo.scan.base-packages=com.example.service\n\n#配置dubbo协议\n#dubbo.protocol.name=dubbo\n#dubbo.protocol.port=20881\n\n#注册中心\ndubbo.registry.address=zookeeper://localhost:2181\n~~~\n\n在类上使用 @DubboService 注解来暴露服务\n\n**在主类之上使用 @EnableDubbo 注解启用Dubbo**\n包含了 @EnableDubboConfig 和 @DubboComponentScan\n~~~java\n@SpringBootApplication\n@EnableDubbo\npublic class SpringBootDemo001Application{\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootDemo001Application.class, args);\n    }\n}\n~~~\n\n3. 创建消费者模块\n\n添加依赖，与服务提供者相同。\n\n创建Controller或者Service调用远程服务\n~~~java\n@RestContrloller\npublic class DubboController{\n    /*\n            引用远程服务，把创建好的代理对象，注入给studentService\n            @DubboReference(interfaceClass = StudentService.class,version = \"1.0\")\n            没有使用interfaceClass，默认是 引用数据类型\n     */\n    @DubboReference(version = \"1.0\")\n    private StudentService studentService;\n    \n    @GetMapping(\"/query\")\n    public String queryStudent(Integer id){\n        Student student = studentService.queryStudent(id);\n        return \"调用远程接口获取的对象：\"+student;\n    }\n}\n~~~\n\n配置文件application.properties\n~~~properties\n#指定服务名称\nspring.application.name=consumer-application\n#指定注册中心\ndubbo.registry.address=zookeeper://localhost:2181\n~~~\n\n# 第八章 SpringBoot打包\n\n主类继承SpringBootServletInitializer才能使用外部的tomcat  \nSpringBootServletInitializer相当于原有web.xml的替代  \n使用嵌入式的tomcat，默认不支持jsp。  \n\n## 打包成war\n\n1. 指定打包后的名称\n~~~xml\n<build>\n    <!--打包后的文件名称-->\n    <finalName>bootDemo</finalName>\n</build>\n~~~\n2. 指定jsp编译的目录\n~~~xml\n        <resources>\n            <resource>\n                <directory>src/main/java</directory>\n                <includes>\n                    <include>**/*.xml</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>src/main/resources</directory>\n                <includes>\n                    <include>**/*.*</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>src/main/webapp</directory>\n                <targetPath>META-INF/resources</targetPath>\n                <includes>\n                    <include>**/*.*</include>\n                </includes>\n            </resource>\n        </resources>\n~~~\n3. 执行打包是war\n~~~xml\n<!--打包类型-->\n<packaging>war</packaging>\n~~~\n4. 主启动类继承SpringBootServletInitializer\n~~~java\n@SpringBootApplication\npublic class SpringBootDemo001Application extends SpringBootServletInitializer{\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootDemo001Application.class, args);\n    }\n}\n~~~\n5. 部署war\n将war文件放到tomcat等服务器的发布目录中。\n\n## 打包成jar\n\n1. 指定打包后的名称\n~~~xml\n<build>\n    <!--打包后的文件名称-->\n    <finalName>bootDemo</finalName>\n</build>\n~~~\n2. 指定springboot-maven-plugin版本\n~~~xml\n<plugins>\n    <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n        <!--打包jar，有jsp文件时，必须指定maven-plugin插件版本是1.4.2.RELEASE-->\n        <version>1.4.2.RELEASE</version>\n    </plugin>\n</plugins>\n~~~\n3. 执行maven clean package  \n    在target目录中，生成jar文件 bootDemo.jar\n    执行独立的springboot项目，即 java -jar bootDemo.jar\n\n\n# 第九章 Thymeleaf 模板\n\n## 介绍\n\nThymeleaf是模板引擎，使用Java开发，在服务器端运行。将处理好的请求发送给浏览器。\nJava生态下的模板还有Freemaker、Velocity、Beetl(国产)等。\n非web环境下，Thymeleaf能直接显示模板上的静态数据；web环境下，能像jsp一样从后台接收数据并替换到模板上。\n它是基于HTML的，以HTML标签为载体。\nSpringBoot集成了Thymeleaf模板技术，官方也推荐使用它来代替jsp进行前端页面的数据展示。因为jsp需要编译运行，效率比较低。\n\n[Thymeleaf官网](https://www.thymeleaf.org/)\n[Thymeleaf官方文档](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html)\n\n## 配置\n\n依赖\n~~~xml\n        <!--模板引擎起步依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n~~~\n\n一些配置\n~~~properties\n#在开发阶段，关闭模板缓存，让修改立刻生效\nspring.thymeleaf.cache=false\n#编码格式\nspring.thymeleaf.encoding=UTF-8\n#模板的类型（默认是HTML，模板是html文件）\nspring.thymeleaf.mode=HTML\n#模板的前缀： 类路径的 classpath:/templates\nspring.thymeleaf.prefix=classpath:/templates/\n#后缀\nspring.thymeleaf.suffix=.html\n~~~\n\n## 表达式\n\n1. 标准变量表达式\n    语法：${key}\n    作用：获取key对应的文本数据，key是request作用域中的key。使用request.setAttribute(),model.addAttribute()\n    在页面中html标签中使用 th:text=\"${key}\"\n~~~html\n<p>获取student对象属性值</p>\n<p th:text=\"${student.id}\">id</p>\n<p th:text=\"${student.name}\">name</p>\n<p th:text=\"${student.age}\">age</p>\n~~~\n2. 选择变量表达式（星号变量表达式）\n    语法：*{key}\n    作用：获取这个key对应的数据，*{key}需要与th:object一起使用\n    目的是简单获取对象的属性值\n~~~html\n<p>使用 *{} 获取student对象属性值</p>\n<div th:object=\"${student}\">\n    <p th:text=\"*{id}\">id</p>\n    <p th:text=\"*{name}\">name</p>\n    <p th:text=\"*{age}\">age</p>\n</div>\n<!--直接使用也可以-->\n<p th:text=\"*{student.id}\">id</p>\n~~~\n3. 链接表达式\n    语法：@{url}\n    作用：表示链接\n\n~~~html\n<h3>链接绝对路径</h3>\n<a th:href=\"@{https://baidu.com}\">百度</a>\n\n<h3>链接相对路径</h3>\n<a th:href=\"@{/queryStudent}\">相对地址，没有参数</a>\n<h3>链接相对路径，使用字符串链接传递参数</h3>\n<a th:href=\"@{'/queryStudent?id=' + ${student.id} }\">相对地址，有参数。获取model中的数据</a>\n<h3>传递多个参数</h3>\n<a th:href=\"@{/queryStudent(name='zhangsan',id=20)}\">传多个参数</a>\n~~~\n\n## Thymeleaf属性\n\n属性是放在html元素中的，就是html元素的属性，加入了th前缀。属性的作用不变。加上th。属性的值由模板引擎处理，在属性上可以使用变量表达式。\n\n~~~html\n<form action=\"/queryStudent\" method=\"post\"></form>\n<form th:action=\"/queryStudent\" th:method=\"${methodAttr}\"></form>g\n~~~\n\n### each 循环\n\neach循环，可以循环List、Map、Array\n语法：在html标签中使用 th:each\n~~~html\n<div th:each=\"集合循环成员，循环状态变量：${key}\">\n    <p th:text=\"${集合循环成员}\"></p>\n</div>\n~~~\n\n集合循环成员，循环状态变量：名称都是自定义的。  \n**”循环的状态变量“可以不定义，默认是”集合循环成员Stat“**\n循环状态变量 iterStat 可以获取以下信息\n**index：当前迭代对象的index**\n**count：当前迭代对象个数（第几个）**\nsize：当前迭代对象大小（总数）\neven/odd：布尔值，当前循环是否是偶数/奇数（从0开始计算）\nfirst：布尔值，当前循环是否是第一个\nlast：布尔值，当前循环是否是最后一个\n\n### 条件判断if\n\n判断语句，条件为true，显示html标签内容，**否则不显示**。**没有else语句**\n语法：th:if=\"条件语句\"\n~~~html\n<p th:if=\"${id==1001}\">id是1001</p>\n<!--\"\"空字符是true-->\n<p th:if=\"${sex}\">空字符</p>\n<!--null是false-->\n<p th:if=\"${null}\">null</p>\n~~~\n\n还有个与 th:unless 和 th:if 相反的行为\n\n### 判断语句 switch,case\n\nth:switch 和 java中的switch一样\n语法：th:switch=\"要比较的值\",th:case=\"值\"\n~~~html\n<div th:switch=\"要比较的值\">\n    <p th:case=\"值1\">结果1</p>\n    <p th:case=\"值2\">结果2</p>\n    <p th:case=\"*\">默认结果(default)</p>\n</div>\n~~~\n注：**以上case只有一句执行**\n\n### 内联 inline\n\n1. 内联test：在html标签外，获取表达式的值\n    语法：[[${key}]]\n~~~html\n<div th:inline=\"text\">\n    <p>我是[[${name}]]</p>\n</div>\n~~~\n\n2. 内联JavaScript\n~~~html\n<script type=\"text/javascript\" th:inline=\"javascript\">\n    var name = [[${name}]]\n    alert(name)\n</script>\n~~~\n\n## 字面量\n\n1. 文本字面量：使用单引号括起来的字符串\n~~~html\n<p th:text=\"'我是'+${name}\">数据显示</p>\n~~~\n2. 数字字面量\n~~~html\n<p th:if=\"${20>5}\">20>5</p>\n~~~\n3. boolean字面量\n~~~html\n<p th:if=\"isLogin == true\">用户已登录</p>\n~~~\n4. null字面量\n~~~html\n<p th:if=\"student != null\">有student数据</p>\n~~~\n\n## 字符串链接\n\n1. 使用单引号括起来的字符串，使用 + 连接其他字符串或表达式\n~~~html\n<p th:text=\"'我是' + ${name}\">数据显示</p>\n~~~\n2. 使用双竖线，|字符串和表达式|\n~~~html\n<p th:text=\"|我是${name}|\">显示数据</p>\n~~~\n\n## 运算符\n\n算数运算：+,-,*,/\n关系比较：>,<,>=,<=(gt,lt,ge,le)\n相等判断：==,!=(eq,ne)\n\n~~~html\n<p th:text=\"${age > 20}\">年龄大于20</p>\n<p th:text=\"${20 + 30}\">显示运算结果</p>\n<p th:if=\"${student == null}\">student是null</p>\n<p th:if=\"${student eq null}\">student是null</p>\n<p th:if=\"${student ne null}\">student不是null</p>\n<p th:if=\"${isLogin == true ? true : false}\"></p>\n~~~\n\n## Thymeleaf基本对象\n\n模板引擎提供了内置对象，可以使用#开始引用。\n[官方文档](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#appendix-a-expression-basic-objects)\n\n1. #request 表示 HttpServletRequest\n2. #session 表示 HttpSession\n3. session 表示 Map对象，是#session的简单表达方式，用来获取session中指定key的值\n    #session.getAttribute(\"loginname\")==session.loginname\n\n~~~html\n<h3>内置对象#request,#session,session的使用</h3>\n<p>获取作用域中的信息</p>\n<p th:text=\"${#requset.getAttribute('requestData')}\"></p>\n<p th:text=\"${#session.getAttribute('sessionData')}\"></p>\n<p th:text=\"${session.loginname}\"></p>\n\n<h3>使用内置对象的方法</h3>\n<p th:text=\"${#request.getRequestURL()}\"></p>\n<p th:text=\"${#request.getRequestURI()}\"></p>\n<p th:text=\"${#request.getQueryString()}\"></p>\n<p th:text=\"${#request.getContextPath()}\"></p>\n<p th:text=\"${#request.getServerName()}\"></p>\n<p th:text=\"${#request.getServerPort()}\"></p>\n~~~\n\n此外，还有很多工具类。提供string、date、集合的一些处理方法。此处不再列举，详细请查看官方文档。\n\n## 自定义模板\n\n模板是内容的复用，定义一次，在其他模板文件中多次使用。\n模板的使用：\n1.定义模板\n2.使用模板\n\n模板定义语法：\n~~~html\n<div th:fragment=\"head\">\n    <p>hello world</p>\n</div>\n~~~\n引用模板的语法：\n~~~html\n<!--插入模板insert-->\n<div th:insert=\"~{ templatename :: selector}\"></div>\n<!--templatename:文件名称-->\n<!--selector:自定义模板名称-->\n\n<div th:insert=\"templatename :: selector\"></div>\n<!--templatename:文件名称-->\n<!--selector:自定义模板名称-->\n\n<!--包含模板insert-->\n<div th:include=\"~{ templatename :: selector}\"></div>\n<div th:include=\"templatename :: selector\"></div>\n\n<!--对于使用模板：有包含模板（th:include），插入模板（th:insert）-->\n<!--包含是替换原来的标签，插入只是插入-->\n~~~\n\n# 第十章 总结\n\n## 注解\n\nspring+springMVC+SpringBoot\n\n创建对象：\n@Controller：放在类上，创建控制器对象，注入到容器中。\n@RestController：放在类上，创建控制器对象，注入到容器中。作用：复合了@Controller合@ResponseBodey，使用这个注解，控制器方法返回值都是数据，没有视图。\n@Service：放在业务层实现类上，创建service对象，注入到容器。\n@Repository：放在dao层实现类上，创建dao对象，注入到容器。没有使用是因为dao对象是MyBatis框架通过代理生成的，不需要使用。\n@Component：放在类上，创建此类的对象，放入到容器中。\n\n赋值：\n@Value：简单类型的赋值。还可以使用它获取配置文件中的数据。\n@Autowired：引用类型赋值自动注入，支持byName，byType，默认是byType。放在属性或构造方法上，推荐放在构造方法上。\n@Qualifer：给引用类型赋值，使用byName。\n_注：@Autowired，@Qualifer都是Spring框架提供的_\n@Resource：来自jdk中的定义，javax.annotation。实现引用类型的自动注入，支持byName，byType。默认是byName，如果失败，再使用byType注入。在属性上使用\n\n其他：\n@Configuration：放在类上，表示这是个配置类，相当于xml配置文件。\n@Bean：放在方法上，把方法返回值对象，注入到spring容器中。\n@ImportResource：加载其他的xml配置文件，把文件中的对象注入到spring容器中。\n@PropertySource：读取其他的properties属性配置文件。\n@ComponentScan：扫描器，指定报名，扫描注解。\n@ResponseBody：放在方法上，表示方法返回值是数据，不是试视图。\n@RequestBody：把请求体中的方法读取出来，转为java对象使用。\n@ControllerAdvice：控制器增强，放在类上，表示此类提供了方法，可以对controller增强功能。\n@ExceptionHandler：处理异常，放在方法上。\n@Transcational：处理事务，放在service实现类的public方法上，表示此方法有事务。\n\nSpringBoot中的注解：\n@SpringBootApplication：放在启动类上，包含了@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan\n\nMybatis相关注解：\n@Mapper：放在类上，让MyBatis找到接口，创建代理对象\n@MapperScan：放在主类上，指定扫描的包，将包中所有接口都创建代理对象。对象注入到容器中。\n@Param：放在dao接口的方法形参前，作为命名参数使用。\n\nDubbo注解：\n@DubboService：在提供者端使用，暴露服务，放在接口实现类上。\n@DubboReference：在消费者端使用，引用远程服务，放在属性上使用。\n@EnableDubbo：放在主类上，表示启用Dubbo功能。\n\n## 一些想法\n\n断断续续学了快一个月，springboot算是摆脱了众多的配置文件，对开发来说还是蛮友好的。\n关于Thymeleaf模板引擎，我感觉和jsp有点像。但我没有学习过jsp，只是浅浅的用过。模板引擎应该算不上前后端分离，不过它是在html文件的标签上增加内容，实现动态的功能，算是伪分离吧。~~前后端分离，人不分离。~~\n现在linux使用地还不是很熟练，后面打算细细地学习下linux的使用，因为web应用是要部署到linux服务器的，所以学习linux是必要的。后面换电脑也打算使用linux作为主操作系统，大概会选择deepin系统吧。\n目前要复习期末考试，考完后，会开始健康码网站的制作。\n后面的学习计划，大概有Nginx，Docker之类的，然后继续深入对spring系列框架的理解合使用。\n更远一些的，大概会去学一下vue，了解下前端，毕竟如果是一个人做网站的话，只有后端也是不太行的。\n好耶！可以使用springboot，告别那么多配置文件了。\n> 2022.5.29","source":"_posts/SpringBoot笔记.md","raw":"---\ntitle: SpringBoot笔记\ndate: 2022-05-09 09:12:18\ntags:\n    - SpringBoot\n    - java\ncategories:\n    - 学习笔记\n---\n\n# 第一章 xml与JavaConfig\n\n1. 为什么要使用springboot  \n   因为Spring、SpringMVC需要使用大量的配置文件（xml文件）\n   还需要配置各种对象，把使用的对象放到spring容器中才能使用对象\n   需要了解其他框架的配置规则\n   比较繁琐\n2. SpringBoot相当于 不需要配置文件的Spring+SpringMVC。常用的框架和第三方库都已经配置好了，直接用。\n3. SpringBoot开发效率高，使用更方便。\n\n## @JavaConfig\n\njavaConfig：使用java类作为xml配置文件的代替，是配置spring容器的纯Java方式。在这个Java类中可以创建Java对象，把对象放入sprig容器中（注入到容器）。  \n使用两个注解：\n1. @Configuration：放在一个类上，表示这个类作为配置文件使用。\n2. @Bean：放在方法上，声明对象，把这个对象注入到容器。相当于<bean>\n\n使用示例\n~~~java\npackage org.example;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * Configuration：表示当前类作为配置文件使用。是用来配置容器的\n * 位置：在类上\n * \n * 这个类相当于beans.xml\n */\n@Configuration\npublic class SpringConfig {\n\n    /**\n     * 创建方法，方法返回值为对象。方法上加入@bean注解\n     * 方法返回值对象就注入到容器中\n     *\n     * @Bean: 把对象注入到Spring容器中。作用相当于<bean>\n     * 位置：在方法上\n     * 说明：@Bean，不指定对象名称，默认方法名是id\n     */\n    @Bean\n    public Student createStudent() {\n        Student s1 = new Student();\n        s1.setName(\"张三\");\n        s1.setId(1);\n        return s1;\n    }\n\n    @Bean(name = \"student2\")\n    public Student createStudent2() {\n        Student s2 = new Student();\n        s2.setName(\"李四\");\n        s2.setId(2);\n        return s2;\n    }\n}\n~~~\n\n## @ImportResource\n\n@ImportResource：导入其他的xml配置文件，等于在xml `<import resources=\"其他配置文件\"/>`  \n使用示例\n~~~java\n@ImportResource(value = {\"classpath:applicationContext.xml\",\"classpath:beans.xml\"})\npublic class SpringConfig {\n}\n~~~\nvalue参数可以是数组，以导入多个xml配置文件  \n\n## @PropertyResource\n\n@PropertyResource： 读取properties属性配置文件可以实现外部化配置，在程序代码之外提供数据。  \n步骤：\n1. 在resources目录下，创建properties文件，使用key=value的格式提供数据\n2. 在PropertyResource指定properties文件的位置\n3. 使用@Value(value=\"${key}\")\n\n~~~java\n@Configuration\n@ImportResource(value = \"classpath:applicationContext.xml\")\n@PropertySource(value = \"classpath:config.properties\")\n@ComponentScan(basePackages = \"org.example.vo\")\npublic class SpringConfig {\n}\n~~~\n\n# 第二章 SpringBoot\n\n## 介绍\n\n[Spring官网](https://spring.io/)\nSpringBoot是Spring中的一个成员，可以简化Spring，SpringMVC的使用。核心还是IOC容器。\n\n特点\n* Create stand-alone Spring applications\n    创建Spring应用\n* Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\n    内嵌的tomcat，jetty，undertow服务器（不用部署war包）\n* Provide opinionated 'starter' dependencies to simplify your build configuration  \n    提供了starter起步依赖，来简化应用的配置  \n    比如使用MyBatis框架，需要在Spring项目中，配置MyBatis的对象SqlSessionFactory，Dao的代理对象  \n    在SpringBoot项目中，在pom.xml中，加入一个mybatis-spring-boot-starter依赖\n* Automatically configure Spring and 3rd party libraries whenever possible\n    尽可能去配置spring和第三方库，自动配置（将spring和第三方库中的对象创建好，放入容器中，以便于使用）\n* Provide production-ready features such as metrics, health checks, and externalized configuration\n    提供了健康检查，统计，外部化配置\n* Absolutely no code generation and no requirement for XML configuration\n    不用生成代码，不用使用xml做配置\n\n## 创建SpringBoot项目\n\n使用Spring提供的初始化器，即向导创建SpringBoot应用\n\n使用的地址：https://start.spring.io  \n国内的地址：https://start.springboot.io\n也可以直接访问网址，创建并下载。\n\nSpringBoot的目录结构：\n![SpringBoot目录结构.png](../images/SpringBoot笔记/SpringBoot目录结构.png)\n\n## 注解的使用\n\n@SpringBootApplication\n复合注解：由\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan\n组成\n\n1. @SpringBootConfiguration\n部分源码：\n~~~java\n@Configuration\npublic @interface SpringBootConfiguration {\n    @AliasFor(\n        annotation = Configuration.class\n    )\n    boolean proxyBeanMethods() default true;\n}\n~~~\n说明：使用了@SpringBootConfiguration注解标注的类，可以作为配置文件使用，可以使用BEAN声明对象，注入到容器。\n2. @SpringBootConfiguration\n启用自动配置，把java对象配置好，注入到spring容器中。例如：将MyBatis对象创建好，放入到容器中。\n3. @ComponentScan\n扫描器，找到注解，根据注解功能创建对象，给属性赋值等。\n默认扫描的包：@ComponentScan所在的包和子包。\n\n## SpringBoot的配置文件\n\n配置文件名称：application\n拓展名：properties(key=value);yml(ket:value)\n使用application.properties或application.yml\n\napplication.properties示例：\n~~~properties\n#设置端口号\nserver.port=8080\n#设置访问应用上下文路径，contextpath\nserver.servlet.context-path=/boot\n~~~\n\napplication.yml示例：\n~~~yaml\nserver:\n  port: 8080\n  servlet:\n    context-path: /boot\n~~~\n\n注：properties与yml同时存在时，会使用properties。（一般只是用一个，不要两个一起用）\n\n## 多环境配置\n\n有开发环境，测试环境，上线环境。  \n每个环节都有不同的配置信息，例如端口，上下文件，数据库url，用户名，密码等。\n\n使用多环境配置文件，可以方便切换不同的配置。  \n使用方式：创建多个配置文件，名称规则：application-环境名称.properties(yml)\n\n创建开发环境的配置文件：application-dev.properties(application-dev.yml)\n创建测试环境的配置文件：application-test.properties\n\n在application.properties中指定使用哪个配置文件\n~~~properties\n#激活使用哪个配置文件\nspring.profiles.active=dev\n~~~\n\n## 自定义配置\n\n### @Value(\"${key}\")\n\nkey来自application.properties\n~~~properties\nstudent.name=咕咕咕\nstudent.age=20\n~~~\n注解加在属性定义上，便能读取配置中的数据。\n~~~java\n@Controller\npublic class SpringBoot {\n\n    @Value(\"${student.name}\")\n    private String name;\n\n    @RequestMapping(value = \"/hello\", produces = \"application/json\")\n    @ResponseBody\n    public String hello() {\n        return \"hello,\" + name;\n    }\n}\n~~~\n\n### @ConfigurationProperties(prefix=\"...\")\n\n将整个文件映射为一个对象，用于自定义配置项比较多的情况。\n在类上加上\n@Component\n@ConfigurationProperties(prefix = \"student\")\n注解，prefix内为属性名\n~~~java\npackage com.example.vo;\n\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\n@Component\n@ConfigurationProperties(prefix = \"student\")\npublic class Student {\n    private String name;\n    private String age;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getAge() {\n        return age;\n    }\n\n    public void setAge(String age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Student{\" +\n                \"name='\" + name + '\\'' +\n                \", age='\" + age + '\\'' +\n                '}';\n    }\n}\n~~~\n\n在Controller中使用@Resource自动注入，从容其中拿到对象，进行赋值使用。\n\n## SpringBoot中使用jsp(不推荐使用jsp，因为前后端要分离)\n\nSpringBoot不推荐使用jsp，而是使用模板技术代替jsp  \nSpringBoot原生不支持jsp，需要配置依赖项。  \n1. 加入一个处理jsp的依赖，负责编译jsp文件。  \n~~~xml\n<dependency>\n    <groupId>org.apache.tomcat.embed</groupId>\n    <artifactId>tomcat-embed-jasper</artifactId>\n</dependency>\n~~~\n2. 如果需要使用servlet，jsp，jstl的功能，还需要添加额外的依赖项。\n~~~xml\n<dependencys>\n    <!--jstl的依赖-->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>jstl</artifactId>\n    </dependency>\n    <!--servlet的依赖-->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n    </dependency>\n    <!--jsp的依赖-->\n    <dependency>\n        <groupId>javax.servlet.jsp</groupId>\n        <artifactId>javax.servlet.jsp-api</artifactId>\n        <version>2.3.3</version>\n    </dependency>\n</dependencys>\n~~~\n\n3. 创建一个存放jsp的目录，一般叫webapp\n    index.jsp\n4. 需要在pom.xml指定jsp文件编译后的存放目录\n    META-INF/resources\n5. 创建Controller，访问jsp\n6. 在application.properties文件中配置视图解析器\n\n使用示例：\nindex.jsp\n~~~jsp\n<%@ page contextType=\"text/html;charset=UTF-8” language=\"java\" %>\n<html>\n<head>\n    <title>jsp文件</title>\n</head>\n<body>\n<h3>使用jsp显示Controller中的数据 ${data}</h3>\n</body>\n</html>\n~~~\nController类\n~~~java\npackage com.example;\n\nimport org.springfarmework.stereotype.Controller;\n\n@Controller\npublic class JspController{\n//    public String Jsp(HttpServletRequest request){\n//        request.setAttribute(\"data\",\"SpringBoot使用jsp\");\n//        //视图的逻辑名称\n//        return \"index\";\n//    }\n\n    /**\n     * \n     * @param model\n     * @return\n     */\n    public String Jsp(Model model){\n        //将数据放入到request作用域\n        model.addAttribute(\"data\",\"SpringBoot使用jsp\");\n        //视图的逻辑名称\n        return \"index\";\n    }\n    \n}\n~~~\napplication.properties中添加\n~~~properties\n#配置视图解析器 前缀及后缀\n#/ = src/main/webapp\nspring.mvc.view.prefix=/\nspring.mvc.view.suffix=.jsp\n~~~\npom.xml文件中，指定jsp编译后存放的目录。\n~~~xml\n<resources>\n    <resource>\n        <!--jsp原来的目录-->\n        <directory>src/main/webapp</directory>\n        <!--指定编译后的存放目录-->\n        <directory>META_INF/resources</directory>\n        <!--指定处理的目录和文件-->\n        <includes>\n            <include>**/*.*</include>\n        </includes>\n    </resource>\n\n</resources>\n~~~\n\njsp正在被逐渐淘汰，因为它在页面中嵌入了java代码。使得前后端不能分离，从而加大了前端与后端的沟通成本，降低了开发效率。\n比如下面的对话(来自网络)\n> 后端：你写的页面有问题啊，不显示数据。\n前端：不可能，我这边都是好的。\n后端：你自己来看啊。\n前端：你写的这是什么玩意？我给你的代码不是这样的。\n后端：我得把你的代码加到 JSP 里啊。\n前端：我又不懂 JSP 啊，你再把代码摘出来吧，我帮你看看问题。\n后端：......\n\n可以使用ajax技术，实现前后端分离。\n\n## 使用容器\n通过代码，从容器中获取对象。  \n在main方法中SpringApplication.run()方法获取返回的String容器对象，再获取业务bean进行调用。\n\nrun()方法的源码：\n~~~java\n    public static ConfigurableApplicationContext run(Class<?> primarySource, String... args) {\n        return run(new Class[]{primarySource}, args);\n    }\n~~~\nConfigurableApplicationContext：接口，是ApplicationContext的子接口\n\n使用示例：\n手动从容器中获取UserService对象，调用其中的sayHello方法。\n~~~java\n@SpringBootApplication\npublic class SpringBootDemo001Application {\n\n    public static void main(String[] args) {\n        //获取容器对象\n        //ConfigurableApplicationContext ctx = SpringApplication.run(SpringBootDemo001Application.class, args);\n        ApplicationContext ctx = SpringApplication.run(SpringBootDemo001Application.class, args);\n        //从容器中获取对象\n        UserService userService = (UserService) ctx.getBean(\"UserService\");\n        userService.sayHello(\"张三\");\n    }\n}\n~~~\n\n## CommandLineRunner接口、ApplicationRunner接口\n\n这两个接口都有一个run方法。执行时间在容器对象创建好后，自动执行run()方法。\n可以完成自定义的在容器对象创建好的一些操作。\n\n源码：\n~~~java\n@FunctionalInterface\npublic interface CommandLineRunner {\n    void run(String... args) throws Exception;\n}\n\n@FunctionalInterface\npublic interface ApplicationRunner {\n    void run(ApplicationArguments args) throws Exception;\n}\n~~~\n\n他们在容器启动完成后执行。\n我们只需要实现这个方法，就可以在容器启动后执行一些内容。比如读取配置文件，数据库连接之类。\n\n使用示例：\n~~~java\npublic class AfterRun implements CommandLineRunner {\n    @Override\n    public void run(String... args) throws Exception {\n        //可做自定义操作\n        System.out.println(\"在容器对象创建好，执行的方法\");\n    }\n}\n~~~\n\n# 第三章 Web组件\n\n拦截器、servlet、Filter\n\n## 拦截器\n\n拦截器是SpringMVC中的一种对象，能拦截对Controller的请求。\n拦截器框架中由系统的拦截器，可以自定义拦截器。实现对请求的预先处理。\n\nSpringMVC实现自定义拦截器：\n1. 创建类实现SpringMVC框架的HandlerInterceptor接口\n~~~java\npublic interface HandlerInterceptor {\n    default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        return true;\n    }\n\n    default void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {\n    }\n\n    default void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {\n    }\n}\n~~~\n2. 需在SpringMVC的配置文件中，声明拦截器\n~~~xml\n<mvc:interceptors>\n    <mvc:interceptor>\n        <mvc:mapping path=\"url\"/>\n        <bean class=\"拦截器的全限定名称\"/>\n    </mvc:interceptor>\n</mvc:interceptors>\n~~~\n\nSpringBoot实现拦截器：\n1. 自定义拦截器\n~~~java\npackage com.example.web;\n\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n/**\n * 自定义的拦截器\n */\npublic class LoginInterceptor implements HandlerInterceptor {\n\n    /**\n     * @param request\n     * @param response\n     * @param handler  被拦截的控制器对象\n     * @return boolean\n     * true：请求被Controller处理\n     * false：请求被拦截\n     */\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        //判断是否通过拦截器的代码\n        System.out.println(\"拦截器被执行\");\n        return true;\n    }\n}\n~~~\n2. 将拦截器对象注入容器\n~~~java\npackage com.example.config;\n\nimport com.example.web.LoginInterceptor;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class HandlerInterceptorConfig implements WebMvcConfigurer {\n\n    //添加拦截器对象，注入到容器中\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n\n        //创建拦截器对象\n        HandlerInterceptor interceptor = new LoginInterceptor();\n        //指定拦截的url请求\n        String path[] = {\"/user/**\"};\n        //指定不拦截的地址\n        String excludePath[] = {\"/user/login\"};\n        registry.addInterceptor(interceptor).addPathPatterns(path).excludePathPatterns(excludePath);\n    }\n}\n~~~\n3. 写Controller类进行测试\n~~~java\npackage com.example.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class HandlerInterceptorController {\n\n    @RequestMapping(\"/user/register\")\n    @ResponseBody\n    public String userRegister(){\n        return \"访问/user/register\";\n    }\n\n    @RequestMapping(\"/user/login\")\n    @ResponseBody\n    public String userLogin(){\n        return \"访问/user/login\";\n    }\n}\n~~~\n\n## Servlet\n\n在SpringBoot中使用Servlet对象\n使用步骤：\n1. 创建Servlet类。创建类继承HttpServlet。\n~~~java\npackage com.example.web;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n//创建Servlet类\npublic class Servlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doPost(req, resp);\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        //使用HttpServletResponse输出数据，应答结果\n        resp.setContentType(\"text/html;charset=utf-8\");\n        PrintWriter out = resp.getWriter();\n        out.println(\"执行servlet\");\n        out.flush();\n        out.close();\n    }\n}\n~~~\n2. 注册Servlet，让框架能找到Servlet。\n~~~java\npackage com.example.config;\n\nimport com.example.web.Servlet;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class ServletConfig {\n    //定义方法，注册Servlet对象\n    @Bean\n    public ServletRegistrationBean servletRegistrationBean(){\n        //public ServletRegistrationBean(T servlet, String... urlMappings)\n        //第一个参数是Servlet对象，第二个参数是url地址\n        //ServletRegistrationBean bean = new ServletRegistrationBean(new Servlet(),\"/servlet\");\n\n        //无参构造，单独设置参数\n        ServletRegistrationBean bean = new ServletRegistrationBean();\n        bean.setServlet(new Servlet());\n        bean.addUrlMappings(\"/servlet_01\",\"/servlet_02\"); // <url-pattern>\n\n        return bean;\n    }\n}\n~~~\n\n## Filter过滤器\n\nFilter是Servlet规范中的过滤器，可以处理请求，对请求的参数、属性进行调整。常常在过滤器中处理字符编码\n使用步骤：\n1. 创建自定义的过滤器类\n~~~java\npackage com.example.config;\n\nimport com.example.web.MyFilter;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class FilterConfig {\n\n    @Bean\n    public FilterRegistrationBean filterRegistration() {\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new MyFilter());\n        bean.addUrlPatterns(\"/user/*\");\n        return bean;\n    }\n}\n~~~\n2. 注册Filter过滤器对象\n~~~java\npackage com.example.config;\n\nimport com.example.web.MyFilter;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class FilterConfig {\n\n    @Bean\n    public FilterRegistrationBean filterRegistration() {\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        bean.setFilter(new MyFilter());\n        bean.addUrlPatterns(\"/user/*\");\n        return bean;\n    }\n}\n~~~\n3. 写Controller类进行测试\n~~~java\npackage com.example.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class HandlerInterceptorController {\n\n    @RequestMapping(\"/user/register\")\n    @ResponseBody\n    public String userRegister(){\n        return \"访问/user/register\";\n    }\n\n    @RequestMapping(\"/user/login\")\n    @ResponseBody\n    public String userLogin(){\n        return \"访问/user/login\";\n    }\n\n    @RequestMapping(\"/query\")\n    @ResponseBody\n    public String query(){\n        return \"访问/query\";\n    }\n}\n~~~\n\n## 字符集过滤器\n\nCharacterEncodingFilter：解决post请求中乱码的问题\n在SpringMVC框架，在web.xml中注册过滤器。配置它的属性\n\n1. 使用系统提供的字符集过滤器类\n过滤器的注册\n~~~java\npackage com.example.config;\n\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.filter.CharacterEncodingFilter;\n\n@Configuration\npublic class FilterConfig {\n\n    @Bean\n    public FilterRegistrationBean filterRegistration() {\n        FilterRegistrationBean bean = new FilterRegistrationBean();\n        //使用框架中的过滤器类\n        CharacterEncodingFilter filter = new CharacterEncodingFilter();\n        //指定使用的编码方式\n        filter.setEncoding(\"utf-8\");\n        //指定request，response都使用encoding的值\n        filter.setForceEncoding(true);\n\n        bean.setFilter(filter);\n        //指定过滤的url地址\n        bean.addUrlPatterns(\"/*\");\n\n        return bean;\n    }\n}\n~~~\n同时需要关闭SpringBoot中默认配置的字符集过滤器，使自定义的过滤器起作用。\n~~~properties\n#SpringBoot中默认已经配置了Character Encoding Filter，默认编码ISO-8859-1\n#设置enable=false 作用是关闭系统中配置好的过滤器，使用自定义的CharacterEncodingFilter\nserver.servlet.encoding.enabled=false\n~~~\n2. 直接修改application.properties配置\n~~~properties\n#让系统的CharacterEncodingFilter生效\nserver.servlet.encoding.enabled=true\n#指定使用的编码方式\nserver.servlet.encoding.charset=UTF-8\n#强制request、response都使用charset属性的值\nserver.servlet.encoding.force=true\n~~~\n\n# 第四章 ORM操作MySQL\n\nORM是“对象-关系-映射”的简称。（Object Relational Mapping，简称ORM）\norm其实就是将类对象的语法翻译成sql语句的一个引擎\n\n使用MyBatis框架操作数据库，在SpringBoot框架集成MyBatis\n使用步骤：\n1. mybatis起步依赖：完成mybatis对象自动配置，对象放在容器中。\n2. pom.xml指定把src/main/java目录中的xml文件包含到classpath中。\n3. 创建实体类Student。\n4. 创建Dao接口StudentDao，创建一个查询学生的方法。\n5. 穿啊关键Dao接口对应的Mapper文件，xml文件，写sql语句。\n6. 创建Service层对象，创建StudentService接口和他的实现类。调dao对象的方法，完成数据库的操作。\n7. 创建Controller对象，访问Service。\n8. 写application.properties文件\n   配置数据库的连接信息\n\n## 第一种方式：@Mapper\n\n@Mapper：放在dao接口上，每个接口都需要使用这个注解。\n~~~java\n/**\n * @Mapper： 告诉MyBatis这是dao接口，创建此接口的代理对象\n *      位置：在类上\n */\n@Mapper\npublic interface StudentDao {\n\n    Student selectById(@Param(\"stuId\") Integer id);\n}\n~~~\n\n## 第二种方式：@MapperScan\n\n@MapperScan：放在SpringBoot启动类上，在包下所有接口在编译后会生成相应的实现类。\n~~~java\n@SpringBootApplication\n/**\n * @MapperScan：找到Dao接口和Mapper文件\n *      basePackages：Dao接口所在的包名\n */\n@MapperScan(basePackages = {\"com.example.dao\"})\npublic class SpringBootDemo001Application implements CommandLineRunner {\n    //..\n}\n~~~\n\n## 第三种方式：Mapper文件和Dao接口分开管理\n\n将mapper文件放在resources目录下\n\n1. 在resources目录中创建子目录（自定义），例如mapper\n2. 将mapper文件放在mapper目录\n3. 在application文件中指定mapper文件的目录\n~~~properties\n#指定mapper文件的位置\nmybatis.mapper-locations=classpath:mapper/*.xml\n#指定mybatis的日志\nmybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl\n~~~\n4. 在pom文件中指定resources目录中的文件，编译到目标目录中\n~~~xml\n<!--resources插件-->\n<resources>\n    <resource>\n        <directory>src/main/resources</directory>\n        <includes>\n            <include>**/*.*</include>\n        </includes>\n    </resource>\n</resources>\n~~~\n\n## 事务\n\nSpring框架中的事务：\n1. 管理事务的对象：事务管理器（接口，接口有很多实现类）\n    例如：使用jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager\n2. 声明式事务：在xml配置文件或使用注释说明事务控制的内容\n    控制事务：隔离级别，传播行为，超时时间\n3. 事务处理方式：\n   1. spring框架中的@Transactional\n   2. aspectj框架可以在xml配置文件中，声明事务控制的内容\n\nSpringBoot中使用事务：\n1. 在业务方法上加入@Transactional，加入注解后，方法有事务功能。\n2. 明确的在启动类上，加入@EnableTransactionManager\n\n# 第五章 接口的架构风格——RESTful\n\n[API百度百科](https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3/3350958?fromtitle=API&fromid=10154)\n接口：应用程序接口（英语：Application Programming Interface，简称：API），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。由于近年来软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。程序设计的实践中，编程接口的设计首先要使软件系统的职责得到合理划分。良好的接口设计可以降低系统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高系统的维护性和扩展性。\n接口：可以指访问servlet、controller的url，调用其他程序的 函数\n\n架构风格：api的组织样式\n    就是一个传统的：http://localhost:8080/dev/student/query?id=2\n\n## REST  \n[RESTful架构风格](https://baike.baidu.com/item/RESTful/4406165)\n1. REST：(Representational State Transfer)表现层状态转移\n    是一种接口的架构风格和设计的理念，不是标准。\n    优点：更简洁，更有层次。\n    表现层状态转移： \n    表现层就是视图层，显示资源的。通过视图页面、jsp等显示操作资源的结果。\n    状态：资源变化\n    转移：资源是可以变化的。资源能创建，new状态，资源创建后可以查询资源，可以被修改。\n2. RESt中的要素：\n    用RESt表示资源和对应资源的操作。在互联网中，表示一个资源或者一个操作。\n    资源是用url表示的，在互联网中，使用的图片、视频、文本、网页等都是资源。\n    对于资源：\n   1. 查询资源：通过url找到资源\n   2. 创建资源：添加资源\n   3. 更新资源：更新资源，编辑\n   4. 删除资源：删除\n    资源使用url表示，通过名称表示资源\n        在url中，使用名词表示资源，以及访问资源的信息，在url中，使用\"/\"分割对资源的信息\n    使用http中的动作（请求方式），表示对资源的操作（CURD）\n    * GET：查询资源——sql select\n      处理单个资源：\n      http://localhost:8080/dev/student/query/2\n      处理多个资源：\n      http://localhost:8080/dev/student/query/2/3\n    * POST：创建资源——sql insert\n      http://localhost:8080/dev/student/add\n      在post请求中传递数据\n    * PUT：更新资源——sql update\n      http://localhost:8080/dev/student/query/2\n      在post中传递数据\n    * DELETE：删除资源——sql delete\n      http://localhost:8080/dev/student/query/2\n    需要分页、排序等参数，依然可以加在url后，比如：\n    http://localhost:8080/dev/student/query/2?page=2&pageSize=10\n3. REST即使用url表示资源，使用http动作操作资源。\n\n## RESTful的注解\n\n1. @PathVariable：从url中获取数据\n2. @GetMapping：支持get请求方式，等同于@RequestMapping（method=RequestMethod.GET）\n3. @PostMapping：支持post请求方式，等同于@RequestMapping（method=RequestMethod.POST）\n4. @PutMapping：支持put请求方式，等同于@RequestMapping（method=RequestMethod.PUT）\n5. @DeleteMapping：支持delete请求方式，等同于@RequestMapping（method=RequestMethod.DELETE）\n6. @RestController：复合注解，是@Controller和@ResponseBody组合\n    在类上使用，表示当前类的所有方法都加入了@ResponseBody\n\nPostman：测试工具\n可以用来测试get、post、put、delete等请求。\n\n注意：**url请求地址加请求方式** 得是唯一的，否则会有歧义\n@**GetMapping**(\"**/student/{stuId}**\")\n\n## 在页面中或ajax中，支持pub、delete请求\n\n在SpringMVC中，有一个过滤器，支持post请求转为put、delete\n\n过滤器：org.springframework.web.filter.HiddenHttpMethodFilter\n作用：将请求中的post请求转为put、delete\n\n使用步骤：\n1. application.properties：开启使用HiddenHttpMethodMFilter过滤器\n2. 在请求页面中，包含_method参数，他的值是put、delete，发起这个请求使用的post方式\n~~~html\n<form action=\"student/put\" method=\"post\">\n    <input type=\"hidden\" name=\"_method\" value=\"put\">\n    <input type=\"submit\" value=\"put请求方式\">\n</form>\n<form action=\"student/delete\" method=\"post\">\n    <input type=\"hidden\" name=\"_method\" value=\"delete\">\n    <input type=\"submit\" value=\"delete请求方式\">\n</form>\n~~~\n\n# 第六章 SpringBoot集成Redis\n\nRedis：一个NoSQL（not only）数据库，常用作缓存使用（cache）\nRedis的数据类型：string、hash、set、zset、list\n\nRedis是一个中间件：是一个独立的服务器。\nJava中著名的客户端：Jedis、lettuce、Redisson\n\nSpring、SpringBoot中有一个RedisTemplate（StringRedisTemplate），用于处理和redis的交互\n\n## redis的使用\n\n导入起步依赖\n~~~xml\n<!--redis起步依赖-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n~~~\ndata-redis使用的是 lettuce客户端库\n在程序中使用RedisTemplate类的方法 操作redis数据，实际就是调用的lettuce客户端中的方法\n\n使用示例\n~~~java\npackage com.example.controller;\n\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.StringRedisTemplate;\nimport org.springframework.data.redis.core.ValueOperations;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\n\n@RestController\npublic class RedisController {\n\n    /**\n     * 注入RedisTemplate\n     * \n     * RedisTemplate 泛型\n     * RedisTemplate<String,String>\n     * RedisTemplate<Object,Object>\n     * RedisTemplate\n     * \n     * 注意：RedisTemplate对象的名称 redisTemplate\n     */\n    @Resource\n    private RedisTemplate redisTemplate;\n\n    @Resource\n    private StringRedisTemplate stringRedisTemplate;\n\n    //添加数据到redis\n    @PostMapping(\"/redis/add\")\n    public String addToRedis(String name, String value) {\n        //操作Redis中的String类型的数据，先获取ValueOperations对象\n        ValueOperations valueOperations = redisTemplate.opsForValue();\n\n        valueOperations.set(name, value);\n        return \"向redis添加String数据\";\n    }\n\n    //从redis获取数据\n    @GetMapping(\"/redis/getKey\")\n    public String getData(String key) {\n        ValueOperations valueOperations = redisTemplate.opsForValue();\n        Object value = valueOperations.get(key);\n        return \"key:\" + key + \"value:\" + value;\n    }\n\n    @PostMapping(\"/redis/{key}/{value}\")\n    public String addStringKV(@PathVariable String key, @PathVariable String value) {\n        //使用StringRedisTemplate对象\n        stringRedisTemplate.opsForValue().set(key, value);\n        return \"使用StringRedisTemplate对象，\" + \"key:\" + key + \"value:\" + value;\n    }\n\n    @PostMapping(\"/redis/getstr/{key}\")\n    public String getStringValue(@PathVariable String key) {\n        //使用StringRedisTemplate对象\n        stringRedisTemplate.opsForValue().get(key);\n        return \"使用StringRedisTemplate对象，\" + \"key:\" + key;\n    }\n}\n~~~\n\n## StringRedisTemplate 和 RedisTemplate\n\nStringRedisTemplate：把key、value都作为String处理，使用的是String的序列化，可读性好。\nRedisTemplate：把key、value经过了序列化存到redis。key、value是序列化的内容，不能直接识别。默认使用jdk的序列化，可以修改为其他的序列化。\n\n设置key或value的序列化方式\n~~~java\n/**\n * 设置 RedisTemplate 序列化\n */\npublic String addString(String key,String value){\n    //使用RedisTemplate，在存取值之前，设置序列化方式。\n    //设置key使用String的序列化\n    redisTemplate.setKeySerializer(new StringRedisSerializer());\n    //设置value的序列化\n    redisTemplate.setValueSerializer(new StringRedisSerializer());\n\n    redisTemplate.opsForValue().set(key,value);\n    return \"定义RedisTemplate对象key、value的序列化\";\n}\n~~~\n\n# 第七章 SpringBoot集成Dubbo\n\n## SpringBoot集成Dubbo的文档\n\n[文档](https://github.com/apache/dubbo-spring-boot-project/blob/master/README.md)\n\n## 公共项目\n\n独立的maven项目：定义了接口和数据类\n\n~~~java\npublic class Student implements Serializable{\n    private static final long serialVersionUID = 3941539077791951521L;\n    \n    private Integer id;\n    private String name;\n    private Integer age;\n}\n~~~\n~~~java\npublic interface StudentService{\n    Student queryStudent(Integer id);\n}\n~~~\n\n2. 创建服务提供者模块，实现接口模块\n\ndubbo依赖 和 zookeeper依赖\n~~~xml\n<!--dubbo依赖-->\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-spring-boot-starter</artifactId>\n    <version>3.0.7</version>\n</dependency>\n<!--zookeeper依赖-->\n<dependency>\n    <groupId>org.apache.dubbo</groupId>\n    <artifactId>dubbo-dependencies-zookeeper</artifactId>\n    <version>3.0.7</version>\n    <type>pom</type>\n    <exclusions>\n        <!--排除log4h依赖，因为重复-->\n        <exclusion>\n            <groupId>slf4j-log4j12</groupId>\n            <artifactId>org.slf4j</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n~~~\n注：在pom文件中使用 <exclusions> 标签排除包含的依赖，已解决重复引入依赖的问题\n\n实现接口\n~~~java\n/*\n使用dubbo中的注解暴露服务\n@Component可以不加\n */\n@DubboService(interfaceClass = StudentService.class,version = \"1.0\",timeout = 5000)\npublic class StudentServiceImpl implements StudentService {\n    @Override\n    public Student queryStudent(Integer id) {\n        Student student = studentDao.selectById(id);\n        return student;\n    }\n}\n~~~\n\n外部化配置\n~~~properties\n#配置服务名称 dubbo:application name=\"名称\"\nspring.application.name=studentService-provider\n\n#配置扫描的包，扫描的@DubboService\ndubbo.scan.base-packages=com.example.service\n\n#配置dubbo协议\n#dubbo.protocol.name=dubbo\n#dubbo.protocol.port=20881\n\n#注册中心\ndubbo.registry.address=zookeeper://localhost:2181\n~~~\n\n在类上使用 @DubboService 注解来暴露服务\n\n**在主类之上使用 @EnableDubbo 注解启用Dubbo**\n包含了 @EnableDubboConfig 和 @DubboComponentScan\n~~~java\n@SpringBootApplication\n@EnableDubbo\npublic class SpringBootDemo001Application{\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootDemo001Application.class, args);\n    }\n}\n~~~\n\n3. 创建消费者模块\n\n添加依赖，与服务提供者相同。\n\n创建Controller或者Service调用远程服务\n~~~java\n@RestContrloller\npublic class DubboController{\n    /*\n            引用远程服务，把创建好的代理对象，注入给studentService\n            @DubboReference(interfaceClass = StudentService.class,version = \"1.0\")\n            没有使用interfaceClass，默认是 引用数据类型\n     */\n    @DubboReference(version = \"1.0\")\n    private StudentService studentService;\n    \n    @GetMapping(\"/query\")\n    public String queryStudent(Integer id){\n        Student student = studentService.queryStudent(id);\n        return \"调用远程接口获取的对象：\"+student;\n    }\n}\n~~~\n\n配置文件application.properties\n~~~properties\n#指定服务名称\nspring.application.name=consumer-application\n#指定注册中心\ndubbo.registry.address=zookeeper://localhost:2181\n~~~\n\n# 第八章 SpringBoot打包\n\n主类继承SpringBootServletInitializer才能使用外部的tomcat  \nSpringBootServletInitializer相当于原有web.xml的替代  \n使用嵌入式的tomcat，默认不支持jsp。  \n\n## 打包成war\n\n1. 指定打包后的名称\n~~~xml\n<build>\n    <!--打包后的文件名称-->\n    <finalName>bootDemo</finalName>\n</build>\n~~~\n2. 指定jsp编译的目录\n~~~xml\n        <resources>\n            <resource>\n                <directory>src/main/java</directory>\n                <includes>\n                    <include>**/*.xml</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>src/main/resources</directory>\n                <includes>\n                    <include>**/*.*</include>\n                </includes>\n            </resource>\n            <resource>\n                <directory>src/main/webapp</directory>\n                <targetPath>META-INF/resources</targetPath>\n                <includes>\n                    <include>**/*.*</include>\n                </includes>\n            </resource>\n        </resources>\n~~~\n3. 执行打包是war\n~~~xml\n<!--打包类型-->\n<packaging>war</packaging>\n~~~\n4. 主启动类继承SpringBootServletInitializer\n~~~java\n@SpringBootApplication\npublic class SpringBootDemo001Application extends SpringBootServletInitializer{\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootDemo001Application.class, args);\n    }\n}\n~~~\n5. 部署war\n将war文件放到tomcat等服务器的发布目录中。\n\n## 打包成jar\n\n1. 指定打包后的名称\n~~~xml\n<build>\n    <!--打包后的文件名称-->\n    <finalName>bootDemo</finalName>\n</build>\n~~~\n2. 指定springboot-maven-plugin版本\n~~~xml\n<plugins>\n    <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n        <!--打包jar，有jsp文件时，必须指定maven-plugin插件版本是1.4.2.RELEASE-->\n        <version>1.4.2.RELEASE</version>\n    </plugin>\n</plugins>\n~~~\n3. 执行maven clean package  \n    在target目录中，生成jar文件 bootDemo.jar\n    执行独立的springboot项目，即 java -jar bootDemo.jar\n\n\n# 第九章 Thymeleaf 模板\n\n## 介绍\n\nThymeleaf是模板引擎，使用Java开发，在服务器端运行。将处理好的请求发送给浏览器。\nJava生态下的模板还有Freemaker、Velocity、Beetl(国产)等。\n非web环境下，Thymeleaf能直接显示模板上的静态数据；web环境下，能像jsp一样从后台接收数据并替换到模板上。\n它是基于HTML的，以HTML标签为载体。\nSpringBoot集成了Thymeleaf模板技术，官方也推荐使用它来代替jsp进行前端页面的数据展示。因为jsp需要编译运行，效率比较低。\n\n[Thymeleaf官网](https://www.thymeleaf.org/)\n[Thymeleaf官方文档](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html)\n\n## 配置\n\n依赖\n~~~xml\n        <!--模板引擎起步依赖-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-thymeleaf</artifactId>\n        </dependency>\n~~~\n\n一些配置\n~~~properties\n#在开发阶段，关闭模板缓存，让修改立刻生效\nspring.thymeleaf.cache=false\n#编码格式\nspring.thymeleaf.encoding=UTF-8\n#模板的类型（默认是HTML，模板是html文件）\nspring.thymeleaf.mode=HTML\n#模板的前缀： 类路径的 classpath:/templates\nspring.thymeleaf.prefix=classpath:/templates/\n#后缀\nspring.thymeleaf.suffix=.html\n~~~\n\n## 表达式\n\n1. 标准变量表达式\n    语法：${key}\n    作用：获取key对应的文本数据，key是request作用域中的key。使用request.setAttribute(),model.addAttribute()\n    在页面中html标签中使用 th:text=\"${key}\"\n~~~html\n<p>获取student对象属性值</p>\n<p th:text=\"${student.id}\">id</p>\n<p th:text=\"${student.name}\">name</p>\n<p th:text=\"${student.age}\">age</p>\n~~~\n2. 选择变量表达式（星号变量表达式）\n    语法：*{key}\n    作用：获取这个key对应的数据，*{key}需要与th:object一起使用\n    目的是简单获取对象的属性值\n~~~html\n<p>使用 *{} 获取student对象属性值</p>\n<div th:object=\"${student}\">\n    <p th:text=\"*{id}\">id</p>\n    <p th:text=\"*{name}\">name</p>\n    <p th:text=\"*{age}\">age</p>\n</div>\n<!--直接使用也可以-->\n<p th:text=\"*{student.id}\">id</p>\n~~~\n3. 链接表达式\n    语法：@{url}\n    作用：表示链接\n\n~~~html\n<h3>链接绝对路径</h3>\n<a th:href=\"@{https://baidu.com}\">百度</a>\n\n<h3>链接相对路径</h3>\n<a th:href=\"@{/queryStudent}\">相对地址，没有参数</a>\n<h3>链接相对路径，使用字符串链接传递参数</h3>\n<a th:href=\"@{'/queryStudent?id=' + ${student.id} }\">相对地址，有参数。获取model中的数据</a>\n<h3>传递多个参数</h3>\n<a th:href=\"@{/queryStudent(name='zhangsan',id=20)}\">传多个参数</a>\n~~~\n\n## Thymeleaf属性\n\n属性是放在html元素中的，就是html元素的属性，加入了th前缀。属性的作用不变。加上th。属性的值由模板引擎处理，在属性上可以使用变量表达式。\n\n~~~html\n<form action=\"/queryStudent\" method=\"post\"></form>\n<form th:action=\"/queryStudent\" th:method=\"${methodAttr}\"></form>g\n~~~\n\n### each 循环\n\neach循环，可以循环List、Map、Array\n语法：在html标签中使用 th:each\n~~~html\n<div th:each=\"集合循环成员，循环状态变量：${key}\">\n    <p th:text=\"${集合循环成员}\"></p>\n</div>\n~~~\n\n集合循环成员，循环状态变量：名称都是自定义的。  \n**”循环的状态变量“可以不定义，默认是”集合循环成员Stat“**\n循环状态变量 iterStat 可以获取以下信息\n**index：当前迭代对象的index**\n**count：当前迭代对象个数（第几个）**\nsize：当前迭代对象大小（总数）\neven/odd：布尔值，当前循环是否是偶数/奇数（从0开始计算）\nfirst：布尔值，当前循环是否是第一个\nlast：布尔值，当前循环是否是最后一个\n\n### 条件判断if\n\n判断语句，条件为true，显示html标签内容，**否则不显示**。**没有else语句**\n语法：th:if=\"条件语句\"\n~~~html\n<p th:if=\"${id==1001}\">id是1001</p>\n<!--\"\"空字符是true-->\n<p th:if=\"${sex}\">空字符</p>\n<!--null是false-->\n<p th:if=\"${null}\">null</p>\n~~~\n\n还有个与 th:unless 和 th:if 相反的行为\n\n### 判断语句 switch,case\n\nth:switch 和 java中的switch一样\n语法：th:switch=\"要比较的值\",th:case=\"值\"\n~~~html\n<div th:switch=\"要比较的值\">\n    <p th:case=\"值1\">结果1</p>\n    <p th:case=\"值2\">结果2</p>\n    <p th:case=\"*\">默认结果(default)</p>\n</div>\n~~~\n注：**以上case只有一句执行**\n\n### 内联 inline\n\n1. 内联test：在html标签外，获取表达式的值\n    语法：[[${key}]]\n~~~html\n<div th:inline=\"text\">\n    <p>我是[[${name}]]</p>\n</div>\n~~~\n\n2. 内联JavaScript\n~~~html\n<script type=\"text/javascript\" th:inline=\"javascript\">\n    var name = [[${name}]]\n    alert(name)\n</script>\n~~~\n\n## 字面量\n\n1. 文本字面量：使用单引号括起来的字符串\n~~~html\n<p th:text=\"'我是'+${name}\">数据显示</p>\n~~~\n2. 数字字面量\n~~~html\n<p th:if=\"${20>5}\">20>5</p>\n~~~\n3. boolean字面量\n~~~html\n<p th:if=\"isLogin == true\">用户已登录</p>\n~~~\n4. null字面量\n~~~html\n<p th:if=\"student != null\">有student数据</p>\n~~~\n\n## 字符串链接\n\n1. 使用单引号括起来的字符串，使用 + 连接其他字符串或表达式\n~~~html\n<p th:text=\"'我是' + ${name}\">数据显示</p>\n~~~\n2. 使用双竖线，|字符串和表达式|\n~~~html\n<p th:text=\"|我是${name}|\">显示数据</p>\n~~~\n\n## 运算符\n\n算数运算：+,-,*,/\n关系比较：>,<,>=,<=(gt,lt,ge,le)\n相等判断：==,!=(eq,ne)\n\n~~~html\n<p th:text=\"${age > 20}\">年龄大于20</p>\n<p th:text=\"${20 + 30}\">显示运算结果</p>\n<p th:if=\"${student == null}\">student是null</p>\n<p th:if=\"${student eq null}\">student是null</p>\n<p th:if=\"${student ne null}\">student不是null</p>\n<p th:if=\"${isLogin == true ? true : false}\"></p>\n~~~\n\n## Thymeleaf基本对象\n\n模板引擎提供了内置对象，可以使用#开始引用。\n[官方文档](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#appendix-a-expression-basic-objects)\n\n1. #request 表示 HttpServletRequest\n2. #session 表示 HttpSession\n3. session 表示 Map对象，是#session的简单表达方式，用来获取session中指定key的值\n    #session.getAttribute(\"loginname\")==session.loginname\n\n~~~html\n<h3>内置对象#request,#session,session的使用</h3>\n<p>获取作用域中的信息</p>\n<p th:text=\"${#requset.getAttribute('requestData')}\"></p>\n<p th:text=\"${#session.getAttribute('sessionData')}\"></p>\n<p th:text=\"${session.loginname}\"></p>\n\n<h3>使用内置对象的方法</h3>\n<p th:text=\"${#request.getRequestURL()}\"></p>\n<p th:text=\"${#request.getRequestURI()}\"></p>\n<p th:text=\"${#request.getQueryString()}\"></p>\n<p th:text=\"${#request.getContextPath()}\"></p>\n<p th:text=\"${#request.getServerName()}\"></p>\n<p th:text=\"${#request.getServerPort()}\"></p>\n~~~\n\n此外，还有很多工具类。提供string、date、集合的一些处理方法。此处不再列举，详细请查看官方文档。\n\n## 自定义模板\n\n模板是内容的复用，定义一次，在其他模板文件中多次使用。\n模板的使用：\n1.定义模板\n2.使用模板\n\n模板定义语法：\n~~~html\n<div th:fragment=\"head\">\n    <p>hello world</p>\n</div>\n~~~\n引用模板的语法：\n~~~html\n<!--插入模板insert-->\n<div th:insert=\"~{ templatename :: selector}\"></div>\n<!--templatename:文件名称-->\n<!--selector:自定义模板名称-->\n\n<div th:insert=\"templatename :: selector\"></div>\n<!--templatename:文件名称-->\n<!--selector:自定义模板名称-->\n\n<!--包含模板insert-->\n<div th:include=\"~{ templatename :: selector}\"></div>\n<div th:include=\"templatename :: selector\"></div>\n\n<!--对于使用模板：有包含模板（th:include），插入模板（th:insert）-->\n<!--包含是替换原来的标签，插入只是插入-->\n~~~\n\n# 第十章 总结\n\n## 注解\n\nspring+springMVC+SpringBoot\n\n创建对象：\n@Controller：放在类上，创建控制器对象，注入到容器中。\n@RestController：放在类上，创建控制器对象，注入到容器中。作用：复合了@Controller合@ResponseBodey，使用这个注解，控制器方法返回值都是数据，没有视图。\n@Service：放在业务层实现类上，创建service对象，注入到容器。\n@Repository：放在dao层实现类上，创建dao对象，注入到容器。没有使用是因为dao对象是MyBatis框架通过代理生成的，不需要使用。\n@Component：放在类上，创建此类的对象，放入到容器中。\n\n赋值：\n@Value：简单类型的赋值。还可以使用它获取配置文件中的数据。\n@Autowired：引用类型赋值自动注入，支持byName，byType，默认是byType。放在属性或构造方法上，推荐放在构造方法上。\n@Qualifer：给引用类型赋值，使用byName。\n_注：@Autowired，@Qualifer都是Spring框架提供的_\n@Resource：来自jdk中的定义，javax.annotation。实现引用类型的自动注入，支持byName，byType。默认是byName，如果失败，再使用byType注入。在属性上使用\n\n其他：\n@Configuration：放在类上，表示这是个配置类，相当于xml配置文件。\n@Bean：放在方法上，把方法返回值对象，注入到spring容器中。\n@ImportResource：加载其他的xml配置文件，把文件中的对象注入到spring容器中。\n@PropertySource：读取其他的properties属性配置文件。\n@ComponentScan：扫描器，指定报名，扫描注解。\n@ResponseBody：放在方法上，表示方法返回值是数据，不是试视图。\n@RequestBody：把请求体中的方法读取出来，转为java对象使用。\n@ControllerAdvice：控制器增强，放在类上，表示此类提供了方法，可以对controller增强功能。\n@ExceptionHandler：处理异常，放在方法上。\n@Transcational：处理事务，放在service实现类的public方法上，表示此方法有事务。\n\nSpringBoot中的注解：\n@SpringBootApplication：放在启动类上，包含了@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan\n\nMybatis相关注解：\n@Mapper：放在类上，让MyBatis找到接口，创建代理对象\n@MapperScan：放在主类上，指定扫描的包，将包中所有接口都创建代理对象。对象注入到容器中。\n@Param：放在dao接口的方法形参前，作为命名参数使用。\n\nDubbo注解：\n@DubboService：在提供者端使用，暴露服务，放在接口实现类上。\n@DubboReference：在消费者端使用，引用远程服务，放在属性上使用。\n@EnableDubbo：放在主类上，表示启用Dubbo功能。\n\n## 一些想法\n\n断断续续学了快一个月，springboot算是摆脱了众多的配置文件，对开发来说还是蛮友好的。\n关于Thymeleaf模板引擎，我感觉和jsp有点像。但我没有学习过jsp，只是浅浅的用过。模板引擎应该算不上前后端分离，不过它是在html文件的标签上增加内容，实现动态的功能，算是伪分离吧。~~前后端分离，人不分离。~~\n现在linux使用地还不是很熟练，后面打算细细地学习下linux的使用，因为web应用是要部署到linux服务器的，所以学习linux是必要的。后面换电脑也打算使用linux作为主操作系统，大概会选择deepin系统吧。\n目前要复习期末考试，考完后，会开始健康码网站的制作。\n后面的学习计划，大概有Nginx，Docker之类的，然后继续深入对spring系列框架的理解合使用。\n更远一些的，大概会去学一下vue，了解下前端，毕竟如果是一个人做网站的话，只有后端也是不太行的。\n好耶！可以使用springboot，告别那么多配置文件了。\n> 2022.5.29","slug":"SpringBoot笔记","published":1,"updated":"2022-08-15T08:40:55.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl7ketbec002wo8tth8em951r","content":"<h1 id=\"第一章-xml与JavaConfig\"><a href=\"#第一章-xml与JavaConfig\" class=\"headerlink\" title=\"第一章 xml与JavaConfig\"></a>第一章 xml与JavaConfig</h1><ol>\n<li>为什么要使用springboot<br>因为Spring、SpringMVC需要使用大量的配置文件（xml文件）<br>还需要配置各种对象，把使用的对象放到spring容器中才能使用对象<br>需要了解其他框架的配置规则<br>比较繁琐</li>\n<li>SpringBoot相当于 不需要配置文件的Spring+SpringMVC。常用的框架和第三方库都已经配置好了，直接用。</li>\n<li>SpringBoot开发效率高，使用更方便。</li>\n</ol>\n<h2 id=\"JavaConfig\"><a href=\"#JavaConfig\" class=\"headerlink\" title=\"@JavaConfig\"></a>@JavaConfig</h2><p>javaConfig：使用java类作为xml配置文件的代替，是配置spring容器的纯Java方式。在这个Java类中可以创建Java对象，把对象放入sprig容器中（注入到容器）。<br>使用两个注解：</p>\n<ol>\n<li>@Configuration：放在一个类上，表示这个类作为配置文件使用。</li>\n<li>@Bean：放在方法上，声明对象，把这个对象注入到容器。相当于<bean></li>\n</ol>\n<p>使用示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Configuration：表示当前类作为配置文件使用。是用来配置容器的</span></span><br><span class=\"line\"><span class=\"comment\"> * 位置：在类上</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 这个类相当于beans.xml</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建方法，方法返回值为对象。方法上加入<span class=\"doctag\">@bean</span>注解</span></span><br><span class=\"line\"><span class=\"comment\">     * 方法返回值对象就注入到容器中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Bean</span>: 把对象注入到Spring容器中。作用相当于&lt;bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 位置：在方法上</span></span><br><span class=\"line\"><span class=\"comment\">     * 说明：<span class=\"doctag\">@Bean</span>，不指定对象名称，默认方法名是id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Student <span class=\"title function_\">createStudent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        s1.setName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        s1.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;student2&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Student <span class=\"title function_\">createStudent2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        s2.setName(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        s2.setId(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ImportResource\"><a href=\"#ImportResource\" class=\"headerlink\" title=\"@ImportResource\"></a>@ImportResource</h2><p>@ImportResource：导入其他的xml配置文件，等于在xml <code>&lt;import resources=&quot;其他配置文件&quot;/&gt;</code><br>使用示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ImportResource(value = &#123;&quot;classpath:applicationContext.xml&quot;,&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>value参数可以是数组，以导入多个xml配置文件  </p>\n<h2 id=\"PropertyResource\"><a href=\"#PropertyResource\" class=\"headerlink\" title=\"@PropertyResource\"></a>@PropertyResource</h2><p>@PropertyResource： 读取properties属性配置文件可以实现外部化配置，在程序代码之外提供数据。<br>步骤：</p>\n<ol>\n<li>在resources目录下，创建properties文件，使用key=value的格式提供数据</li>\n<li>在PropertyResource指定properties文件的位置</li>\n<li>使用@Value(value=”${key}”)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ImportResource(value = &quot;classpath:applicationContext.xml&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(value = &quot;classpath:config.properties&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;org.example.vo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第二章-SpringBoot\"><a href=\"#第二章-SpringBoot\" class=\"headerlink\" title=\"第二章 SpringBoot\"></a>第二章 SpringBoot</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a class=\"link\"   href=\"https://spring.io/\" >Spring官网<i class=\"fas fa-external-link-alt\"></i></a><br>SpringBoot是Spring中的一个成员，可以简化Spring，SpringMVC的使用。核心还是IOC容器。</p>\n<p>特点</p>\n<ul>\n<li>Create stand-alone Spring applications<br>  创建Spring应用</li>\n<li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)<br>  内嵌的tomcat，jetty，undertow服务器（不用部署war包）</li>\n<li>Provide opinionated ‘starter’ dependencies to simplify your build configuration<br>  提供了starter起步依赖，来简化应用的配置<br>  比如使用MyBatis框架，需要在Spring项目中，配置MyBatis的对象SqlSessionFactory，Dao的代理对象<br>  在SpringBoot项目中，在pom.xml中，加入一个mybatis-spring-boot-starter依赖</li>\n<li>Automatically configure Spring and 3rd party libraries whenever possible<br>  尽可能去配置spring和第三方库，自动配置（将spring和第三方库中的对象创建好，放入容器中，以便于使用）</li>\n<li>Provide production-ready features such as metrics, health checks, and externalized configuration<br>  提供了健康检查，统计，外部化配置</li>\n<li>Absolutely no code generation and no requirement for XML configuration<br>  不用生成代码，不用使用xml做配置</li>\n</ul>\n<h2 id=\"创建SpringBoot项目\"><a href=\"#创建SpringBoot项目\" class=\"headerlink\" title=\"创建SpringBoot项目\"></a>创建SpringBoot项目</h2><p>使用Spring提供的初始化器，即向导创建SpringBoot应用</p>\n<p>使用的地址：<a class=\"link\"   href=\"https://start.spring.io/\" >https://start.spring.io<i class=\"fas fa-external-link-alt\"></i></a><br>国内的地址：<a class=\"link\"   href=\"https://start.springboot.io/\" >https://start.springboot.io<i class=\"fas fa-external-link-alt\"></i></a><br>也可以直接访问网址，创建并下载。</p>\n<p>SpringBoot的目录结构：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/SpringBoot%E7%AC%94%E8%AE%B0/SpringBoot%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png\"\n                      alt=\"SpringBoot目录结构.png\"\n                ></p>\n<h2 id=\"注解的使用\"><a href=\"#注解的使用\" class=\"headerlink\" title=\"注解的使用\"></a>注解的使用</h2><p>@SpringBootApplication<br>复合注解：由<br>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan<br>组成</p>\n<ol>\n<li>@SpringBootConfiguration<br>部分源码：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootConfiguration &#123;</span><br><span class=\"line\">    <span class=\"meta\">@AliasFor(</span></span><br><span class=\"line\"><span class=\"meta\">        annotation = Configuration.class</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">proxyBeanMethods</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n说明：使用了@SpringBootConfiguration注解标注的类，可以作为配置文件使用，可以使用BEAN声明对象，注入到容器。</li>\n<li>@SpringBootConfiguration<br>启用自动配置，把java对象配置好，注入到spring容器中。例如：将MyBatis对象创建好，放入到容器中。</li>\n<li>@ComponentScan<br>扫描器，找到注解，根据注解功能创建对象，给属性赋值等。<br>默认扫描的包：@ComponentScan所在的包和子包。</li>\n</ol>\n<h2 id=\"SpringBoot的配置文件\"><a href=\"#SpringBoot的配置文件\" class=\"headerlink\" title=\"SpringBoot的配置文件\"></a>SpringBoot的配置文件</h2><p>配置文件名称：application<br>拓展名：properties(key=value);yml(ket:value)<br>使用application.properties或application.yml</p>\n<p>application.properties示例：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置端口号</span></span><br><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">8080</span></span><br><span class=\"line\"><span class=\"comment\">#设置访问应用上下文路径，contextpath</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.context-path</span>=<span class=\"string\">/boot</span></span><br></pre></td></tr></table></figure>\n\n<p>application.yml示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/boot</span></span><br></pre></td></tr></table></figure>\n\n<p>注：properties与yml同时存在时，会使用properties。（一般只是用一个，不要两个一起用）</p>\n<h2 id=\"多环境配置\"><a href=\"#多环境配置\" class=\"headerlink\" title=\"多环境配置\"></a>多环境配置</h2><p>有开发环境，测试环境，上线环境。<br>每个环节都有不同的配置信息，例如端口，上下文件，数据库url，用户名，密码等。</p>\n<p>使用多环境配置文件，可以方便切换不同的配置。<br>使用方式：创建多个配置文件，名称规则：application-环境名称.properties(yml)</p>\n<p>创建开发环境的配置文件：application-dev.properties(application-dev.yml)<br>创建测试环境的配置文件：application-test.properties</p>\n<p>在application.properties中指定使用哪个配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#激活使用哪个配置文件</span></span><br><span class=\"line\"><span class=\"attr\">spring.profiles.active</span>=<span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义配置\"><a href=\"#自定义配置\" class=\"headerlink\" title=\"自定义配置\"></a>自定义配置</h2><h3 id=\"Value-“-key-”\"><a href=\"#Value-“-key-”\" class=\"headerlink\" title=\"@Value(“${key}”)\"></a>@Value(“${key}”)</h3><p>key来自application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">student.name</span>=<span class=\"string\">咕咕咕</span></span><br><span class=\"line\"><span class=\"attr\">student.age</span>=<span class=\"string\">20</span></span><br></pre></td></tr></table></figure>\n<p>注解加在属性定义上，便能读取配置中的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBoot</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;student.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/hello&quot;, produces = &quot;application/json&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello,&quot;</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ConfigurationProperties-prefix-”…”\"><a href=\"#ConfigurationProperties-prefix-”…”\" class=\"headerlink\" title=\"@ConfigurationProperties(prefix=”…”)\"></a>@ConfigurationProperties(prefix=”…”)</h3><p>将整个文件映射为一个对象，用于自定义配置项比较多的情况。<br>在类上加上<br>@Component<br>@ConfigurationProperties(prefix = “student”)<br>注解，prefix内为属性名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.vo;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;student&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(String age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&#x27;&quot;</span> + age + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Controller中使用@Resource自动注入，从容其中拿到对象，进行赋值使用。</p>\n<h2 id=\"SpringBoot中使用jsp-不推荐使用jsp，因为前后端要分离\"><a href=\"#SpringBoot中使用jsp-不推荐使用jsp，因为前后端要分离\" class=\"headerlink\" title=\"SpringBoot中使用jsp(不推荐使用jsp，因为前后端要分离)\"></a>SpringBoot中使用jsp(不推荐使用jsp，因为前后端要分离)</h2><p>SpringBoot不推荐使用jsp，而是使用模板技术代替jsp<br>SpringBoot原生不支持jsp，需要配置依赖项。  </p>\n<ol>\n<li><p>加入一个处理jsp的依赖，负责编译jsp文件。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.embed<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat-embed-jasper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果需要使用servlet，jsp，jstl的功能，还需要添加额外的依赖项。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencys</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--jstl的依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--servlet的依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--jsp的依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencys</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>创建一个存放jsp的目录，一般叫webapp<br> index.jsp</p>\n</li>\n<li><p>需要在pom.xml指定jsp文件编译后的存放目录<br> META-INF/resources</p>\n</li>\n<li><p>创建Controller，访问jsp</p>\n</li>\n<li><p>在application.properties文件中配置视图解析器</p>\n</li>\n</ol>\n<p>使用示例：<br>index.jsp</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contextType=<span class=\"string\">&quot;text/html;charset=UTF-8” language=&quot;</span>java<span class=\"string\">&quot; %&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;jsp文件&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;h3&gt;使用jsp显示Controller中的数据 $&#123;data&#125;&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Controller类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springfarmework.stereotype.Controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JspController</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//    public String Jsp(HttpServletRequest request)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        request.setAttribute(&quot;data&quot;,&quot;SpringBoot使用jsp&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        //视图的逻辑名称</span></span><br><span class=\"line\"><span class=\"comment\">//        return &quot;index&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">Jsp</span><span class=\"params\">(Model model)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//将数据放入到request作用域</span></span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;data&quot;</span>,<span class=\"string\">&quot;SpringBoot使用jsp&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//视图的逻辑名称</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;index&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>application.properties中添加</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置视图解析器 前缀及后缀</span></span><br><span class=\"line\"><span class=\"comment\">#/ = src/main/webapp</span></span><br><span class=\"line\"><span class=\"attr\">spring.mvc.view.prefix</span>=<span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">spring.mvc.view.suffix</span>=<span class=\"string\">.jsp</span></span><br></pre></td></tr></table></figure>\n<p>pom.xml文件中，指定jsp编译后存放的目录。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--jsp原来的目录--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/webapp<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--指定编译后的存放目录--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>META_INF/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--指定处理的目录和文件--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>jsp正在被逐渐淘汰，因为它在页面中嵌入了java代码。使得前后端不能分离，从而加大了前端与后端的沟通成本，降低了开发效率。<br>比如下面的对话(来自网络)</p>\n<blockquote>\n<p>后端：你写的页面有问题啊，不显示数据。<br>前端：不可能，我这边都是好的。<br>后端：你自己来看啊。<br>前端：你写的这是什么玩意？我给你的代码不是这样的。<br>后端：我得把你的代码加到 JSP 里啊。<br>前端：我又不懂 JSP 啊，你再把代码摘出来吧，我帮你看看问题。<br>后端：……</p>\n</blockquote>\n<p>可以使用ajax技术，实现前后端分离。</p>\n<h2 id=\"使用容器\"><a href=\"#使用容器\" class=\"headerlink\" title=\"使用容器\"></a>使用容器</h2><p>通过代码，从容器中获取对象。<br>在main方法中SpringApplication.run()方法获取返回的String容器对象，再获取业务bean进行调用。</p>\n<p>run()方法的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ConfigurableApplicationContext <span class=\"title function_\">run</span><span class=\"params\">(Class&lt;?&gt; primarySource, String... args)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> run(<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;primarySource&#125;, args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ConfigurableApplicationContext：接口，是ApplicationContext的子接口</p>\n<p>使用示例：<br>手动从容器中获取UserService对象，调用其中的sayHello方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootDemo001Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取容器对象</span></span><br><span class=\"line\">        <span class=\"comment\">//ConfigurableApplicationContext ctx = SpringApplication.run(SpringBootDemo001Application.class, args);</span></span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> SpringApplication.run(SpringBootDemo001Application.class, args);</span><br><span class=\"line\">        <span class=\"comment\">//从容器中获取对象</span></span><br><span class=\"line\">        <span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> (UserService) ctx.getBean(<span class=\"string\">&quot;UserService&quot;</span>);</span><br><span class=\"line\">        userService.sayHello(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CommandLineRunner接口、ApplicationRunner接口\"><a href=\"#CommandLineRunner接口、ApplicationRunner接口\" class=\"headerlink\" title=\"CommandLineRunner接口、ApplicationRunner接口\"></a>CommandLineRunner接口、ApplicationRunner接口</h2><p>这两个接口都有一个run方法。执行时间在容器对象创建好后，自动执行run()方法。<br>可以完成自定义的在容器对象创建好的一些操作。</p>\n<p>源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ApplicationRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>他们在容器启动完成后执行。<br>我们只需要实现这个方法，就可以在容器启动后执行一些内容。比如读取配置文件，数据库连接之类。</p>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AfterRun</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//可做自定义操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;在容器对象创建好，执行的方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第三章-Web组件\"><a href=\"#第三章-Web组件\" class=\"headerlink\" title=\"第三章 Web组件\"></a>第三章 Web组件</h1><p>拦截器、servlet、Filter</p>\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><p>拦截器是SpringMVC中的一种对象，能拦截对Controller的请求。<br>拦截器框架中由系统的拦截器，可以自定义拦截器。实现对请求的预先处理。</p>\n<p>SpringMVC实现自定义拦截器：</p>\n<ol>\n<li>创建类实现SpringMVC框架的HandlerInterceptor接口<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class=\"meta\">@Nullable</span> ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class=\"meta\">@Nullable</span> Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>需在SpringMVC的配置文件中，声明拦截器<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;url&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;拦截器的全限定名称&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>SpringBoot实现拦截器：</p>\n<ol>\n<li>自定义拦截器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义的拦截器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler  被拦截的控制器对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> boolean</span></span><br><span class=\"line\"><span class=\"comment\">     * true：请求被Controller处理</span></span><br><span class=\"line\"><span class=\"comment\">     * false：请求被拦截</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否通过拦截器的代码</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;拦截器被执行&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>将拦截器对象注入容器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.web.LoginInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HandlerInterceptorConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加拦截器对象，注入到容器中</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建拦截器对象</span></span><br><span class=\"line\">        <span class=\"type\">HandlerInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginInterceptor</span>();</span><br><span class=\"line\">        <span class=\"comment\">//指定拦截的url请求</span></span><br><span class=\"line\">        String path[] = &#123;<span class=\"string\">&quot;/user/**&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//指定不拦截的地址</span></span><br><span class=\"line\">        String excludePath[] = &#123;<span class=\"string\">&quot;/user/login&quot;</span>&#125;;</span><br><span class=\"line\">        registry.addInterceptor(interceptor).addPathPatterns(path).excludePathPatterns(excludePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>写Controller类进行测试<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HandlerInterceptorController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">userRegister</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问/user/register&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">userLogin</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问/user/login&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>在SpringBoot中使用Servlet对象<br>使用步骤：</p>\n<ol>\n<li>创建Servlet类。创建类继承HttpServlet。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Servlet类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Servlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用HttpServletResponse输出数据，应答结果</span></span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">PrintWriter</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> resp.getWriter();</span><br><span class=\"line\">        out.println(<span class=\"string\">&quot;执行servlet&quot;</span>);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>注册Servlet，让框架能找到Servlet。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.web.Servlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServletConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义方法，注册Servlet对象</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">servletRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//public ServletRegistrationBean(T servlet, String... urlMappings)</span></span><br><span class=\"line\">        <span class=\"comment\">//第一个参数是Servlet对象，第二个参数是url地址</span></span><br><span class=\"line\">        <span class=\"comment\">//ServletRegistrationBean bean = new ServletRegistrationBean(new Servlet(),&quot;/servlet&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参构造，单独设置参数</span></span><br><span class=\"line\">        <span class=\"type\">ServletRegistrationBean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>();</span><br><span class=\"line\">        bean.setServlet(<span class=\"keyword\">new</span> <span class=\"title class_\">Servlet</span>());</span><br><span class=\"line\">        bean.addUrlMappings(<span class=\"string\">&quot;/servlet_01&quot;</span>,<span class=\"string\">&quot;/servlet_02&quot;</span>); <span class=\"comment\">// &lt;url-pattern&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Filter过滤器\"><a href=\"#Filter过滤器\" class=\"headerlink\" title=\"Filter过滤器\"></a>Filter过滤器</h2><p>Filter是Servlet规范中的过滤器，可以处理请求，对请求的参数、属性进行调整。常常在过滤器中处理字符编码<br>使用步骤：</p>\n<ol>\n<li>创建自定义的过滤器类<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.web.MyFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FilterConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">filterRegistration</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">MyFilter</span>());</span><br><span class=\"line\">        bean.addUrlPatterns(<span class=\"string\">&quot;/user/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>注册Filter过滤器对象<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.web.MyFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FilterConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">filterRegistration</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">MyFilter</span>());</span><br><span class=\"line\">        bean.addUrlPatterns(<span class=\"string\">&quot;/user/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>写Controller类进行测试<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HandlerInterceptorController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">userRegister</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问/user/register&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">userLogin</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问/user/login&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/query&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">query</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问/query&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"字符集过滤器\"><a href=\"#字符集过滤器\" class=\"headerlink\" title=\"字符集过滤器\"></a>字符集过滤器</h2><p>CharacterEncodingFilter：解决post请求中乱码的问题<br>在SpringMVC框架，在web.xml中注册过滤器。配置它的属性</p>\n<ol>\n<li>使用系统提供的字符集过滤器类<br>过滤器的注册<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.filter.CharacterEncodingFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FilterConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">filterRegistration</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>();</span><br><span class=\"line\">        <span class=\"comment\">//使用框架中的过滤器类</span></span><br><span class=\"line\">        <span class=\"type\">CharacterEncodingFilter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CharacterEncodingFilter</span>();</span><br><span class=\"line\">        <span class=\"comment\">//指定使用的编码方式</span></span><br><span class=\"line\">        filter.setEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//指定request，response都使用encoding的值</span></span><br><span class=\"line\">        filter.setForceEncoding(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setFilter(filter);</span><br><span class=\"line\">        <span class=\"comment\">//指定过滤的url地址</span></span><br><span class=\"line\">        bean.addUrlPatterns(<span class=\"string\">&quot;/*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n同时需要关闭SpringBoot中默认配置的字符集过滤器，使自定义的过滤器起作用。<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#SpringBoot中默认已经配置了Character Encoding Filter，默认编码ISO-8859-1</span></span><br><span class=\"line\"><span class=\"comment\">#设置enable=false 作用是关闭系统中配置好的过滤器，使用自定义的CharacterEncodingFilter</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.encoding.enabled</span>=<span class=\"string\">false</span></span><br></pre></td></tr></table></figure></li>\n<li>直接修改application.properties配置<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#让系统的CharacterEncodingFilter生效</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.encoding.enabled</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\">#指定使用的编码方式</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.encoding.charset</span>=<span class=\"string\">UTF-8</span></span><br><span class=\"line\"><span class=\"comment\">#强制request、response都使用charset属性的值</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.encoding.force</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"第四章-ORM操作MySQL\"><a href=\"#第四章-ORM操作MySQL\" class=\"headerlink\" title=\"第四章 ORM操作MySQL\"></a>第四章 ORM操作MySQL</h1><p>ORM是“对象-关系-映射”的简称。（Object Relational Mapping，简称ORM）<br>orm其实就是将类对象的语法翻译成sql语句的一个引擎</p>\n<p>使用MyBatis框架操作数据库，在SpringBoot框架集成MyBatis<br>使用步骤：</p>\n<ol>\n<li>mybatis起步依赖：完成mybatis对象自动配置，对象放在容器中。</li>\n<li>pom.xml指定把src/main/java目录中的xml文件包含到classpath中。</li>\n<li>创建实体类Student。</li>\n<li>创建Dao接口StudentDao，创建一个查询学生的方法。</li>\n<li>穿啊关键Dao接口对应的Mapper文件，xml文件，写sql语句。</li>\n<li>创建Service层对象，创建StudentService接口和他的实现类。调dao对象的方法，完成数据库的操作。</li>\n<li>创建Controller对象，访问Service。</li>\n<li>写application.properties文件<br>配置数据库的连接信息</li>\n</ol>\n<h2 id=\"第一种方式：-Mapper\"><a href=\"#第一种方式：-Mapper\" class=\"headerlink\" title=\"第一种方式：@Mapper\"></a>第一种方式：@Mapper</h2><p>@Mapper：放在dao接口上，每个接口都需要使用这个注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Mapper</span>： 告诉MyBatis这是dao接口，创建此接口的代理对象</span></span><br><span class=\"line\"><span class=\"comment\"> *      位置：在类上</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StudentDao</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Student <span class=\"title function_\">selectById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;stuId&quot;)</span> Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二种方式：-MapperScan\"><a href=\"#第二种方式：-MapperScan\" class=\"headerlink\" title=\"第二种方式：@MapperScan\"></a>第二种方式：@MapperScan</h2><p>@MapperScan：放在SpringBoot启动类上，在包下所有接口在编译后会生成相应的实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@MapperScan</span>：找到Dao接口和Mapper文件</span></span><br><span class=\"line\"><span class=\"comment\"> *      basePackages：Dao接口所在的包名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(basePackages = &#123;&quot;com.example.dao&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootDemo001Application</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三种方式：Mapper文件和Dao接口分开管理\"><a href=\"#第三种方式：Mapper文件和Dao接口分开管理\" class=\"headerlink\" title=\"第三种方式：Mapper文件和Dao接口分开管理\"></a>第三种方式：Mapper文件和Dao接口分开管理</h2><p>将mapper文件放在resources目录下</p>\n<ol>\n<li>在resources目录中创建子目录（自定义），例如mapper</li>\n<li>将mapper文件放在mapper目录</li>\n<li>在application文件中指定mapper文件的目录<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定mapper文件的位置</span></span><br><span class=\"line\"><span class=\"attr\">mybatis.mapper-locations</span>=<span class=\"string\">classpath:mapper/*.xml</span></span><br><span class=\"line\"><span class=\"comment\">#指定mybatis的日志</span></span><br><span class=\"line\"><span class=\"attr\">mybatis.configuration.log-impl</span>=<span class=\"string\">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li>\n<li>在pom文件中指定resources目录中的文件，编译到目标目录中<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--resources插件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>Spring框架中的事务：</p>\n<ol>\n<li>管理事务的对象：事务管理器（接口，接口有很多实现类）<br> 例如：使用jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</li>\n<li>声明式事务：在xml配置文件或使用注释说明事务控制的内容<br> 控制事务：隔离级别，传播行为，超时时间</li>\n<li>事务处理方式：<ol>\n<li>spring框架中的@Transactional</li>\n<li>aspectj框架可以在xml配置文件中，声明事务控制的内容</li>\n</ol>\n</li>\n</ol>\n<p>SpringBoot中使用事务：</p>\n<ol>\n<li>在业务方法上加入@Transactional，加入注解后，方法有事务功能。</li>\n<li>明确的在启动类上，加入@EnableTransactionManager</li>\n</ol>\n<h1 id=\"第五章-接口的架构风格——RESTful\"><a href=\"#第五章-接口的架构风格——RESTful\" class=\"headerlink\" title=\"第五章 接口的架构风格——RESTful\"></a>第五章 接口的架构风格——RESTful</h1><p><a class=\"link\"   href=\"https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3/3350958?fromtitle=API&fromid=10154\" >API百度百科<i class=\"fas fa-external-link-alt\"></i></a><br>接口：应用程序接口（英语：Application Programming Interface，简称：API），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。由于近年来软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。程序设计的实践中，编程接口的设计首先要使软件系统的职责得到合理划分。良好的接口设计可以降低系统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高系统的维护性和扩展性。<br>接口：可以指访问servlet、controller的url，调用其他程序的 函数</p>\n<p>架构风格：api的组织样式<br>    就是一个传统的：<a class=\"link\"   href=\"http://localhost:8080/dev/student/query?id=2\" >http://localhost:8080/dev/student/query?id=2<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h2><p><a class=\"link\"   href=\"https://baike.baidu.com/item/RESTful/4406165\" >RESTful架构风格<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ol>\n<li>REST：(Representational State Transfer)表现层状态转移<br> 是一种接口的架构风格和设计的理念，不是标准。<br> 优点：更简洁，更有层次。<br> 表现层状态转移：<br> 表现层就是视图层，显示资源的。通过视图页面、jsp等显示操作资源的结果。<br> 状态：资源变化<br> 转移：资源是可以变化的。资源能创建，new状态，资源创建后可以查询资源，可以被修改。</li>\n<li>RESt中的要素：<br> 用RESt表示资源和对应资源的操作。在互联网中，表示一个资源或者一个操作。<br> 资源是用url表示的，在互联网中，使用的图片、视频、文本、网页等都是资源。<br> 对于资源：<ol>\n<li>查询资源：通过url找到资源</li>\n<li>创建资源：添加资源</li>\n<li>更新资源：更新资源，编辑</li>\n<li>删除资源：删除<br>资源使用url表示，通过名称表示资源<br>  在url中，使用名词表示资源，以及访问资源的信息，在url中，使用”/“分割对资源的信息<br>使用http中的动作（请求方式），表示对资源的操作（CURD）</li>\n</ol>\n<ul>\n<li>GET：查询资源——sql select<br>处理单个资源：<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/query/2\" >http://localhost:8080/dev/student/query/2<i class=\"fas fa-external-link-alt\"></i></a><br>处理多个资源：<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/query/2/3\" >http://localhost:8080/dev/student/query/2/3<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>POST：创建资源——sql insert<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/add\" >http://localhost:8080/dev/student/add<i class=\"fas fa-external-link-alt\"></i></a><br>在post请求中传递数据</li>\n<li>PUT：更新资源——sql update<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/query/2\" >http://localhost:8080/dev/student/query/2<i class=\"fas fa-external-link-alt\"></i></a><br>在post中传递数据</li>\n<li>DELETE：删除资源——sql delete<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/query/2\" >http://localhost:8080/dev/student/query/2<i class=\"fas fa-external-link-alt\"></i></a><br>需要分页、排序等参数，依然可以加在url后，比如：<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/query/2?page=2&amp;pageSize=10\" >http://localhost:8080/dev/student/query/2?page=2&amp;pageSize=10<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n<li>REST即使用url表示资源，使用http动作操作资源。</li>\n</ol>\n<h2 id=\"RESTful的注解\"><a href=\"#RESTful的注解\" class=\"headerlink\" title=\"RESTful的注解\"></a>RESTful的注解</h2><ol>\n<li>@PathVariable：从url中获取数据</li>\n<li>@GetMapping：支持get请求方式，等同于@RequestMapping（method=RequestMethod.GET）</li>\n<li>@PostMapping：支持post请求方式，等同于@RequestMapping（method=RequestMethod.POST）</li>\n<li>@PutMapping：支持put请求方式，等同于@RequestMapping（method=RequestMethod.PUT）</li>\n<li>@DeleteMapping：支持delete请求方式，等同于@RequestMapping（method=RequestMethod.DELETE）</li>\n<li>@RestController：复合注解，是@Controller和@ResponseBody组合<br> 在类上使用，表示当前类的所有方法都加入了@ResponseBody</li>\n</ol>\n<p>Postman：测试工具<br>可以用来测试get、post、put、delete等请求。</p>\n<p>注意：<strong>url请求地址加请求方式</strong> 得是唯一的，否则会有歧义<br>@<strong>GetMapping</strong>(“<strong>/student/{stuId}</strong>“)</p>\n<h2 id=\"在页面中或ajax中，支持pub、delete请求\"><a href=\"#在页面中或ajax中，支持pub、delete请求\" class=\"headerlink\" title=\"在页面中或ajax中，支持pub、delete请求\"></a>在页面中或ajax中，支持pub、delete请求</h2><p>在SpringMVC中，有一个过滤器，支持post请求转为put、delete</p>\n<p>过滤器：org.springframework.web.filter.HiddenHttpMethodFilter<br>作用：将请求中的post请求转为put、delete</p>\n<p>使用步骤：</p>\n<ol>\n<li>application.properties：开启使用HiddenHttpMethodMFilter过滤器</li>\n<li>在请求页面中，包含_method参数，他的值是put、delete，发起这个请求使用的post方式<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;student/put&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;put&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;put请求方式&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;student/delete&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;delete&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;delete请求方式&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"第六章-SpringBoot集成Redis\"><a href=\"#第六章-SpringBoot集成Redis\" class=\"headerlink\" title=\"第六章 SpringBoot集成Redis\"></a>第六章 SpringBoot集成Redis</h1><p>Redis：一个NoSQL（not only）数据库，常用作缓存使用（cache）<br>Redis的数据类型：string、hash、set、zset、list</p>\n<p>Redis是一个中间件：是一个独立的服务器。<br>Java中著名的客户端：Jedis、lettuce、Redisson</p>\n<p>Spring、SpringBoot中有一个RedisTemplate（StringRedisTemplate），用于处理和redis的交互</p>\n<h2 id=\"redis的使用\"><a href=\"#redis的使用\" class=\"headerlink\" title=\"redis的使用\"></a>redis的使用</h2><p>导入起步依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--redis起步依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>data-redis使用的是 lettuce客户端库<br>在程序中使用RedisTemplate类的方法 操作redis数据，实际就是调用的lettuce客户端中的方法</p>\n<p>使用示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入RedisTemplate</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * RedisTemplate 泛型</span></span><br><span class=\"line\"><span class=\"comment\">     * RedisTemplate&lt;String,String&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * RedisTemplate&lt;Object,Object&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * RedisTemplate</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：RedisTemplate对象的名称 redisTemplate</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加数据到redis</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/redis/add&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">addToRedis</span><span class=\"params\">(String name, String value)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//操作Redis中的String类型的数据，先获取ValueOperations对象</span></span><br><span class=\"line\">        <span class=\"type\">ValueOperations</span> <span class=\"variable\">valueOperations</span> <span class=\"operator\">=</span> redisTemplate.opsForValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        valueOperations.set(name, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;向redis添加String数据&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//从redis获取数据</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/redis/getKey&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getData</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ValueOperations</span> <span class=\"variable\">valueOperations</span> <span class=\"operator\">=</span> redisTemplate.opsForValue();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> valueOperations.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;key:&quot;</span> + key + <span class=\"string\">&quot;value:&quot;</span> + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/redis/&#123;key&#125;/&#123;value&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">addStringKV</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String key, <span class=\"meta\">@PathVariable</span> String value)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用StringRedisTemplate对象</span></span><br><span class=\"line\">        stringRedisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;使用StringRedisTemplate对象，&quot;</span> + <span class=\"string\">&quot;key:&quot;</span> + key + <span class=\"string\">&quot;value:&quot;</span> + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/redis/getstr/&#123;key&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getStringValue</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用StringRedisTemplate对象</span></span><br><span class=\"line\">        stringRedisTemplate.opsForValue().get(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;使用StringRedisTemplate对象，&quot;</span> + <span class=\"string\">&quot;key:&quot;</span> + key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"StringRedisTemplate-和-RedisTemplate\"><a href=\"#StringRedisTemplate-和-RedisTemplate\" class=\"headerlink\" title=\"StringRedisTemplate 和 RedisTemplate\"></a>StringRedisTemplate 和 RedisTemplate</h2><p>StringRedisTemplate：把key、value都作为String处理，使用的是String的序列化，可读性好。<br>RedisTemplate：把key、value经过了序列化存到redis。key、value是序列化的内容，不能直接识别。默认使用jdk的序列化，可以修改为其他的序列化。</p>\n<p>设置key或value的序列化方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置 RedisTemplate 序列化</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">addString</span><span class=\"params\">(String key,String value)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用RedisTemplate，在存取值之前，设置序列化方式。</span></span><br><span class=\"line\">    <span class=\"comment\">//设置key使用String的序列化</span></span><br><span class=\"line\">    redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">    <span class=\"comment\">//设置value的序列化</span></span><br><span class=\"line\">    redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    redisTemplate.opsForValue().set(key,value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;定义RedisTemplate对象key、value的序列化&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第七章-SpringBoot集成Dubbo\"><a href=\"#第七章-SpringBoot集成Dubbo\" class=\"headerlink\" title=\"第七章 SpringBoot集成Dubbo\"></a>第七章 SpringBoot集成Dubbo</h1><h2 id=\"SpringBoot集成Dubbo的文档\"><a href=\"#SpringBoot集成Dubbo的文档\" class=\"headerlink\" title=\"SpringBoot集成Dubbo的文档\"></a>SpringBoot集成Dubbo的文档</h2><p><a class=\"link\"   href=\"https://github.com/apache/dubbo-spring-boot-project/blob/master/README.md\" >文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"公共项目\"><a href=\"#公共项目\" class=\"headerlink\" title=\"公共项目\"></a>公共项目</h2><p>独立的maven项目：定义了接口和数据类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">3941539077791951521L</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StudentService</span>&#123;</span><br><span class=\"line\">    Student <span class=\"title function_\">queryStudent</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建服务提供者模块，实现接口模块</li>\n</ol>\n<p>dubbo依赖 和 zookeeper依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--dubbo依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--zookeeper依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--排除log4h依赖，因为重复--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：在pom文件中使用 <exclusions> 标签排除包含的依赖，已解决重复引入依赖的问题</p>\n<p>实现接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">使用dubbo中的注解暴露服务</span></span><br><span class=\"line\"><span class=\"comment\">@Component可以不加</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DubboService(interfaceClass = StudentService.class,version = &quot;1.0&quot;,timeout = 5000)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StudentServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">StudentService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Student <span class=\"title function_\">queryStudent</span><span class=\"params\">(Integer id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> studentDao.selectById(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> student;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>外部化配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置服务名称 dubbo:application name=&quot;名称&quot;</span></span><br><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">studentService-provider</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置扫描的包，扫描的@DubboService</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.scan.base-packages</span>=<span class=\"string\">com.example.service</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置dubbo协议</span></span><br><span class=\"line\"><span class=\"comment\">#dubbo.protocol.name=dubbo</span></span><br><span class=\"line\"><span class=\"comment\">#dubbo.protocol.port=20881</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#注册中心</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.registry.address</span>=<span class=\"string\">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>在类上使用 @DubboService 注解来暴露服务</p>\n<p><strong>在主类之上使用 @EnableDubbo 注解启用Dubbo</strong><br>包含了 @EnableDubboConfig 和 @DubboComponentScan</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDubbo</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootDemo001Application</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootDemo001Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建消费者模块</li>\n</ol>\n<p>添加依赖，与服务提供者相同。</p>\n<p>创建Controller或者Service调用远程服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestContrloller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DubboController</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            引用远程服务，把创建好的代理对象，注入给studentService</span></span><br><span class=\"line\"><span class=\"comment\">            @DubboReference(interfaceClass = StudentService.class,version = &quot;1.0&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">            没有使用interfaceClass，默认是 引用数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@DubboReference(version = &quot;1.0&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StudentService studentService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/query&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryStudent</span><span class=\"params\">(Integer id)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> studentService.queryStudent(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;调用远程接口获取的对象：&quot;</span>+student;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置文件application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定服务名称</span></span><br><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">consumer-application</span></span><br><span class=\"line\"><span class=\"comment\">#指定注册中心</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.registry.address</span>=<span class=\"string\">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第八章-SpringBoot打包\"><a href=\"#第八章-SpringBoot打包\" class=\"headerlink\" title=\"第八章 SpringBoot打包\"></a>第八章 SpringBoot打包</h1><p>主类继承SpringBootServletInitializer才能使用外部的tomcat<br>SpringBootServletInitializer相当于原有web.xml的替代<br>使用嵌入式的tomcat，默认不支持jsp。  </p>\n<h2 id=\"打包成war\"><a href=\"#打包成war\" class=\"headerlink\" title=\"打包成war\"></a>打包成war</h2><ol>\n<li>指定打包后的名称<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--打包后的文件名称--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>bootDemo<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>指定jsp编译的目录<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/webapp<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>META-INF/resources<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>执行打包是war<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--打包类型--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>主启动类继承SpringBootServletInitializer<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootDemo001Application</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SpringBootServletInitializer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootDemo001Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>部署war<br>将war文件放到tomcat等服务器的发布目录中。</li>\n</ol>\n<h2 id=\"打包成jar\"><a href=\"#打包成jar\" class=\"headerlink\" title=\"打包成jar\"></a>打包成jar</h2><ol>\n<li>指定打包后的名称<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--打包后的文件名称--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>bootDemo<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>指定springboot-maven-plugin版本<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--打包jar，有jsp文件时，必须指定maven-plugin插件版本是1.4.2.RELEASE--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>执行maven clean package<br> 在target目录中，生成jar文件 bootDemo.jar<br> 执行独立的springboot项目，即 java -jar bootDemo.jar</li>\n</ol>\n<h1 id=\"第九章-Thymeleaf-模板\"><a href=\"#第九章-Thymeleaf-模板\" class=\"headerlink\" title=\"第九章 Thymeleaf 模板\"></a>第九章 Thymeleaf 模板</h1><h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Thymeleaf是模板引擎，使用Java开发，在服务器端运行。将处理好的请求发送给浏览器。<br>Java生态下的模板还有Freemaker、Velocity、Beetl(国产)等。<br>非web环境下，Thymeleaf能直接显示模板上的静态数据；web环境下，能像jsp一样从后台接收数据并替换到模板上。<br>它是基于HTML的，以HTML标签为载体。<br>SpringBoot集成了Thymeleaf模板技术，官方也推荐使用它来代替jsp进行前端页面的数据展示。因为jsp需要编译运行，效率比较低。</p>\n<p><a class=\"link\"   href=\"https://www.thymeleaf.org/\" >Thymeleaf官网<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html\" >Thymeleaf官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--模板引擎起步依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一些配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在开发阶段，关闭模板缓存，让修改立刻生效</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.cache</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"comment\">#编码格式</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.encoding</span>=<span class=\"string\">UTF-8</span></span><br><span class=\"line\"><span class=\"comment\">#模板的类型（默认是HTML，模板是html文件）</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.mode</span>=<span class=\"string\">HTML</span></span><br><span class=\"line\"><span class=\"comment\">#模板的前缀： 类路径的 classpath:/templates</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.prefix</span>=<span class=\"string\">classpath:/templates/</span></span><br><span class=\"line\"><span class=\"comment\">#后缀</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.suffix</span>=<span class=\"string\">.html</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><ol>\n<li>标准变量表达式<br> 语法：${key}<br> 作用：获取key对应的文本数据，key是request作用域中的key。使用request.setAttribute(),model.addAttribute()<br> 在页面中html标签中使用 th:text=”${key}”<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>获取student对象属性值<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;student.id&#125;&quot;</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;student.name&#125;&quot;</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;student.age&#125;&quot;</span>&gt;</span>age<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>选择变量表达式（星号变量表达式）<br> 语法：*{key}<br> 作用：获取这个key对应的数据，*{key}需要与th:object一起使用<br> 目的是简单获取对象的属性值<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用 *&#123;&#125; 获取student对象属性值<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">&quot;$&#123;student&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;id&#125;&quot;</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;name&#125;&quot;</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;age&#125;&quot;</span>&gt;</span>age<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--直接使用也可以--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;student.id&#125;&quot;</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>链接表达式<br> 语法：@{url}<br> 作用：表示链接</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>链接绝对路径<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;https://baidu.com&#125;&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>链接相对路径<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/queryStudent&#125;&quot;</span>&gt;</span>相对地址，没有参数<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>链接相对路径，使用字符串链接传递参数<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;&#x27;/queryStudent?id=&#x27; + $&#123;student.id&#125; &#125;&quot;</span>&gt;</span>相对地址，有参数。获取model中的数据<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>传递多个参数<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/queryStudent(name=&#x27;zhangsan&#x27;,id=20)&#125;&quot;</span>&gt;</span>传多个参数<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Thymeleaf属性\"><a href=\"#Thymeleaf属性\" class=\"headerlink\" title=\"Thymeleaf属性\"></a>Thymeleaf属性</h2><p>属性是放在html元素中的，就是html元素的属性，加入了th前缀。属性的作用不变。加上th。属性的值由模板引擎处理，在属性上可以使用变量表达式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/queryStudent&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;/queryStudent&quot;</span> <span class=\"attr\">th:method</span>=<span class=\"string\">&quot;$&#123;methodAttr&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>g</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"each-循环\"><a href=\"#each-循环\" class=\"headerlink\" title=\"each 循环\"></a>each 循环</h3><p>each循环，可以循环List、Map、Array<br>语法：在html标签中使用 th:each</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;集合循环成员，循环状态变量：$&#123;key&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;集合循环成员&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>集合循环成员，循环状态变量：名称都是自定义的。<br><strong>”循环的状态变量“可以不定义，默认是”集合循环成员Stat“</strong><br>循环状态变量 iterStat 可以获取以下信息<br><strong>index：当前迭代对象的index</strong><br><strong>count：当前迭代对象个数（第几个）</strong><br>size：当前迭代对象大小（总数）<br>even/odd：布尔值，当前循环是否是偶数/奇数（从0开始计算）<br>first：布尔值，当前循环是否是第一个<br>last：布尔值，当前循环是否是最后一个</p>\n<h3 id=\"条件判断if\"><a href=\"#条件判断if\" class=\"headerlink\" title=\"条件判断if\"></a>条件判断if</h3><p>判断语句，条件为true，显示html标签内容，<strong>否则不显示</strong>。<strong>没有else语句</strong><br>语法：th:if=”条件语句”</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;id==1001&#125;&quot;</span>&gt;</span>id是1001<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&quot;&quot;空字符是true--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;sex&#125;&quot;</span>&gt;</span>空字符<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--null是false--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;null&#125;&quot;</span>&gt;</span>null<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还有个与 th:unless 和 th:if 相反的行为</p>\n<h3 id=\"判断语句-switch-case\"><a href=\"#判断语句-switch-case\" class=\"headerlink\" title=\"判断语句 switch,case\"></a>判断语句 switch,case</h3><p>th:switch 和 java中的switch一样<br>语法：th:switch=”要比较的值”,th:case=”值”</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:switch</span>=<span class=\"string\">&quot;要比较的值&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">&quot;值1&quot;</span>&gt;</span>结果1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">&quot;值2&quot;</span>&gt;</span>结果2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">&quot;*&quot;</span>&gt;</span>默认结果(default)<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：<strong>以上case只有一句执行</strong></p>\n<h3 id=\"内联-inline\"><a href=\"#内联-inline\" class=\"headerlink\" title=\"内联 inline\"></a>内联 inline</h3><ol>\n<li><p>内联test：在html标签外，获取表达式的值<br> 语法：[[${key}]]</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是[[$&#123;name&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>内联JavaScript</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">&quot;javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> name = [[$&#123;name&#125;]]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(name)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h2><ol>\n<li>文本字面量：使用单引号括起来的字符串<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;&#x27;我是&#x27;+$&#123;name&#125;&quot;</span>&gt;</span>数据显示<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>数字字面量<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;20&gt;5&#125;&quot;</span>&gt;</span>20&gt;5<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>boolean字面量<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;isLogin == true&quot;</span>&gt;</span>用户已登录<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>null字面量<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;student != null&quot;</span>&gt;</span>有student数据<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"字符串链接\"><a href=\"#字符串链接\" class=\"headerlink\" title=\"字符串链接\"></a>字符串链接</h2><ol>\n<li>使用单引号括起来的字符串，使用 + 连接其他字符串或表达式<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;&#x27;我是&#x27; + $&#123;name&#125;&quot;</span>&gt;</span>数据显示<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>使用双竖线，|字符串和表达式|<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;|我是$&#123;name&#125;|&quot;</span>&gt;</span>显示数据<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p>算数运算：+,-,*,/<br>关系比较：&gt;,&lt;,&gt;=,&lt;=(gt,lt,ge,le)<br>相等判断：==,!=(eq,ne)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;age &gt; 20&#125;&quot;</span>&gt;</span>年龄大于20<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;20 + 30&#125;&quot;</span>&gt;</span>显示运算结果<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;student == null&#125;&quot;</span>&gt;</span>student是null<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;student eq null&#125;&quot;</span>&gt;</span>student是null<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;student ne null&#125;&quot;</span>&gt;</span>student不是null<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;isLogin == true ? true : false&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Thymeleaf基本对象\"><a href=\"#Thymeleaf基本对象\" class=\"headerlink\" title=\"Thymeleaf基本对象\"></a>Thymeleaf基本对象</h2><p>模板引擎提供了内置对象，可以使用#开始引用。<br><a class=\"link\"   href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#appendix-a-expression-basic-objects\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ol>\n<li>#request 表示 HttpServletRequest</li>\n<li>#session 表示 HttpSession</li>\n<li>session 表示 Map对象，是#session的简单表达方式，用来获取session中指定key的值<br> #session.getAttribute(“loginname”)==session.loginname</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>内置对象#request,#session,session的使用<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>获取作用域中的信息<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#requset.getAttribute(&#x27;requestData&#x27;)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#session.getAttribute(&#x27;sessionData&#x27;)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;session.loginname&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>使用内置对象的方法<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getRequestURL()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getRequestURI()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getQueryString()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getContextPath()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getServerName()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getServerPort()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此外，还有很多工具类。提供string、date、集合的一些处理方法。此处不再列举，详细请查看官方文档。</p>\n<h2 id=\"自定义模板\"><a href=\"#自定义模板\" class=\"headerlink\" title=\"自定义模板\"></a>自定义模板</h2><p>模板是内容的复用，定义一次，在其他模板文件中多次使用。<br>模板的使用：<br>1.定义模板<br>2.使用模板</p>\n<p>模板定义语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;head&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>引用模板的语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--插入模板insert--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;~&#123; templatename :: selector&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--templatename:文件名称--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--selector:自定义模板名称--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;templatename :: selector&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--templatename:文件名称--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--selector:自定义模板名称--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--包含模板insert--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;~&#123; templatename :: selector&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;templatename :: selector&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--对于使用模板：有包含模板（th:include），插入模板（th:insert）--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--包含是替换原来的标签，插入只是插入--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第十章-总结\"><a href=\"#第十章-总结\" class=\"headerlink\" title=\"第十章 总结\"></a>第十章 总结</h1><h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p>spring+springMVC+SpringBoot</p>\n<p>创建对象：<br>@Controller：放在类上，创建控制器对象，注入到容器中。<br>@RestController：放在类上，创建控制器对象，注入到容器中。作用：复合了@Controller合@ResponseBodey，使用这个注解，控制器方法返回值都是数据，没有视图。<br>@Service：放在业务层实现类上，创建service对象，注入到容器。<br>@Repository：放在dao层实现类上，创建dao对象，注入到容器。没有使用是因为dao对象是MyBatis框架通过代理生成的，不需要使用。<br>@Component：放在类上，创建此类的对象，放入到容器中。</p>\n<p>赋值：<br>@Value：简单类型的赋值。还可以使用它获取配置文件中的数据。<br>@Autowired：引用类型赋值自动注入，支持byName，byType，默认是byType。放在属性或构造方法上，推荐放在构造方法上。<br>@Qualifer：给引用类型赋值，使用byName。<br><em>注：@Autowired，@Qualifer都是Spring框架提供的</em><br>@Resource：来自jdk中的定义，javax.annotation。实现引用类型的自动注入，支持byName，byType。默认是byName，如果失败，再使用byType注入。在属性上使用</p>\n<p>其他：<br>@Configuration：放在类上，表示这是个配置类，相当于xml配置文件。<br>@Bean：放在方法上，把方法返回值对象，注入到spring容器中。<br>@ImportResource：加载其他的xml配置文件，把文件中的对象注入到spring容器中。<br>@PropertySource：读取其他的properties属性配置文件。<br>@ComponentScan：扫描器，指定报名，扫描注解。<br>@ResponseBody：放在方法上，表示方法返回值是数据，不是试视图。<br>@RequestBody：把请求体中的方法读取出来，转为java对象使用。<br>@ControllerAdvice：控制器增强，放在类上，表示此类提供了方法，可以对controller增强功能。<br>@ExceptionHandler：处理异常，放在方法上。<br>@Transcational：处理事务，放在service实现类的public方法上，表示此方法有事务。</p>\n<p>SpringBoot中的注解：<br>@SpringBootApplication：放在启动类上，包含了@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan</p>\n<p>Mybatis相关注解：<br>@Mapper：放在类上，让MyBatis找到接口，创建代理对象<br>@MapperScan：放在主类上，指定扫描的包，将包中所有接口都创建代理对象。对象注入到容器中。<br>@Param：放在dao接口的方法形参前，作为命名参数使用。</p>\n<p>Dubbo注解：<br>@DubboService：在提供者端使用，暴露服务，放在接口实现类上。<br>@DubboReference：在消费者端使用，引用远程服务，放在属性上使用。<br>@EnableDubbo：放在主类上，表示启用Dubbo功能。</p>\n<h2 id=\"一些想法\"><a href=\"#一些想法\" class=\"headerlink\" title=\"一些想法\"></a>一些想法</h2><p>断断续续学了快一个月，springboot算是摆脱了众多的配置文件，对开发来说还是蛮友好的。<br>关于Thymeleaf模板引擎，我感觉和jsp有点像。但我没有学习过jsp，只是浅浅的用过。模板引擎应该算不上前后端分离，不过它是在html文件的标签上增加内容，实现动态的功能，算是伪分离吧。<del>前后端分离，人不分离。</del><br>现在linux使用地还不是很熟练，后面打算细细地学习下linux的使用，因为web应用是要部署到linux服务器的，所以学习linux是必要的。后面换电脑也打算使用linux作为主操作系统，大概会选择deepin系统吧。<br>目前要复习期末考试，考完后，会开始健康码网站的制作。<br>后面的学习计划，大概有Nginx，Docker之类的，然后继续深入对spring系列框架的理解合使用。<br>更远一些的，大概会去学一下vue，了解下前端，毕竟如果是一个人做网站的话，只有后端也是不太行的。<br>好耶！可以使用springboot，告别那么多配置文件了。</p>\n<blockquote>\n<p>2022.5.29</p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h1 id=\"第一章-xml与JavaConfig\"><a href=\"#第一章-xml与JavaConfig\" class=\"headerlink\" title=\"第一章 xml与JavaConfig\"></a>第一章 xml与JavaConfig</h1><ol>\n<li>为什么要使用springboot<br>因为Spring、SpringMVC需要使用大量的配置文件（xml文件）<br>还需要配置各种对象，把使用的对象放到spring容器中才能使用对象<br>需要了解其他框架的配置规则<br>比较繁琐</li>\n<li>SpringBoot相当于 不需要配置文件的Spring+SpringMVC。常用的框架和第三方库都已经配置好了，直接用。</li>\n<li>SpringBoot开发效率高，使用更方便。</li>\n</ol>\n<h2 id=\"JavaConfig\"><a href=\"#JavaConfig\" class=\"headerlink\" title=\"@JavaConfig\"></a>@JavaConfig</h2><p>javaConfig：使用java类作为xml配置文件的代替，是配置spring容器的纯Java方式。在这个Java类中可以创建Java对象，把对象放入sprig容器中（注入到容器）。<br>使用两个注解：</p>\n<ol>\n<li>@Configuration：放在一个类上，表示这个类作为配置文件使用。</li>\n<li>@Bean：放在方法上，声明对象，把这个对象注入到容器。相当于<bean></li>\n</ol>\n<p>使用示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Configuration：表示当前类作为配置文件使用。是用来配置容器的</span></span><br><span class=\"line\"><span class=\"comment\"> * 位置：在类上</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 这个类相当于beans.xml</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建方法，方法返回值为对象。方法上加入<span class=\"doctag\">@bean</span>注解</span></span><br><span class=\"line\"><span class=\"comment\">     * 方法返回值对象就注入到容器中</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Bean</span>: 把对象注入到Spring容器中。作用相当于&lt;bean&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * 位置：在方法上</span></span><br><span class=\"line\"><span class=\"comment\">     * 说明：<span class=\"doctag\">@Bean</span>，不指定对象名称，默认方法名是id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Student <span class=\"title function_\">createStudent</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        s1.setName(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        s1.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;student2&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Student <span class=\"title function_\">createStudent2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        s2.setName(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        s2.setId(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ImportResource\"><a href=\"#ImportResource\" class=\"headerlink\" title=\"@ImportResource\"></a>@ImportResource</h2><p>@ImportResource：导入其他的xml配置文件，等于在xml <code>&lt;import resources=&quot;其他配置文件&quot;/&gt;</code><br>使用示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ImportResource(value = &#123;&quot;classpath:applicationContext.xml&quot;,&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>value参数可以是数组，以导入多个xml配置文件  </p>\n<h2 id=\"PropertyResource\"><a href=\"#PropertyResource\" class=\"headerlink\" title=\"@PropertyResource\"></a>@PropertyResource</h2><p>@PropertyResource： 读取properties属性配置文件可以实现外部化配置，在程序代码之外提供数据。<br>步骤：</p>\n<ol>\n<li>在resources目录下，创建properties文件，使用key=value的格式提供数据</li>\n<li>在PropertyResource指定properties文件的位置</li>\n<li>使用@Value(value=”${key}”)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ImportResource(value = &quot;classpath:applicationContext.xml&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(value = &quot;classpath:config.properties&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(basePackages = &quot;org.example.vo&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第二章-SpringBoot\"><a href=\"#第二章-SpringBoot\" class=\"headerlink\" title=\"第二章 SpringBoot\"></a>第二章 SpringBoot</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a class=\"link\"   href=\"https://spring.io/\" >Spring官网<i class=\"fas fa-external-link-alt\"></i></a><br>SpringBoot是Spring中的一个成员，可以简化Spring，SpringMVC的使用。核心还是IOC容器。</p>\n<p>特点</p>\n<ul>\n<li>Create stand-alone Spring applications<br>  创建Spring应用</li>\n<li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)<br>  内嵌的tomcat，jetty，undertow服务器（不用部署war包）</li>\n<li>Provide opinionated ‘starter’ dependencies to simplify your build configuration<br>  提供了starter起步依赖，来简化应用的配置<br>  比如使用MyBatis框架，需要在Spring项目中，配置MyBatis的对象SqlSessionFactory，Dao的代理对象<br>  在SpringBoot项目中，在pom.xml中，加入一个mybatis-spring-boot-starter依赖</li>\n<li>Automatically configure Spring and 3rd party libraries whenever possible<br>  尽可能去配置spring和第三方库，自动配置（将spring和第三方库中的对象创建好，放入容器中，以便于使用）</li>\n<li>Provide production-ready features such as metrics, health checks, and externalized configuration<br>  提供了健康检查，统计，外部化配置</li>\n<li>Absolutely no code generation and no requirement for XML configuration<br>  不用生成代码，不用使用xml做配置</li>\n</ul>\n<h2 id=\"创建SpringBoot项目\"><a href=\"#创建SpringBoot项目\" class=\"headerlink\" title=\"创建SpringBoot项目\"></a>创建SpringBoot项目</h2><p>使用Spring提供的初始化器，即向导创建SpringBoot应用</p>\n<p>使用的地址：<a class=\"link\"   href=\"https://start.spring.io/\" >https://start.spring.io<i class=\"fas fa-external-link-alt\"></i></a><br>国内的地址：<a class=\"link\"   href=\"https://start.springboot.io/\" >https://start.springboot.io<i class=\"fas fa-external-link-alt\"></i></a><br>也可以直接访问网址，创建并下载。</p>\n<p>SpringBoot的目录结构：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/SpringBoot%E7%AC%94%E8%AE%B0/SpringBoot%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png\"\n                      alt=\"SpringBoot目录结构.png\"\n                ></p>\n<h2 id=\"注解的使用\"><a href=\"#注解的使用\" class=\"headerlink\" title=\"注解的使用\"></a>注解的使用</h2><p>@SpringBootApplication<br>复合注解：由<br>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan<br>组成</p>\n<ol>\n<li>@SpringBootConfiguration<br>部分源码：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootConfiguration &#123;</span><br><span class=\"line\">    <span class=\"meta\">@AliasFor(</span></span><br><span class=\"line\"><span class=\"meta\">        annotation = Configuration.class</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">proxyBeanMethods</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n说明：使用了@SpringBootConfiguration注解标注的类，可以作为配置文件使用，可以使用BEAN声明对象，注入到容器。</li>\n<li>@SpringBootConfiguration<br>启用自动配置，把java对象配置好，注入到spring容器中。例如：将MyBatis对象创建好，放入到容器中。</li>\n<li>@ComponentScan<br>扫描器，找到注解，根据注解功能创建对象，给属性赋值等。<br>默认扫描的包：@ComponentScan所在的包和子包。</li>\n</ol>\n<h2 id=\"SpringBoot的配置文件\"><a href=\"#SpringBoot的配置文件\" class=\"headerlink\" title=\"SpringBoot的配置文件\"></a>SpringBoot的配置文件</h2><p>配置文件名称：application<br>拓展名：properties(key=value);yml(ket:value)<br>使用application.properties或application.yml</p>\n<p>application.properties示例：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#设置端口号</span></span><br><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">8080</span></span><br><span class=\"line\"><span class=\"comment\">#设置访问应用上下文路径，contextpath</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.context-path</span>=<span class=\"string\">/boot</span></span><br></pre></td></tr></table></figure>\n\n<p>application.yml示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/boot</span></span><br></pre></td></tr></table></figure>\n\n<p>注：properties与yml同时存在时，会使用properties。（一般只是用一个，不要两个一起用）</p>\n<h2 id=\"多环境配置\"><a href=\"#多环境配置\" class=\"headerlink\" title=\"多环境配置\"></a>多环境配置</h2><p>有开发环境，测试环境，上线环境。<br>每个环节都有不同的配置信息，例如端口，上下文件，数据库url，用户名，密码等。</p>\n<p>使用多环境配置文件，可以方便切换不同的配置。<br>使用方式：创建多个配置文件，名称规则：application-环境名称.properties(yml)</p>\n<p>创建开发环境的配置文件：application-dev.properties(application-dev.yml)<br>创建测试环境的配置文件：application-test.properties</p>\n<p>在application.properties中指定使用哪个配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#激活使用哪个配置文件</span></span><br><span class=\"line\"><span class=\"attr\">spring.profiles.active</span>=<span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义配置\"><a href=\"#自定义配置\" class=\"headerlink\" title=\"自定义配置\"></a>自定义配置</h2><h3 id=\"Value-“-key-”\"><a href=\"#Value-“-key-”\" class=\"headerlink\" title=\"@Value(“${key}”)\"></a>@Value(“${key}”)</h3><p>key来自application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">student.name</span>=<span class=\"string\">咕咕咕</span></span><br><span class=\"line\"><span class=\"attr\">student.age</span>=<span class=\"string\">20</span></span><br></pre></td></tr></table></figure>\n<p>注解加在属性定义上，便能读取配置中的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBoot</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;student.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/hello&quot;, produces = &quot;application/json&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello,&quot;</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ConfigurationProperties-prefix-”…”\"><a href=\"#ConfigurationProperties-prefix-”…”\" class=\"headerlink\" title=\"@ConfigurationProperties(prefix=”…”)\"></a>@ConfigurationProperties(prefix=”…”)</h3><p>将整个文件映射为一个对象，用于自定义配置项比较多的情况。<br>在类上加上<br>@Component<br>@ConfigurationProperties(prefix = “student”)<br>注解，prefix内为属性名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.vo;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;student&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(String age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&#x27;&quot;</span> + age + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Controller中使用@Resource自动注入，从容其中拿到对象，进行赋值使用。</p>\n<h2 id=\"SpringBoot中使用jsp-不推荐使用jsp，因为前后端要分离\"><a href=\"#SpringBoot中使用jsp-不推荐使用jsp，因为前后端要分离\" class=\"headerlink\" title=\"SpringBoot中使用jsp(不推荐使用jsp，因为前后端要分离)\"></a>SpringBoot中使用jsp(不推荐使用jsp，因为前后端要分离)</h2><p>SpringBoot不推荐使用jsp，而是使用模板技术代替jsp<br>SpringBoot原生不支持jsp，需要配置依赖项。  </p>\n<ol>\n<li><p>加入一个处理jsp的依赖，负责编译jsp文件。  </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.embed<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat-embed-jasper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>如果需要使用servlet，jsp，jstl的功能，还需要添加额外的依赖项。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencys</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--jstl的依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--servlet的依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--jsp的依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencys</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>创建一个存放jsp的目录，一般叫webapp<br> index.jsp</p>\n</li>\n<li><p>需要在pom.xml指定jsp文件编译后的存放目录<br> META-INF/resources</p>\n</li>\n<li><p>创建Controller，访问jsp</p>\n</li>\n<li><p>在application.properties文件中配置视图解析器</p>\n</li>\n</ol>\n<p>使用示例：<br>index.jsp</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page contextType=<span class=\"string\">&quot;text/html;charset=UTF-8” language=&quot;</span>java<span class=\"string\">&quot; %&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;title&gt;jsp文件&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;h3&gt;使用jsp显示Controller中的数据 $&#123;data&#125;&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Controller类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springfarmework.stereotype.Controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JspController</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//    public String Jsp(HttpServletRequest request)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        request.setAttribute(&quot;data&quot;,&quot;SpringBoot使用jsp&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        //视图的逻辑名称</span></span><br><span class=\"line\"><span class=\"comment\">//        return &quot;index&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">Jsp</span><span class=\"params\">(Model model)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//将数据放入到request作用域</span></span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;data&quot;</span>,<span class=\"string\">&quot;SpringBoot使用jsp&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//视图的逻辑名称</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;index&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>application.properties中添加</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置视图解析器 前缀及后缀</span></span><br><span class=\"line\"><span class=\"comment\">#/ = src/main/webapp</span></span><br><span class=\"line\"><span class=\"attr\">spring.mvc.view.prefix</span>=<span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">spring.mvc.view.suffix</span>=<span class=\"string\">.jsp</span></span><br></pre></td></tr></table></figure>\n<p>pom.xml文件中，指定jsp编译后存放的目录。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--jsp原来的目录--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/webapp<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--指定编译后的存放目录--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>META_INF/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--指定处理的目录和文件--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>jsp正在被逐渐淘汰，因为它在页面中嵌入了java代码。使得前后端不能分离，从而加大了前端与后端的沟通成本，降低了开发效率。<br>比如下面的对话(来自网络)</p>\n<blockquote>\n<p>后端：你写的页面有问题啊，不显示数据。<br>前端：不可能，我这边都是好的。<br>后端：你自己来看啊。<br>前端：你写的这是什么玩意？我给你的代码不是这样的。<br>后端：我得把你的代码加到 JSP 里啊。<br>前端：我又不懂 JSP 啊，你再把代码摘出来吧，我帮你看看问题。<br>后端：……</p>\n</blockquote>\n<p>可以使用ajax技术，实现前后端分离。</p>\n<h2 id=\"使用容器\"><a href=\"#使用容器\" class=\"headerlink\" title=\"使用容器\"></a>使用容器</h2><p>通过代码，从容器中获取对象。<br>在main方法中SpringApplication.run()方法获取返回的String容器对象，再获取业务bean进行调用。</p>\n<p>run()方法的源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ConfigurableApplicationContext <span class=\"title function_\">run</span><span class=\"params\">(Class&lt;?&gt; primarySource, String... args)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> run(<span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[]&#123;primarySource&#125;, args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ConfigurableApplicationContext：接口，是ApplicationContext的子接口</p>\n<p>使用示例：<br>手动从容器中获取UserService对象，调用其中的sayHello方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootDemo001Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取容器对象</span></span><br><span class=\"line\">        <span class=\"comment\">//ConfigurableApplicationContext ctx = SpringApplication.run(SpringBootDemo001Application.class, args);</span></span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> SpringApplication.run(SpringBootDemo001Application.class, args);</span><br><span class=\"line\">        <span class=\"comment\">//从容器中获取对象</span></span><br><span class=\"line\">        <span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> (UserService) ctx.getBean(<span class=\"string\">&quot;UserService&quot;</span>);</span><br><span class=\"line\">        userService.sayHello(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CommandLineRunner接口、ApplicationRunner接口\"><a href=\"#CommandLineRunner接口、ApplicationRunner接口\" class=\"headerlink\" title=\"CommandLineRunner接口、ApplicationRunner接口\"></a>CommandLineRunner接口、ApplicationRunner接口</h2><p>这两个接口都有一个run方法。执行时间在容器对象创建好后，自动执行run()方法。<br>可以完成自定义的在容器对象创建好的一些操作。</p>\n<p>源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ApplicationRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(ApplicationArguments args)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>他们在容器启动完成后执行。<br>我们只需要实现这个方法，就可以在容器启动后执行一些内容。比如读取配置文件，数据库连接之类。</p>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AfterRun</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//可做自定义操作</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;在容器对象创建好，执行的方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第三章-Web组件\"><a href=\"#第三章-Web组件\" class=\"headerlink\" title=\"第三章 Web组件\"></a>第三章 Web组件</h1><p>拦截器、servlet、Filter</p>\n<h2 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h2><p>拦截器是SpringMVC中的一种对象，能拦截对Controller的请求。<br>拦截器框架中由系统的拦截器，可以自定义拦截器。实现对请求的预先处理。</p>\n<p>SpringMVC实现自定义拦截器：</p>\n<ol>\n<li>创建类实现SpringMVC框架的HandlerInterceptor接口<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class=\"meta\">@Nullable</span> ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class=\"meta\">@Nullable</span> Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>需在SpringMVC的配置文件中，声明拦截器<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;url&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;拦截器的全限定名称&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>SpringBoot实现拦截器：</p>\n<ol>\n<li>自定义拦截器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义的拦截器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> handler  被拦截的控制器对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> boolean</span></span><br><span class=\"line\"><span class=\"comment\">     * true：请求被Controller处理</span></span><br><span class=\"line\"><span class=\"comment\">     * false：请求被拦截</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否通过拦截器的代码</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;拦截器被执行&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>将拦截器对象注入容器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.web.LoginInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HandlerInterceptorConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加拦截器对象，注入到容器中</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建拦截器对象</span></span><br><span class=\"line\">        <span class=\"type\">HandlerInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LoginInterceptor</span>();</span><br><span class=\"line\">        <span class=\"comment\">//指定拦截的url请求</span></span><br><span class=\"line\">        String path[] = &#123;<span class=\"string\">&quot;/user/**&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//指定不拦截的地址</span></span><br><span class=\"line\">        String excludePath[] = &#123;<span class=\"string\">&quot;/user/login&quot;</span>&#125;;</span><br><span class=\"line\">        registry.addInterceptor(interceptor).addPathPatterns(path).excludePathPatterns(excludePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>写Controller类进行测试<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HandlerInterceptorController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">userRegister</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问/user/register&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">userLogin</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问/user/login&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>在SpringBoot中使用Servlet对象<br>使用步骤：</p>\n<ol>\n<li>创建Servlet类。创建类继承HttpServlet。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Servlet类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Servlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用HttpServletResponse输出数据，应答结果</span></span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">PrintWriter</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> resp.getWriter();</span><br><span class=\"line\">        out.println(<span class=\"string\">&quot;执行servlet&quot;</span>);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>注册Servlet，让框架能找到Servlet。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.web.Servlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServletConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义方法，注册Servlet对象</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">servletRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//public ServletRegistrationBean(T servlet, String... urlMappings)</span></span><br><span class=\"line\">        <span class=\"comment\">//第一个参数是Servlet对象，第二个参数是url地址</span></span><br><span class=\"line\">        <span class=\"comment\">//ServletRegistrationBean bean = new ServletRegistrationBean(new Servlet(),&quot;/servlet&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//无参构造，单独设置参数</span></span><br><span class=\"line\">        <span class=\"type\">ServletRegistrationBean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>();</span><br><span class=\"line\">        bean.setServlet(<span class=\"keyword\">new</span> <span class=\"title class_\">Servlet</span>());</span><br><span class=\"line\">        bean.addUrlMappings(<span class=\"string\">&quot;/servlet_01&quot;</span>,<span class=\"string\">&quot;/servlet_02&quot;</span>); <span class=\"comment\">// &lt;url-pattern&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Filter过滤器\"><a href=\"#Filter过滤器\" class=\"headerlink\" title=\"Filter过滤器\"></a>Filter过滤器</h2><p>Filter是Servlet规范中的过滤器，可以处理请求，对请求的参数、属性进行调整。常常在过滤器中处理字符编码<br>使用步骤：</p>\n<ol>\n<li>创建自定义的过滤器类<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.web.MyFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FilterConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">filterRegistration</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">MyFilter</span>());</span><br><span class=\"line\">        bean.addUrlPatterns(<span class=\"string\">&quot;/user/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>注册Filter过滤器对象<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.web.MyFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FilterConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">filterRegistration</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">MyFilter</span>());</span><br><span class=\"line\">        bean.addUrlPatterns(<span class=\"string\">&quot;/user/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>写Controller类进行测试<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HandlerInterceptorController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">userRegister</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问/user/register&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">userLogin</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问/user/login&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/query&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">query</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;访问/query&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"字符集过滤器\"><a href=\"#字符集过滤器\" class=\"headerlink\" title=\"字符集过滤器\"></a>字符集过滤器</h2><p>CharacterEncodingFilter：解决post请求中乱码的问题<br>在SpringMVC框架，在web.xml中注册过滤器。配置它的属性</p>\n<ol>\n<li>使用系统提供的字符集过滤器类<br>过滤器的注册<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.filter.CharacterEncodingFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FilterConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">filterRegistration</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>();</span><br><span class=\"line\">        <span class=\"comment\">//使用框架中的过滤器类</span></span><br><span class=\"line\">        <span class=\"type\">CharacterEncodingFilter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CharacterEncodingFilter</span>();</span><br><span class=\"line\">        <span class=\"comment\">//指定使用的编码方式</span></span><br><span class=\"line\">        filter.setEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//指定request，response都使用encoding的值</span></span><br><span class=\"line\">        filter.setForceEncoding(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setFilter(filter);</span><br><span class=\"line\">        <span class=\"comment\">//指定过滤的url地址</span></span><br><span class=\"line\">        bean.addUrlPatterns(<span class=\"string\">&quot;/*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n同时需要关闭SpringBoot中默认配置的字符集过滤器，使自定义的过滤器起作用。<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#SpringBoot中默认已经配置了Character Encoding Filter，默认编码ISO-8859-1</span></span><br><span class=\"line\"><span class=\"comment\">#设置enable=false 作用是关闭系统中配置好的过滤器，使用自定义的CharacterEncodingFilter</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.encoding.enabled</span>=<span class=\"string\">false</span></span><br></pre></td></tr></table></figure></li>\n<li>直接修改application.properties配置<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#让系统的CharacterEncodingFilter生效</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.encoding.enabled</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\">#指定使用的编码方式</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.encoding.charset</span>=<span class=\"string\">UTF-8</span></span><br><span class=\"line\"><span class=\"comment\">#强制request、response都使用charset属性的值</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.encoding.force</span>=<span class=\"string\">true</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"第四章-ORM操作MySQL\"><a href=\"#第四章-ORM操作MySQL\" class=\"headerlink\" title=\"第四章 ORM操作MySQL\"></a>第四章 ORM操作MySQL</h1><p>ORM是“对象-关系-映射”的简称。（Object Relational Mapping，简称ORM）<br>orm其实就是将类对象的语法翻译成sql语句的一个引擎</p>\n<p>使用MyBatis框架操作数据库，在SpringBoot框架集成MyBatis<br>使用步骤：</p>\n<ol>\n<li>mybatis起步依赖：完成mybatis对象自动配置，对象放在容器中。</li>\n<li>pom.xml指定把src/main/java目录中的xml文件包含到classpath中。</li>\n<li>创建实体类Student。</li>\n<li>创建Dao接口StudentDao，创建一个查询学生的方法。</li>\n<li>穿啊关键Dao接口对应的Mapper文件，xml文件，写sql语句。</li>\n<li>创建Service层对象，创建StudentService接口和他的实现类。调dao对象的方法，完成数据库的操作。</li>\n<li>创建Controller对象，访问Service。</li>\n<li>写application.properties文件<br>配置数据库的连接信息</li>\n</ol>\n<h2 id=\"第一种方式：-Mapper\"><a href=\"#第一种方式：-Mapper\" class=\"headerlink\" title=\"第一种方式：@Mapper\"></a>第一种方式：@Mapper</h2><p>@Mapper：放在dao接口上，每个接口都需要使用这个注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Mapper</span>： 告诉MyBatis这是dao接口，创建此接口的代理对象</span></span><br><span class=\"line\"><span class=\"comment\"> *      位置：在类上</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StudentDao</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Student <span class=\"title function_\">selectById</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;stuId&quot;)</span> Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二种方式：-MapperScan\"><a href=\"#第二种方式：-MapperScan\" class=\"headerlink\" title=\"第二种方式：@MapperScan\"></a>第二种方式：@MapperScan</h2><p>@MapperScan：放在SpringBoot启动类上，在包下所有接口在编译后会生成相应的实现类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@MapperScan</span>：找到Dao接口和Mapper文件</span></span><br><span class=\"line\"><span class=\"comment\"> *      basePackages：Dao接口所在的包名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(basePackages = &#123;&quot;com.example.dao&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootDemo001Application</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CommandLineRunner</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三种方式：Mapper文件和Dao接口分开管理\"><a href=\"#第三种方式：Mapper文件和Dao接口分开管理\" class=\"headerlink\" title=\"第三种方式：Mapper文件和Dao接口分开管理\"></a>第三种方式：Mapper文件和Dao接口分开管理</h2><p>将mapper文件放在resources目录下</p>\n<ol>\n<li>在resources目录中创建子目录（自定义），例如mapper</li>\n<li>将mapper文件放在mapper目录</li>\n<li>在application文件中指定mapper文件的目录<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定mapper文件的位置</span></span><br><span class=\"line\"><span class=\"attr\">mybatis.mapper-locations</span>=<span class=\"string\">classpath:mapper/*.xml</span></span><br><span class=\"line\"><span class=\"comment\">#指定mybatis的日志</span></span><br><span class=\"line\"><span class=\"attr\">mybatis.configuration.log-impl</span>=<span class=\"string\">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li>\n<li>在pom文件中指定resources目录中的文件，编译到目标目录中<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--resources插件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>Spring框架中的事务：</p>\n<ol>\n<li>管理事务的对象：事务管理器（接口，接口有很多实现类）<br> 例如：使用jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</li>\n<li>声明式事务：在xml配置文件或使用注释说明事务控制的内容<br> 控制事务：隔离级别，传播行为，超时时间</li>\n<li>事务处理方式：<ol>\n<li>spring框架中的@Transactional</li>\n<li>aspectj框架可以在xml配置文件中，声明事务控制的内容</li>\n</ol>\n</li>\n</ol>\n<p>SpringBoot中使用事务：</p>\n<ol>\n<li>在业务方法上加入@Transactional，加入注解后，方法有事务功能。</li>\n<li>明确的在启动类上，加入@EnableTransactionManager</li>\n</ol>\n<h1 id=\"第五章-接口的架构风格——RESTful\"><a href=\"#第五章-接口的架构风格——RESTful\" class=\"headerlink\" title=\"第五章 接口的架构风格——RESTful\"></a>第五章 接口的架构风格——RESTful</h1><p><a class=\"link\"   href=\"https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3/3350958?fromtitle=API&fromid=10154\" >API百度百科<i class=\"fas fa-external-link-alt\"></i></a><br>接口：应用程序接口（英语：Application Programming Interface，简称：API），又称为应用编程接口，就是软件系统不同组成部分衔接的约定。由于近年来软件的规模日益庞大，常常需要把复杂的系统划分成小的组成部分，编程接口的设计十分重要。程序设计的实践中，编程接口的设计首先要使软件系统的职责得到合理划分。良好的接口设计可以降低系统各部分的相互依赖，提高组成单元的内聚性，降低组成单元间的耦合程度，从而提高系统的维护性和扩展性。<br>接口：可以指访问servlet、controller的url，调用其他程序的 函数</p>\n<p>架构风格：api的组织样式<br>    就是一个传统的：<a class=\"link\"   href=\"http://localhost:8080/dev/student/query?id=2\" >http://localhost:8080/dev/student/query?id=2<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h2><p><a class=\"link\"   href=\"https://baike.baidu.com/item/RESTful/4406165\" >RESTful架构风格<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ol>\n<li>REST：(Representational State Transfer)表现层状态转移<br> 是一种接口的架构风格和设计的理念，不是标准。<br> 优点：更简洁，更有层次。<br> 表现层状态转移：<br> 表现层就是视图层，显示资源的。通过视图页面、jsp等显示操作资源的结果。<br> 状态：资源变化<br> 转移：资源是可以变化的。资源能创建，new状态，资源创建后可以查询资源，可以被修改。</li>\n<li>RESt中的要素：<br> 用RESt表示资源和对应资源的操作。在互联网中，表示一个资源或者一个操作。<br> 资源是用url表示的，在互联网中，使用的图片、视频、文本、网页等都是资源。<br> 对于资源：<ol>\n<li>查询资源：通过url找到资源</li>\n<li>创建资源：添加资源</li>\n<li>更新资源：更新资源，编辑</li>\n<li>删除资源：删除<br>资源使用url表示，通过名称表示资源<br>  在url中，使用名词表示资源，以及访问资源的信息，在url中，使用”/“分割对资源的信息<br>使用http中的动作（请求方式），表示对资源的操作（CURD）</li>\n</ol>\n<ul>\n<li>GET：查询资源——sql select<br>处理单个资源：<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/query/2\" >http://localhost:8080/dev/student/query/2<i class=\"fas fa-external-link-alt\"></i></a><br>处理多个资源：<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/query/2/3\" >http://localhost:8080/dev/student/query/2/3<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>POST：创建资源——sql insert<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/add\" >http://localhost:8080/dev/student/add<i class=\"fas fa-external-link-alt\"></i></a><br>在post请求中传递数据</li>\n<li>PUT：更新资源——sql update<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/query/2\" >http://localhost:8080/dev/student/query/2<i class=\"fas fa-external-link-alt\"></i></a><br>在post中传递数据</li>\n<li>DELETE：删除资源——sql delete<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/query/2\" >http://localhost:8080/dev/student/query/2<i class=\"fas fa-external-link-alt\"></i></a><br>需要分页、排序等参数，依然可以加在url后，比如：<br><a class=\"link\"   href=\"http://localhost:8080/dev/student/query/2?page=2&amp;pageSize=10\" >http://localhost:8080/dev/student/query/2?page=2&amp;pageSize=10<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n</li>\n<li>REST即使用url表示资源，使用http动作操作资源。</li>\n</ol>\n<h2 id=\"RESTful的注解\"><a href=\"#RESTful的注解\" class=\"headerlink\" title=\"RESTful的注解\"></a>RESTful的注解</h2><ol>\n<li>@PathVariable：从url中获取数据</li>\n<li>@GetMapping：支持get请求方式，等同于@RequestMapping（method=RequestMethod.GET）</li>\n<li>@PostMapping：支持post请求方式，等同于@RequestMapping（method=RequestMethod.POST）</li>\n<li>@PutMapping：支持put请求方式，等同于@RequestMapping（method=RequestMethod.PUT）</li>\n<li>@DeleteMapping：支持delete请求方式，等同于@RequestMapping（method=RequestMethod.DELETE）</li>\n<li>@RestController：复合注解，是@Controller和@ResponseBody组合<br> 在类上使用，表示当前类的所有方法都加入了@ResponseBody</li>\n</ol>\n<p>Postman：测试工具<br>可以用来测试get、post、put、delete等请求。</p>\n<p>注意：<strong>url请求地址加请求方式</strong> 得是唯一的，否则会有歧义<br>@<strong>GetMapping</strong>(“<strong>/student/{stuId}</strong>“)</p>\n<h2 id=\"在页面中或ajax中，支持pub、delete请求\"><a href=\"#在页面中或ajax中，支持pub、delete请求\" class=\"headerlink\" title=\"在页面中或ajax中，支持pub、delete请求\"></a>在页面中或ajax中，支持pub、delete请求</h2><p>在SpringMVC中，有一个过滤器，支持post请求转为put、delete</p>\n<p>过滤器：org.springframework.web.filter.HiddenHttpMethodFilter<br>作用：将请求中的post请求转为put、delete</p>\n<p>使用步骤：</p>\n<ol>\n<li>application.properties：开启使用HiddenHttpMethodMFilter过滤器</li>\n<li>在请求页面中，包含_method参数，他的值是put、delete，发起这个请求使用的post方式<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;student/put&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;put&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;put请求方式&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;student/delete&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;delete&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;delete请求方式&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"第六章-SpringBoot集成Redis\"><a href=\"#第六章-SpringBoot集成Redis\" class=\"headerlink\" title=\"第六章 SpringBoot集成Redis\"></a>第六章 SpringBoot集成Redis</h1><p>Redis：一个NoSQL（not only）数据库，常用作缓存使用（cache）<br>Redis的数据类型：string、hash、set、zset、list</p>\n<p>Redis是一个中间件：是一个独立的服务器。<br>Java中著名的客户端：Jedis、lettuce、Redisson</p>\n<p>Spring、SpringBoot中有一个RedisTemplate（StringRedisTemplate），用于处理和redis的交互</p>\n<h2 id=\"redis的使用\"><a href=\"#redis的使用\" class=\"headerlink\" title=\"redis的使用\"></a>redis的使用</h2><p>导入起步依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--redis起步依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>data-redis使用的是 lettuce客户端库<br>在程序中使用RedisTemplate类的方法 操作redis数据，实际就是调用的lettuce客户端中的方法</p>\n<p>使用示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注入RedisTemplate</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * RedisTemplate 泛型</span></span><br><span class=\"line\"><span class=\"comment\">     * RedisTemplate&lt;String,String&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * RedisTemplate&lt;Object,Object&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * RedisTemplate</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * 注意：RedisTemplate对象的名称 redisTemplate</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加数据到redis</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/redis/add&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">addToRedis</span><span class=\"params\">(String name, String value)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//操作Redis中的String类型的数据，先获取ValueOperations对象</span></span><br><span class=\"line\">        <span class=\"type\">ValueOperations</span> <span class=\"variable\">valueOperations</span> <span class=\"operator\">=</span> redisTemplate.opsForValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        valueOperations.set(name, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;向redis添加String数据&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//从redis获取数据</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/redis/getKey&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getData</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ValueOperations</span> <span class=\"variable\">valueOperations</span> <span class=\"operator\">=</span> redisTemplate.opsForValue();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> valueOperations.get(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;key:&quot;</span> + key + <span class=\"string\">&quot;value:&quot;</span> + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/redis/&#123;key&#125;/&#123;value&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">addStringKV</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String key, <span class=\"meta\">@PathVariable</span> String value)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用StringRedisTemplate对象</span></span><br><span class=\"line\">        stringRedisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;使用StringRedisTemplate对象，&quot;</span> + <span class=\"string\">&quot;key:&quot;</span> + key + <span class=\"string\">&quot;value:&quot;</span> + value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/redis/getstr/&#123;key&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getStringValue</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用StringRedisTemplate对象</span></span><br><span class=\"line\">        stringRedisTemplate.opsForValue().get(key);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;使用StringRedisTemplate对象，&quot;</span> + <span class=\"string\">&quot;key:&quot;</span> + key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"StringRedisTemplate-和-RedisTemplate\"><a href=\"#StringRedisTemplate-和-RedisTemplate\" class=\"headerlink\" title=\"StringRedisTemplate 和 RedisTemplate\"></a>StringRedisTemplate 和 RedisTemplate</h2><p>StringRedisTemplate：把key、value都作为String处理，使用的是String的序列化，可读性好。<br>RedisTemplate：把key、value经过了序列化存到redis。key、value是序列化的内容，不能直接识别。默认使用jdk的序列化，可以修改为其他的序列化。</p>\n<p>设置key或value的序列化方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置 RedisTemplate 序列化</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">addString</span><span class=\"params\">(String key,String value)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用RedisTemplate，在存取值之前，设置序列化方式。</span></span><br><span class=\"line\">    <span class=\"comment\">//设置key使用String的序列化</span></span><br><span class=\"line\">    redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">    <span class=\"comment\">//设置value的序列化</span></span><br><span class=\"line\">    redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    redisTemplate.opsForValue().set(key,value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;定义RedisTemplate对象key、value的序列化&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第七章-SpringBoot集成Dubbo\"><a href=\"#第七章-SpringBoot集成Dubbo\" class=\"headerlink\" title=\"第七章 SpringBoot集成Dubbo\"></a>第七章 SpringBoot集成Dubbo</h1><h2 id=\"SpringBoot集成Dubbo的文档\"><a href=\"#SpringBoot集成Dubbo的文档\" class=\"headerlink\" title=\"SpringBoot集成Dubbo的文档\"></a>SpringBoot集成Dubbo的文档</h2><p><a class=\"link\"   href=\"https://github.com/apache/dubbo-spring-boot-project/blob/master/README.md\" >文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"公共项目\"><a href=\"#公共项目\" class=\"headerlink\" title=\"公共项目\"></a>公共项目</h2><p>独立的maven项目：定义了接口和数据类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">3941539077791951521L</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">StudentService</span>&#123;</span><br><span class=\"line\">    Student <span class=\"title function_\">queryStudent</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建服务提供者模块，实现接口模块</li>\n</ol>\n<p>dubbo依赖 和 zookeeper依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--dubbo依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--zookeeper依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--排除log4h依赖，因为重复--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：在pom文件中使用 <exclusions> 标签排除包含的依赖，已解决重复引入依赖的问题</p>\n<p>实现接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">使用dubbo中的注解暴露服务</span></span><br><span class=\"line\"><span class=\"comment\">@Component可以不加</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DubboService(interfaceClass = StudentService.class,version = &quot;1.0&quot;,timeout = 5000)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StudentServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">StudentService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Student <span class=\"title function_\">queryStudent</span><span class=\"params\">(Integer id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> studentDao.selectById(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> student;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>外部化配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#配置服务名称 dubbo:application name=&quot;名称&quot;</span></span><br><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">studentService-provider</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置扫描的包，扫描的@DubboService</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.scan.base-packages</span>=<span class=\"string\">com.example.service</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#配置dubbo协议</span></span><br><span class=\"line\"><span class=\"comment\">#dubbo.protocol.name=dubbo</span></span><br><span class=\"line\"><span class=\"comment\">#dubbo.protocol.port=20881</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#注册中心</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.registry.address</span>=<span class=\"string\">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>在类上使用 @DubboService 注解来暴露服务</p>\n<p><strong>在主类之上使用 @EnableDubbo 注解启用Dubbo</strong><br>包含了 @EnableDubboConfig 和 @DubboComponentScan</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDubbo</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootDemo001Application</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootDemo001Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>创建消费者模块</li>\n</ol>\n<p>添加依赖，与服务提供者相同。</p>\n<p>创建Controller或者Service调用远程服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestContrloller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DubboController</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            引用远程服务，把创建好的代理对象，注入给studentService</span></span><br><span class=\"line\"><span class=\"comment\">            @DubboReference(interfaceClass = StudentService.class,version = &quot;1.0&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">            没有使用interfaceClass，默认是 引用数据类型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@DubboReference(version = &quot;1.0&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> StudentService studentService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/query&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryStudent</span><span class=\"params\">(Integer id)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> studentService.queryStudent(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;调用远程接口获取的对象：&quot;</span>+student;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置文件application.properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#指定服务名称</span></span><br><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">consumer-application</span></span><br><span class=\"line\"><span class=\"comment\">#指定注册中心</span></span><br><span class=\"line\"><span class=\"attr\">dubbo.registry.address</span>=<span class=\"string\">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第八章-SpringBoot打包\"><a href=\"#第八章-SpringBoot打包\" class=\"headerlink\" title=\"第八章 SpringBoot打包\"></a>第八章 SpringBoot打包</h1><p>主类继承SpringBootServletInitializer才能使用外部的tomcat<br>SpringBootServletInitializer相当于原有web.xml的替代<br>使用嵌入式的tomcat，默认不支持jsp。  </p>\n<h2 id=\"打包成war\"><a href=\"#打包成war\" class=\"headerlink\" title=\"打包成war\"></a>打包成war</h2><ol>\n<li>指定打包后的名称<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--打包后的文件名称--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>bootDemo<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>指定jsp编译的目录<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/webapp<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>META-INF/resources<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>执行打包是war<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--打包类型--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>主启动类继承SpringBootServletInitializer<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootDemo001Application</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SpringBootServletInitializer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootDemo001Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>部署war<br>将war文件放到tomcat等服务器的发布目录中。</li>\n</ol>\n<h2 id=\"打包成jar\"><a href=\"#打包成jar\" class=\"headerlink\" title=\"打包成jar\"></a>打包成jar</h2><ol>\n<li>指定打包后的名称<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--打包后的文件名称--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>bootDemo<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>指定springboot-maven-plugin版本<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--打包jar，有jsp文件时，必须指定maven-plugin插件版本是1.4.2.RELEASE--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4.2.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>执行maven clean package<br> 在target目录中，生成jar文件 bootDemo.jar<br> 执行独立的springboot项目，即 java -jar bootDemo.jar</li>\n</ol>\n<h1 id=\"第九章-Thymeleaf-模板\"><a href=\"#第九章-Thymeleaf-模板\" class=\"headerlink\" title=\"第九章 Thymeleaf 模板\"></a>第九章 Thymeleaf 模板</h1><h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Thymeleaf是模板引擎，使用Java开发，在服务器端运行。将处理好的请求发送给浏览器。<br>Java生态下的模板还有Freemaker、Velocity、Beetl(国产)等。<br>非web环境下，Thymeleaf能直接显示模板上的静态数据；web环境下，能像jsp一样从后台接收数据并替换到模板上。<br>它是基于HTML的，以HTML标签为载体。<br>SpringBoot集成了Thymeleaf模板技术，官方也推荐使用它来代替jsp进行前端页面的数据展示。因为jsp需要编译运行，效率比较低。</p>\n<p><a class=\"link\"   href=\"https://www.thymeleaf.org/\" >Thymeleaf官网<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html\" >Thymeleaf官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--模板引擎起步依赖--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一些配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在开发阶段，关闭模板缓存，让修改立刻生效</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.cache</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"comment\">#编码格式</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.encoding</span>=<span class=\"string\">UTF-8</span></span><br><span class=\"line\"><span class=\"comment\">#模板的类型（默认是HTML，模板是html文件）</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.mode</span>=<span class=\"string\">HTML</span></span><br><span class=\"line\"><span class=\"comment\">#模板的前缀： 类路径的 classpath:/templates</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.prefix</span>=<span class=\"string\">classpath:/templates/</span></span><br><span class=\"line\"><span class=\"comment\">#后缀</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.suffix</span>=<span class=\"string\">.html</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><ol>\n<li>标准变量表达式<br> 语法：${key}<br> 作用：获取key对应的文本数据，key是request作用域中的key。使用request.setAttribute(),model.addAttribute()<br> 在页面中html标签中使用 th:text=”${key}”<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>获取student对象属性值<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;student.id&#125;&quot;</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;student.name&#125;&quot;</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;student.age&#125;&quot;</span>&gt;</span>age<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>选择变量表达式（星号变量表达式）<br> 语法：*{key}<br> 作用：获取这个key对应的数据，*{key}需要与th:object一起使用<br> 目的是简单获取对象的属性值<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用 *&#123;&#125; 获取student对象属性值<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">&quot;$&#123;student&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;id&#125;&quot;</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;name&#125;&quot;</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;age&#125;&quot;</span>&gt;</span>age<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--直接使用也可以--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;*&#123;student.id&#125;&quot;</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>链接表达式<br> 语法：@{url}<br> 作用：表示链接</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>链接绝对路径<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;https://baidu.com&#125;&quot;</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>链接相对路径<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/queryStudent&#125;&quot;</span>&gt;</span>相对地址，没有参数<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>链接相对路径，使用字符串链接传递参数<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;&#x27;/queryStudent?id=&#x27; + $&#123;student.id&#125; &#125;&quot;</span>&gt;</span>相对地址，有参数。获取model中的数据<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>传递多个参数<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/queryStudent(name=&#x27;zhangsan&#x27;,id=20)&#125;&quot;</span>&gt;</span>传多个参数<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Thymeleaf属性\"><a href=\"#Thymeleaf属性\" class=\"headerlink\" title=\"Thymeleaf属性\"></a>Thymeleaf属性</h2><p>属性是放在html元素中的，就是html元素的属性，加入了th前缀。属性的作用不变。加上th。属性的值由模板引擎处理，在属性上可以使用变量表达式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/queryStudent&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;/queryStudent&quot;</span> <span class=\"attr\">th:method</span>=<span class=\"string\">&quot;$&#123;methodAttr&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span>g</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"each-循环\"><a href=\"#each-循环\" class=\"headerlink\" title=\"each 循环\"></a>each 循环</h3><p>each循环，可以循环List、Map、Array<br>语法：在html标签中使用 th:each</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;集合循环成员，循环状态变量：$&#123;key&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;集合循环成员&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>集合循环成员，循环状态变量：名称都是自定义的。<br><strong>”循环的状态变量“可以不定义，默认是”集合循环成员Stat“</strong><br>循环状态变量 iterStat 可以获取以下信息<br><strong>index：当前迭代对象的index</strong><br><strong>count：当前迭代对象个数（第几个）</strong><br>size：当前迭代对象大小（总数）<br>even/odd：布尔值，当前循环是否是偶数/奇数（从0开始计算）<br>first：布尔值，当前循环是否是第一个<br>last：布尔值，当前循环是否是最后一个</p>\n<h3 id=\"条件判断if\"><a href=\"#条件判断if\" class=\"headerlink\" title=\"条件判断if\"></a>条件判断if</h3><p>判断语句，条件为true，显示html标签内容，<strong>否则不显示</strong>。<strong>没有else语句</strong><br>语法：th:if=”条件语句”</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;id==1001&#125;&quot;</span>&gt;</span>id是1001<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--&quot;&quot;空字符是true--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;sex&#125;&quot;</span>&gt;</span>空字符<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--null是false--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;null&#125;&quot;</span>&gt;</span>null<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还有个与 th:unless 和 th:if 相反的行为</p>\n<h3 id=\"判断语句-switch-case\"><a href=\"#判断语句-switch-case\" class=\"headerlink\" title=\"判断语句 switch,case\"></a>判断语句 switch,case</h3><p>th:switch 和 java中的switch一样<br>语法：th:switch=”要比较的值”,th:case=”值”</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:switch</span>=<span class=\"string\">&quot;要比较的值&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">&quot;值1&quot;</span>&gt;</span>结果1<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">&quot;值2&quot;</span>&gt;</span>结果2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:case</span>=<span class=\"string\">&quot;*&quot;</span>&gt;</span>默认结果(default)<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注：<strong>以上case只有一句执行</strong></p>\n<h3 id=\"内联-inline\"><a href=\"#内联-inline\" class=\"headerlink\" title=\"内联 inline\"></a>内联 inline</h3><ol>\n<li><p>内联test：在html标签外，获取表达式的值<br> 语法：[[${key}]]</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是[[$&#123;name&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>内联JavaScript</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">th:inline</span>=<span class=\"string\">&quot;javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> name = [[$&#123;name&#125;]]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">alert</span>(name)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"字面量\"><a href=\"#字面量\" class=\"headerlink\" title=\"字面量\"></a>字面量</h2><ol>\n<li>文本字面量：使用单引号括起来的字符串<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;&#x27;我是&#x27;+$&#123;name&#125;&quot;</span>&gt;</span>数据显示<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>数字字面量<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;20&gt;5&#125;&quot;</span>&gt;</span>20&gt;5<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>boolean字面量<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;isLogin == true&quot;</span>&gt;</span>用户已登录<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>null字面量<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;student != null&quot;</span>&gt;</span>有student数据<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"字符串链接\"><a href=\"#字符串链接\" class=\"headerlink\" title=\"字符串链接\"></a>字符串链接</h2><ol>\n<li>使用单引号括起来的字符串，使用 + 连接其他字符串或表达式<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;&#x27;我是&#x27; + $&#123;name&#125;&quot;</span>&gt;</span>数据显示<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>使用双竖线，|字符串和表达式|<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;|我是$&#123;name&#125;|&quot;</span>&gt;</span>显示数据<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p>算数运算：+,-,*,/<br>关系比较：&gt;,&lt;,&gt;=,&lt;=(gt,lt,ge,le)<br>相等判断：==,!=(eq,ne)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;age &gt; 20&#125;&quot;</span>&gt;</span>年龄大于20<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;20 + 30&#125;&quot;</span>&gt;</span>显示运算结果<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;student == null&#125;&quot;</span>&gt;</span>student是null<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;student eq null&#125;&quot;</span>&gt;</span>student是null<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;student ne null&#125;&quot;</span>&gt;</span>student不是null<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:if</span>=<span class=\"string\">&quot;$&#123;isLogin == true ? true : false&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Thymeleaf基本对象\"><a href=\"#Thymeleaf基本对象\" class=\"headerlink\" title=\"Thymeleaf基本对象\"></a>Thymeleaf基本对象</h2><p>模板引擎提供了内置对象，可以使用#开始引用。<br><a class=\"link\"   href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#appendix-a-expression-basic-objects\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ol>\n<li>#request 表示 HttpServletRequest</li>\n<li>#session 表示 HttpSession</li>\n<li>session 表示 Map对象，是#session的简单表达方式，用来获取session中指定key的值<br> #session.getAttribute(“loginname”)==session.loginname</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>内置对象#request,#session,session的使用<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>获取作用域中的信息<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#requset.getAttribute(&#x27;requestData&#x27;)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#session.getAttribute(&#x27;sessionData&#x27;)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;session.loginname&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>使用内置对象的方法<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getRequestURL()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getRequestURI()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getQueryString()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getContextPath()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getServerName()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#request.getServerPort()&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此外，还有很多工具类。提供string、date、集合的一些处理方法。此处不再列举，详细请查看官方文档。</p>\n<h2 id=\"自定义模板\"><a href=\"#自定义模板\" class=\"headerlink\" title=\"自定义模板\"></a>自定义模板</h2><p>模板是内容的复用，定义一次，在其他模板文件中多次使用。<br>模板的使用：<br>1.定义模板<br>2.使用模板</p>\n<p>模板定义语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;head&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>hello world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>引用模板的语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--插入模板insert--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;~&#123; templatename :: selector&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--templatename:文件名称--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--selector:自定义模板名称--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;templatename :: selector&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--templatename:文件名称--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--selector:自定义模板名称--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--包含模板insert--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;~&#123; templatename :: selector&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;templatename :: selector&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--对于使用模板：有包含模板（th:include），插入模板（th:insert）--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--包含是替换原来的标签，插入只是插入--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"第十章-总结\"><a href=\"#第十章-总结\" class=\"headerlink\" title=\"第十章 总结\"></a>第十章 总结</h1><h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p>spring+springMVC+SpringBoot</p>\n<p>创建对象：<br>@Controller：放在类上，创建控制器对象，注入到容器中。<br>@RestController：放在类上，创建控制器对象，注入到容器中。作用：复合了@Controller合@ResponseBodey，使用这个注解，控制器方法返回值都是数据，没有视图。<br>@Service：放在业务层实现类上，创建service对象，注入到容器。<br>@Repository：放在dao层实现类上，创建dao对象，注入到容器。没有使用是因为dao对象是MyBatis框架通过代理生成的，不需要使用。<br>@Component：放在类上，创建此类的对象，放入到容器中。</p>\n<p>赋值：<br>@Value：简单类型的赋值。还可以使用它获取配置文件中的数据。<br>@Autowired：引用类型赋值自动注入，支持byName，byType，默认是byType。放在属性或构造方法上，推荐放在构造方法上。<br>@Qualifer：给引用类型赋值，使用byName。<br><em>注：@Autowired，@Qualifer都是Spring框架提供的</em><br>@Resource：来自jdk中的定义，javax.annotation。实现引用类型的自动注入，支持byName，byType。默认是byName，如果失败，再使用byType注入。在属性上使用</p>\n<p>其他：<br>@Configuration：放在类上，表示这是个配置类，相当于xml配置文件。<br>@Bean：放在方法上，把方法返回值对象，注入到spring容器中。<br>@ImportResource：加载其他的xml配置文件，把文件中的对象注入到spring容器中。<br>@PropertySource：读取其他的properties属性配置文件。<br>@ComponentScan：扫描器，指定报名，扫描注解。<br>@ResponseBody：放在方法上，表示方法返回值是数据，不是试视图。<br>@RequestBody：把请求体中的方法读取出来，转为java对象使用。<br>@ControllerAdvice：控制器增强，放在类上，表示此类提供了方法，可以对controller增强功能。<br>@ExceptionHandler：处理异常，放在方法上。<br>@Transcational：处理事务，放在service实现类的public方法上，表示此方法有事务。</p>\n<p>SpringBoot中的注解：<br>@SpringBootApplication：放在启动类上，包含了@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan</p>\n<p>Mybatis相关注解：<br>@Mapper：放在类上，让MyBatis找到接口，创建代理对象<br>@MapperScan：放在主类上，指定扫描的包，将包中所有接口都创建代理对象。对象注入到容器中。<br>@Param：放在dao接口的方法形参前，作为命名参数使用。</p>\n<p>Dubbo注解：<br>@DubboService：在提供者端使用，暴露服务，放在接口实现类上。<br>@DubboReference：在消费者端使用，引用远程服务，放在属性上使用。<br>@EnableDubbo：放在主类上，表示启用Dubbo功能。</p>\n<h2 id=\"一些想法\"><a href=\"#一些想法\" class=\"headerlink\" title=\"一些想法\"></a>一些想法</h2><p>断断续续学了快一个月，springboot算是摆脱了众多的配置文件，对开发来说还是蛮友好的。<br>关于Thymeleaf模板引擎，我感觉和jsp有点像。但我没有学习过jsp，只是浅浅的用过。模板引擎应该算不上前后端分离，不过它是在html文件的标签上增加内容，实现动态的功能，算是伪分离吧。<del>前后端分离，人不分离。</del><br>现在linux使用地还不是很熟练，后面打算细细地学习下linux的使用，因为web应用是要部署到linux服务器的，所以学习linux是必要的。后面换电脑也打算使用linux作为主操作系统，大概会选择deepin系统吧。<br>目前要复习期末考试，考完后，会开始健康码网站的制作。<br>后面的学习计划，大概有Nginx，Docker之类的，然后继续深入对spring系列框架的理解合使用。<br>更远一些的，大概会去学一下vue，了解下前端，毕竟如果是一个人做网站的话，只有后端也是不太行的。<br>好耶！可以使用springboot，告别那么多配置文件了。</p>\n<blockquote>\n<p>2022.5.29</p>\n</blockquote>\n"},{"title":"SSM源码学习笔记（鸽）","date":"2022-09-11T07:32:39.000Z","_content":"\n## MyBatis源码\n\n### 解读类加载器\n\n类加载器（ClassLoader）作用是将class文件加载到jvm虚拟机中去，程序就可以正确运行了，但是jvm启动的时候，并不会一次性加载所有的class文件，而是根据需要动态加载，如果一次性加载那么多jar包那么多class,那内存消耗极大；\nJava自带三个类加载器：\n![类加载器](../images/SSM源码学习笔记/类加载器.png)\n\n1. Bootstrap ClassLoader 最顶层的加载类，主要加载核心类库，%JRE_HOME%\\lib下的rt.jar、resources.jar、charsets.jar和class等；\n**是c/c++实现的，本身为虚拟机的一部分，并不是一个Java类，所以无法在java中获取它的引用**\n2. Extention ClassLoader 扩展的类加载器，加载目录%JRE_HOME%lib\\ext目录下的jar包和class文件；\n3. App ClassLoader 也称为SystemAppClass加载当前应用的classpath下的所有类；\n\n自己写的类是由AppCLassLoader加载，jdk api提供的类由BootstrapClassLoader加载\n每个类加载器都有一个父加载器，通过 getParent()方法获取；\nExtClassLoader的父加载器是null，因为 Bootstrap ClassLoader 是c/c++实现，无法获取引用；\n\n测试代码：\n~~~java\npackage org.example;\n\npublic class test {\n    public static void main(String[] args) {\n        //classpath\n        System.out.println(test.class.getClassLoader());\n\n        System.out.println(test.class.getClassLoader().getParent());\n        System.out.println(test.class.getClassLoader().getParent().getParent());\n        //rt.jar\n        System.out.println(String.class.getClassLoader());\n    }\n}\n~~~\n\n输出：\n~~~text\njdk.internal.loader.ClassLoaders$AppClassLoader@66d3c617\njdk.internal.loader.ClassLoaders$PlatformClassLoader@10f87f48\nnull\nnull\n~~~\n\n### 通过类加载器读取配置文件\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/SSM源码学习笔记.md","raw":"---\ntitle: SSM源码学习笔记（鸽）\ndate: 2022-09-11 15:32:39\ntags:\n- spring\n- mybatis\n- springMVC\ncategories:\n- 学习笔记\n---\n\n## MyBatis源码\n\n### 解读类加载器\n\n类加载器（ClassLoader）作用是将class文件加载到jvm虚拟机中去，程序就可以正确运行了，但是jvm启动的时候，并不会一次性加载所有的class文件，而是根据需要动态加载，如果一次性加载那么多jar包那么多class,那内存消耗极大；\nJava自带三个类加载器：\n![类加载器](../images/SSM源码学习笔记/类加载器.png)\n\n1. Bootstrap ClassLoader 最顶层的加载类，主要加载核心类库，%JRE_HOME%\\lib下的rt.jar、resources.jar、charsets.jar和class等；\n**是c/c++实现的，本身为虚拟机的一部分，并不是一个Java类，所以无法在java中获取它的引用**\n2. Extention ClassLoader 扩展的类加载器，加载目录%JRE_HOME%lib\\ext目录下的jar包和class文件；\n3. App ClassLoader 也称为SystemAppClass加载当前应用的classpath下的所有类；\n\n自己写的类是由AppCLassLoader加载，jdk api提供的类由BootstrapClassLoader加载\n每个类加载器都有一个父加载器，通过 getParent()方法获取；\nExtClassLoader的父加载器是null，因为 Bootstrap ClassLoader 是c/c++实现，无法获取引用；\n\n测试代码：\n~~~java\npackage org.example;\n\npublic class test {\n    public static void main(String[] args) {\n        //classpath\n        System.out.println(test.class.getClassLoader());\n\n        System.out.println(test.class.getClassLoader().getParent());\n        System.out.println(test.class.getClassLoader().getParent().getParent());\n        //rt.jar\n        System.out.println(String.class.getClassLoader());\n    }\n}\n~~~\n\n输出：\n~~~text\njdk.internal.loader.ClassLoaders$AppClassLoader@66d3c617\njdk.internal.loader.ClassLoaders$PlatformClassLoader@10f87f48\nnull\nnull\n~~~\n\n### 通过类加载器读取配置文件\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"SSM源码学习笔记","published":1,"updated":"2022-09-11T09:07:57.582Z","_id":"cl7x0xnhb00005ktt6nhlg1o8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"MyBatis源码\"><a href=\"#MyBatis源码\" class=\"headerlink\" title=\"MyBatis源码\"></a>MyBatis源码</h2><h3 id=\"解读类加载器\"><a href=\"#解读类加载器\" class=\"headerlink\" title=\"解读类加载器\"></a>解读类加载器</h3><p>类加载器（ClassLoader）作用是将class文件加载到jvm虚拟机中去，程序就可以正确运行了，但是jvm启动的时候，并不会一次性加载所有的class文件，而是根据需要动态加载，如果一次性加载那么多jar包那么多class,那内存消耗极大；<br>Java自带三个类加载器：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/SSM%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png\"\n                      alt=\"类加载器\"\n                ></p>\n<ol>\n<li>Bootstrap ClassLoader 最顶层的加载类，主要加载核心类库，%JRE_HOME%\\lib下的rt.jar、resources.jar、charsets.jar和class等；</li>\n</ol>\n<p><strong>是c/c++实现的，本身为虚拟机的一部分，并不是一个Java类，所以无法在java中获取它的引用</strong><br>2. Extention ClassLoader 扩展的类加载器，加载目录%JRE_HOME%lib\\ext目录下的jar包和class文件；<br>3. App ClassLoader 也称为SystemAppClass加载当前应用的classpath下的所有类；</p>\n<p>自己写的类是由AppCLassLoader加载，jdk api提供的类由BootstrapClassLoader加载<br>每个类加载器都有一个父加载器，通过 getParent()方法获取；<br>ExtClassLoader的父加载器是null，因为 Bootstrap ClassLoader 是c/c++实现，无法获取引用；</p>\n<p>测试代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//classpath</span></span><br><span class=\"line\">        System.out.println(test.class.getClassLoader());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(test.class.getClassLoader().getParent());</span><br><span class=\"line\">        System.out.println(test.class.getClassLoader().getParent().getParent());</span><br><span class=\"line\">        <span class=\"comment\">//rt.jar</span></span><br><span class=\"line\">        System.out.println(String.class.getClassLoader());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdk.internal.loader.ClassLoaders$AppClassLoader@66d3c617</span><br><span class=\"line\">jdk.internal.loader.ClassLoaders$PlatformClassLoader@10f87f48</span><br><span class=\"line\">null</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过类加载器读取配置文件\"><a href=\"#通过类加载器读取配置文件\" class=\"headerlink\" title=\"通过类加载器读取配置文件\"></a>通过类加载器读取配置文件</h3>","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"MyBatis源码\"><a href=\"#MyBatis源码\" class=\"headerlink\" title=\"MyBatis源码\"></a>MyBatis源码</h2><h3 id=\"解读类加载器\"><a href=\"#解读类加载器\" class=\"headerlink\" title=\"解读类加载器\"></a>解读类加载器</h3><p>类加载器（ClassLoader）作用是将class文件加载到jvm虚拟机中去，程序就可以正确运行了，但是jvm启动的时候，并不会一次性加载所有的class文件，而是根据需要动态加载，如果一次性加载那么多jar包那么多class,那内存消耗极大；<br>Java自带三个类加载器：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/SSM%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png\"\n                      alt=\"类加载器\"\n                ></p>\n<ol>\n<li>Bootstrap ClassLoader 最顶层的加载类，主要加载核心类库，%JRE_HOME%\\lib下的rt.jar、resources.jar、charsets.jar和class等；</li>\n</ol>\n<p><strong>是c/c++实现的，本身为虚拟机的一部分，并不是一个Java类，所以无法在java中获取它的引用</strong><br>2. Extention ClassLoader 扩展的类加载器，加载目录%JRE_HOME%lib\\ext目录下的jar包和class文件；<br>3. App ClassLoader 也称为SystemAppClass加载当前应用的classpath下的所有类；</p>\n<p>自己写的类是由AppCLassLoader加载，jdk api提供的类由BootstrapClassLoader加载<br>每个类加载器都有一个父加载器，通过 getParent()方法获取；<br>ExtClassLoader的父加载器是null，因为 Bootstrap ClassLoader 是c/c++实现，无法获取引用；</p>\n<p>测试代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//classpath</span></span><br><span class=\"line\">        System.out.println(test.class.getClassLoader());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(test.class.getClassLoader().getParent());</span><br><span class=\"line\">        System.out.println(test.class.getClassLoader().getParent().getParent());</span><br><span class=\"line\">        <span class=\"comment\">//rt.jar</span></span><br><span class=\"line\">        System.out.println(String.class.getClassLoader());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdk.internal.loader.ClassLoaders$AppClassLoader@66d3c617</span><br><span class=\"line\">jdk.internal.loader.ClassLoaders$PlatformClassLoader@10f87f48</span><br><span class=\"line\">null</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过类加载器读取配置文件\"><a href=\"#通过类加载器读取配置文件\" class=\"headerlink\" title=\"通过类加载器读取配置文件\"></a>通过类加载器读取配置文件</h3>"},{"title":"经典排序算法","date":"2022-09-16T00:21:14.000Z","_content":"\n## 前言\n\n重新开始学算法，虽然已经上过 数据结构与算法 和 算法分析设计 的课程。\n以后关于算法的代码都会放在[算法代码仓库](https://github.com/Cooooing/algorithms)\n\n## 交换两变量的值\n\n第一种方法也是最常用的，没什么限制。借助一个辅助变量\n~~~java\n    private static void swap(int[] array, int i, int j) {\n        int temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n~~~\n\n第二种方法，利用异或运算实现。不借助额外空间\n~~~java\n    private static void swap_1(int[] array, int i, int j) {\n        array[i] = array[i] ^ array[j];\n        array[j] = array[i] ^ array[j];\n        array[i] = array[i] ^ array[j];\n    }\n~~~\n\n异或运算 也可以叫做无进位相加（同为0，不同为1）\n满足交换律和结合律\n\n> 必须保证交换的变量内存地址不一致，否则两变量都会变为0。\n\n交换的原理：\n~~~text\na=甲^乙               b=乙\na=甲^乙               b=甲^乙^乙=甲^0=甲\na=甲^乙^甲=乙^0=乙     b=甲\n~~~\n\n异或运算还可以用来消除出现偶数次的值\n\n## 选择排序\n\n1. 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n3. 重复第二步，直到所有元素均排序完毕。\n\n时间复杂度 O(n^2)\n\n~~~java\n    public static int[] selectionSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 总共经过n-1次比较\n        for (int i = 0; i < arr.length - 1; i++) {\n            // 选定i下标的值作为比较的基准\n            int temp = i;\n            // 在i~n-1上找最小值的下标\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[j] < arr[temp]) {\n                    temp = j;\n                }\n            }\n            // 将最小值与i上元素交换\n            if (i != temp) {\n                swap(arr, i, temp);\n            }\n        }\n        return arr;\n    }\n~~~\n\n## 冒泡排序\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n时间复杂度 O(n^2)\n\n~~~java\n    public static int[] bubbleSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        for (int i = 0; i < array.length - 1; i++) {\n            // （优化）设定一个标记，为true表示此次循环没有交换，即已排序完成\n            boolean flag = true;\n            for (int j = 0; j < array.length - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    swap(arr, j, j + 1);\n                    flag = false;\n                }\n            }\n            if (flag) {\n                break;\n            }\n        }\n        return arr;\n    }\n~~~\n\n## 插入排序\n\n1. 将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。\n2. 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。\n\n时间复杂度 O(n^2)\n\n~~~java\n    public static int[] insertionSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 从下标为1的元素开始选择插入位置，下标为0只有一个元素，默认是有序的\n        for (int i = 1; i < arr.length; i++) {\n            // 从右往左比较，左边的元素比右边大时，交换\n            for (int j = i - 1; j >= 0 && arr[j] > arr[j + 1]; j--) {\n                swap(arr, j, j + 1);\n            }\n        }\n        return arr;\n    }\n~~~\n\n## 希尔排序（插入排序的改进）\n\n希尔排序是基于插入排序的以下两点性质而提出改进方法的：\n插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；\n但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；\n希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录\"基本有序\"时，再对全体记录进行依次直接插入排序。\n时间复杂度 O(nlog2n)\n\n~~~java\n    public static int[] shellSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        int temp;\n        // 每次增量为数组长度的一半，以后每次减半\n        for (int step = arr.length / 2; step >= 1; step /= 2) {\n            for (int i = step; i < arr.length; i++) {\n                temp = arr[i];\n                int j = i - step;\n                while (j >= 0 && arr[j] > temp) {\n                    arr[j + step] = arr[j];\n                    j -= step;\n                }\n                arr[j + step] = temp;\n            }\n        }\n        return arr;\n    }\n~~~\n\n\n## 归并排序\n\n### 归并排序\n\n1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；\n2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置；\n3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；\n4. 重复步骤 3 直到某一指针达到序列尾；\n5. 将另一序列剩下的所有元素直接复制到合并序列尾。\n\n时间复杂度 O(nlogn)\n空间复杂度 O(n)\n\n~~~java\n    public static int[] mergeSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 临时数组，用于存放排序后的数组\n        int[] tempArray = new int[array.length];\n        merge(arr, tempArray, 0, array.length - 1);\n        return arr;\n    }\n\n    private static void merge(int[] array, int[] tempArray, int start, int end) {\n        if (start >= end) {\n            return;\n        }\n        int mid = start + ((end - start) >> 2);\n        int start1 = start;\n        int end1 = mid;\n        int start2 = mid + 1;\n        int end2 = end;\n        merge(array, tempArray, start1, end1);\n        merge(array, tempArray, start2, end2);\n        int temp = start;\n        // 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束\n        while (start1 <= end1 && start2 <= end2) {\n            tempArray[temp++] = array[start1] < array[start2] ? array[start1++] : array[start2++];\n        }\n        // 将剩余元素添加至合并空间末尾\n        while (start1 <= end1) {\n            tempArray[temp++] = array[start1++];\n        }\n        while (start2 <= end2) {\n            tempArray[temp++] = array[start2++];\n        }\n        // 拷贝合并空间内排序结束的数组至原数组\n        for (temp = start; temp <= end; temp++) {\n            array[temp] = tempArray[temp];\n        }\n    }\n~~~\n\n### 归并排序拓展\n\n#### 逆序对问题\n\n在一个数组中，每一个数右边比当前数小的数，与这个数组成一个逆序对。\n如数组 1，3，4，2，5\n逆序对为 3,2 4,2\n即求 右边有多少个数比当前数小\n\n~~~java\n    public static int reverse(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        int[] tempArray = new int[arr.length];\n        return mergeReverse(arr, tempArray, 0, arr.length - 1);\n    }\n\n    private static int mergeReverse(int[] array, int[] tempArray, int start, int end) {\n        if (start >= end) {\n            return 0;\n        }\n        int mid = start + ((end - start) >> 2);\n        int start1 = start;\n        int end1 = mid;\n        int start2 = mid + 1;\n        int end2 = end;\n        int result = 0;\n        int temp = start;\n        result += mergeReverse(array, tempArray, start1, end1);\n        result += mergeReverse(array, tempArray, start2, end2);\n        // 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束\n        while (start1 <= end1 && start2 <= end2) {\n            result += array[start1] <= array[start2] ? 0 : (end2 - start2 + 1);\n            tempArray[temp++] = array[start1] > array[start2] ? array[start1++] : array[start2++];\n        }\n        // 将剩余元素添加至合并空间末尾\n        while (start1 <= end1) {\n            tempArray[temp++] = array[start1++];\n        }\n        while (start2 <= end2) {\n            tempArray[temp++] = array[start2++];\n        }\n        // 拷贝合并空间内排序结束的数组至原数组\n        for (temp = start; temp <= end; temp++) {\n            array[temp] = tempArray[temp];\n        }\n        System.out.println(Arrays.toString(tempArray));\n        return result;\n    }\n~~~\n\n#### 小和问题\n\n在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组的小和。\n如数组 1，3，4，2，5\n小和为 1 + 1+3 + 1 + 1+3+4+2 = 16\n即求 右边有多少个数比当前数大\n\n~~~java\n    public static int smallSum(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        int[] tempArray = new int[arr.length];\n        return mergeSmallSum(arr, tempArray, 0, arr.length - 1);\n    }\n\n    private static int mergeSmallSum(int[] array, int[] tempArray, int start, int end) {\n        if (start >= end) {\n            return 0;\n        }\n        int mid = start + ((end - start) >> 2);\n        int start1 = start;\n        int end1 = mid;\n        int start2 = mid + 1;\n        int end2 = end;\n        int result = 0;\n        int temp = start;\n        result += mergeSmallSum(array, tempArray, start1, end1);\n        result += mergeSmallSum(array, tempArray, start2, end2);\n        // 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束\n        while (start1 <= end1 && start2 <= end2) {\n            result += array[start1] < array[start2] ? (end2 - start2 + 1) * array[start1] : 0;\n            tempArray[temp++] = array[start1] < array[start2] ? array[start1++] : array[start2++];\n        }\n        // 将剩余元素添加至合并空间末尾\n        while (start1 <= end1) {\n            tempArray[temp++] = array[start1++];\n        }\n        while (start2 <= end2) {\n            tempArray[temp++] = array[start2++];\n        }\n        // 拷贝合并空间内排序结束的数组至原数组\n        for (temp = start; temp <= end; temp++) {\n            array[temp] = tempArray[temp];\n        }\n        return result;\n    }\n~~~\n\n## 快速排序\n\n### 荷兰国旗问题（前置）\n\n给定一个整数数组，给定一个值K，这个值在原数组中一定存在\n要求把数组中小于K的元素放到数组的左边，大于K的元素放到数组的右边，等于K的元素放到数组的中间\n\n做法是用两个数组下标作为边界，将数组分成三个区域，左边是小于k的元素，中间是等于k的元素，右边是大于k的元素\n不断将元素与边界交换，实现划分\n\n~~~java\n    public static int[] partition(int[] array, int key) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        int l = -1, r = arr.length, i = 0;\n        while (i < r) {\n            if (arr[i] < key) {\n                // 小于时，交换左边界+1的元素，左边界l+1，判断下一个元素（交换过来元素都已经过判断）\n                swap(arr, ++l, i++);\n            } else if (arr[i] > key) {\n                // 大于时，交换有边界-1的元素，右边界r-1，判断原位置，因为交换后的元素未经过判断\n                swap(arr, --r, i);\n            } else {\n                // 相等时，什么都不做，判断下一个元素\n                i++;\n            }\n        }\n        return arr;\n    }\n~~~\n\n### 快速排序\n\n1. 从数列中挑出一个元素，称为 \"基准\"（pivot）;\n2. 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n3. 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；\n\n类似荷兰国旗问题\n时间复杂度 O(n^2)\n空间复杂度 O(logn)\n但它的平摊期望时间是O(nlongn)，而且隐含的常数因子很小，比归并小很多。所以对绝大多数顺序性较弱的随机数列来说，快排优于归并\n\n~~~java\n    public static int[] quickSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        return quickSortProcess(arr, 0, arr.length - 1);\n    }\n\n    /**\n     * 递归调用划分函数进行排序\n     */\n    private static int[] quickSortProcess(int[] arr, int l, int r) {\n        if (l < r) {\n            int partitionIndex = partition(arr, l, r);\n            quickSortProcess(arr, l, partitionIndex - 1);\n            quickSortProcess(arr, partitionIndex + 1, r);\n        }\n        return arr;\n    }\n\n    /**\n     * 选取基准值，进行划分\n     */\n    private static int partition(int[] arr, int l, int r) {\n        // 选取基准值\n        int pivot = l;\n        int index = pivot + 1;\n        for (int i = index; i <= r; i++) {\n            if (arr[i] < arr[pivot]) {\n                swap(arr, i, index);\n                index++;\n            }\n        }\n        swap(arr, pivot, index - 1);\n        return index - 1;\n    }\n\n    /**\n     * 递归调用划分函数进行排序（优化）\n     * 优化了等于基准的部分，使得每次排序时，一次可以排所有等于基准的元素。比之前每次只排基准好一些。\n     * 但也只是针对有重复元素的排序\n     */\n    private static int[] quickSortProcessOptimization(int[] arr, int l, int r) {\n        if (l < r) {\n            int[] partitionIndex = partitionOptimization(arr, l, r);\n            partitionOptimization(arr, l, partitionIndex[0]);\n            partitionOptimization(arr, partitionIndex[1], r);\n        }\n        return arr;\n    }\n\n    /**\n     * 选取基准值，进行划分（优化）\n     */\n    private static int[] partitionOptimization(int[] arr, int l, int r) {\n        // 选取基准值\n        int pivot = l;\n        r++;\n        int i = l + 1;\n        while (i < r) {\n            if (arr[i] < arr[pivot]) {\n                // 小于时，交换左边界+1的元素，左边界l+1，判断下一个元素（交换过来元素都已经过判断）\n                swap(arr, ++l, i++);\n            } else if (arr[i] > arr[pivot]) {\n                // 大于时，交换有边界-1的元素，右边界r-1，判断原位置，因为交换后的元素未经过判断\n                swap(arr, --r, i);\n            } else {\n                // 相等时，什么都不做，判断下一个元素\n                i++;\n            }\n        }\n        swap(arr, pivot, l--);\n        return new int[]{l, r};\n    }\n~~~\n\n## 堆排序\n\n1. 创建一个堆 H[0……n-1]；\n2. 把堆首（最大值）和堆尾互换；\n3. 把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；\n4. 重复步骤 2，直到堆的尺寸为 1。\n\n时间复杂度 O(nlogn)\n\n~~~java\n    public static int[] heapSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        int len = arr.length;\n        /* 创建大根堆\n        从最后一个父节点（即len/2的位置）开始进行 heapify 过程\n         */\n        for (int i = len / 2; i >= 0; i--) {\n            heapify(arr, i, len);\n        }\n        /* 排序\n        将最大的根与堆尾交换，同时堆尺寸减一，即排好最大的\n        然后再重新与子节点比较，将大的值换到根\n         */\n        for (int i = len - 1; i > 0; i--) {\n            swap(arr, 0, i);\n            len--;\n            heapify(arr, 0, len);\n        }\n        return arr;\n    }\n\n    /**\n     * 使得一个数组是堆有序的，即根节点的值大于（小于）左右子节点的值\n     */\n    private static void heapify(int[] arr, int i, int len) {\n        // 左节点\n        int left = 2 * i + 1;\n        // 右节点\n        int right = 2 * i + 2;\n        // 父节点\n        int largest = i;\n        if (left < len && arr[left] > arr[largest]) {\n            largest = left;\n        }\n        if (right < len && arr[right] > arr[largest]) {\n            largest = right;\n        }\n        if (largest != i) {\n            swap(arr, i, largest);\n            heapify(arr, largest, len);\n        }\n    }\n~~~\n\n## 基数排序\n\n一种非比较型整数排序算法\n其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。\n时间复杂度 O(k*n)\n空间复杂度 O(k+n)\n\n~~~java\n    public static int[] radixSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 获取最大值\n        int max = arr[0];\n        for (int j : arr) {\n            if (max < j) {\n                max = j;\n            }\n        }\n        // 获取最高位数\n        int maxDigit = 0;\n        if (max == 0) {\n            maxDigit = 1;\n        } else {\n            for (int i = max; i != 0; i /= 10) {\n                maxDigit++;\n            }\n        }\n        // 排序\n        int mod = 10;\n        int dev = 1;\n        for (int i = 0; i < maxDigit; i++, dev *= 10, mod *= 10) {\n            // 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)\n            int[][] counter = new int[mod * 2][0];\n            for (int k : arr) {\n                int bucket = ((k % mod) / dev) + mod;\n                counter[bucket] = arrayAppend(counter[bucket], k);\n            }\n            int pos = 0;\n            for (int[] bucket : counter) {\n                for (int value : bucket) {\n                    arr[pos++] = value;\n                }\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * 自动扩容，并保存数据\n     */\n    private static int[] arrayAppend(int[] arr, int value) {\n        arr = Arrays.copyOf(arr, arr.length + 1);\n        arr[arr.length - 1] = value;\n        return arr;\n    }\n~~~\n\n## 计数排序\n\n1. 找出待排序的数组中最大和最小的元素\n2. 统计数组中每个值为i的元素出现的次数，存入数组C的第i项\n3. 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）\n4. 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1\n\n时间复杂度 O(n+k)\n空间复杂度 O(k)\n空间换时间\n\n~~~java\n    public static int[] countingSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 获取最大、最小值\n        int min = arr[0];\n        int max = arr[0];\n        for (int value : arr) {\n            if (min > value) {\n                min = value;\n            }\n            if (max < value) {\n                max = value;\n            }\n        }\n        // 处理负数的情况\n        int difference = 0;\n        if (min < 0) {\n            difference = -min;\n        }\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] += difference;\n        }\n        // 排序\n        int[] bucket = new int[max + difference + 1];\n        for (int value : arr) {\n            bucket[value]++;\n        }\n        int socketIndex = 0;\n        for (int i = 0; i < bucket.length; i++) {\n            while (bucket[i] > 0) {\n                arr[socketIndex++] = i - difference;\n                bucket[i]--;\n            }\n        }\n        return arr;\n    }\n~~~\n\n## 桶排序（计数排序的升级）\n\n利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：\n在额外空间充足的情况下，尽量增大桶的数量\n使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中\n时间复杂度 O(n+k)\n空间复杂度 O(n*k)\n\n~~~java\n    public static int[] bucketSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 获取最大、最小值\n        int min = arr[0];\n        int max = arr[0];\n        for (int value : arr) {\n            if (min > value) {\n                min = value;\n            }\n            if (max < value) {\n                max = value;\n            }\n        }\n        // 桶的数量\n        int bucketSize = 5;\n        int bucketCount = (max - min) / bucketSize + 1;\n        int[][] buckets = new int[bucketCount][0];\n        // 利用函数映射关系将数据分配到各个桶中\n        for (int j : arr) {\n            int index = (j - min) / bucketSize;\n            buckets[index] = arrayAppend(buckets[index], j);\n        }\n        // 对每个桶进行排序\n        int arrIndex = 0;\n        for (int[] bucket : buckets) {\n            if (bucket.length <= 0) {\n                continue;\n            }\n            // 使用了冒泡排序\n            bucket = bubbleSort(bucket);\n            for (int value : bucket) {\n                arr[arrIndex++] = value;\n            }\n        }\n        return arr;\n    }\n~~~\n\n## 对数器\n\n对数器（通过用大量测试数据来验证算法是否正确的一种方式）：\n1.有一个你想要测的方法a；\n2.实现一个绝对正确但是复杂度不好的方法b；\n3.实现一个随机样本产生器；\n4.实现对比算法a和b的方法；\n5.把方法a和方法b比对多次来验证方法a是否正确；\n6.如果有一个样本使得比对出错，打印样本分析是哪个方法出错；\n7.当样本数量很多时比对测试依然正确，可以确定方法a已经正确。\n\n这里附上一个对数器\n以Java提供的数组排序作为参照，以检验算法的正确性。\n~~~java\n    public void sortTest() {\n        int[] a = new int[1000];\n\n        for (int i = 0; i < 1000; i++) {\n            a[i] = (int) (-1000 * Math.random() + 500);\n        }\n        System.out.println(Arrays.toString(Sort.insertionSort(a)));\n        System.out.println(Arrays.toString(Sort.bubbleSort(a)));\n        System.out.println(Arrays.toString(Sort.selectionSort(a)));\n        System.out.println(Arrays.toString(Sort.mergeSort(a)));\n        System.out.println(Arrays.toString(Sort.quickSort(a)));\n        System.out.println(Arrays.toString(Sort.heapSort(a)));\n        System.out.println(Arrays.toString(Sort.radixSort(a)));\n        System.out.println(Arrays.toString(Sort.countingSort(a)));\n        System.out.println(Arrays.toString(Sort.bucketSort(a)));\n        System.out.println(Arrays.toString(Sort.shellSort(a)));\n\n        Arrays.sort(a);\n        System.out.println(Arrays.toString(a));\n    }\n~~~\n\n## 总结\n\n参考：\n[菜鸟教程](https://www.runoob.com/w3cnote/ten-sorting-algorithm.html) ，有更详细的解释以及各种编程语言对各个算法的实现。\n\n### 关于桶排序\n\n基数排序与计数排序、桶排序这三种排序算法都利用了桶的概念，但对桶的使用方式不同\n基数排序：根据键值的每位数字来分配桶；\n计数排序：每个桶只存储单一键值；\n桶排序：每个桶存储一定范围的数值；\n\n### 关于算法稳定性\n\n排序算法的稳定性\n同样值的个体之间，如果不因为排序而改变相对次序，就是这个排序是有稳定性的；否则就没有。\n\n不具备稳定性的排序：\n选择排序、快速排序、堆排序、希尔排序\n\n具备稳定性的排序：\n冒泡排序、插入排序、归并排序、一切桶排序思想下的排序\n\n各个算法时间复杂度、空间复杂度和稳定性：\n\n| 排序算法 | 平均时间复杂度  | 辅助空间     | 稳定性 |\n|------|----------|----------|-----|\n| 选择排序 | O(n^2)   | O(1)     | 不稳定 |\n| 冒泡排序 | O(n^2)   | O(1)     | 稳定  |\n| 插入排序 | O(n^2)   | O(1)     | 稳定  |\n| 希尔排序 | O(nlogn) | O(nlogn) | 不稳定 |\n| 归并排序 | O(nlogn) | O(n)     | 稳定  |\n| 快速排序 | O(nlogn) | O(nlogn) | 不稳定 |\n| 堆排序  | O(nlogn) | O(1)     | 不稳定 |\n| 基数排序 | O(n*k)   | O(n+k)   | 稳定  |\n| 计数排序 | O(n+k)   | O(n+k)   | 稳定  |\n| 桶排序  | O(n+k)   | O(n+k)   | 稳定  |\n\n> 目前没有找到时间复杂度 0(n1ogn) ，额外空间复杂度0(1)，又稳定的排序。（鱼和熊掌不可兼得）\n> 基于比较的排序，时间复杂度至少 O(nlogn)\n> 稳定的排序，空间复杂度至少 O(n)\n\n### 综合排序\n\n综合排序即将不同排序的优势结合在一起，以实现不同情况下更加高效的排序。","source":"_posts/经典排序算法.md","raw":"---\ntitle: 经典排序算法\ndate: 2022-09-16 08:21:14\ntags:\n- java\n- 算法\n- 排序\ncategories:\n- 算法练习\n---\n\n## 前言\n\n重新开始学算法，虽然已经上过 数据结构与算法 和 算法分析设计 的课程。\n以后关于算法的代码都会放在[算法代码仓库](https://github.com/Cooooing/algorithms)\n\n## 交换两变量的值\n\n第一种方法也是最常用的，没什么限制。借助一个辅助变量\n~~~java\n    private static void swap(int[] array, int i, int j) {\n        int temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n~~~\n\n第二种方法，利用异或运算实现。不借助额外空间\n~~~java\n    private static void swap_1(int[] array, int i, int j) {\n        array[i] = array[i] ^ array[j];\n        array[j] = array[i] ^ array[j];\n        array[i] = array[i] ^ array[j];\n    }\n~~~\n\n异或运算 也可以叫做无进位相加（同为0，不同为1）\n满足交换律和结合律\n\n> 必须保证交换的变量内存地址不一致，否则两变量都会变为0。\n\n交换的原理：\n~~~text\na=甲^乙               b=乙\na=甲^乙               b=甲^乙^乙=甲^0=甲\na=甲^乙^甲=乙^0=乙     b=甲\n~~~\n\n异或运算还可以用来消除出现偶数次的值\n\n## 选择排序\n\n1. 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n3. 重复第二步，直到所有元素均排序完毕。\n\n时间复杂度 O(n^2)\n\n~~~java\n    public static int[] selectionSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 总共经过n-1次比较\n        for (int i = 0; i < arr.length - 1; i++) {\n            // 选定i下标的值作为比较的基准\n            int temp = i;\n            // 在i~n-1上找最小值的下标\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[j] < arr[temp]) {\n                    temp = j;\n                }\n            }\n            // 将最小值与i上元素交换\n            if (i != temp) {\n                swap(arr, i, temp);\n            }\n        }\n        return arr;\n    }\n~~~\n\n## 冒泡排序\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n时间复杂度 O(n^2)\n\n~~~java\n    public static int[] bubbleSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        for (int i = 0; i < array.length - 1; i++) {\n            // （优化）设定一个标记，为true表示此次循环没有交换，即已排序完成\n            boolean flag = true;\n            for (int j = 0; j < array.length - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    swap(arr, j, j + 1);\n                    flag = false;\n                }\n            }\n            if (flag) {\n                break;\n            }\n        }\n        return arr;\n    }\n~~~\n\n## 插入排序\n\n1. 将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。\n2. 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。\n\n时间复杂度 O(n^2)\n\n~~~java\n    public static int[] insertionSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 从下标为1的元素开始选择插入位置，下标为0只有一个元素，默认是有序的\n        for (int i = 1; i < arr.length; i++) {\n            // 从右往左比较，左边的元素比右边大时，交换\n            for (int j = i - 1; j >= 0 && arr[j] > arr[j + 1]; j--) {\n                swap(arr, j, j + 1);\n            }\n        }\n        return arr;\n    }\n~~~\n\n## 希尔排序（插入排序的改进）\n\n希尔排序是基于插入排序的以下两点性质而提出改进方法的：\n插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；\n但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；\n希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录\"基本有序\"时，再对全体记录进行依次直接插入排序。\n时间复杂度 O(nlog2n)\n\n~~~java\n    public static int[] shellSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        int temp;\n        // 每次增量为数组长度的一半，以后每次减半\n        for (int step = arr.length / 2; step >= 1; step /= 2) {\n            for (int i = step; i < arr.length; i++) {\n                temp = arr[i];\n                int j = i - step;\n                while (j >= 0 && arr[j] > temp) {\n                    arr[j + step] = arr[j];\n                    j -= step;\n                }\n                arr[j + step] = temp;\n            }\n        }\n        return arr;\n    }\n~~~\n\n\n## 归并排序\n\n### 归并排序\n\n1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；\n2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置；\n3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；\n4. 重复步骤 3 直到某一指针达到序列尾；\n5. 将另一序列剩下的所有元素直接复制到合并序列尾。\n\n时间复杂度 O(nlogn)\n空间复杂度 O(n)\n\n~~~java\n    public static int[] mergeSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 临时数组，用于存放排序后的数组\n        int[] tempArray = new int[array.length];\n        merge(arr, tempArray, 0, array.length - 1);\n        return arr;\n    }\n\n    private static void merge(int[] array, int[] tempArray, int start, int end) {\n        if (start >= end) {\n            return;\n        }\n        int mid = start + ((end - start) >> 2);\n        int start1 = start;\n        int end1 = mid;\n        int start2 = mid + 1;\n        int end2 = end;\n        merge(array, tempArray, start1, end1);\n        merge(array, tempArray, start2, end2);\n        int temp = start;\n        // 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束\n        while (start1 <= end1 && start2 <= end2) {\n            tempArray[temp++] = array[start1] < array[start2] ? array[start1++] : array[start2++];\n        }\n        // 将剩余元素添加至合并空间末尾\n        while (start1 <= end1) {\n            tempArray[temp++] = array[start1++];\n        }\n        while (start2 <= end2) {\n            tempArray[temp++] = array[start2++];\n        }\n        // 拷贝合并空间内排序结束的数组至原数组\n        for (temp = start; temp <= end; temp++) {\n            array[temp] = tempArray[temp];\n        }\n    }\n~~~\n\n### 归并排序拓展\n\n#### 逆序对问题\n\n在一个数组中，每一个数右边比当前数小的数，与这个数组成一个逆序对。\n如数组 1，3，4，2，5\n逆序对为 3,2 4,2\n即求 右边有多少个数比当前数小\n\n~~~java\n    public static int reverse(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        int[] tempArray = new int[arr.length];\n        return mergeReverse(arr, tempArray, 0, arr.length - 1);\n    }\n\n    private static int mergeReverse(int[] array, int[] tempArray, int start, int end) {\n        if (start >= end) {\n            return 0;\n        }\n        int mid = start + ((end - start) >> 2);\n        int start1 = start;\n        int end1 = mid;\n        int start2 = mid + 1;\n        int end2 = end;\n        int result = 0;\n        int temp = start;\n        result += mergeReverse(array, tempArray, start1, end1);\n        result += mergeReverse(array, tempArray, start2, end2);\n        // 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束\n        while (start1 <= end1 && start2 <= end2) {\n            result += array[start1] <= array[start2] ? 0 : (end2 - start2 + 1);\n            tempArray[temp++] = array[start1] > array[start2] ? array[start1++] : array[start2++];\n        }\n        // 将剩余元素添加至合并空间末尾\n        while (start1 <= end1) {\n            tempArray[temp++] = array[start1++];\n        }\n        while (start2 <= end2) {\n            tempArray[temp++] = array[start2++];\n        }\n        // 拷贝合并空间内排序结束的数组至原数组\n        for (temp = start; temp <= end; temp++) {\n            array[temp] = tempArray[temp];\n        }\n        System.out.println(Arrays.toString(tempArray));\n        return result;\n    }\n~~~\n\n#### 小和问题\n\n在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组的小和。\n如数组 1，3，4，2，5\n小和为 1 + 1+3 + 1 + 1+3+4+2 = 16\n即求 右边有多少个数比当前数大\n\n~~~java\n    public static int smallSum(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        int[] tempArray = new int[arr.length];\n        return mergeSmallSum(arr, tempArray, 0, arr.length - 1);\n    }\n\n    private static int mergeSmallSum(int[] array, int[] tempArray, int start, int end) {\n        if (start >= end) {\n            return 0;\n        }\n        int mid = start + ((end - start) >> 2);\n        int start1 = start;\n        int end1 = mid;\n        int start2 = mid + 1;\n        int end2 = end;\n        int result = 0;\n        int temp = start;\n        result += mergeSmallSum(array, tempArray, start1, end1);\n        result += mergeSmallSum(array, tempArray, start2, end2);\n        // 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束\n        while (start1 <= end1 && start2 <= end2) {\n            result += array[start1] < array[start2] ? (end2 - start2 + 1) * array[start1] : 0;\n            tempArray[temp++] = array[start1] < array[start2] ? array[start1++] : array[start2++];\n        }\n        // 将剩余元素添加至合并空间末尾\n        while (start1 <= end1) {\n            tempArray[temp++] = array[start1++];\n        }\n        while (start2 <= end2) {\n            tempArray[temp++] = array[start2++];\n        }\n        // 拷贝合并空间内排序结束的数组至原数组\n        for (temp = start; temp <= end; temp++) {\n            array[temp] = tempArray[temp];\n        }\n        return result;\n    }\n~~~\n\n## 快速排序\n\n### 荷兰国旗问题（前置）\n\n给定一个整数数组，给定一个值K，这个值在原数组中一定存在\n要求把数组中小于K的元素放到数组的左边，大于K的元素放到数组的右边，等于K的元素放到数组的中间\n\n做法是用两个数组下标作为边界，将数组分成三个区域，左边是小于k的元素，中间是等于k的元素，右边是大于k的元素\n不断将元素与边界交换，实现划分\n\n~~~java\n    public static int[] partition(int[] array, int key) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        int l = -1, r = arr.length, i = 0;\n        while (i < r) {\n            if (arr[i] < key) {\n                // 小于时，交换左边界+1的元素，左边界l+1，判断下一个元素（交换过来元素都已经过判断）\n                swap(arr, ++l, i++);\n            } else if (arr[i] > key) {\n                // 大于时，交换有边界-1的元素，右边界r-1，判断原位置，因为交换后的元素未经过判断\n                swap(arr, --r, i);\n            } else {\n                // 相等时，什么都不做，判断下一个元素\n                i++;\n            }\n        }\n        return arr;\n    }\n~~~\n\n### 快速排序\n\n1. 从数列中挑出一个元素，称为 \"基准\"（pivot）;\n2. 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n3. 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；\n\n类似荷兰国旗问题\n时间复杂度 O(n^2)\n空间复杂度 O(logn)\n但它的平摊期望时间是O(nlongn)，而且隐含的常数因子很小，比归并小很多。所以对绝大多数顺序性较弱的随机数列来说，快排优于归并\n\n~~~java\n    public static int[] quickSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        return quickSortProcess(arr, 0, arr.length - 1);\n    }\n\n    /**\n     * 递归调用划分函数进行排序\n     */\n    private static int[] quickSortProcess(int[] arr, int l, int r) {\n        if (l < r) {\n            int partitionIndex = partition(arr, l, r);\n            quickSortProcess(arr, l, partitionIndex - 1);\n            quickSortProcess(arr, partitionIndex + 1, r);\n        }\n        return arr;\n    }\n\n    /**\n     * 选取基准值，进行划分\n     */\n    private static int partition(int[] arr, int l, int r) {\n        // 选取基准值\n        int pivot = l;\n        int index = pivot + 1;\n        for (int i = index; i <= r; i++) {\n            if (arr[i] < arr[pivot]) {\n                swap(arr, i, index);\n                index++;\n            }\n        }\n        swap(arr, pivot, index - 1);\n        return index - 1;\n    }\n\n    /**\n     * 递归调用划分函数进行排序（优化）\n     * 优化了等于基准的部分，使得每次排序时，一次可以排所有等于基准的元素。比之前每次只排基准好一些。\n     * 但也只是针对有重复元素的排序\n     */\n    private static int[] quickSortProcessOptimization(int[] arr, int l, int r) {\n        if (l < r) {\n            int[] partitionIndex = partitionOptimization(arr, l, r);\n            partitionOptimization(arr, l, partitionIndex[0]);\n            partitionOptimization(arr, partitionIndex[1], r);\n        }\n        return arr;\n    }\n\n    /**\n     * 选取基准值，进行划分（优化）\n     */\n    private static int[] partitionOptimization(int[] arr, int l, int r) {\n        // 选取基准值\n        int pivot = l;\n        r++;\n        int i = l + 1;\n        while (i < r) {\n            if (arr[i] < arr[pivot]) {\n                // 小于时，交换左边界+1的元素，左边界l+1，判断下一个元素（交换过来元素都已经过判断）\n                swap(arr, ++l, i++);\n            } else if (arr[i] > arr[pivot]) {\n                // 大于时，交换有边界-1的元素，右边界r-1，判断原位置，因为交换后的元素未经过判断\n                swap(arr, --r, i);\n            } else {\n                // 相等时，什么都不做，判断下一个元素\n                i++;\n            }\n        }\n        swap(arr, pivot, l--);\n        return new int[]{l, r};\n    }\n~~~\n\n## 堆排序\n\n1. 创建一个堆 H[0……n-1]；\n2. 把堆首（最大值）和堆尾互换；\n3. 把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；\n4. 重复步骤 2，直到堆的尺寸为 1。\n\n时间复杂度 O(nlogn)\n\n~~~java\n    public static int[] heapSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        int len = arr.length;\n        /* 创建大根堆\n        从最后一个父节点（即len/2的位置）开始进行 heapify 过程\n         */\n        for (int i = len / 2; i >= 0; i--) {\n            heapify(arr, i, len);\n        }\n        /* 排序\n        将最大的根与堆尾交换，同时堆尺寸减一，即排好最大的\n        然后再重新与子节点比较，将大的值换到根\n         */\n        for (int i = len - 1; i > 0; i--) {\n            swap(arr, 0, i);\n            len--;\n            heapify(arr, 0, len);\n        }\n        return arr;\n    }\n\n    /**\n     * 使得一个数组是堆有序的，即根节点的值大于（小于）左右子节点的值\n     */\n    private static void heapify(int[] arr, int i, int len) {\n        // 左节点\n        int left = 2 * i + 1;\n        // 右节点\n        int right = 2 * i + 2;\n        // 父节点\n        int largest = i;\n        if (left < len && arr[left] > arr[largest]) {\n            largest = left;\n        }\n        if (right < len && arr[right] > arr[largest]) {\n            largest = right;\n        }\n        if (largest != i) {\n            swap(arr, i, largest);\n            heapify(arr, largest, len);\n        }\n    }\n~~~\n\n## 基数排序\n\n一种非比较型整数排序算法\n其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。\n时间复杂度 O(k*n)\n空间复杂度 O(k+n)\n\n~~~java\n    public static int[] radixSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 获取最大值\n        int max = arr[0];\n        for (int j : arr) {\n            if (max < j) {\n                max = j;\n            }\n        }\n        // 获取最高位数\n        int maxDigit = 0;\n        if (max == 0) {\n            maxDigit = 1;\n        } else {\n            for (int i = max; i != 0; i /= 10) {\n                maxDigit++;\n            }\n        }\n        // 排序\n        int mod = 10;\n        int dev = 1;\n        for (int i = 0; i < maxDigit; i++, dev *= 10, mod *= 10) {\n            // 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)\n            int[][] counter = new int[mod * 2][0];\n            for (int k : arr) {\n                int bucket = ((k % mod) / dev) + mod;\n                counter[bucket] = arrayAppend(counter[bucket], k);\n            }\n            int pos = 0;\n            for (int[] bucket : counter) {\n                for (int value : bucket) {\n                    arr[pos++] = value;\n                }\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * 自动扩容，并保存数据\n     */\n    private static int[] arrayAppend(int[] arr, int value) {\n        arr = Arrays.copyOf(arr, arr.length + 1);\n        arr[arr.length - 1] = value;\n        return arr;\n    }\n~~~\n\n## 计数排序\n\n1. 找出待排序的数组中最大和最小的元素\n2. 统计数组中每个值为i的元素出现的次数，存入数组C的第i项\n3. 对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）\n4. 反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1\n\n时间复杂度 O(n+k)\n空间复杂度 O(k)\n空间换时间\n\n~~~java\n    public static int[] countingSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 获取最大、最小值\n        int min = arr[0];\n        int max = arr[0];\n        for (int value : arr) {\n            if (min > value) {\n                min = value;\n            }\n            if (max < value) {\n                max = value;\n            }\n        }\n        // 处理负数的情况\n        int difference = 0;\n        if (min < 0) {\n            difference = -min;\n        }\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] += difference;\n        }\n        // 排序\n        int[] bucket = new int[max + difference + 1];\n        for (int value : arr) {\n            bucket[value]++;\n        }\n        int socketIndex = 0;\n        for (int i = 0; i < bucket.length; i++) {\n            while (bucket[i] > 0) {\n                arr[socketIndex++] = i - difference;\n                bucket[i]--;\n            }\n        }\n        return arr;\n    }\n~~~\n\n## 桶排序（计数排序的升级）\n\n利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：\n在额外空间充足的情况下，尽量增大桶的数量\n使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中\n时间复杂度 O(n+k)\n空间复杂度 O(n*k)\n\n~~~java\n    public static int[] bucketSort(int[] array) {\n        int[] arr = Arrays.copyOf(array, array.length);\n        // 获取最大、最小值\n        int min = arr[0];\n        int max = arr[0];\n        for (int value : arr) {\n            if (min > value) {\n                min = value;\n            }\n            if (max < value) {\n                max = value;\n            }\n        }\n        // 桶的数量\n        int bucketSize = 5;\n        int bucketCount = (max - min) / bucketSize + 1;\n        int[][] buckets = new int[bucketCount][0];\n        // 利用函数映射关系将数据分配到各个桶中\n        for (int j : arr) {\n            int index = (j - min) / bucketSize;\n            buckets[index] = arrayAppend(buckets[index], j);\n        }\n        // 对每个桶进行排序\n        int arrIndex = 0;\n        for (int[] bucket : buckets) {\n            if (bucket.length <= 0) {\n                continue;\n            }\n            // 使用了冒泡排序\n            bucket = bubbleSort(bucket);\n            for (int value : bucket) {\n                arr[arrIndex++] = value;\n            }\n        }\n        return arr;\n    }\n~~~\n\n## 对数器\n\n对数器（通过用大量测试数据来验证算法是否正确的一种方式）：\n1.有一个你想要测的方法a；\n2.实现一个绝对正确但是复杂度不好的方法b；\n3.实现一个随机样本产生器；\n4.实现对比算法a和b的方法；\n5.把方法a和方法b比对多次来验证方法a是否正确；\n6.如果有一个样本使得比对出错，打印样本分析是哪个方法出错；\n7.当样本数量很多时比对测试依然正确，可以确定方法a已经正确。\n\n这里附上一个对数器\n以Java提供的数组排序作为参照，以检验算法的正确性。\n~~~java\n    public void sortTest() {\n        int[] a = new int[1000];\n\n        for (int i = 0; i < 1000; i++) {\n            a[i] = (int) (-1000 * Math.random() + 500);\n        }\n        System.out.println(Arrays.toString(Sort.insertionSort(a)));\n        System.out.println(Arrays.toString(Sort.bubbleSort(a)));\n        System.out.println(Arrays.toString(Sort.selectionSort(a)));\n        System.out.println(Arrays.toString(Sort.mergeSort(a)));\n        System.out.println(Arrays.toString(Sort.quickSort(a)));\n        System.out.println(Arrays.toString(Sort.heapSort(a)));\n        System.out.println(Arrays.toString(Sort.radixSort(a)));\n        System.out.println(Arrays.toString(Sort.countingSort(a)));\n        System.out.println(Arrays.toString(Sort.bucketSort(a)));\n        System.out.println(Arrays.toString(Sort.shellSort(a)));\n\n        Arrays.sort(a);\n        System.out.println(Arrays.toString(a));\n    }\n~~~\n\n## 总结\n\n参考：\n[菜鸟教程](https://www.runoob.com/w3cnote/ten-sorting-algorithm.html) ，有更详细的解释以及各种编程语言对各个算法的实现。\n\n### 关于桶排序\n\n基数排序与计数排序、桶排序这三种排序算法都利用了桶的概念，但对桶的使用方式不同\n基数排序：根据键值的每位数字来分配桶；\n计数排序：每个桶只存储单一键值；\n桶排序：每个桶存储一定范围的数值；\n\n### 关于算法稳定性\n\n排序算法的稳定性\n同样值的个体之间，如果不因为排序而改变相对次序，就是这个排序是有稳定性的；否则就没有。\n\n不具备稳定性的排序：\n选择排序、快速排序、堆排序、希尔排序\n\n具备稳定性的排序：\n冒泡排序、插入排序、归并排序、一切桶排序思想下的排序\n\n各个算法时间复杂度、空间复杂度和稳定性：\n\n| 排序算法 | 平均时间复杂度  | 辅助空间     | 稳定性 |\n|------|----------|----------|-----|\n| 选择排序 | O(n^2)   | O(1)     | 不稳定 |\n| 冒泡排序 | O(n^2)   | O(1)     | 稳定  |\n| 插入排序 | O(n^2)   | O(1)     | 稳定  |\n| 希尔排序 | O(nlogn) | O(nlogn) | 不稳定 |\n| 归并排序 | O(nlogn) | O(n)     | 稳定  |\n| 快速排序 | O(nlogn) | O(nlogn) | 不稳定 |\n| 堆排序  | O(nlogn) | O(1)     | 不稳定 |\n| 基数排序 | O(n*k)   | O(n+k)   | 稳定  |\n| 计数排序 | O(n+k)   | O(n+k)   | 稳定  |\n| 桶排序  | O(n+k)   | O(n+k)   | 稳定  |\n\n> 目前没有找到时间复杂度 0(n1ogn) ，额外空间复杂度0(1)，又稳定的排序。（鱼和熊掌不可兼得）\n> 基于比较的排序，时间复杂度至少 O(nlogn)\n> 稳定的排序，空间复杂度至少 O(n)\n\n### 综合排序\n\n综合排序即将不同排序的优势结合在一起，以实现不同情况下更加高效的排序。","slug":"经典排序算法","published":1,"updated":"2022-09-16T01:33:38.991Z","_id":"cl83qro8l0001g0tt0qb32x80","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>重新开始学算法，虽然已经上过 数据结构与算法 和 算法分析设计 的课程。<br>以后关于算法的代码都会放在<a class=\"link\"   href=\"https://github.com/Cooooing/algorithms\" >算法代码仓库<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"交换两变量的值\"><a href=\"#交换两变量的值\" class=\"headerlink\" title=\"交换两变量的值\"></a>交换两变量的值</h2><p>第一种方法也是最常用的，没什么限制。借助一个辅助变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">    array[i] = array[j];</span><br><span class=\"line\">    array[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种方法，利用异或运算实现。不借助额外空间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap_1</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">    array[i] = array[i] ^ array[j];</span><br><span class=\"line\">    array[j] = array[i] ^ array[j];</span><br><span class=\"line\">    array[i] = array[i] ^ array[j];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>异或运算 也可以叫做无进位相加（同为0，不同为1）<br>满足交换律和结合律</p>\n<blockquote>\n<p>必须保证交换的变量内存地址不一致，否则两变量都会变为0。</p>\n</blockquote>\n<p>交换的原理：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=甲^乙               b=乙</span><br><span class=\"line\">a=甲^乙               b=甲^乙^乙=甲^0=甲</span><br><span class=\"line\">a=甲^乙^甲=乙^0=乙     b=甲</span><br></pre></td></tr></table></figure>\n\n<p>异或运算还可以用来消除出现偶数次的值</p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><ol>\n<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>\n<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>\n<li>重复第二步，直到所有元素均排序完毕。</li>\n</ol>\n<p>时间复杂度 O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] selectionSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 总共经过n-1次比较</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 选定i下标的值作为比较的基准</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">        <span class=\"comment\">// 在i~n-1上找最小值的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[temp]) &#123;</span><br><span class=\"line\">                temp = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将最小值与i上元素交换</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != temp) &#123;</span><br><span class=\"line\">            swap(arr, i, temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<p>时间复杂度 O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] bubbleSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// （优化）设定一个标记，为true表示此次循环没有交换，即已排序完成</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; array.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(arr, j, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><ol>\n<li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li>\n<li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。</li>\n</ol>\n<p>时间复杂度 O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] insertionSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 从下标为1的元素开始选择插入位置，下标为0只有一个元素，默认是有序的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从右往左比较，左边的元素比右边大时，交换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class=\"number\">1</span>]; j--) &#123;</span><br><span class=\"line\">            swap(arr, j, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"希尔排序（插入排序的改进）\"><a href=\"#希尔排序（插入排序的改进）\" class=\"headerlink\" title=\"希尔排序（插入排序的改进）\"></a>希尔排序（插入排序的改进）</h2><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：<br>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；<br>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；<br>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。<br>时间复杂度 O(nlog2n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] shellSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    <span class=\"comment\">// 每次增量为数组长度的一半，以后每次减半</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> arr.length / <span class=\"number\">2</span>; step &gt;= <span class=\"number\">1</span>; step /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> step; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            temp = arr[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - step;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class=\"line\">                arr[j + step] = arr[j];</span><br><span class=\"line\">                j -= step;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + step] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"归并排序-1\"><a href=\"#归并排序-1\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li>\n</ol>\n<p>时间复杂度 O(nlogn)<br>空间复杂度 O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] mergeSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 临时数组，用于存放排序后的数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] tempArray = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[array.length];</span><br><span class=\"line\">    merge(arr, tempArray, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span>[] tempArray, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> start + ((end - start) &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start1</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end1</span> <span class=\"operator\">=</span> mid;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start2</span> <span class=\"operator\">=</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end2</span> <span class=\"operator\">=</span> end;</span><br><span class=\"line\">    merge(array, tempArray, start1, end1);</span><br><span class=\"line\">    merge(array, tempArray, start2, end2);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    <span class=\"comment\">// 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start1] &lt; array[start2] ? array[start1++] : array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将剩余元素添加至合并空间末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start1++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start2 &lt;= end2) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝合并空间内排序结束的数组至原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (temp = start; temp &lt;= end; temp++) &#123;</span><br><span class=\"line\">        array[temp] = tempArray[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"归并排序拓展\"><a href=\"#归并排序拓展\" class=\"headerlink\" title=\"归并排序拓展\"></a>归并排序拓展</h3><h4 id=\"逆序对问题\"><a href=\"#逆序对问题\" class=\"headerlink\" title=\"逆序对问题\"></a>逆序对问题</h4><p>在一个数组中，每一个数右边比当前数小的数，与这个数组成一个逆序对。<br>如数组 1，3，4，2，5<br>逆序对为 3,2 4,2<br>即求 右边有多少个数比当前数小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">reverse</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"type\">int</span>[] tempArray = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[arr.length];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeReverse(arr, tempArray, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mergeReverse</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span>[] tempArray, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> start + ((end - start) &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start1</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end1</span> <span class=\"operator\">=</span> mid;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start2</span> <span class=\"operator\">=</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end2</span> <span class=\"operator\">=</span> end;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    result += mergeReverse(array, tempArray, start1, end1);</span><br><span class=\"line\">    result += mergeReverse(array, tempArray, start2, end2);</span><br><span class=\"line\">    <span class=\"comment\">// 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</span><br><span class=\"line\">        result += array[start1] &lt;= array[start2] ? <span class=\"number\">0</span> : (end2 - start2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">        tempArray[temp++] = array[start1] &gt; array[start2] ? array[start1++] : array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将剩余元素添加至合并空间末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start1++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start2 &lt;= end2) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝合并空间内排序结束的数组至原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (temp = start; temp &lt;= end; temp++) &#123;</span><br><span class=\"line\">        array[temp] = tempArray[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(tempArray));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小和问题\"><a href=\"#小和问题\" class=\"headerlink\" title=\"小和问题\"></a>小和问题</h4><p>在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组的小和。<br>如数组 1，3，4，2，5<br>小和为 1 + 1+3 + 1 + 1+3+4+2 = 16<br>即求 右边有多少个数比当前数大</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">smallSum</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"type\">int</span>[] tempArray = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[arr.length];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeSmallSum(arr, tempArray, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mergeSmallSum</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span>[] tempArray, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> start + ((end - start) &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start1</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end1</span> <span class=\"operator\">=</span> mid;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start2</span> <span class=\"operator\">=</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end2</span> <span class=\"operator\">=</span> end;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    result += mergeSmallSum(array, tempArray, start1, end1);</span><br><span class=\"line\">    result += mergeSmallSum(array, tempArray, start2, end2);</span><br><span class=\"line\">    <span class=\"comment\">// 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</span><br><span class=\"line\">        result += array[start1] &lt; array[start2] ? (end2 - start2 + <span class=\"number\">1</span>) * array[start1] : <span class=\"number\">0</span>;</span><br><span class=\"line\">        tempArray[temp++] = array[start1] &lt; array[start2] ? array[start1++] : array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将剩余元素添加至合并空间末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start1++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start2 &lt;= end2) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝合并空间内排序结束的数组至原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (temp = start; temp &lt;= end; temp++) &#123;</span><br><span class=\"line\">        array[temp] = tempArray[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"荷兰国旗问题（前置）\"><a href=\"#荷兰国旗问题（前置）\" class=\"headerlink\" title=\"荷兰国旗问题（前置）\"></a>荷兰国旗问题（前置）</h3><p>给定一个整数数组，给定一个值K，这个值在原数组中一定存在<br>要求把数组中小于K的元素放到数组的左边，大于K的元素放到数组的右边，等于K的元素放到数组的中间</p>\n<p>做法是用两个数组下标作为边界，将数组分成三个区域，左边是小于k的元素，中间是等于k的元素，右边是大于k的元素<br>不断将元素与边界交换，实现划分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] partition(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> key) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>, r = arr.length, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; key) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 小于时，交换左边界+1的元素，左边界l+1，判断下一个元素（交换过来元素都已经过判断）</span></span><br><span class=\"line\">            swap(arr, ++l, i++);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i] &gt; key) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 大于时，交换有边界-1的元素，右边界r-1，判断原位置，因为交换后的元素未经过判断</span></span><br><span class=\"line\">            swap(arr, --r, i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 相等时，什么都不做，判断下一个元素</span></span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速排序-1\"><a href=\"#快速排序-1\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><ol>\n<li>从数列中挑出一个元素，称为 “基准”（pivot）;</li>\n<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>\n<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li>\n</ol>\n<p>类似荷兰国旗问题<br>时间复杂度 O(n^2)<br>空间复杂度 O(logn)<br>但它的平摊期望时间是O(nlongn)，而且隐含的常数因子很小，比归并小很多。所以对绝大多数顺序性较弱的随机数列来说，快排优于归并</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] quickSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSortProcess(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归调用划分函数进行排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] quickSortProcess(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">partitionIndex</span> <span class=\"operator\">=</span> partition(arr, l, r);</span><br><span class=\"line\">        quickSortProcess(arr, l, partitionIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        quickSortProcess(arr, partitionIndex + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选取基准值，进行划分</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 选取基准值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> l;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> index; i &lt;= r; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class=\"line\">            swap(arr, i, index);</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(arr, pivot, index - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归调用划分函数进行排序（优化）</span></span><br><span class=\"line\"><span class=\"comment\"> * 优化了等于基准的部分，使得每次排序时，一次可以排所有等于基准的元素。比之前每次只排基准好一些。</span></span><br><span class=\"line\"><span class=\"comment\"> * 但也只是针对有重复元素的排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] quickSortProcessOptimization(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] partitionIndex = partitionOptimization(arr, l, r);</span><br><span class=\"line\">        partitionOptimization(arr, l, partitionIndex[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        partitionOptimization(arr, partitionIndex[<span class=\"number\">1</span>], r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选取基准值，进行划分（优化）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] partitionOptimization(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 选取基准值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> l;</span><br><span class=\"line\">    r++;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> l + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 小于时，交换左边界+1的元素，左边界l+1，判断下一个元素（交换过来元素都已经过判断）</span></span><br><span class=\"line\">            swap(arr, ++l, i++);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i] &gt; arr[pivot]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 大于时，交换有边界-1的元素，右边界r-1，判断原位置，因为交换后的元素未经过判断</span></span><br><span class=\"line\">            swap(arr, --r, i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 相等时，什么都不做，判断下一个元素</span></span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(arr, pivot, l--);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;l, r&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><ol>\n<li>创建一个堆 H[0……n-1]；</li>\n<li>把堆首（最大值）和堆尾互换；</li>\n<li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li>\n<li>重复步骤 2，直到堆的尺寸为 1。</li>\n</ol>\n<p>时间复杂度 O(nlogn)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] heapSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">    <span class=\"comment\">/* 创建大根堆</span></span><br><span class=\"line\"><span class=\"comment\">    从最后一个父节点（即len/2的位置）开始进行 heapify 过程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> len / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        heapify(arr, i, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 排序</span></span><br><span class=\"line\"><span class=\"comment\">    将最大的根与堆尾交换，同时堆尺寸减一，即排好最大的</span></span><br><span class=\"line\"><span class=\"comment\">    然后再重新与子节点比较，将大的值换到根</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        swap(arr, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">        heapify(arr, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使得一个数组是堆有序的，即根节点的值大于（小于）左右子节点的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">heapify</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> i, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 左节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 右节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">largest</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class=\"line\">        largest = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class=\"line\">        largest = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (largest != i) &#123;</span><br><span class=\"line\">        swap(arr, i, largest);</span><br><span class=\"line\">        heapify(arr, largest, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><p>一种非比较型整数排序算法<br>其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。<br>时间复杂度 O(k*n)<br>空间复杂度 O(k+n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] radixSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 获取最大值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j : arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max &lt; j) &#123;</span><br><span class=\"line\">            max = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取最高位数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">maxDigit</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        maxDigit = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> max; i != <span class=\"number\">0</span>; i /= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            maxDigit++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mod</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">dev</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; maxDigit; i++, dev *= <span class=\"number\">10</span>, mod *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] counter = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[mod * <span class=\"number\">2</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k : arr) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">bucket</span> <span class=\"operator\">=</span> ((k % mod) / dev) + mod;</span><br><span class=\"line\">            counter[bucket] = arrayAppend(counter[bucket], k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] bucket : counter) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : bucket) &#123;</span><br><span class=\"line\">                arr[pos++] = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自动扩容，并保存数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] arrayAppend(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> value) &#123;</span><br><span class=\"line\">    arr = Arrays.copyOf(arr, arr.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">    arr[arr.length - <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h2><ol>\n<li>找出待排序的数组中最大和最小的元素</li>\n<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项</li>\n<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）</li>\n<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</li>\n</ol>\n<p>时间复杂度 O(n+k)<br>空间复杂度 O(k)<br>空间换时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] countingSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 获取最大、最小值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (min &gt; value) &#123;</span><br><span class=\"line\">            min = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max &lt; value) &#123;</span><br><span class=\"line\">            max = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理负数的情况</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">difference</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (min &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        difference = -min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        arr[i] += difference;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max + difference + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : arr) &#123;</span><br><span class=\"line\">        bucket[value]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">socketIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (bucket[i] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            arr[socketIndex++] = i - difference;</span><br><span class=\"line\">            bucket[i]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"桶排序（计数排序的升级）\"><a href=\"#桶排序（计数排序的升级）\" class=\"headerlink\" title=\"桶排序（计数排序的升级）\"></a>桶排序（计数排序的升级）</h2><p>利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：<br>在额外空间充足的情况下，尽量增大桶的数量<br>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中<br>时间复杂度 O(n+k)<br>空间复杂度 O(n*k)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] bucketSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 获取最大、最小值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (min &gt; value) &#123;</span><br><span class=\"line\">            min = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max &lt; value) &#123;</span><br><span class=\"line\">            max = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 桶的数量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">bucketSize</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">bucketCount</span> <span class=\"operator\">=</span> (max - min) / bucketSize + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[][] buckets = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[bucketCount][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 利用函数映射关系将数据分配到各个桶中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j : arr) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> (j - min) / bucketSize;</span><br><span class=\"line\">        buckets[index] = arrayAppend(buckets[index], j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对每个桶进行排序</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">arrIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] bucket : buckets) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bucket.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 使用了冒泡排序</span></span><br><span class=\"line\">        bucket = bubbleSort(bucket);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : bucket) &#123;</span><br><span class=\"line\">            arr[arrIndex++] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对数器\"><a href=\"#对数器\" class=\"headerlink\" title=\"对数器\"></a>对数器</h2><p>对数器（通过用大量测试数据来验证算法是否正确的一种方式）：<br>1.有一个你想要测的方法a；<br>2.实现一个绝对正确但是复杂度不好的方法b；<br>3.实现一个随机样本产生器；<br>4.实现对比算法a和b的方法；<br>5.把方法a和方法b比对多次来验证方法a是否正确；<br>6.如果有一个样本使得比对出错，打印样本分析是哪个方法出错；<br>7.当样本数量很多时比对测试依然正确，可以确定方法a已经正确。</p>\n<p>这里附上一个对数器<br>以Java提供的数组排序作为参照，以检验算法的正确性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sortTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">        a[i] = (<span class=\"type\">int</span>) (-<span class=\"number\">1000</span> * Math.random() + <span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.insertionSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.bubbleSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.selectionSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.mergeSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.quickSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.heapSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.radixSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.countingSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.bucketSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.shellSort(a)));</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.sort(a);</span><br><span class=\"line\">    System.out.println(Arrays.toString(a));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>参考：<br><a class=\"link\"   href=\"https://www.runoob.com/w3cnote/ten-sorting-algorithm.html\" >菜鸟教程<i class=\"fas fa-external-link-alt\"></i></a> ，有更详细的解释以及各种编程语言对各个算法的实现。</p>\n<h3 id=\"关于桶排序\"><a href=\"#关于桶排序\" class=\"headerlink\" title=\"关于桶排序\"></a>关于桶排序</h3><p>基数排序与计数排序、桶排序这三种排序算法都利用了桶的概念，但对桶的使用方式不同<br>基数排序：根据键值的每位数字来分配桶；<br>计数排序：每个桶只存储单一键值；<br>桶排序：每个桶存储一定范围的数值；</p>\n<h3 id=\"关于算法稳定性\"><a href=\"#关于算法稳定性\" class=\"headerlink\" title=\"关于算法稳定性\"></a>关于算法稳定性</h3><p>排序算法的稳定性<br>同样值的个体之间，如果不因为排序而改变相对次序，就是这个排序是有稳定性的；否则就没有。</p>\n<p>不具备稳定性的排序：<br>选择排序、快速排序、堆排序、希尔排序</p>\n<p>具备稳定性的排序：<br>冒泡排序、插入排序、归并排序、一切桶排序思想下的排序</p>\n<p>各个算法时间复杂度、空间复杂度和稳定性：</p>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>平均时间复杂度</th>\n<th>辅助空间</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>选择排序</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>冒泡排序</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>O(n)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>O(n*k)</td>\n<td>O(n+k)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>O(n+k)</td>\n<td>O(n+k)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>O(n+k)</td>\n<td>O(n+k)</td>\n<td>稳定</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>目前没有找到时间复杂度 0(n1ogn) ，额外空间复杂度0(1)，又稳定的排序。（鱼和熊掌不可兼得）<br>基于比较的排序，时间复杂度至少 O(nlogn)<br>稳定的排序，空间复杂度至少 O(n)</p>\n</blockquote>\n<h3 id=\"综合排序\"><a href=\"#综合排序\" class=\"headerlink\" title=\"综合排序\"></a>综合排序</h3><p>综合排序即将不同排序的优势结合在一起，以实现不同情况下更加高效的排序。</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>重新开始学算法，虽然已经上过 数据结构与算法 和 算法分析设计 的课程。<br>以后关于算法的代码都会放在<a class=\"link\"   href=\"https://github.com/Cooooing/algorithms\" >算法代码仓库<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h2 id=\"交换两变量的值\"><a href=\"#交换两变量的值\" class=\"headerlink\" title=\"交换两变量的值\"></a>交换两变量的值</h2><p>第一种方法也是最常用的，没什么限制。借助一个辅助变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">    array[i] = array[j];</span><br><span class=\"line\">    array[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二种方法，利用异或运算实现。不借助额外空间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap_1</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">    array[i] = array[i] ^ array[j];</span><br><span class=\"line\">    array[j] = array[i] ^ array[j];</span><br><span class=\"line\">    array[i] = array[i] ^ array[j];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>异或运算 也可以叫做无进位相加（同为0，不同为1）<br>满足交换律和结合律</p>\n<blockquote>\n<p>必须保证交换的变量内存地址不一致，否则两变量都会变为0。</p>\n</blockquote>\n<p>交换的原理：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=甲^乙               b=乙</span><br><span class=\"line\">a=甲^乙               b=甲^乙^乙=甲^0=甲</span><br><span class=\"line\">a=甲^乙^甲=乙^0=乙     b=甲</span><br></pre></td></tr></table></figure>\n\n<p>异或运算还可以用来消除出现偶数次的值</p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><ol>\n<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>\n<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>\n<li>重复第二步，直到所有元素均排序完毕。</li>\n</ol>\n<p>时间复杂度 O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] selectionSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 总共经过n-1次比较</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 选定i下标的值作为比较的基准</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">        <span class=\"comment\">// 在i~n-1上找最小值的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[temp]) &#123;</span><br><span class=\"line\">                temp = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将最小值与i上元素交换</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != temp) &#123;</span><br><span class=\"line\">            swap(arr, i, temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<p>时间复杂度 O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] bubbleSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// （优化）设定一个标记，为true表示此次循环没有交换，即已排序完成</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; array.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(arr, j, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">                flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><ol>\n<li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li>\n<li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。</li>\n</ol>\n<p>时间复杂度 O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] insertionSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 从下标为1的元素开始选择插入位置，下标为0只有一个元素，默认是有序的</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从右往左比较，左边的元素比右边大时，交换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; arr[j + <span class=\"number\">1</span>]; j--) &#123;</span><br><span class=\"line\">            swap(arr, j, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"希尔排序（插入排序的改进）\"><a href=\"#希尔排序（插入排序的改进）\" class=\"headerlink\" title=\"希尔排序（插入排序的改进）\"></a>希尔排序（插入排序的改进）</h2><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：<br>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；<br>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；<br>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。<br>时间复杂度 O(nlog2n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] shellSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    <span class=\"comment\">// 每次增量为数组长度的一半，以后每次减半</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">step</span> <span class=\"operator\">=</span> arr.length / <span class=\"number\">2</span>; step &gt;= <span class=\"number\">1</span>; step /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> step; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            temp = arr[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - step;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class=\"line\">                arr[j + step] = arr[j];</span><br><span class=\"line\">                j -= step;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + step] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><h3 id=\"归并排序-1\"><a href=\"#归并排序-1\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li>\n</ol>\n<p>时间复杂度 O(nlogn)<br>空间复杂度 O(n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] mergeSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 临时数组，用于存放排序后的数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] tempArray = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[array.length];</span><br><span class=\"line\">    merge(arr, tempArray, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span>[] tempArray, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> start + ((end - start) &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start1</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end1</span> <span class=\"operator\">=</span> mid;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start2</span> <span class=\"operator\">=</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end2</span> <span class=\"operator\">=</span> end;</span><br><span class=\"line\">    merge(array, tempArray, start1, end1);</span><br><span class=\"line\">    merge(array, tempArray, start2, end2);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    <span class=\"comment\">// 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start1] &lt; array[start2] ? array[start1++] : array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将剩余元素添加至合并空间末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start1++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start2 &lt;= end2) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝合并空间内排序结束的数组至原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (temp = start; temp &lt;= end; temp++) &#123;</span><br><span class=\"line\">        array[temp] = tempArray[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"归并排序拓展\"><a href=\"#归并排序拓展\" class=\"headerlink\" title=\"归并排序拓展\"></a>归并排序拓展</h3><h4 id=\"逆序对问题\"><a href=\"#逆序对问题\" class=\"headerlink\" title=\"逆序对问题\"></a>逆序对问题</h4><p>在一个数组中，每一个数右边比当前数小的数，与这个数组成一个逆序对。<br>如数组 1，3，4，2，5<br>逆序对为 3,2 4,2<br>即求 右边有多少个数比当前数小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">reverse</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"type\">int</span>[] tempArray = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[arr.length];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeReverse(arr, tempArray, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mergeReverse</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span>[] tempArray, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> start + ((end - start) &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start1</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end1</span> <span class=\"operator\">=</span> mid;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start2</span> <span class=\"operator\">=</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end2</span> <span class=\"operator\">=</span> end;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    result += mergeReverse(array, tempArray, start1, end1);</span><br><span class=\"line\">    result += mergeReverse(array, tempArray, start2, end2);</span><br><span class=\"line\">    <span class=\"comment\">// 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</span><br><span class=\"line\">        result += array[start1] &lt;= array[start2] ? <span class=\"number\">0</span> : (end2 - start2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">        tempArray[temp++] = array[start1] &gt; array[start2] ? array[start1++] : array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将剩余元素添加至合并空间末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start1++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start2 &lt;= end2) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝合并空间内排序结束的数组至原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (temp = start; temp &lt;= end; temp++) &#123;</span><br><span class=\"line\">        array[temp] = tempArray[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(tempArray));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小和问题\"><a href=\"#小和问题\" class=\"headerlink\" title=\"小和问题\"></a>小和问题</h4><p>在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和。求一个数组的小和。<br>如数组 1，3，4，2，5<br>小和为 1 + 1+3 + 1 + 1+3+4+2 = 16<br>即求 右边有多少个数比当前数大</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">smallSum</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"type\">int</span>[] tempArray = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[arr.length];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeSmallSum(arr, tempArray, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">mergeSmallSum</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span>[] tempArray, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> start + ((end - start) &gt;&gt; <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start1</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end1</span> <span class=\"operator\">=</span> mid;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start2</span> <span class=\"operator\">=</span> mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end2</span> <span class=\"operator\">=</span> end;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">    result += mergeSmallSum(array, tempArray, start1, end1);</span><br><span class=\"line\">    result += mergeSmallSum(array, tempArray, start2, end2);</span><br><span class=\"line\">    <span class=\"comment\">// 比较两个数组元素，将较小的放到合并空间。直至其中一个数组遍历结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) &#123;</span><br><span class=\"line\">        result += array[start1] &lt; array[start2] ? (end2 - start2 + <span class=\"number\">1</span>) * array[start1] : <span class=\"number\">0</span>;</span><br><span class=\"line\">        tempArray[temp++] = array[start1] &lt; array[start2] ? array[start1++] : array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将剩余元素添加至合并空间末尾</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start1++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start2 &lt;= end2) &#123;</span><br><span class=\"line\">        tempArray[temp++] = array[start2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拷贝合并空间内排序结束的数组至原数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (temp = start; temp &lt;= end; temp++) &#123;</span><br><span class=\"line\">        array[temp] = tempArray[temp];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"荷兰国旗问题（前置）\"><a href=\"#荷兰国旗问题（前置）\" class=\"headerlink\" title=\"荷兰国旗问题（前置）\"></a>荷兰国旗问题（前置）</h3><p>给定一个整数数组，给定一个值K，这个值在原数组中一定存在<br>要求把数组中小于K的元素放到数组的左边，大于K的元素放到数组的右边，等于K的元素放到数组的中间</p>\n<p>做法是用两个数组下标作为边界，将数组分成三个区域，左边是小于k的元素，中间是等于k的元素，右边是大于k的元素<br>不断将元素与边界交换，实现划分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] partition(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> key) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>, r = arr.length, i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; key) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 小于时，交换左边界+1的元素，左边界l+1，判断下一个元素（交换过来元素都已经过判断）</span></span><br><span class=\"line\">            swap(arr, ++l, i++);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i] &gt; key) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 大于时，交换有边界-1的元素，右边界r-1，判断原位置，因为交换后的元素未经过判断</span></span><br><span class=\"line\">            swap(arr, --r, i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 相等时，什么都不做，判断下一个元素</span></span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速排序-1\"><a href=\"#快速排序-1\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><ol>\n<li>从数列中挑出一个元素，称为 “基准”（pivot）;</li>\n<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>\n<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li>\n</ol>\n<p>类似荷兰国旗问题<br>时间复杂度 O(n^2)<br>空间复杂度 O(logn)<br>但它的平摊期望时间是O(nlongn)，而且隐含的常数因子很小，比归并小很多。所以对绝大多数顺序性较弱的随机数列来说，快排优于归并</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] quickSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSortProcess(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归调用划分函数进行排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] quickSortProcess(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">partitionIndex</span> <span class=\"operator\">=</span> partition(arr, l, r);</span><br><span class=\"line\">        quickSortProcess(arr, l, partitionIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        quickSortProcess(arr, partitionIndex + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选取基准值，进行划分</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 选取基准值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> l;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> index; i &lt;= r; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class=\"line\">            swap(arr, i, index);</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(arr, pivot, index - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> index - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 递归调用划分函数进行排序（优化）</span></span><br><span class=\"line\"><span class=\"comment\"> * 优化了等于基准的部分，使得每次排序时，一次可以排所有等于基准的元素。比之前每次只排基准好一些。</span></span><br><span class=\"line\"><span class=\"comment\"> * 但也只是针对有重复元素的排序</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] quickSortProcessOptimization(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] partitionIndex = partitionOptimization(arr, l, r);</span><br><span class=\"line\">        partitionOptimization(arr, l, partitionIndex[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        partitionOptimization(arr, partitionIndex[<span class=\"number\">1</span>], r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 选取基准值，进行划分（优化）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] partitionOptimization(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 选取基准值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> l;</span><br><span class=\"line\">    r++;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> l + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 小于时，交换左边界+1的元素，左边界l+1，判断下一个元素（交换过来元素都已经过判断）</span></span><br><span class=\"line\">            swap(arr, ++l, i++);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[i] &gt; arr[pivot]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 大于时，交换有边界-1的元素，右边界r-1，判断原位置，因为交换后的元素未经过判断</span></span><br><span class=\"line\">            swap(arr, --r, i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 相等时，什么都不做，判断下一个元素</span></span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    swap(arr, pivot, l--);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;l, r&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><ol>\n<li>创建一个堆 H[0……n-1]；</li>\n<li>把堆首（最大值）和堆尾互换；</li>\n<li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li>\n<li>重复步骤 2，直到堆的尺寸为 1。</li>\n</ol>\n<p>时间复杂度 O(nlogn)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] heapSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">    <span class=\"comment\">/* 创建大根堆</span></span><br><span class=\"line\"><span class=\"comment\">    从最后一个父节点（即len/2的位置）开始进行 heapify 过程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> len / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        heapify(arr, i, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 排序</span></span><br><span class=\"line\"><span class=\"comment\">    将最大的根与堆尾交换，同时堆尺寸减一，即排好最大的</span></span><br><span class=\"line\"><span class=\"comment\">    然后再重新与子节点比较，将大的值换到根</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        swap(arr, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">        len--;</span><br><span class=\"line\">        heapify(arr, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使得一个数组是堆有序的，即根节点的值大于（小于）左右子节点的值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">heapify</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> i, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 左节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 右节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">largest</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class=\"line\">        largest = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class=\"line\">        largest = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (largest != i) &#123;</span><br><span class=\"line\">        swap(arr, i, largest);</span><br><span class=\"line\">        heapify(arr, largest, len);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><p>一种非比较型整数排序算法<br>其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。<br>时间复杂度 O(k*n)<br>空间复杂度 O(k+n)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] radixSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 获取最大值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j : arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max &lt; j) &#123;</span><br><span class=\"line\">            max = j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取最高位数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">maxDigit</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        maxDigit = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> max; i != <span class=\"number\">0</span>; i /= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            maxDigit++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mod</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">dev</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; maxDigit; i++, dev *= <span class=\"number\">10</span>, mod *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[][] counter = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[mod * <span class=\"number\">2</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k : arr) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">bucket</span> <span class=\"operator\">=</span> ((k % mod) / dev) + mod;</span><br><span class=\"line\">            counter[bucket] = arrayAppend(counter[bucket], k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pos</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] bucket : counter) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : bucket) &#123;</span><br><span class=\"line\">                arr[pos++] = value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自动扩容，并保存数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] arrayAppend(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> value) &#123;</span><br><span class=\"line\">    arr = Arrays.copyOf(arr, arr.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">    arr[arr.length - <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h2><ol>\n<li>找出待排序的数组中最大和最小的元素</li>\n<li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项</li>\n<li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）</li>\n<li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</li>\n</ol>\n<p>时间复杂度 O(n+k)<br>空间复杂度 O(k)<br>空间换时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] countingSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 获取最大、最小值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (min &gt; value) &#123;</span><br><span class=\"line\">            min = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max &lt; value) &#123;</span><br><span class=\"line\">            max = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理负数的情况</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">difference</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (min &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        difference = -min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        arr[i] += difference;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 排序</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[max + difference + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : arr) &#123;</span><br><span class=\"line\">        bucket[value]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">socketIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (bucket[i] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            arr[socketIndex++] = i - difference;</span><br><span class=\"line\">            bucket[i]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"桶排序（计数排序的升级）\"><a href=\"#桶排序（计数排序的升级）\" class=\"headerlink\" title=\"桶排序（计数排序的升级）\"></a>桶排序（计数排序的升级）</h2><p>利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：<br>在额外空间充足的情况下，尽量增大桶的数量<br>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中<br>时间复杂度 O(n+k)<br>空间复杂度 O(n*k)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] bucketSort(<span class=\"type\">int</span>[] array) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] arr = Arrays.copyOf(array, array.length);</span><br><span class=\"line\">    <span class=\"comment\">// 获取最大、最小值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (min &gt; value) &#123;</span><br><span class=\"line\">            min = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (max &lt; value) &#123;</span><br><span class=\"line\">            max = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 桶的数量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">bucketSize</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">bucketCount</span> <span class=\"operator\">=</span> (max - min) / bucketSize + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[][] buckets = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[bucketCount][<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 利用函数映射关系将数据分配到各个桶中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j : arr) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> (j - min) / bucketSize;</span><br><span class=\"line\">        buckets[index] = arrayAppend(buckets[index], j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对每个桶进行排序</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">arrIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] bucket : buckets) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bucket.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 使用了冒泡排序</span></span><br><span class=\"line\">        bucket = bubbleSort(bucket);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> value : bucket) &#123;</span><br><span class=\"line\">            arr[arrIndex++] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对数器\"><a href=\"#对数器\" class=\"headerlink\" title=\"对数器\"></a>对数器</h2><p>对数器（通过用大量测试数据来验证算法是否正确的一种方式）：<br>1.有一个你想要测的方法a；<br>2.实现一个绝对正确但是复杂度不好的方法b；<br>3.实现一个随机样本产生器；<br>4.实现对比算法a和b的方法；<br>5.把方法a和方法b比对多次来验证方法a是否正确；<br>6.如果有一个样本使得比对出错，打印样本分析是哪个方法出错；<br>7.当样本数量很多时比对测试依然正确，可以确定方法a已经正确。</p>\n<p>这里附上一个对数器<br>以Java提供的数组排序作为参照，以检验算法的正确性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sortTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1000</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">        a[i] = (<span class=\"type\">int</span>) (-<span class=\"number\">1000</span> * Math.random() + <span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.insertionSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.bubbleSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.selectionSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.mergeSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.quickSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.heapSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.radixSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.countingSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.bucketSort(a)));</span><br><span class=\"line\">    System.out.println(Arrays.toString(Sort.shellSort(a)));</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.sort(a);</span><br><span class=\"line\">    System.out.println(Arrays.toString(a));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>参考：<br><a class=\"link\"   href=\"https://www.runoob.com/w3cnote/ten-sorting-algorithm.html\" >菜鸟教程<i class=\"fas fa-external-link-alt\"></i></a> ，有更详细的解释以及各种编程语言对各个算法的实现。</p>\n<h3 id=\"关于桶排序\"><a href=\"#关于桶排序\" class=\"headerlink\" title=\"关于桶排序\"></a>关于桶排序</h3><p>基数排序与计数排序、桶排序这三种排序算法都利用了桶的概念，但对桶的使用方式不同<br>基数排序：根据键值的每位数字来分配桶；<br>计数排序：每个桶只存储单一键值；<br>桶排序：每个桶存储一定范围的数值；</p>\n<h3 id=\"关于算法稳定性\"><a href=\"#关于算法稳定性\" class=\"headerlink\" title=\"关于算法稳定性\"></a>关于算法稳定性</h3><p>排序算法的稳定性<br>同样值的个体之间，如果不因为排序而改变相对次序，就是这个排序是有稳定性的；否则就没有。</p>\n<p>不具备稳定性的排序：<br>选择排序、快速排序、堆排序、希尔排序</p>\n<p>具备稳定性的排序：<br>冒泡排序、插入排序、归并排序、一切桶排序思想下的排序</p>\n<p>各个算法时间复杂度、空间复杂度和稳定性：</p>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>平均时间复杂度</th>\n<th>辅助空间</th>\n<th>稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>选择排序</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>冒泡排序</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>O(n)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>O(1)</td>\n<td>不稳定</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>O(n*k)</td>\n<td>O(n+k)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>O(n+k)</td>\n<td>O(n+k)</td>\n<td>稳定</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>O(n+k)</td>\n<td>O(n+k)</td>\n<td>稳定</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>目前没有找到时间复杂度 0(n1ogn) ，额外空间复杂度0(1)，又稳定的排序。（鱼和熊掌不可兼得）<br>基于比较的排序，时间复杂度至少 O(nlogn)<br>稳定的排序，空间复杂度至少 O(n)</p>\n</blockquote>\n<h3 id=\"综合排序\"><a href=\"#综合排序\" class=\"headerlink\" title=\"综合排序\"></a>综合排序</h3><p>综合排序即将不同排序的优势结合在一起，以实现不同情况下更加高效的排序。</p>\n"},{"title":"单链表环问题","date":"2022-09-16T05:30:48.000Z","_content":"\n## 题目和前置\n\n给出一个单链表，判断是否有环。如果有环，则返回环入口和环长度。\n\n单链表节点结构\n~~~java\npackage LinkedList;\n\npublic class Node {\n    public Integer data;\n    public Node next;\n\n    public Node() {\n        this.data = null;\n        this.next = null;\n    }\n\n    public Node(int value) {\n        this.data = value;\n        this.next = null;\n    }\n}\n~~~\n\n随机环链表的对数器\n~~~java\n    /**\n     * 生成环链表（入口随机）\n     * @return 返回链表头节点\n     */\n    private Node getRingLinkedList(){\n        Node head = new Node();\n        Node next = head;\n        Random random = new Random();\n        int rand = random.nextInt(100);\n        Node r = null;\n        for (int i = 0; i < 100; i++) {\n            next.next = new Node(random.nextInt(50));\n            next = next.next;\n            if (i == rand) {\n                r = next;\n            }\n        }\n        next.next = r;\n        System.out.println(\"环入口：\"+r);\n        System.out.println(\"环入口数据：\"+r.data);\n        return head;\n    }\n~~~\n\n## 使用辅助空间的解法\n\n使用辅助空间存储节点地址，如果有重复的，则第一次出现重复的即为环的入口\n环长度为重复元素出现位置的差\n\n时间复杂度为 O(n)\n空间复杂度也为 O(n)\n\n代码实现：\n~~~java\n    /**\n     * 判断一个链表是否有环，并返回环的入口\n     * 使用 List集合 存储节点，第一次出现重复节点即为环的入口\n     */\n    public static Node findLoopPort1(Node head) {\n        Node next = head.next;\n        List<Node> list = new ArrayList<Node>();\n        while (null != next) {\n            for (int i = 0; i < list.size(); i++) {\n                if (list.get(i) == next) {\n                    System.out.println(\"环的长度：\" + (list.size() - i));\n                    return next;\n                }\n            }\n            list.add(next);\n            next = next.next;\n        }\n        return null;\n    }\n~~~\n\n## 使用快慢指针的解法\n\n设置快慢指针，慢指针每次走一步，快指针每次走两步。\n有两个结论：\n1. 如果链表有环，则他们一定会在环中相遇\n2. 相遇后，让两个指针分别从表头和相遇点出发，每次走一步，最后一定会在环入口相遇\n\n证明1：\n首先快指针比慢指针走得快，所以当慢指针进入环中时，快指针一定在环中。\n这时，相当于快指针在追慢指针。在慢指针走一圈之内一定会追上。\n\n证明2：\n表头到环入口长度为 a\n环入口到相遇点长度为 b\n相遇点到环入口长度为 c\n\n![环](../images/单链表环问题/环.png)\n\n快慢指针都从表头出发，到在相遇点相遇时：\n慢指针路程为 `a + b`\n快指针路程为 `a + (b + c) * k + b` 其中 (b+c) 是环长度，k是环的圈数。k>=1\n快指针路程是慢指针的两倍： `a + (b + c) * k + b = 2 * (a + b)`\n\n化简可以得到 `a = (k - 1)(b + c) + c`\n他的意思是：表头到环入口的距离 = 相遇点到环入口的距离 + (k - 1)圈环长度\n所以两指针分别从表头和相遇点出发，最后会在环入口相遇。\n\n环长度可以让一指针从相遇点出发，另一指针在原地等。第一次相遇所走过的长度即为环长度\n\n时间复杂度为 O(n)\n空间复杂度为 O(1)\n\n代码实现：\n~~~java\n    /**\n     * 判断一个链表是否有环，并返回环的入口\n     * 使用快慢指针实现\n     */\n    public static Node findLoopPort2(Node head) {\n        Node p1 = head.next;\n        Node p2 = head.next;\n        while (p1.next != null && p2.next != null) {\n            p1 = p1.next;\n            p2 = p2.next.next;\n            // 有环，会在环中某节点相遇\n            if (p1 == p2) {\n                break;\n            }\n        }\n        // 无环 返回null\n        if (p1.next == null || p2.next.next == null) {\n            return null;\n        }\n        // 有环，计算环长度\n        int count = 1;\n        p1 = p1.next;\n        while (p1 != p2) {\n            p1 = p1.next;\n            count++;\n        }\n        // 有环，两指针分别从起点和相遇点触发，最后会在环入口相遇\n        p1 = head.next;\n        while (p1 != p2) {\n            p1 = p1.next;\n            p2 = p2.next;\n        }\n        System.out.println(\"环的长度：\" + count);\n        return p1;\n    }\n~~~\n\n参考：\n[链表中环的入口节点](https://zhuanlan.zhihu.com/p/103626709) 膜拜大佬！","source":"_posts/单链表环问题.md","raw":"---\ntitle: 单链表环问题\ndate: 2022-09-16 13:30:48\ntags:\n- java\n- 算法\n- 链表\n- 环\ncategories:\n- 算法练习\n---\n\n## 题目和前置\n\n给出一个单链表，判断是否有环。如果有环，则返回环入口和环长度。\n\n单链表节点结构\n~~~java\npackage LinkedList;\n\npublic class Node {\n    public Integer data;\n    public Node next;\n\n    public Node() {\n        this.data = null;\n        this.next = null;\n    }\n\n    public Node(int value) {\n        this.data = value;\n        this.next = null;\n    }\n}\n~~~\n\n随机环链表的对数器\n~~~java\n    /**\n     * 生成环链表（入口随机）\n     * @return 返回链表头节点\n     */\n    private Node getRingLinkedList(){\n        Node head = new Node();\n        Node next = head;\n        Random random = new Random();\n        int rand = random.nextInt(100);\n        Node r = null;\n        for (int i = 0; i < 100; i++) {\n            next.next = new Node(random.nextInt(50));\n            next = next.next;\n            if (i == rand) {\n                r = next;\n            }\n        }\n        next.next = r;\n        System.out.println(\"环入口：\"+r);\n        System.out.println(\"环入口数据：\"+r.data);\n        return head;\n    }\n~~~\n\n## 使用辅助空间的解法\n\n使用辅助空间存储节点地址，如果有重复的，则第一次出现重复的即为环的入口\n环长度为重复元素出现位置的差\n\n时间复杂度为 O(n)\n空间复杂度也为 O(n)\n\n代码实现：\n~~~java\n    /**\n     * 判断一个链表是否有环，并返回环的入口\n     * 使用 List集合 存储节点，第一次出现重复节点即为环的入口\n     */\n    public static Node findLoopPort1(Node head) {\n        Node next = head.next;\n        List<Node> list = new ArrayList<Node>();\n        while (null != next) {\n            for (int i = 0; i < list.size(); i++) {\n                if (list.get(i) == next) {\n                    System.out.println(\"环的长度：\" + (list.size() - i));\n                    return next;\n                }\n            }\n            list.add(next);\n            next = next.next;\n        }\n        return null;\n    }\n~~~\n\n## 使用快慢指针的解法\n\n设置快慢指针，慢指针每次走一步，快指针每次走两步。\n有两个结论：\n1. 如果链表有环，则他们一定会在环中相遇\n2. 相遇后，让两个指针分别从表头和相遇点出发，每次走一步，最后一定会在环入口相遇\n\n证明1：\n首先快指针比慢指针走得快，所以当慢指针进入环中时，快指针一定在环中。\n这时，相当于快指针在追慢指针。在慢指针走一圈之内一定会追上。\n\n证明2：\n表头到环入口长度为 a\n环入口到相遇点长度为 b\n相遇点到环入口长度为 c\n\n![环](../images/单链表环问题/环.png)\n\n快慢指针都从表头出发，到在相遇点相遇时：\n慢指针路程为 `a + b`\n快指针路程为 `a + (b + c) * k + b` 其中 (b+c) 是环长度，k是环的圈数。k>=1\n快指针路程是慢指针的两倍： `a + (b + c) * k + b = 2 * (a + b)`\n\n化简可以得到 `a = (k - 1)(b + c) + c`\n他的意思是：表头到环入口的距离 = 相遇点到环入口的距离 + (k - 1)圈环长度\n所以两指针分别从表头和相遇点出发，最后会在环入口相遇。\n\n环长度可以让一指针从相遇点出发，另一指针在原地等。第一次相遇所走过的长度即为环长度\n\n时间复杂度为 O(n)\n空间复杂度为 O(1)\n\n代码实现：\n~~~java\n    /**\n     * 判断一个链表是否有环，并返回环的入口\n     * 使用快慢指针实现\n     */\n    public static Node findLoopPort2(Node head) {\n        Node p1 = head.next;\n        Node p2 = head.next;\n        while (p1.next != null && p2.next != null) {\n            p1 = p1.next;\n            p2 = p2.next.next;\n            // 有环，会在环中某节点相遇\n            if (p1 == p2) {\n                break;\n            }\n        }\n        // 无环 返回null\n        if (p1.next == null || p2.next.next == null) {\n            return null;\n        }\n        // 有环，计算环长度\n        int count = 1;\n        p1 = p1.next;\n        while (p1 != p2) {\n            p1 = p1.next;\n            count++;\n        }\n        // 有环，两指针分别从起点和相遇点触发，最后会在环入口相遇\n        p1 = head.next;\n        while (p1 != p2) {\n            p1 = p1.next;\n            p2 = p2.next;\n        }\n        System.out.println(\"环的长度：\" + count);\n        return p1;\n    }\n~~~\n\n参考：\n[链表中环的入口节点](https://zhuanlan.zhihu.com/p/103626709) 膜拜大佬！","slug":"单链表环问题","published":1,"updated":"2022-09-18T12:41:56.945Z","_id":"cl841lfpi000ag0tte7zmdyaf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"题目和前置\"><a href=\"#题目和前置\" class=\"headerlink\" title=\"题目和前置\"></a>题目和前置</h2><p>给出一个单链表，判断是否有环。如果有环，则返回环入口和环长度。</p>\n<p>单链表节点结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer data;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>随机环链表的对数器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 生成环链表（入口随机）</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 返回链表头节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">getRingLinkedList</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">    <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rand</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        next.next = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(random.nextInt(<span class=\"number\">50</span>));</span><br><span class=\"line\">        next = next.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == rand) &#123;</span><br><span class=\"line\">            r = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next.next = r;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环入口：&quot;</span>+r);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环入口数据：&quot;</span>+r.data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用辅助空间的解法\"><a href=\"#使用辅助空间的解法\" class=\"headerlink\" title=\"使用辅助空间的解法\"></a>使用辅助空间的解法</h2><p>使用辅助空间存储节点地址，如果有重复的，则第一次出现重复的即为环的入口<br>环长度为重复元素出现位置的差</p>\n<p>时间复杂度为 O(n)<br>空间复杂度也为 O(n)</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断一个链表是否有环，并返回环的入口</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用 List集合 存储节点，第一次出现重复节点即为环的入口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title function_\">findLoopPort1</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">    List&lt;Node&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Node&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> != next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list.get(i) == next) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;环的长度：&quot;</span> + (list.size() - i));</span><br><span class=\"line\">                <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(next);</span><br><span class=\"line\">        next = next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用快慢指针的解法\"><a href=\"#使用快慢指针的解法\" class=\"headerlink\" title=\"使用快慢指针的解法\"></a>使用快慢指针的解法</h2><p>设置快慢指针，慢指针每次走一步，快指针每次走两步。<br>有两个结论：</p>\n<ol>\n<li>如果链表有环，则他们一定会在环中相遇</li>\n<li>相遇后，让两个指针分别从表头和相遇点出发，每次走一步，最后一定会在环入口相遇</li>\n</ol>\n<p>证明1：<br>首先快指针比慢指针走得快，所以当慢指针进入环中时，快指针一定在环中。<br>这时，相当于快指针在追慢指针。在慢指针走一圈之内一定会追上。</p>\n<p>证明2：<br>表头到环入口长度为 a<br>环入口到相遇点长度为 b<br>相遇点到环入口长度为 c</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%8E%AF%E9%97%AE%E9%A2%98/%E7%8E%AF.png\"\n                      alt=\"环\"\n                ></p>\n<p>快慢指针都从表头出发，到在相遇点相遇时：<br>慢指针路程为 <code>a + b</code><br>快指针路程为 <code>a + (b + c) * k + b</code> 其中 (b+c) 是环长度，k是环的圈数。k&gt;=1<br>快指针路程是慢指针的两倍： <code>a + (b + c) * k + b = 2 * (a + b)</code></p>\n<p>化简可以得到 <code>a = (k - 1)(b + c) + c</code><br>他的意思是：表头到环入口的距离 = 相遇点到环入口的距离 + (k - 1)圈环长度<br>所以两指针分别从表头和相遇点出发，最后会在环入口相遇。</p>\n<p>环长度可以让一指针从相遇点出发，另一指针在原地等。第一次相遇所走过的长度即为环长度</p>\n<p>时间复杂度为 O(n)<br>空间复杂度为 O(1)</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断一个链表是否有环，并返回环的入口</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用快慢指针实现</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title function_\">findLoopPort2</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1.next != <span class=\"literal\">null</span> &amp;&amp; p2.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p1 = p1.next;</span><br><span class=\"line\">        p2 = p2.next.next;</span><br><span class=\"line\">        <span class=\"comment\">// 有环，会在环中某节点相遇</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p1 == p2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 无环 返回null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p1.next == <span class=\"literal\">null</span> || p2.next.next == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 有环，计算环长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    p1 = p1.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1 != p2) &#123;</span><br><span class=\"line\">        p1 = p1.next;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 有环，两指针分别从起点和相遇点触发，最后会在环入口相遇</span></span><br><span class=\"line\">    p1 = head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1 != p2) &#123;</span><br><span class=\"line\">        p1 = p1.next;</span><br><span class=\"line\">        p2 = p2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环的长度：&quot;</span> + count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/103626709\" >链表中环的入口节点<i class=\"fas fa-external-link-alt\"></i></a> 膜拜大佬！</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"题目和前置\"><a href=\"#题目和前置\" class=\"headerlink\" title=\"题目和前置\"></a>题目和前置</h2><p>给出一个单链表，判断是否有环。如果有环，则返回环入口和环长度。</p>\n<p>单链表节点结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer data;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(<span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = value;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>随机环链表的对数器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 生成环链表（入口随机）</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 返回链表头节点</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">getRingLinkedList</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">    <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rand</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        next.next = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(random.nextInt(<span class=\"number\">50</span>));</span><br><span class=\"line\">        next = next.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == rand) &#123;</span><br><span class=\"line\">            r = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next.next = r;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环入口：&quot;</span>+r);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环入口数据：&quot;</span>+r.data);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用辅助空间的解法\"><a href=\"#使用辅助空间的解法\" class=\"headerlink\" title=\"使用辅助空间的解法\"></a>使用辅助空间的解法</h2><p>使用辅助空间存储节点地址，如果有重复的，则第一次出现重复的即为环的入口<br>环长度为重复元素出现位置的差</p>\n<p>时间复杂度为 O(n)<br>空间复杂度也为 O(n)</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断一个链表是否有环，并返回环的入口</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用 List集合 存储节点，第一次出现重复节点即为环的入口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title function_\">findLoopPort1</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">    List&lt;Node&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Node&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">null</span> != next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (list.get(i) == next) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;环的长度：&quot;</span> + (list.size() - i));</span><br><span class=\"line\">                <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(next);</span><br><span class=\"line\">        next = next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用快慢指针的解法\"><a href=\"#使用快慢指针的解法\" class=\"headerlink\" title=\"使用快慢指针的解法\"></a>使用快慢指针的解法</h2><p>设置快慢指针，慢指针每次走一步，快指针每次走两步。<br>有两个结论：</p>\n<ol>\n<li>如果链表有环，则他们一定会在环中相遇</li>\n<li>相遇后，让两个指针分别从表头和相遇点出发，每次走一步，最后一定会在环入口相遇</li>\n</ol>\n<p>证明1：<br>首先快指针比慢指针走得快，所以当慢指针进入环中时，快指针一定在环中。<br>这时，相当于快指针在追慢指针。在慢指针走一圈之内一定会追上。</p>\n<p>证明2：<br>表头到环入口长度为 a<br>环入口到相遇点长度为 b<br>相遇点到环入口长度为 c</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%8E%AF%E9%97%AE%E9%A2%98/%E7%8E%AF.png\"\n                      alt=\"环\"\n                ></p>\n<p>快慢指针都从表头出发，到在相遇点相遇时：<br>慢指针路程为 <code>a + b</code><br>快指针路程为 <code>a + (b + c) * k + b</code> 其中 (b+c) 是环长度，k是环的圈数。k&gt;=1<br>快指针路程是慢指针的两倍： <code>a + (b + c) * k + b = 2 * (a + b)</code></p>\n<p>化简可以得到 <code>a = (k - 1)(b + c) + c</code><br>他的意思是：表头到环入口的距离 = 相遇点到环入口的距离 + (k - 1)圈环长度<br>所以两指针分别从表头和相遇点出发，最后会在环入口相遇。</p>\n<p>环长度可以让一指针从相遇点出发，另一指针在原地等。第一次相遇所走过的长度即为环长度</p>\n<p>时间复杂度为 O(n)<br>空间复杂度为 O(1)</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断一个链表是否有环，并返回环的入口</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用快慢指针实现</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title function_\">findLoopPort2</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1.next != <span class=\"literal\">null</span> &amp;&amp; p2.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        p1 = p1.next;</span><br><span class=\"line\">        p2 = p2.next.next;</span><br><span class=\"line\">        <span class=\"comment\">// 有环，会在环中某节点相遇</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p1 == p2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 无环 返回null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p1.next == <span class=\"literal\">null</span> || p2.next.next == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 有环，计算环长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    p1 = p1.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1 != p2) &#123;</span><br><span class=\"line\">        p1 = p1.next;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 有环，两指针分别从起点和相遇点触发，最后会在环入口相遇</span></span><br><span class=\"line\">    p1 = head.next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p1 != p2) &#123;</span><br><span class=\"line\">        p1 = p1.next;</span><br><span class=\"line\">        p2 = p2.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环的长度：&quot;</span> + count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/103626709\" >链表中环的入口节点<i class=\"fas fa-external-link-alt\"></i></a> 膜拜大佬！</p>\n"},{"title":"布隆过滤器","date":"2022-09-24T12:03:32.000Z","_content":"\n## 介绍\n\n布隆过滤器（Bloom Filter）是1970年由布隆提出的。\n它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于**检索一个元素是否在一个集合中**。\n它类似一个hash set，用来判断某个元素（key）是否在某个集合中。但和一般的hash set不同的是，这个算法无需存储key的值，对于每个key，只需要k个比特位，每个存储一个标志，用来判断key是否在集合中。\n它的优点是空间效率和查询时间都比一般的算法要好的多。\n缺点是有一定的误识别率、无法获取元素本身和删除困难。\n\n他的使用场景：\n布隆过滤器可以告诉我们“某个东西一定不存在或可能存在”。即布隆过滤器说不存在即一定不存在，说存在可能不存在（误判）\n1. 邮件过滤，使用布隆过滤器来做邮件黑名单过滤\n2. 对爬虫网址进行过滤，爬过的不再爬\n3. 解决新闻推荐过的不再推荐\n总的来说，即用于**黑名单过滤**\n\n## 原理\n\n### 哈希函数\n\n哈希函数的概念是：将任意大小的输入数据转换成特定大小的输出数据的函数，转换后的数据称为哈希值或哈希编码，也叫散列值。\n所有散列函数都有如下基本特性：\n1. 如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为**单向散列函数**。\n2. 散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“**散列碰撞**（collision，哈希碰撞）”。\n但是用 hash表存储大数据量时，空间效率还是很低，当只有一个 hash 函数时，还很容易发生哈希碰撞。\n\n### 布隆过滤器数据结构\n\n布隆过滤器由一个固定大小的二进制向量或位图（bitmap）和一系列映射函数组成。\n在初始状态下，对于长度为m的位数组，他所有位置都被置为0。\n如下图：\n![布隆过滤器初始状态](../images/布隆过滤器/布隆过滤器初始状态.png)\n\n当有元素被加入集合时，通过k个映射函数将这个元素映射成位图中的k个点，将它们的值置为1。\n假如有两个元素通过三个映射函数，如下图：\n![布隆过滤器示例](../images/布隆过滤器/布隆过滤器示例.png)\n\n当查询某个元素是都存在时，只要通过k个映射函数，看对应位图中的k个点的值是否都为1。\n1. 如果这些点有任意一个为0，则元素一定不存在。\n2. 如果都是1，则元素**可能存在**。\n为什么是可能存在，不是一定存在。是因为映射函数本身是散列函数，散列函数会有碰撞（即使碰撞概率可以很低）。\n\n### 误判率\n\n布隆过滤器的误判是指多个输入经过哈希之后在相同的bit位 置1 了，这样就无法判断究竟是哪个输入产生的，因此误判的根源在于相同的bit位被多次映射且置1。\n这种情况也造成了布隆过滤器的删除问题，因为布隆过滤器的每一个bit并不是独占的，很有可能多个元素共享了某一位。如果我们直接删除这一位的话，会影响其他的元素。（比如上图中的第3位）\n\n**布隆过滤器可以添加元素，但不能删除元素。**因为删除元素会导致误判率的增加。\n\n关于误判率的计算（略）\n参考[布隆过滤器概念及其公式推导 转载](https://www.cnblogs.com/D-Rui/articles/12848869.html#:~:text=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BF%98%E6%8B%A5%E6%9C%89k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0,%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%8A%A0%E5%85%A5%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E4%BD%BF%E7%94%A8k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8Ck%E6%AC%A1%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%BE%97%E5%88%B0k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%A0%B9%E6%8D%AE%E5%BE%97%E5%88%B0%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%9C%A8%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8A%8A%E5%AF%B9%E5%BA%94%E4%B8%8B%E6%A0%87%E7%9A%84%E5%80%BC%E7%BD%AE%E4%BD%8D1%E3%80%82)\n其中可以根据 样本量和期望的失误率 得出具体需要 多少存储空间和哈希函数的个数\n布隆过滤器只与样本量和失误率有关，与单样本大小无关（因为它会经过哈希函数）\n\n## 布隆过滤器的实现\n\n### coding\n\n~~~java\npackage BloomFilter;\n\nimport java.util.BitSet;\n\n/**\n * 布隆过滤器\n */\npublic class BloomFilter {\n    // 长度为10亿的比特位\n    private static final int DEFAULT_SIZE = 256 << 22;\n    // 使用的哈希函数（8个）\n    private static final int[] seeds = {3, 5, 7, 11, 13, 17, 19, 23};\n    private static final HashFunction[] functions = new HashFunction[seeds.length];\n    // 初始化布隆过滤器\n    private static BitSet bitSet = new BitSet(DEFAULT_SIZE);\n\n    /**\n     * 构造函数，初始化哈希函数\n     */\n    public BloomFilter() {\n        for (int i = 0; i < seeds.length; i++) {\n            functions[i] = new HashFunction(DEFAULT_SIZE,seeds[i]);\n        }\n    }\n\n    /**\n     * 添加元素\n     */\n    public void add(String value){\n        if (value!=null){\n            for(HashFunction f : functions){\n                bitSet.set(f.hash(value),true);\n            }\n        }\n    }\n\n    /**\n     * 判断元素是否存在\n     */\n    public boolean contains(String value){\n        if (value==null){\n            return false;\n        }\n        boolean result = true;\n        // 遍历所有哈希结果对应比特位，有一个返回false即break（不存在）\n        for(HashFunction f :functions){\n            result = bitSet.get(f.hash(value));\n            if (!result){\n                break;\n            }\n        }\n        return result;\n    }\n}\n\n/**\n * 哈希函数\n */\nclass HashFunction {\n\n    private final int size;\n    private final int seed;\n\n    public HashFunction(int size, int seed) {\n        this.size = size;\n        this.seed = seed;\n    }\n\n    /**\n     * 使用加法哈希算法\n     */\n    public int hash(String value) {\n        int result = 0;\n        int len = value.length();\n        for (int i = 0; i < len; i++) {\n            result = seed * result + value.charAt(i);\n        }\n        return (size - 1) & result;\n    }\n}\n~~~\n\n测试：\n~~~java\nimport BloomFilter.BloomFilter;\nimport org.junit.Test;\n\npublic class BloomFilterTest {\n    @Test\n    public void bloomFilter() {\n        BloomFilter bloomFilter = new BloomFilter();\n        for (int i = 0; i < 100000; i++) {\n            bloomFilter.add(String.valueOf(i));\n        }\n        System.out.println(bloomFilter.contains(\"1\"));\n        System.out.println(bloomFilter.contains(\"2\"));\n        System.out.println(bloomFilter.contains(\"3\"));\n        System.out.println(bloomFilter.contains(\"100001\"));\n    }\n}\n~~~\n\n运行结果：\n~~~text\ntrue\ntrue\ntrue\nfalse\n\n~~~\n\n### Guava 中的 BloomFilter\n\n依赖：\n~~~xml\n<dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>31.0.1-jre</version>\n</dependency>\n~~~\n\n使用：\n~~~java\n    @Test\n    public void test() {\n    \n        BloomFilter<Integer> bloomFilter = BloomFilter.create(Funnels.integerFunnel(), 100000, 0.0001);\n        for (int i = 0; i < 100000; i++) {\n            bloomFilter.put(i);\n        }\n        System.out.println(bloomFilter.mightContain(1));\n        System.out.println(bloomFilter.mightContain(2));\n        System.out.println(bloomFilter.mightContain(3));\n        System.out.println(bloomFilter.mightContain(100001));\n    }\n~~~\n\n运行结果：\n~~~text\ntrue\ntrue\ntrue\nfalse\n\n~~~\n\n## 总结\n\n关于哈希函数有空再仔细研究研究（咕咕咕）\n\n参考文章：\n[布隆过滤器(Bloom Filter)详解](https://www.cnblogs.com/liyulong1982/p/6013002.html)\n[十分钟理解布隆过滤器](https://www.cnblogs.com/caicz/p/16710090.html)\n[布隆过滤器，这一篇给你讲的明明白白](https://developer.aliyun.com/article/773205)\n[布隆过滤器概念及其公式推导 转载](https://www.cnblogs.com/D-Rui/articles/12848869.html#:~:text=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BF%98%E6%8B%A5%E6%9C%89k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0,%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%8A%A0%E5%85%A5%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E4%BD%BF%E7%94%A8k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8Ck%E6%AC%A1%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%BE%97%E5%88%B0k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%A0%B9%E6%8D%AE%E5%BE%97%E5%88%B0%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%9C%A8%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8A%8A%E5%AF%B9%E5%BA%94%E4%B8%8B%E6%A0%87%E7%9A%84%E5%80%BC%E7%BD%AE%E4%BD%8D1%E3%80%82)","source":"_posts/布隆过滤器.md","raw":"---\ntitle: 布隆过滤器\ndate: 2022-09-24 20:03:32\ntags:\n- 数据结构\n- 哈希\n- 过滤 \ncategories:\n- 算法练习\n---\n\n## 介绍\n\n布隆过滤器（Bloom Filter）是1970年由布隆提出的。\n它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于**检索一个元素是否在一个集合中**。\n它类似一个hash set，用来判断某个元素（key）是否在某个集合中。但和一般的hash set不同的是，这个算法无需存储key的值，对于每个key，只需要k个比特位，每个存储一个标志，用来判断key是否在集合中。\n它的优点是空间效率和查询时间都比一般的算法要好的多。\n缺点是有一定的误识别率、无法获取元素本身和删除困难。\n\n他的使用场景：\n布隆过滤器可以告诉我们“某个东西一定不存在或可能存在”。即布隆过滤器说不存在即一定不存在，说存在可能不存在（误判）\n1. 邮件过滤，使用布隆过滤器来做邮件黑名单过滤\n2. 对爬虫网址进行过滤，爬过的不再爬\n3. 解决新闻推荐过的不再推荐\n总的来说，即用于**黑名单过滤**\n\n## 原理\n\n### 哈希函数\n\n哈希函数的概念是：将任意大小的输入数据转换成特定大小的输出数据的函数，转换后的数据称为哈希值或哈希编码，也叫散列值。\n所有散列函数都有如下基本特性：\n1. 如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为**单向散列函数**。\n2. 散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“**散列碰撞**（collision，哈希碰撞）”。\n但是用 hash表存储大数据量时，空间效率还是很低，当只有一个 hash 函数时，还很容易发生哈希碰撞。\n\n### 布隆过滤器数据结构\n\n布隆过滤器由一个固定大小的二进制向量或位图（bitmap）和一系列映射函数组成。\n在初始状态下，对于长度为m的位数组，他所有位置都被置为0。\n如下图：\n![布隆过滤器初始状态](../images/布隆过滤器/布隆过滤器初始状态.png)\n\n当有元素被加入集合时，通过k个映射函数将这个元素映射成位图中的k个点，将它们的值置为1。\n假如有两个元素通过三个映射函数，如下图：\n![布隆过滤器示例](../images/布隆过滤器/布隆过滤器示例.png)\n\n当查询某个元素是都存在时，只要通过k个映射函数，看对应位图中的k个点的值是否都为1。\n1. 如果这些点有任意一个为0，则元素一定不存在。\n2. 如果都是1，则元素**可能存在**。\n为什么是可能存在，不是一定存在。是因为映射函数本身是散列函数，散列函数会有碰撞（即使碰撞概率可以很低）。\n\n### 误判率\n\n布隆过滤器的误判是指多个输入经过哈希之后在相同的bit位 置1 了，这样就无法判断究竟是哪个输入产生的，因此误判的根源在于相同的bit位被多次映射且置1。\n这种情况也造成了布隆过滤器的删除问题，因为布隆过滤器的每一个bit并不是独占的，很有可能多个元素共享了某一位。如果我们直接删除这一位的话，会影响其他的元素。（比如上图中的第3位）\n\n**布隆过滤器可以添加元素，但不能删除元素。**因为删除元素会导致误判率的增加。\n\n关于误判率的计算（略）\n参考[布隆过滤器概念及其公式推导 转载](https://www.cnblogs.com/D-Rui/articles/12848869.html#:~:text=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BF%98%E6%8B%A5%E6%9C%89k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0,%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%8A%A0%E5%85%A5%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E4%BD%BF%E7%94%A8k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8Ck%E6%AC%A1%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%BE%97%E5%88%B0k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%A0%B9%E6%8D%AE%E5%BE%97%E5%88%B0%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%9C%A8%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8A%8A%E5%AF%B9%E5%BA%94%E4%B8%8B%E6%A0%87%E7%9A%84%E5%80%BC%E7%BD%AE%E4%BD%8D1%E3%80%82)\n其中可以根据 样本量和期望的失误率 得出具体需要 多少存储空间和哈希函数的个数\n布隆过滤器只与样本量和失误率有关，与单样本大小无关（因为它会经过哈希函数）\n\n## 布隆过滤器的实现\n\n### coding\n\n~~~java\npackage BloomFilter;\n\nimport java.util.BitSet;\n\n/**\n * 布隆过滤器\n */\npublic class BloomFilter {\n    // 长度为10亿的比特位\n    private static final int DEFAULT_SIZE = 256 << 22;\n    // 使用的哈希函数（8个）\n    private static final int[] seeds = {3, 5, 7, 11, 13, 17, 19, 23};\n    private static final HashFunction[] functions = new HashFunction[seeds.length];\n    // 初始化布隆过滤器\n    private static BitSet bitSet = new BitSet(DEFAULT_SIZE);\n\n    /**\n     * 构造函数，初始化哈希函数\n     */\n    public BloomFilter() {\n        for (int i = 0; i < seeds.length; i++) {\n            functions[i] = new HashFunction(DEFAULT_SIZE,seeds[i]);\n        }\n    }\n\n    /**\n     * 添加元素\n     */\n    public void add(String value){\n        if (value!=null){\n            for(HashFunction f : functions){\n                bitSet.set(f.hash(value),true);\n            }\n        }\n    }\n\n    /**\n     * 判断元素是否存在\n     */\n    public boolean contains(String value){\n        if (value==null){\n            return false;\n        }\n        boolean result = true;\n        // 遍历所有哈希结果对应比特位，有一个返回false即break（不存在）\n        for(HashFunction f :functions){\n            result = bitSet.get(f.hash(value));\n            if (!result){\n                break;\n            }\n        }\n        return result;\n    }\n}\n\n/**\n * 哈希函数\n */\nclass HashFunction {\n\n    private final int size;\n    private final int seed;\n\n    public HashFunction(int size, int seed) {\n        this.size = size;\n        this.seed = seed;\n    }\n\n    /**\n     * 使用加法哈希算法\n     */\n    public int hash(String value) {\n        int result = 0;\n        int len = value.length();\n        for (int i = 0; i < len; i++) {\n            result = seed * result + value.charAt(i);\n        }\n        return (size - 1) & result;\n    }\n}\n~~~\n\n测试：\n~~~java\nimport BloomFilter.BloomFilter;\nimport org.junit.Test;\n\npublic class BloomFilterTest {\n    @Test\n    public void bloomFilter() {\n        BloomFilter bloomFilter = new BloomFilter();\n        for (int i = 0; i < 100000; i++) {\n            bloomFilter.add(String.valueOf(i));\n        }\n        System.out.println(bloomFilter.contains(\"1\"));\n        System.out.println(bloomFilter.contains(\"2\"));\n        System.out.println(bloomFilter.contains(\"3\"));\n        System.out.println(bloomFilter.contains(\"100001\"));\n    }\n}\n~~~\n\n运行结果：\n~~~text\ntrue\ntrue\ntrue\nfalse\n\n~~~\n\n### Guava 中的 BloomFilter\n\n依赖：\n~~~xml\n<dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>31.0.1-jre</version>\n</dependency>\n~~~\n\n使用：\n~~~java\n    @Test\n    public void test() {\n    \n        BloomFilter<Integer> bloomFilter = BloomFilter.create(Funnels.integerFunnel(), 100000, 0.0001);\n        for (int i = 0; i < 100000; i++) {\n            bloomFilter.put(i);\n        }\n        System.out.println(bloomFilter.mightContain(1));\n        System.out.println(bloomFilter.mightContain(2));\n        System.out.println(bloomFilter.mightContain(3));\n        System.out.println(bloomFilter.mightContain(100001));\n    }\n~~~\n\n运行结果：\n~~~text\ntrue\ntrue\ntrue\nfalse\n\n~~~\n\n## 总结\n\n关于哈希函数有空再仔细研究研究（咕咕咕）\n\n参考文章：\n[布隆过滤器(Bloom Filter)详解](https://www.cnblogs.com/liyulong1982/p/6013002.html)\n[十分钟理解布隆过滤器](https://www.cnblogs.com/caicz/p/16710090.html)\n[布隆过滤器，这一篇给你讲的明明白白](https://developer.aliyun.com/article/773205)\n[布隆过滤器概念及其公式推导 转载](https://www.cnblogs.com/D-Rui/articles/12848869.html#:~:text=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BF%98%E6%8B%A5%E6%9C%89k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0,%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%8A%A0%E5%85%A5%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E4%BD%BF%E7%94%A8k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8Ck%E6%AC%A1%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%BE%97%E5%88%B0k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%A0%B9%E6%8D%AE%E5%BE%97%E5%88%B0%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%9C%A8%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8A%8A%E5%AF%B9%E5%BA%94%E4%B8%8B%E6%A0%87%E7%9A%84%E5%80%BC%E7%BD%AE%E4%BD%8D1%E3%80%82)","slug":"布隆过滤器","published":1,"updated":"2022-09-24T15:36:23.500Z","_id":"cl8g01tbs0000qgtt03g2dowg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。<br>它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于<strong>检索一个元素是否在一个集合中</strong>。<br>它类似一个hash set，用来判断某个元素（key）是否在某个集合中。但和一般的hash set不同的是，这个算法无需存储key的值，对于每个key，只需要k个比特位，每个存储一个标志，用来判断key是否在集合中。<br>它的优点是空间效率和查询时间都比一般的算法要好的多。<br>缺点是有一定的误识别率、无法获取元素本身和删除困难。</p>\n<p>他的使用场景：<br>布隆过滤器可以告诉我们“某个东西一定不存在或可能存在”。即布隆过滤器说不存在即一定不存在，说存在可能不存在（误判）</p>\n<ol>\n<li>邮件过滤，使用布隆过滤器来做邮件黑名单过滤</li>\n<li>对爬虫网址进行过滤，爬过的不再爬</li>\n<li>解决新闻推荐过的不再推荐<br>总的来说，即用于<strong>黑名单过滤</strong></li>\n</ol>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"哈希函数\"><a href=\"#哈希函数\" class=\"headerlink\" title=\"哈希函数\"></a>哈希函数</h3><p>哈希函数的概念是：将任意大小的输入数据转换成特定大小的输出数据的函数，转换后的数据称为哈希值或哈希编码，也叫散列值。<br>所有散列函数都有如下基本特性：</p>\n<ol>\n<li>如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为<strong>单向散列函数</strong>。</li>\n<li>散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“<strong>散列碰撞</strong>（collision，哈希碰撞）”。<br>但是用 hash表存储大数据量时，空间效率还是很低，当只有一个 hash 函数时，还很容易发生哈希碰撞。</li>\n</ol>\n<h3 id=\"布隆过滤器数据结构\"><a href=\"#布隆过滤器数据结构\" class=\"headerlink\" title=\"布隆过滤器数据结构\"></a>布隆过滤器数据结构</h3><p>布隆过滤器由一个固定大小的二进制向量或位图（bitmap）和一系列映射函数组成。<br>在初始状态下，对于长度为m的位数组，他所有位置都被置为0。<br>如下图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81.png\"\n                      alt=\"布隆过滤器初始状态\"\n                ></p>\n<p>当有元素被加入集合时，通过k个映射函数将这个元素映射成位图中的k个点，将它们的值置为1。<br>假如有两个元素通过三个映射函数，如下图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%A4%BA%E4%BE%8B.png\"\n                      alt=\"布隆过滤器示例\"\n                ></p>\n<p>当查询某个元素是都存在时，只要通过k个映射函数，看对应位图中的k个点的值是否都为1。</p>\n<ol>\n<li>如果这些点有任意一个为0，则元素一定不存在。</li>\n<li>如果都是1，则元素<strong>可能存在</strong>。<br>为什么是可能存在，不是一定存在。是因为映射函数本身是散列函数，散列函数会有碰撞（即使碰撞概率可以很低）。</li>\n</ol>\n<h3 id=\"误判率\"><a href=\"#误判率\" class=\"headerlink\" title=\"误判率\"></a>误判率</h3><p>布隆过滤器的误判是指多个输入经过哈希之后在相同的bit位 置1 了，这样就无法判断究竟是哪个输入产生的，因此误判的根源在于相同的bit位被多次映射且置1。<br>这种情况也造成了布隆过滤器的删除问题，因为布隆过滤器的每一个bit并不是独占的，很有可能多个元素共享了某一位。如果我们直接删除这一位的话，会影响其他的元素。（比如上图中的第3位）</p>\n<p><strong>布隆过滤器可以添加元素，但不能删除元素。</strong>因为删除元素会导致误判率的增加。</p>\n<p>关于误判率的计算（略）<br>参考<a class=\"link\"   href=\"https://www.cnblogs.com/D-Rui/articles/12848869.html#:~:text=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BF%98%E6%8B%A5%E6%9C%89k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0,%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%8A%A0%E5%85%A5%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E4%BD%BF%E7%94%A8k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8Ck%E6%AC%A1%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%BE%97%E5%88%B0k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%A0%B9%E6%8D%AE%E5%BE%97%E5%88%B0%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%9C%A8%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8A%8A%E5%AF%B9%E5%BA%94%E4%B8%8B%E6%A0%87%E7%9A%84%E5%80%BC%E7%BD%AE%E4%BD%8D1%E3%80%82\" >布隆过滤器概念及其公式推导 转载<i class=\"fas fa-external-link-alt\"></i></a><br>其中可以根据 样本量和期望的失误率 得出具体需要 多少存储空间和哈希函数的个数<br>布隆过滤器只与样本量和失误率有关，与单样本大小无关（因为它会经过哈希函数）</p>\n<h2 id=\"布隆过滤器的实现\"><a href=\"#布隆过滤器的实现\" class=\"headerlink\" title=\"布隆过滤器的实现\"></a>布隆过滤器的实现</h2><h3 id=\"coding\"><a href=\"#coding\" class=\"headerlink\" title=\"coding\"></a>coding</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> BloomFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.BitSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 布隆过滤器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BloomFilter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 长度为10亿的比特位</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">256</span> &lt;&lt; <span class=\"number\">22</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用的哈希函数（8个）</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] seeds = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">23</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> HashFunction[] functions = <span class=\"keyword\">new</span> <span class=\"title class_\">HashFunction</span>[seeds.length];</span><br><span class=\"line\">    <span class=\"comment\">// 初始化布隆过滤器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">BitSet</span> <span class=\"variable\">bitSet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BitSet</span>(DEFAULT_SIZE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数，初始化哈希函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BloomFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; seeds.length; i++) &#123;</span><br><span class=\"line\">            functions[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">HashFunction</span>(DEFAULT_SIZE,seeds[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String value)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(HashFunction f : functions)&#123;</span><br><span class=\"line\">                bitSet.set(f.hash(value),<span class=\"literal\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断元素是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">contains</span><span class=\"params\">(String value)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历所有哈希结果对应比特位，有一个返回false即break（不存在）</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(HashFunction f :functions)&#123;</span><br><span class=\"line\">            result = bitSet.get(f.hash(value));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!result)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 哈希函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HashFunction</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> seed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HashFunction</span><span class=\"params\">(<span class=\"type\">int</span> size, <span class=\"type\">int</span> seed)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seed = seed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用加法哈希算法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hash</span><span class=\"params\">(String value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> value.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            result = seed * result + value.charAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (size - <span class=\"number\">1</span>) &amp; result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> BloomFilter.BloomFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BloomFilterTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bloomFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BloomFilter</span> <span class=\"variable\">bloomFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BloomFilter</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">            bloomFilter.add(String.valueOf(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">&quot;1&quot;</span>));</span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">&quot;2&quot;</span>));</span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">&quot;3&quot;</span>));</span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">&quot;100001&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Guava-中的-BloomFilter\"><a href=\"#Guava-中的-BloomFilter\" class=\"headerlink\" title=\"Guava 中的 BloomFilter\"></a>Guava 中的 BloomFilter</h3><p>依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>31.0.1-jre<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), <span class=\"number\">100000</span>, <span class=\"number\">0.0001</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">        bloomFilter.put(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(bloomFilter.mightContain(<span class=\"number\">1</span>));</span><br><span class=\"line\">    System.out.println(bloomFilter.mightContain(<span class=\"number\">2</span>));</span><br><span class=\"line\">    System.out.println(bloomFilter.mightContain(<span class=\"number\">3</span>));</span><br><span class=\"line\">    System.out.println(bloomFilter.mightContain(<span class=\"number\">100001</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>关于哈希函数有空再仔细研究研究（咕咕咕）</p>\n<p>参考文章：<br><a class=\"link\"   href=\"https://www.cnblogs.com/liyulong1982/p/6013002.html\" >布隆过滤器(Bloom Filter)详解<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.cnblogs.com/caicz/p/16710090.html\" >十分钟理解布隆过滤器<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://developer.aliyun.com/article/773205\" >布隆过滤器，这一篇给你讲的明明白白<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.cnblogs.com/D-Rui/articles/12848869.html#:~:text=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BF%98%E6%8B%A5%E6%9C%89k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0,%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%8A%A0%E5%85%A5%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E4%BD%BF%E7%94%A8k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8Ck%E6%AC%A1%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%BE%97%E5%88%B0k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%A0%B9%E6%8D%AE%E5%BE%97%E5%88%B0%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%9C%A8%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8A%8A%E5%AF%B9%E5%BA%94%E4%B8%8B%E6%A0%87%E7%9A%84%E5%80%BC%E7%BD%AE%E4%BD%8D1%E3%80%82\" >布隆过滤器概念及其公式推导 转载<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。<br>它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于<strong>检索一个元素是否在一个集合中</strong>。<br>它类似一个hash set，用来判断某个元素（key）是否在某个集合中。但和一般的hash set不同的是，这个算法无需存储key的值，对于每个key，只需要k个比特位，每个存储一个标志，用来判断key是否在集合中。<br>它的优点是空间效率和查询时间都比一般的算法要好的多。<br>缺点是有一定的误识别率、无法获取元素本身和删除困难。</p>\n<p>他的使用场景：<br>布隆过滤器可以告诉我们“某个东西一定不存在或可能存在”。即布隆过滤器说不存在即一定不存在，说存在可能不存在（误判）</p>\n<ol>\n<li>邮件过滤，使用布隆过滤器来做邮件黑名单过滤</li>\n<li>对爬虫网址进行过滤，爬过的不再爬</li>\n<li>解决新闻推荐过的不再推荐<br>总的来说，即用于<strong>黑名单过滤</strong></li>\n</ol>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"哈希函数\"><a href=\"#哈希函数\" class=\"headerlink\" title=\"哈希函数\"></a>哈希函数</h3><p>哈希函数的概念是：将任意大小的输入数据转换成特定大小的输出数据的函数，转换后的数据称为哈希值或哈希编码，也叫散列值。<br>所有散列函数都有如下基本特性：</p>\n<ol>\n<li>如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。这个特性是散列函数具有确定性的结果，具有这种性质的散列函数称为<strong>单向散列函数</strong>。</li>\n<li>散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“<strong>散列碰撞</strong>（collision，哈希碰撞）”。<br>但是用 hash表存储大数据量时，空间效率还是很低，当只有一个 hash 函数时，还很容易发生哈希碰撞。</li>\n</ol>\n<h3 id=\"布隆过滤器数据结构\"><a href=\"#布隆过滤器数据结构\" class=\"headerlink\" title=\"布隆过滤器数据结构\"></a>布隆过滤器数据结构</h3><p>布隆过滤器由一个固定大小的二进制向量或位图（bitmap）和一系列映射函数组成。<br>在初始状态下，对于长度为m的位数组，他所有位置都被置为0。<br>如下图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81.png\"\n                      alt=\"布隆过滤器初始状态\"\n                ></p>\n<p>当有元素被加入集合时，通过k个映射函数将这个元素映射成位图中的k个点，将它们的值置为1。<br>假如有两个元素通过三个映射函数，如下图：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E7%A4%BA%E4%BE%8B.png\"\n                      alt=\"布隆过滤器示例\"\n                ></p>\n<p>当查询某个元素是都存在时，只要通过k个映射函数，看对应位图中的k个点的值是否都为1。</p>\n<ol>\n<li>如果这些点有任意一个为0，则元素一定不存在。</li>\n<li>如果都是1，则元素<strong>可能存在</strong>。<br>为什么是可能存在，不是一定存在。是因为映射函数本身是散列函数，散列函数会有碰撞（即使碰撞概率可以很低）。</li>\n</ol>\n<h3 id=\"误判率\"><a href=\"#误判率\" class=\"headerlink\" title=\"误判率\"></a>误判率</h3><p>布隆过滤器的误判是指多个输入经过哈希之后在相同的bit位 置1 了，这样就无法判断究竟是哪个输入产生的，因此误判的根源在于相同的bit位被多次映射且置1。<br>这种情况也造成了布隆过滤器的删除问题，因为布隆过滤器的每一个bit并不是独占的，很有可能多个元素共享了某一位。如果我们直接删除这一位的话，会影响其他的元素。（比如上图中的第3位）</p>\n<p><strong>布隆过滤器可以添加元素，但不能删除元素。</strong>因为删除元素会导致误判率的增加。</p>\n<p>关于误判率的计算（略）<br>参考<a class=\"link\"   href=\"https://www.cnblogs.com/D-Rui/articles/12848869.html#:~:text=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BF%98%E6%8B%A5%E6%9C%89k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0,%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%8A%A0%E5%85%A5%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E4%BD%BF%E7%94%A8k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8Ck%E6%AC%A1%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%BE%97%E5%88%B0k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%A0%B9%E6%8D%AE%E5%BE%97%E5%88%B0%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%9C%A8%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8A%8A%E5%AF%B9%E5%BA%94%E4%B8%8B%E6%A0%87%E7%9A%84%E5%80%BC%E7%BD%AE%E4%BD%8D1%E3%80%82\" >布隆过滤器概念及其公式推导 转载<i class=\"fas fa-external-link-alt\"></i></a><br>其中可以根据 样本量和期望的失误率 得出具体需要 多少存储空间和哈希函数的个数<br>布隆过滤器只与样本量和失误率有关，与单样本大小无关（因为它会经过哈希函数）</p>\n<h2 id=\"布隆过滤器的实现\"><a href=\"#布隆过滤器的实现\" class=\"headerlink\" title=\"布隆过滤器的实现\"></a>布隆过滤器的实现</h2><h3 id=\"coding\"><a href=\"#coding\" class=\"headerlink\" title=\"coding\"></a>coding</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> BloomFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.BitSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 布隆过滤器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BloomFilter</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 长度为10亿的比特位</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">256</span> &lt;&lt; <span class=\"number\">22</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 使用的哈希函数（8个）</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] seeds = &#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>, <span class=\"number\">23</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> HashFunction[] functions = <span class=\"keyword\">new</span> <span class=\"title class_\">HashFunction</span>[seeds.length];</span><br><span class=\"line\">    <span class=\"comment\">// 初始化布隆过滤器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">BitSet</span> <span class=\"variable\">bitSet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BitSet</span>(DEFAULT_SIZE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造函数，初始化哈希函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BloomFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; seeds.length; i++) &#123;</span><br><span class=\"line\">            functions[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">HashFunction</span>(DEFAULT_SIZE,seeds[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String value)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(HashFunction f : functions)&#123;</span><br><span class=\"line\">                bitSet.set(f.hash(value),<span class=\"literal\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断元素是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">contains</span><span class=\"params\">(String value)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历所有哈希结果对应比特位，有一个返回false即break（不存在）</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(HashFunction f :functions)&#123;</span><br><span class=\"line\">            result = bitSet.get(f.hash(value));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!result)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 哈希函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HashFunction</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> seed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HashFunction</span><span class=\"params\">(<span class=\"type\">int</span> size, <span class=\"type\">int</span> seed)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.seed = seed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用加法哈希算法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hash</span><span class=\"params\">(String value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> value.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            result = seed * result + value.charAt(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (size - <span class=\"number\">1</span>) &amp; result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> BloomFilter.BloomFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BloomFilterTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bloomFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BloomFilter</span> <span class=\"variable\">bloomFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BloomFilter</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">            bloomFilter.add(String.valueOf(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">&quot;1&quot;</span>));</span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">&quot;2&quot;</span>));</span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">&quot;3&quot;</span>));</span><br><span class=\"line\">        System.out.println(bloomFilter.contains(<span class=\"string\">&quot;100001&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Guava-中的-BloomFilter\"><a href=\"#Guava-中的-BloomFilter\" class=\"headerlink\" title=\"Guava 中的 BloomFilter\"></a>Guava 中的 BloomFilter</h3><p>依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>31.0.1-jre<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), <span class=\"number\">100000</span>, <span class=\"number\">0.0001</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++) &#123;</span><br><span class=\"line\">        bloomFilter.put(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(bloomFilter.mightContain(<span class=\"number\">1</span>));</span><br><span class=\"line\">    System.out.println(bloomFilter.mightContain(<span class=\"number\">2</span>));</span><br><span class=\"line\">    System.out.println(bloomFilter.mightContain(<span class=\"number\">3</span>));</span><br><span class=\"line\">    System.out.println(bloomFilter.mightContain(<span class=\"number\">100001</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>关于哈希函数有空再仔细研究研究（咕咕咕）</p>\n<p>参考文章：<br><a class=\"link\"   href=\"https://www.cnblogs.com/liyulong1982/p/6013002.html\" >布隆过滤器(Bloom Filter)详解<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.cnblogs.com/caicz/p/16710090.html\" >十分钟理解布隆过滤器<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://developer.aliyun.com/article/773205\" >布隆过滤器，这一篇给你讲的明明白白<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.cnblogs.com/D-Rui/articles/12848869.html#:~:text=%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BF%98%E6%8B%A5%E6%9C%89k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0,%EF%BC%8C%E5%BD%93%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%8A%A0%E5%85%A5%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%BC%9A%E4%BD%BF%E7%94%A8k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8Ck%E6%AC%A1%E8%AE%A1%E7%AE%97%EF%BC%8C%E5%BE%97%E5%88%B0k%E4%B8%AA%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%A0%B9%E6%8D%AE%E5%BE%97%E5%88%B0%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E5%9C%A8%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8A%8A%E5%AF%B9%E5%BA%94%E4%B8%8B%E6%A0%87%E7%9A%84%E5%80%BC%E7%BD%AE%E4%BD%8D1%E3%80%82\" >布隆过滤器概念及其公式推导 转载<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"并查集","date":"2022-09-25T07:37:38.000Z","_content":"\n## 介绍\n\n并查集是一种树型的数据结构，用于处理一些不相交集合（disjoint sets）的**合并**及**查询**问题。常常在使用中以森林来表示。\n哈希表查询很快，但在合并上效率不高。链表合并很快，但查询效率不高。\n并查集在合并和查询上都接近 O(1)\n\n两个主要操作：\n**合并（union）：将两个集合合并为一个集合。**\n**查询（find）：确定元素属于哪个集合。** 并查集中不断往上寻找他的代表元素，用于确定两个元素是否属于同一集合。\n\n## 原理\n\n并查集是将集合以树形结构进行组合的数据结构，每个元素（节点）都保存着到它代表元素（父节点）的引用。\n**合并：将两个集合合并，即将一颗树的根连接到另一棵树的根。**\n**查找：根据代表元素找到最顶层的代表元素，相同则在同一集合，否则不在。**\n\n这是并查集最基本的表示方式，但它并不是很高效。\n因为合并操作过多时，树的深度会加大，可能会导致创建的树严重不平衡。（查询效率会降低）\n\n### 优化一：按秩合并\n\n按秩（树的深度）合并，即**总是将元素少的树连接至元素多的树上**。\n因为影响运行时间的是树的深度，更小的树添加到更深的树的根上将不会增加秩，除非它们的秩相同。\n\n### 优化二：路径压缩\n\n路径压缩，即**在查找代表元素时，将树扁平化（降低深度）**。具体操作是**将路径上每个元素的代表元素置为最顶层的代表元素（根）**。\n这样树的深度会降低，根节点下只有一层叶子节点。\n\n### 关于并查集的复杂度（略）\n\n能力不够，证明不出来。\n只找到了一篇文章：\n[借这个问题科普一下并查集各种情况下的时间复杂度](https://leetcode.cn/problems/number-of-provinces/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-bing-cha-0unne/)\n[并查集](https://oi-wiki.org/ds/dsu/#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6)\n[并查集复杂度](https://oi-wiki.org/ds/dsu-complexity/)\n\n总之，时间复杂度是很低的，接近O(1)。\n\n## 实现（coding）\n\n~~~java\npackage UnionFind;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class UnionFind {\n    // 对样本进行包裹（元素）\n    public static class Element<V> {\n        public V value;\n\n        public Element(V value) {\n            this.value = value;\n        }\n    }\n\n    public static class UnionFindSet<V> {\n        // 样本与元素的对应\n        public HashMap<V, Element<V>> elementMap;\n        // key 某个元素 value 元素的父\n        public HashMap<Element<V>, Element<V>> fatherMap;\n        // key 某个集合的代表元素 value 集合的大小\n        public HashMap<Element<V>, Integer> sizeMap;\n\n        /**\n         * 初始化并查集\n         *\n         * @param list\n         */\n        public UnionFindSet(List<V> list) {\n            elementMap = new HashMap<>();\n            fatherMap = new HashMap<>();\n            sizeMap = new HashMap<>();\n            // 初始化\n            for (V value : list) {\n                // 进行包裹\n                Element<V> element = new Element<V>(value);\n                // 样本与元素一一对应\n                elementMap.put(value, element);\n                // 父节点（代表元素）都是自己\n                fatherMap.put(element, element);\n                // 集合大小都为1（只有本身）\n                sizeMap.put(element, 1);\n            }\n        }\n\n        /**\n         * 查找元素的代表元素\n         */\n        private Element<V> findHead(Element<V> element) {\n            // 代表元素不是本身时，放入栈中，且一直往上找\n            Stack<Element<V>> path = new Stack<>();\n            while (element != fatherMap.get(element)) {\n                path.push(element);\n                element = fatherMap.get(element);\n            }\n            // 找到代表元素后，将栈中所有子节点的代表元素置为最顶层代表元素\n            while (!path.isEmpty()) {\n                fatherMap.put(path.pop(), element);\n            }\n            return element;\n        }\n\n        /**\n         * 判断两样本是否在同一集合\n         */\n        public boolean isSameSet(V a, V b) {\n            // 并查集中是否有该元素（是否初始化）\n            if (elementMap.containsKey(a) && elementMap.containsKey(b)) {\n                // 代表元素是否相同\n                return findHead(elementMap.get(a)) == findHead(elementMap.get(b));\n            }\n            return false;\n        }\n\n        /**\n         * 合并集合\n         */\n        public void union(V a, V b) {\n            if (elementMap.containsKey(a) && elementMap.containsKey(b)) {\n                // 获取对应元素\n                Element<V> aFather = findHead(elementMap.get(a));\n                Element<V> bFather = findHead(elementMap.get(b));\n                // 不在同一集合时，将节点少的集合添加到节点多的集合中\n                if (aFather != bFather) {\n                    Element<V> big = sizeMap.get(aFather) >= sizeMap.get(bFather) ? aFather : bFather;\n                    Element<V> small = big == aFather ? bFather : aFather;\n                    fatherMap.put(small, big);\n                    sizeMap.put(big, sizeMap.get(aFather) + sizeMap.get(bFather));\n                    sizeMap.remove(small);\n                }\n            }\n        }\n    }\n\n}\n~~~\n\n## 应用\n\n> 岛问题\n> 【题目】\n> 一个矩阵中只有0和1两种值，每个位置都可以和自己的上、下、左、右四个位置相连，如\n> 果有一片1连在一起，这个部分叫做一个岛，求一个矩阵中有多少个岛？\n> 【举例】\n> 001010\n> 111010\n> 100100\n> 000000\n> 这个矩阵中有三个岛\n> 【进阶】\n> 如何设计一个并行算法解决这个问题\n\n1. 使用递归暴力求解\n2. 将矩阵进行划分，然后每块都使用递归求解，最后进行合并（这里只分成了两块，使用两个线程模拟）\n\n实现：\n~~~java\npackage UnionFind;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\n\npublic class Application {\n    /**\n     * 数组封装后的对象\n     */\n    private static class Node {\n        int i;\n        int j;\n        int value;\n\n        public Node(int i, int j, int value) {\n            this.i = i;\n            this.j = j;\n            this.value = value;\n        }\n    }\n\n    private static Node[][] nodes;\n    private static UnionFind.UnionFindSet<Node> unionFindSet;\n\n    /**\n     * 第二种解法\n     * 也是递归感染，但是是并行的。将矩阵进行划分，然后分别统计，最后将结果合并。\n     */\n    public static int countIslandsUnionFind(int[][] m) throws InterruptedException {\n        if (m == null || m[0] == null) {\n            return 0;\n        }\n        // 获取矩阵大小\n        int N = m.length;\n        int M = m[0].length;\n        // 设置返回值数组，供两个线程使用\n        final int[] results = {0, 0};\n        // 将数组的元素封装成对象，并将岛加入列表，放入并查集\n        List<Node> list = new ArrayList<>();\n        nodes = new Node[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                Node node = new Node(i, j, m[i][j]);\n                nodes[i][j] = node;\n                if (m[i][j] == 1) {\n                    list.add(node);\n                }\n            }\n        }\n        // 初始化并查集\n        unionFindSet = new UnionFind.UnionFindSet<Node>(list);\n        // 开启两个线程，分别统计一半\n        final CountDownLatch latch = new CountDownLatch(2);\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < N; i++) {\n                    for (int j = 0; j < M / 2; j++) {\n                        if (nodes[i][j].value == 1) {\n                            results[0]++;\n                            infectUnionFind(i, j, 0, N, 0, M / 2);\n                        }\n                    }\n                }\n                latch.countDown();\n            }\n        });\n        Thread t2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < N; i++) {\n                    for (int j = M / 2; j < M; j++) {\n                        if (nodes[i][j].value == 1) {\n                            results[1]++;\n                            infectUnionFind(i, j, 0, N, M / 2, M);\n                        }\n                    }\n                }\n                latch.countDown();\n            }\n        });\n        t1.start();\n        t2.start();\n        latch.await();\n        // 合并，判断分界线两侧的元素是否是相连的岛\n        int result = results[0] + results[1];\n        for (int i = 0; i < N; i++) {\n            if (nodes[i][M / 2 - 1].value == nodes[i][M / 2].value && nodes[i][M / 2 - 1].value == 2 && !unionFindSet.isSameSet(nodes[i][M / 2 - 1], nodes[i][M / 2])) {\n                unionFindSet.union(nodes[i][M / 2 - 1], nodes[i][M / 2]);\n                result--;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 感染过程\n     */\n    private static boolean infectUnionFind(int i, int j, int N1, int N2, int M1, int M2) {\n        if (i < N1 || i >= N2 || j < M1 || j >= M2 || nodes[i][j].value != 1) {\n            return false;\n        }\n        // i,j没有越界且当前位置为1\n        nodes[i][j].value = 2;\n        // 感染上下左右四个位置\n        if (infectUnionFind(i + 1, j, N1, N2, M1, M2)) {\n            unionFindSet.union(nodes[i][j], nodes[i + 1][j]);\n        }\n        if (infectUnionFind(i - 1, j, N1, N2, M1, M2)) {\n            unionFindSet.union(nodes[i][j], nodes[i - 1][j]);\n        }\n        if (infectUnionFind(i, j + 1, N1, N2, M1, M2)) {\n            unionFindSet.union(nodes[i][j], nodes[i][j + 1]);\n        }\n        if (infectUnionFind(i, j - 1, N1, N2, M1, M2)) {\n            unionFindSet.union(nodes[i][j], nodes[i][j - 1]);\n        }\n        return true;\n    }\n\n    /**\n     * 第一种解法\n     * 递归感染\n     * 时间复杂度 O(N*M)\n     */\n    public static int countIslands(int[][] m) {\n        if (m == null || m[0] == null) {\n            return 0;\n        }\n        // 获取矩阵大小\n        int N = m.length;\n        int M = m[0].length;\n        int result = 0;\n        // 遍历矩阵中每个元素\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                // 是岛则进行感染过程\n                if (m[i][j] == 1) {\n                    result++;\n                    infect(m, i, j, N, M);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 递归传染\n     */\n    private static void infect(int[][] m, int i, int j, int N, int M) {\n        if (i < 0 || i >= N || j < 0 || j >= M || m[i][j] != 1) {\n            return;\n        }\n        // i,j没有越界且当前位置为1\n        m[i][j] = 2;\n        // 感染上下左右四个位置\n        infect(m, i + 1, j, N, M);\n        infect(m, i - 1, j, N, M);\n        infect(m, i, j + 1, N, M);\n        infect(m, i, j - 1, N, M);\n    }\n}\n~~~\n\n测试：\n~~~java\nimport UnionFind.Application;\nimport org.junit.Test;\n\npublic class UnionFindTest {\n    @Test\n    public void countIslandsTest() throws InterruptedException {\n        int[][] m1 = new int[1000][1000];\n        int[][] m2 = new int[1000][1000];\n        for (int i = 0; i < 1000; i++) {\n            for (int j = 0; j < 1000; j++) {\n                int temp = (int) (Math.random() * 2);\n                m1[i][j] = temp;\n                m2[i][j] = m1[i][j];\n            }\n        }\n        System.out.println(\"递归感染过程（单线程）：\" + Application.countIslands(m1));\n        System.out.println(\"划分地图，多线程并行：\" + Application.countIslandsUnionFind(m2));\n\n    }\n}\n~~~\n\n运行结果：\n~~~text\n递归感染过程（单线程）：66575\n划分地图，多线程并行：66575\n\n进程已结束,退出代码0\n~~~\n\n## 总结\n\n最后划分矩阵分别使用递归，最后合并的代码写了好久。\n对Java常用的数据结构还不是很熟悉，又不想改动已经写好的并查集结构。所以写了Node对象，使用nodes数组对矩阵进行复制。\n（毕竟要保证并查集中的元素都不一样，虽然值可能一样。而Java中，不new一个Integer对象，而是直接赋值，会自动装箱。自动装箱会将-128~127的数的对象引用指向静态代码块中创建好的对象）\n另外，要注意边界的条件。\ncoding能力有限，只实现了划分一次。\n如果是根据矩阵大小动态地划分矩阵，分给多个cpu运算，最后进行合并。会是一个理想的解决方案。\n这里就不实现了，练习结束！\n\n> 顺带一提，时间复杂度的证明比较复杂，所以这里只实现用法和了解大概的复杂度，不深究具体的复杂度及其证明。\n\n---\n参考文章：\n[并查集基础](https://www.runoob.com/data-structures/union-find-basic.html)\n[算法：并查集](https://www.cnblogs.com/MrSaver/p/9607552.html)\n[并查集(通俗易懂)](https://blog.csdn.net/qq_51070408/article/details/123411382)\n[【算法与数据结构】—— 并查集](https://blog.csdn.net/the_zed/article/details/105126583)\n[借这个问题科普一下并查集各种情况下的时间复杂度](https://leetcode.cn/problems/number-of-provinces/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-bing-cha-0unne/)\n[并查集](https://oi-wiki.org/ds/dsu/#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6)\n[并查集复杂度](https://oi-wiki.org/ds/dsu-complexity/)","source":"_posts/并查集.md","raw":"---\ntitle: 并查集\ndate: 2022-09-25 15:37:38\ntags:\n- 数据结构\n- 并查集\ncategories:\n- 算法练习\n---\n\n## 介绍\n\n并查集是一种树型的数据结构，用于处理一些不相交集合（disjoint sets）的**合并**及**查询**问题。常常在使用中以森林来表示。\n哈希表查询很快，但在合并上效率不高。链表合并很快，但查询效率不高。\n并查集在合并和查询上都接近 O(1)\n\n两个主要操作：\n**合并（union）：将两个集合合并为一个集合。**\n**查询（find）：确定元素属于哪个集合。** 并查集中不断往上寻找他的代表元素，用于确定两个元素是否属于同一集合。\n\n## 原理\n\n并查集是将集合以树形结构进行组合的数据结构，每个元素（节点）都保存着到它代表元素（父节点）的引用。\n**合并：将两个集合合并，即将一颗树的根连接到另一棵树的根。**\n**查找：根据代表元素找到最顶层的代表元素，相同则在同一集合，否则不在。**\n\n这是并查集最基本的表示方式，但它并不是很高效。\n因为合并操作过多时，树的深度会加大，可能会导致创建的树严重不平衡。（查询效率会降低）\n\n### 优化一：按秩合并\n\n按秩（树的深度）合并，即**总是将元素少的树连接至元素多的树上**。\n因为影响运行时间的是树的深度，更小的树添加到更深的树的根上将不会增加秩，除非它们的秩相同。\n\n### 优化二：路径压缩\n\n路径压缩，即**在查找代表元素时，将树扁平化（降低深度）**。具体操作是**将路径上每个元素的代表元素置为最顶层的代表元素（根）**。\n这样树的深度会降低，根节点下只有一层叶子节点。\n\n### 关于并查集的复杂度（略）\n\n能力不够，证明不出来。\n只找到了一篇文章：\n[借这个问题科普一下并查集各种情况下的时间复杂度](https://leetcode.cn/problems/number-of-provinces/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-bing-cha-0unne/)\n[并查集](https://oi-wiki.org/ds/dsu/#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6)\n[并查集复杂度](https://oi-wiki.org/ds/dsu-complexity/)\n\n总之，时间复杂度是很低的，接近O(1)。\n\n## 实现（coding）\n\n~~~java\npackage UnionFind;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class UnionFind {\n    // 对样本进行包裹（元素）\n    public static class Element<V> {\n        public V value;\n\n        public Element(V value) {\n            this.value = value;\n        }\n    }\n\n    public static class UnionFindSet<V> {\n        // 样本与元素的对应\n        public HashMap<V, Element<V>> elementMap;\n        // key 某个元素 value 元素的父\n        public HashMap<Element<V>, Element<V>> fatherMap;\n        // key 某个集合的代表元素 value 集合的大小\n        public HashMap<Element<V>, Integer> sizeMap;\n\n        /**\n         * 初始化并查集\n         *\n         * @param list\n         */\n        public UnionFindSet(List<V> list) {\n            elementMap = new HashMap<>();\n            fatherMap = new HashMap<>();\n            sizeMap = new HashMap<>();\n            // 初始化\n            for (V value : list) {\n                // 进行包裹\n                Element<V> element = new Element<V>(value);\n                // 样本与元素一一对应\n                elementMap.put(value, element);\n                // 父节点（代表元素）都是自己\n                fatherMap.put(element, element);\n                // 集合大小都为1（只有本身）\n                sizeMap.put(element, 1);\n            }\n        }\n\n        /**\n         * 查找元素的代表元素\n         */\n        private Element<V> findHead(Element<V> element) {\n            // 代表元素不是本身时，放入栈中，且一直往上找\n            Stack<Element<V>> path = new Stack<>();\n            while (element != fatherMap.get(element)) {\n                path.push(element);\n                element = fatherMap.get(element);\n            }\n            // 找到代表元素后，将栈中所有子节点的代表元素置为最顶层代表元素\n            while (!path.isEmpty()) {\n                fatherMap.put(path.pop(), element);\n            }\n            return element;\n        }\n\n        /**\n         * 判断两样本是否在同一集合\n         */\n        public boolean isSameSet(V a, V b) {\n            // 并查集中是否有该元素（是否初始化）\n            if (elementMap.containsKey(a) && elementMap.containsKey(b)) {\n                // 代表元素是否相同\n                return findHead(elementMap.get(a)) == findHead(elementMap.get(b));\n            }\n            return false;\n        }\n\n        /**\n         * 合并集合\n         */\n        public void union(V a, V b) {\n            if (elementMap.containsKey(a) && elementMap.containsKey(b)) {\n                // 获取对应元素\n                Element<V> aFather = findHead(elementMap.get(a));\n                Element<V> bFather = findHead(elementMap.get(b));\n                // 不在同一集合时，将节点少的集合添加到节点多的集合中\n                if (aFather != bFather) {\n                    Element<V> big = sizeMap.get(aFather) >= sizeMap.get(bFather) ? aFather : bFather;\n                    Element<V> small = big == aFather ? bFather : aFather;\n                    fatherMap.put(small, big);\n                    sizeMap.put(big, sizeMap.get(aFather) + sizeMap.get(bFather));\n                    sizeMap.remove(small);\n                }\n            }\n        }\n    }\n\n}\n~~~\n\n## 应用\n\n> 岛问题\n> 【题目】\n> 一个矩阵中只有0和1两种值，每个位置都可以和自己的上、下、左、右四个位置相连，如\n> 果有一片1连在一起，这个部分叫做一个岛，求一个矩阵中有多少个岛？\n> 【举例】\n> 001010\n> 111010\n> 100100\n> 000000\n> 这个矩阵中有三个岛\n> 【进阶】\n> 如何设计一个并行算法解决这个问题\n\n1. 使用递归暴力求解\n2. 将矩阵进行划分，然后每块都使用递归求解，最后进行合并（这里只分成了两块，使用两个线程模拟）\n\n实现：\n~~~java\npackage UnionFind;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\n\npublic class Application {\n    /**\n     * 数组封装后的对象\n     */\n    private static class Node {\n        int i;\n        int j;\n        int value;\n\n        public Node(int i, int j, int value) {\n            this.i = i;\n            this.j = j;\n            this.value = value;\n        }\n    }\n\n    private static Node[][] nodes;\n    private static UnionFind.UnionFindSet<Node> unionFindSet;\n\n    /**\n     * 第二种解法\n     * 也是递归感染，但是是并行的。将矩阵进行划分，然后分别统计，最后将结果合并。\n     */\n    public static int countIslandsUnionFind(int[][] m) throws InterruptedException {\n        if (m == null || m[0] == null) {\n            return 0;\n        }\n        // 获取矩阵大小\n        int N = m.length;\n        int M = m[0].length;\n        // 设置返回值数组，供两个线程使用\n        final int[] results = {0, 0};\n        // 将数组的元素封装成对象，并将岛加入列表，放入并查集\n        List<Node> list = new ArrayList<>();\n        nodes = new Node[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                Node node = new Node(i, j, m[i][j]);\n                nodes[i][j] = node;\n                if (m[i][j] == 1) {\n                    list.add(node);\n                }\n            }\n        }\n        // 初始化并查集\n        unionFindSet = new UnionFind.UnionFindSet<Node>(list);\n        // 开启两个线程，分别统计一半\n        final CountDownLatch latch = new CountDownLatch(2);\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < N; i++) {\n                    for (int j = 0; j < M / 2; j++) {\n                        if (nodes[i][j].value == 1) {\n                            results[0]++;\n                            infectUnionFind(i, j, 0, N, 0, M / 2);\n                        }\n                    }\n                }\n                latch.countDown();\n            }\n        });\n        Thread t2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (int i = 0; i < N; i++) {\n                    for (int j = M / 2; j < M; j++) {\n                        if (nodes[i][j].value == 1) {\n                            results[1]++;\n                            infectUnionFind(i, j, 0, N, M / 2, M);\n                        }\n                    }\n                }\n                latch.countDown();\n            }\n        });\n        t1.start();\n        t2.start();\n        latch.await();\n        // 合并，判断分界线两侧的元素是否是相连的岛\n        int result = results[0] + results[1];\n        for (int i = 0; i < N; i++) {\n            if (nodes[i][M / 2 - 1].value == nodes[i][M / 2].value && nodes[i][M / 2 - 1].value == 2 && !unionFindSet.isSameSet(nodes[i][M / 2 - 1], nodes[i][M / 2])) {\n                unionFindSet.union(nodes[i][M / 2 - 1], nodes[i][M / 2]);\n                result--;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 感染过程\n     */\n    private static boolean infectUnionFind(int i, int j, int N1, int N2, int M1, int M2) {\n        if (i < N1 || i >= N2 || j < M1 || j >= M2 || nodes[i][j].value != 1) {\n            return false;\n        }\n        // i,j没有越界且当前位置为1\n        nodes[i][j].value = 2;\n        // 感染上下左右四个位置\n        if (infectUnionFind(i + 1, j, N1, N2, M1, M2)) {\n            unionFindSet.union(nodes[i][j], nodes[i + 1][j]);\n        }\n        if (infectUnionFind(i - 1, j, N1, N2, M1, M2)) {\n            unionFindSet.union(nodes[i][j], nodes[i - 1][j]);\n        }\n        if (infectUnionFind(i, j + 1, N1, N2, M1, M2)) {\n            unionFindSet.union(nodes[i][j], nodes[i][j + 1]);\n        }\n        if (infectUnionFind(i, j - 1, N1, N2, M1, M2)) {\n            unionFindSet.union(nodes[i][j], nodes[i][j - 1]);\n        }\n        return true;\n    }\n\n    /**\n     * 第一种解法\n     * 递归感染\n     * 时间复杂度 O(N*M)\n     */\n    public static int countIslands(int[][] m) {\n        if (m == null || m[0] == null) {\n            return 0;\n        }\n        // 获取矩阵大小\n        int N = m.length;\n        int M = m[0].length;\n        int result = 0;\n        // 遍历矩阵中每个元素\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                // 是岛则进行感染过程\n                if (m[i][j] == 1) {\n                    result++;\n                    infect(m, i, j, N, M);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * 递归传染\n     */\n    private static void infect(int[][] m, int i, int j, int N, int M) {\n        if (i < 0 || i >= N || j < 0 || j >= M || m[i][j] != 1) {\n            return;\n        }\n        // i,j没有越界且当前位置为1\n        m[i][j] = 2;\n        // 感染上下左右四个位置\n        infect(m, i + 1, j, N, M);\n        infect(m, i - 1, j, N, M);\n        infect(m, i, j + 1, N, M);\n        infect(m, i, j - 1, N, M);\n    }\n}\n~~~\n\n测试：\n~~~java\nimport UnionFind.Application;\nimport org.junit.Test;\n\npublic class UnionFindTest {\n    @Test\n    public void countIslandsTest() throws InterruptedException {\n        int[][] m1 = new int[1000][1000];\n        int[][] m2 = new int[1000][1000];\n        for (int i = 0; i < 1000; i++) {\n            for (int j = 0; j < 1000; j++) {\n                int temp = (int) (Math.random() * 2);\n                m1[i][j] = temp;\n                m2[i][j] = m1[i][j];\n            }\n        }\n        System.out.println(\"递归感染过程（单线程）：\" + Application.countIslands(m1));\n        System.out.println(\"划分地图，多线程并行：\" + Application.countIslandsUnionFind(m2));\n\n    }\n}\n~~~\n\n运行结果：\n~~~text\n递归感染过程（单线程）：66575\n划分地图，多线程并行：66575\n\n进程已结束,退出代码0\n~~~\n\n## 总结\n\n最后划分矩阵分别使用递归，最后合并的代码写了好久。\n对Java常用的数据结构还不是很熟悉，又不想改动已经写好的并查集结构。所以写了Node对象，使用nodes数组对矩阵进行复制。\n（毕竟要保证并查集中的元素都不一样，虽然值可能一样。而Java中，不new一个Integer对象，而是直接赋值，会自动装箱。自动装箱会将-128~127的数的对象引用指向静态代码块中创建好的对象）\n另外，要注意边界的条件。\ncoding能力有限，只实现了划分一次。\n如果是根据矩阵大小动态地划分矩阵，分给多个cpu运算，最后进行合并。会是一个理想的解决方案。\n这里就不实现了，练习结束！\n\n> 顺带一提，时间复杂度的证明比较复杂，所以这里只实现用法和了解大概的复杂度，不深究具体的复杂度及其证明。\n\n---\n参考文章：\n[并查集基础](https://www.runoob.com/data-structures/union-find-basic.html)\n[算法：并查集](https://www.cnblogs.com/MrSaver/p/9607552.html)\n[并查集(通俗易懂)](https://blog.csdn.net/qq_51070408/article/details/123411382)\n[【算法与数据结构】—— 并查集](https://blog.csdn.net/the_zed/article/details/105126583)\n[借这个问题科普一下并查集各种情况下的时间复杂度](https://leetcode.cn/problems/number-of-provinces/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-bing-cha-0unne/)\n[并查集](https://oi-wiki.org/ds/dsu/#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6)\n[并查集复杂度](https://oi-wiki.org/ds/dsu-complexity/)","slug":"并查集","published":1,"updated":"2022-09-25T15:13:54.831Z","_id":"cl8h3ibcr0000wkttfrmwcvnv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>并查集是一种树型的数据结构，用于处理一些不相交集合（disjoint sets）的<strong>合并</strong>及<strong>查询</strong>问题。常常在使用中以森林来表示。<br>哈希表查询很快，但在合并上效率不高。链表合并很快，但查询效率不高。<br>并查集在合并和查询上都接近 O(1)</p>\n<p>两个主要操作：<br><strong>合并（union）：将两个集合合并为一个集合。</strong><br><strong>查询（find）：确定元素属于哪个集合。</strong> 并查集中不断往上寻找他的代表元素，用于确定两个元素是否属于同一集合。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>并查集是将集合以树形结构进行组合的数据结构，每个元素（节点）都保存着到它代表元素（父节点）的引用。<br><strong>合并：将两个集合合并，即将一颗树的根连接到另一棵树的根。</strong><br><strong>查找：根据代表元素找到最顶层的代表元素，相同则在同一集合，否则不在。</strong></p>\n<p>这是并查集最基本的表示方式，但它并不是很高效。<br>因为合并操作过多时，树的深度会加大，可能会导致创建的树严重不平衡。（查询效率会降低）</p>\n<h3 id=\"优化一：按秩合并\"><a href=\"#优化一：按秩合并\" class=\"headerlink\" title=\"优化一：按秩合并\"></a>优化一：按秩合并</h3><p>按秩（树的深度）合并，即<strong>总是将元素少的树连接至元素多的树上</strong>。<br>因为影响运行时间的是树的深度，更小的树添加到更深的树的根上将不会增加秩，除非它们的秩相同。</p>\n<h3 id=\"优化二：路径压缩\"><a href=\"#优化二：路径压缩\" class=\"headerlink\" title=\"优化二：路径压缩\"></a>优化二：路径压缩</h3><p>路径压缩，即<strong>在查找代表元素时，将树扁平化（降低深度）</strong>。具体操作是<strong>将路径上每个元素的代表元素置为最顶层的代表元素（根）</strong>。<br>这样树的深度会降低，根节点下只有一层叶子节点。</p>\n<h3 id=\"关于并查集的复杂度（略）\"><a href=\"#关于并查集的复杂度（略）\" class=\"headerlink\" title=\"关于并查集的复杂度（略）\"></a>关于并查集的复杂度（略）</h3><p>能力不够，证明不出来。<br>只找到了一篇文章：<br><a class=\"link\"   href=\"https://leetcode.cn/problems/number-of-provinces/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-bing-cha-0unne/\" >借这个问题科普一下并查集各种情况下的时间复杂度<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://oi-wiki.org/ds/dsu/#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\" >并查集<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://oi-wiki.org/ds/dsu-complexity/\" >并查集复杂度<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>总之，时间复杂度是很低的，接近O(1)。</p>\n<h2 id=\"实现（coding）\"><a href=\"#实现（coding）\" class=\"headerlink\" title=\"实现（coding）\"></a>实现（coding）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> UnionFind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnionFind</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对样本进行包裹（元素）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Element</span>&lt;V&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> V value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Element</span><span class=\"params\">(V value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnionFindSet</span>&lt;V&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 样本与元素的对应</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> HashMap&lt;V, Element&lt;V&gt;&gt; elementMap;</span><br><span class=\"line\">        <span class=\"comment\">// key 某个元素 value 元素的父</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> HashMap&lt;Element&lt;V&gt;, Element&lt;V&gt;&gt; fatherMap;</span><br><span class=\"line\">        <span class=\"comment\">// key 某个集合的代表元素 value 集合的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> HashMap&lt;Element&lt;V&gt;, Integer&gt; sizeMap;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 初始化并查集</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">UnionFindSet</span><span class=\"params\">(List&lt;V&gt; list)</span> &#123;</span><br><span class=\"line\">            elementMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            fatherMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            sizeMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (V value : list) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 进行包裹</span></span><br><span class=\"line\">                Element&lt;V&gt; element = <span class=\"keyword\">new</span> <span class=\"title class_\">Element</span>&lt;V&gt;(value);</span><br><span class=\"line\">                <span class=\"comment\">// 样本与元素一一对应</span></span><br><span class=\"line\">                elementMap.put(value, element);</span><br><span class=\"line\">                <span class=\"comment\">// 父节点（代表元素）都是自己</span></span><br><span class=\"line\">                fatherMap.put(element, element);</span><br><span class=\"line\">                <span class=\"comment\">// 集合大小都为1（只有本身）</span></span><br><span class=\"line\">                sizeMap.put(element, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 查找元素的代表元素</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Element&lt;V&gt; <span class=\"title function_\">findHead</span><span class=\"params\">(Element&lt;V&gt; element)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 代表元素不是本身时，放入栈中，且一直往上找</span></span><br><span class=\"line\">            Stack&lt;Element&lt;V&gt;&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (element != fatherMap.get(element)) &#123;</span><br><span class=\"line\">                path.push(element);</span><br><span class=\"line\">                element = fatherMap.get(element);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 找到代表元素后，将栈中所有子节点的代表元素置为最顶层代表元素</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!path.isEmpty()) &#123;</span><br><span class=\"line\">                fatherMap.put(path.pop(), element);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 判断两样本是否在同一集合</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSameSet</span><span class=\"params\">(V a, V b)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 并查集中是否有该元素（是否初始化）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementMap.containsKey(a) &amp;&amp; elementMap.containsKey(b)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 代表元素是否相同</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> findHead(elementMap.get(a)) == findHead(elementMap.get(b));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 合并集合</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">union</span><span class=\"params\">(V a, V b)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementMap.containsKey(a) &amp;&amp; elementMap.containsKey(b)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取对应元素</span></span><br><span class=\"line\">                Element&lt;V&gt; aFather = findHead(elementMap.get(a));</span><br><span class=\"line\">                Element&lt;V&gt; bFather = findHead(elementMap.get(b));</span><br><span class=\"line\">                <span class=\"comment\">// 不在同一集合时，将节点少的集合添加到节点多的集合中</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (aFather != bFather) &#123;</span><br><span class=\"line\">                    Element&lt;V&gt; big = sizeMap.get(aFather) &gt;= sizeMap.get(bFather) ? aFather : bFather;</span><br><span class=\"line\">                    Element&lt;V&gt; small = big == aFather ? bFather : aFather;</span><br><span class=\"line\">                    fatherMap.put(small, big);</span><br><span class=\"line\">                    sizeMap.put(big, sizeMap.get(aFather) + sizeMap.get(bFather));</span><br><span class=\"line\">                    sizeMap.remove(small);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><blockquote>\n<p>岛问题<br>【题目】<br>一个矩阵中只有0和1两种值，每个位置都可以和自己的上、下、左、右四个位置相连，如<br>果有一片1连在一起，这个部分叫做一个岛，求一个矩阵中有多少个岛？<br>【举例】<br>001010<br>111010<br>100100<br>000000<br>这个矩阵中有三个岛<br>【进阶】<br>如何设计一个并行算法解决这个问题</p>\n</blockquote>\n<ol>\n<li>使用递归暴力求解</li>\n<li>将矩阵进行划分，然后每块都使用递归求解，最后进行合并（这里只分成了两块，使用两个线程模拟）</li>\n</ol>\n<p>实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> UnionFind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数组封装后的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\">        <span class=\"type\">int</span> j;</span><br><span class=\"line\">        <span class=\"type\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.i = i;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.j = j;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node[][] nodes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> UnionFind.UnionFindSet&lt;Node&gt; unionFindSet;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 第二种解法</span></span><br><span class=\"line\"><span class=\"comment\">     * 也是递归感染，但是是并行的。将矩阵进行划分，然后分别统计，最后将结果合并。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">countIslandsUnionFind</span><span class=\"params\">(<span class=\"type\">int</span>[][] m)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m == <span class=\"literal\">null</span> || m[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取矩阵大小</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">N</span> <span class=\"operator\">=</span> m.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">M</span> <span class=\"operator\">=</span> m[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"comment\">// 设置返回值数组，供两个线程使用</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] results = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 将数组的元素封装成对象，并将岛加入列表，放入并查集</span></span><br><span class=\"line\">        List&lt;Node&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        nodes = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[N][M];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; M; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(i, j, m[i][j]);</span><br><span class=\"line\">                nodes[i][j] = node;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (m[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    list.add(node);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化并查集</span></span><br><span class=\"line\">        unionFindSet = <span class=\"keyword\">new</span> <span class=\"title class_\">UnionFind</span>.UnionFindSet&lt;Node&gt;(list);</span><br><span class=\"line\">        <span class=\"comment\">// 开启两个线程，分别统计一半</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">CountDownLatch</span> <span class=\"variable\">latch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; M / <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (nodes[i][j].value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                            results[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">                            infectUnionFind(i, j, <span class=\"number\">0</span>, N, <span class=\"number\">0</span>, M / <span class=\"number\">2</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                latch.countDown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> M / <span class=\"number\">2</span>; j &lt; M; j++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (nodes[i][j].value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                            results[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">                            infectUnionFind(i, j, <span class=\"number\">0</span>, N, M / <span class=\"number\">2</span>, M);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                latch.countDown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        latch.await();</span><br><span class=\"line\">        <span class=\"comment\">// 合并，判断分界线两侧的元素是否是相连的岛</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> results[<span class=\"number\">0</span>] + results[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nodes[i][M / <span class=\"number\">2</span> - <span class=\"number\">1</span>].value == nodes[i][M / <span class=\"number\">2</span>].value &amp;&amp; nodes[i][M / <span class=\"number\">2</span> - <span class=\"number\">1</span>].value == <span class=\"number\">2</span> &amp;&amp; !unionFindSet.isSameSet(nodes[i][M / <span class=\"number\">2</span> - <span class=\"number\">1</span>], nodes[i][M / <span class=\"number\">2</span>])) &#123;</span><br><span class=\"line\">                unionFindSet.union(nodes[i][M / <span class=\"number\">2</span> - <span class=\"number\">1</span>], nodes[i][M / <span class=\"number\">2</span>]);</span><br><span class=\"line\">                result--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 感染过程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">infectUnionFind</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> N1, <span class=\"type\">int</span> N2, <span class=\"type\">int</span> M1, <span class=\"type\">int</span> M2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; N1 || i &gt;= N2 || j &lt; M1 || j &gt;= M2 || nodes[i][j].value != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// i,j没有越界且当前位置为1</span></span><br><span class=\"line\">        nodes[i][j].value = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 感染上下左右四个位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (infectUnionFind(i + <span class=\"number\">1</span>, j, N1, N2, M1, M2)) &#123;</span><br><span class=\"line\">            unionFindSet.union(nodes[i][j], nodes[i + <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (infectUnionFind(i - <span class=\"number\">1</span>, j, N1, N2, M1, M2)) &#123;</span><br><span class=\"line\">            unionFindSet.union(nodes[i][j], nodes[i - <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (infectUnionFind(i, j + <span class=\"number\">1</span>, N1, N2, M1, M2)) &#123;</span><br><span class=\"line\">            unionFindSet.union(nodes[i][j], nodes[i][j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (infectUnionFind(i, j - <span class=\"number\">1</span>, N1, N2, M1, M2)) &#123;</span><br><span class=\"line\">            unionFindSet.union(nodes[i][j], nodes[i][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 第一种解法</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归感染</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间复杂度 O(N*M)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">countIslands</span><span class=\"params\">(<span class=\"type\">int</span>[][] m)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m == <span class=\"literal\">null</span> || m[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取矩阵大小</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">N</span> <span class=\"operator\">=</span> m.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">M</span> <span class=\"operator\">=</span> m[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历矩阵中每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; M; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 是岛则进行感染过程</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (m[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    result++;</span><br><span class=\"line\">                    infect(m, i, j, N, M);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归传染</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">infect</span><span class=\"params\">(<span class=\"type\">int</span>[][] m, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> N, <span class=\"type\">int</span> M)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N || j &lt; <span class=\"number\">0</span> || j &gt;= M || m[i][j] != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// i,j没有越界且当前位置为1</span></span><br><span class=\"line\">        m[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 感染上下左右四个位置</span></span><br><span class=\"line\">        infect(m, i + <span class=\"number\">1</span>, j, N, M);</span><br><span class=\"line\">        infect(m, i - <span class=\"number\">1</span>, j, N, M);</span><br><span class=\"line\">        infect(m, i, j + <span class=\"number\">1</span>, N, M);</span><br><span class=\"line\">        infect(m, i, j - <span class=\"number\">1</span>, N, M);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UnionFind.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnionFindTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">countIslandsTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] m1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1000</span>][<span class=\"number\">1000</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] m2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1000</span>][<span class=\"number\">1000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (Math.random() * <span class=\"number\">2</span>);</span><br><span class=\"line\">                m1[i][j] = temp;</span><br><span class=\"line\">                m2[i][j] = m1[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;递归感染过程（单线程）：&quot;</span> + Application.countIslands(m1));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;划分地图，多线程并行：&quot;</span> + Application.countIslandsUnionFind(m2));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">递归感染过程（单线程）：66575</span><br><span class=\"line\">划分地图，多线程并行：66575</span><br><span class=\"line\"></span><br><span class=\"line\">进程已结束,退出代码0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后划分矩阵分别使用递归，最后合并的代码写了好久。<br>对Java常用的数据结构还不是很熟悉，又不想改动已经写好的并查集结构。所以写了Node对象，使用nodes数组对矩阵进行复制。<br>（毕竟要保证并查集中的元素都不一样，虽然值可能一样。而Java中，不new一个Integer对象，而是直接赋值，会自动装箱。自动装箱会将-128~127的数的对象引用指向静态代码块中创建好的对象）<br>另外，要注意边界的条件。<br>coding能力有限，只实现了划分一次。<br>如果是根据矩阵大小动态地划分矩阵，分给多个cpu运算，最后进行合并。会是一个理想的解决方案。<br>这里就不实现了，练习结束！</p>\n<blockquote>\n<p>顺带一提，时间复杂度的证明比较复杂，所以这里只实现用法和了解大概的复杂度，不深究具体的复杂度及其证明。</p>\n</blockquote>\n<hr>\n<p>参考文章：<br><a class=\"link\"   href=\"https://www.runoob.com/data-structures/union-find-basic.html\" >并查集基础<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.cnblogs.com/MrSaver/p/9607552.html\" >算法：并查集<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://blog.csdn.net/qq_51070408/article/details/123411382\" >并查集(通俗易懂)<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://blog.csdn.net/the_zed/article/details/105126583\" >【算法与数据结构】—— 并查集<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://leetcode.cn/problems/number-of-provinces/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-bing-cha-0unne/\" >借这个问题科普一下并查集各种情况下的时间复杂度<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://oi-wiki.org/ds/dsu/#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\" >并查集<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://oi-wiki.org/ds/dsu-complexity/\" >并查集复杂度<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>并查集是一种树型的数据结构，用于处理一些不相交集合（disjoint sets）的<strong>合并</strong>及<strong>查询</strong>问题。常常在使用中以森林来表示。<br>哈希表查询很快，但在合并上效率不高。链表合并很快，但查询效率不高。<br>并查集在合并和查询上都接近 O(1)</p>\n<p>两个主要操作：<br><strong>合并（union）：将两个集合合并为一个集合。</strong><br><strong>查询（find）：确定元素属于哪个集合。</strong> 并查集中不断往上寻找他的代表元素，用于确定两个元素是否属于同一集合。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>并查集是将集合以树形结构进行组合的数据结构，每个元素（节点）都保存着到它代表元素（父节点）的引用。<br><strong>合并：将两个集合合并，即将一颗树的根连接到另一棵树的根。</strong><br><strong>查找：根据代表元素找到最顶层的代表元素，相同则在同一集合，否则不在。</strong></p>\n<p>这是并查集最基本的表示方式，但它并不是很高效。<br>因为合并操作过多时，树的深度会加大，可能会导致创建的树严重不平衡。（查询效率会降低）</p>\n<h3 id=\"优化一：按秩合并\"><a href=\"#优化一：按秩合并\" class=\"headerlink\" title=\"优化一：按秩合并\"></a>优化一：按秩合并</h3><p>按秩（树的深度）合并，即<strong>总是将元素少的树连接至元素多的树上</strong>。<br>因为影响运行时间的是树的深度，更小的树添加到更深的树的根上将不会增加秩，除非它们的秩相同。</p>\n<h3 id=\"优化二：路径压缩\"><a href=\"#优化二：路径压缩\" class=\"headerlink\" title=\"优化二：路径压缩\"></a>优化二：路径压缩</h3><p>路径压缩，即<strong>在查找代表元素时，将树扁平化（降低深度）</strong>。具体操作是<strong>将路径上每个元素的代表元素置为最顶层的代表元素（根）</strong>。<br>这样树的深度会降低，根节点下只有一层叶子节点。</p>\n<h3 id=\"关于并查集的复杂度（略）\"><a href=\"#关于并查集的复杂度（略）\" class=\"headerlink\" title=\"关于并查集的复杂度（略）\"></a>关于并查集的复杂度（略）</h3><p>能力不够，证明不出来。<br>只找到了一篇文章：<br><a class=\"link\"   href=\"https://leetcode.cn/problems/number-of-provinces/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-bing-cha-0unne/\" >借这个问题科普一下并查集各种情况下的时间复杂度<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://oi-wiki.org/ds/dsu/#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\" >并查集<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://oi-wiki.org/ds/dsu-complexity/\" >并查集复杂度<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>总之，时间复杂度是很低的，接近O(1)。</p>\n<h2 id=\"实现（coding）\"><a href=\"#实现（coding）\" class=\"headerlink\" title=\"实现（coding）\"></a>实现（coding）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> UnionFind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnionFind</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对样本进行包裹（元素）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Element</span>&lt;V&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> V value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Element</span><span class=\"params\">(V value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnionFindSet</span>&lt;V&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 样本与元素的对应</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> HashMap&lt;V, Element&lt;V&gt;&gt; elementMap;</span><br><span class=\"line\">        <span class=\"comment\">// key 某个元素 value 元素的父</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> HashMap&lt;Element&lt;V&gt;, Element&lt;V&gt;&gt; fatherMap;</span><br><span class=\"line\">        <span class=\"comment\">// key 某个集合的代表元素 value 集合的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> HashMap&lt;Element&lt;V&gt;, Integer&gt; sizeMap;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 初始化并查集</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">UnionFindSet</span><span class=\"params\">(List&lt;V&gt; list)</span> &#123;</span><br><span class=\"line\">            elementMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            fatherMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            sizeMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (V value : list) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 进行包裹</span></span><br><span class=\"line\">                Element&lt;V&gt; element = <span class=\"keyword\">new</span> <span class=\"title class_\">Element</span>&lt;V&gt;(value);</span><br><span class=\"line\">                <span class=\"comment\">// 样本与元素一一对应</span></span><br><span class=\"line\">                elementMap.put(value, element);</span><br><span class=\"line\">                <span class=\"comment\">// 父节点（代表元素）都是自己</span></span><br><span class=\"line\">                fatherMap.put(element, element);</span><br><span class=\"line\">                <span class=\"comment\">// 集合大小都为1（只有本身）</span></span><br><span class=\"line\">                sizeMap.put(element, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 查找元素的代表元素</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Element&lt;V&gt; <span class=\"title function_\">findHead</span><span class=\"params\">(Element&lt;V&gt; element)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 代表元素不是本身时，放入栈中，且一直往上找</span></span><br><span class=\"line\">            Stack&lt;Element&lt;V&gt;&gt; path = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (element != fatherMap.get(element)) &#123;</span><br><span class=\"line\">                path.push(element);</span><br><span class=\"line\">                element = fatherMap.get(element);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 找到代表元素后，将栈中所有子节点的代表元素置为最顶层代表元素</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!path.isEmpty()) &#123;</span><br><span class=\"line\">                fatherMap.put(path.pop(), element);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 判断两样本是否在同一集合</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSameSet</span><span class=\"params\">(V a, V b)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 并查集中是否有该元素（是否初始化）</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementMap.containsKey(a) &amp;&amp; elementMap.containsKey(b)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 代表元素是否相同</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> findHead(elementMap.get(a)) == findHead(elementMap.get(b));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 合并集合</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">union</span><span class=\"params\">(V a, V b)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (elementMap.containsKey(a) &amp;&amp; elementMap.containsKey(b)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取对应元素</span></span><br><span class=\"line\">                Element&lt;V&gt; aFather = findHead(elementMap.get(a));</span><br><span class=\"line\">                Element&lt;V&gt; bFather = findHead(elementMap.get(b));</span><br><span class=\"line\">                <span class=\"comment\">// 不在同一集合时，将节点少的集合添加到节点多的集合中</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (aFather != bFather) &#123;</span><br><span class=\"line\">                    Element&lt;V&gt; big = sizeMap.get(aFather) &gt;= sizeMap.get(bFather) ? aFather : bFather;</span><br><span class=\"line\">                    Element&lt;V&gt; small = big == aFather ? bFather : aFather;</span><br><span class=\"line\">                    fatherMap.put(small, big);</span><br><span class=\"line\">                    sizeMap.put(big, sizeMap.get(aFather) + sizeMap.get(bFather));</span><br><span class=\"line\">                    sizeMap.remove(small);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><blockquote>\n<p>岛问题<br>【题目】<br>一个矩阵中只有0和1两种值，每个位置都可以和自己的上、下、左、右四个位置相连，如<br>果有一片1连在一起，这个部分叫做一个岛，求一个矩阵中有多少个岛？<br>【举例】<br>001010<br>111010<br>100100<br>000000<br>这个矩阵中有三个岛<br>【进阶】<br>如何设计一个并行算法解决这个问题</p>\n</blockquote>\n<ol>\n<li>使用递归暴力求解</li>\n<li>将矩阵进行划分，然后每块都使用递归求解，最后进行合并（这里只分成了两块，使用两个线程模拟）</li>\n</ol>\n<p>实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> UnionFind;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CountDownLatch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数组封装后的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i;</span><br><span class=\"line\">        <span class=\"type\">int</span> j;</span><br><span class=\"line\">        <span class=\"type\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.i = i;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.j = j;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node[][] nodes;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> UnionFind.UnionFindSet&lt;Node&gt; unionFindSet;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 第二种解法</span></span><br><span class=\"line\"><span class=\"comment\">     * 也是递归感染，但是是并行的。将矩阵进行划分，然后分别统计，最后将结果合并。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">countIslandsUnionFind</span><span class=\"params\">(<span class=\"type\">int</span>[][] m)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m == <span class=\"literal\">null</span> || m[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取矩阵大小</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">N</span> <span class=\"operator\">=</span> m.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">M</span> <span class=\"operator\">=</span> m[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"comment\">// 设置返回值数组，供两个线程使用</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span>[] results = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 将数组的元素封装成对象，并将岛加入列表，放入并查集</span></span><br><span class=\"line\">        List&lt;Node&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        nodes = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[N][M];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; M; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(i, j, m[i][j]);</span><br><span class=\"line\">                nodes[i][j] = node;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (m[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    list.add(node);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化并查集</span></span><br><span class=\"line\">        unionFindSet = <span class=\"keyword\">new</span> <span class=\"title class_\">UnionFind</span>.UnionFindSet&lt;Node&gt;(list);</span><br><span class=\"line\">        <span class=\"comment\">// 开启两个线程，分别统计一半</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">CountDownLatch</span> <span class=\"variable\">latch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; M / <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (nodes[i][j].value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                            results[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">                            infectUnionFind(i, j, <span class=\"number\">0</span>, N, <span class=\"number\">0</span>, M / <span class=\"number\">2</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                latch.countDown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> M / <span class=\"number\">2</span>; j &lt; M; j++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (nodes[i][j].value == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                            results[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">                            infectUnionFind(i, j, <span class=\"number\">0</span>, N, M / <span class=\"number\">2</span>, M);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                latch.countDown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        latch.await();</span><br><span class=\"line\">        <span class=\"comment\">// 合并，判断分界线两侧的元素是否是相连的岛</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> results[<span class=\"number\">0</span>] + results[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nodes[i][M / <span class=\"number\">2</span> - <span class=\"number\">1</span>].value == nodes[i][M / <span class=\"number\">2</span>].value &amp;&amp; nodes[i][M / <span class=\"number\">2</span> - <span class=\"number\">1</span>].value == <span class=\"number\">2</span> &amp;&amp; !unionFindSet.isSameSet(nodes[i][M / <span class=\"number\">2</span> - <span class=\"number\">1</span>], nodes[i][M / <span class=\"number\">2</span>])) &#123;</span><br><span class=\"line\">                unionFindSet.union(nodes[i][M / <span class=\"number\">2</span> - <span class=\"number\">1</span>], nodes[i][M / <span class=\"number\">2</span>]);</span><br><span class=\"line\">                result--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 感染过程</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">infectUnionFind</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> N1, <span class=\"type\">int</span> N2, <span class=\"type\">int</span> M1, <span class=\"type\">int</span> M2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; N1 || i &gt;= N2 || j &lt; M1 || j &gt;= M2 || nodes[i][j].value != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// i,j没有越界且当前位置为1</span></span><br><span class=\"line\">        nodes[i][j].value = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 感染上下左右四个位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (infectUnionFind(i + <span class=\"number\">1</span>, j, N1, N2, M1, M2)) &#123;</span><br><span class=\"line\">            unionFindSet.union(nodes[i][j], nodes[i + <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (infectUnionFind(i - <span class=\"number\">1</span>, j, N1, N2, M1, M2)) &#123;</span><br><span class=\"line\">            unionFindSet.union(nodes[i][j], nodes[i - <span class=\"number\">1</span>][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (infectUnionFind(i, j + <span class=\"number\">1</span>, N1, N2, M1, M2)) &#123;</span><br><span class=\"line\">            unionFindSet.union(nodes[i][j], nodes[i][j + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (infectUnionFind(i, j - <span class=\"number\">1</span>, N1, N2, M1, M2)) &#123;</span><br><span class=\"line\">            unionFindSet.union(nodes[i][j], nodes[i][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 第一种解法</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归感染</span></span><br><span class=\"line\"><span class=\"comment\">     * 时间复杂度 O(N*M)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">countIslands</span><span class=\"params\">(<span class=\"type\">int</span>[][] m)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m == <span class=\"literal\">null</span> || m[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取矩阵大小</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">N</span> <span class=\"operator\">=</span> m.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">M</span> <span class=\"operator\">=</span> m[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历矩阵中每个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; M; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 是岛则进行感染过程</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (m[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    result++;</span><br><span class=\"line\">                    infect(m, i, j, N, M);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 递归传染</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">infect</span><span class=\"params\">(<span class=\"type\">int</span>[][] m, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> N, <span class=\"type\">int</span> M)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= N || j &lt; <span class=\"number\">0</span> || j &gt;= M || m[i][j] != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// i,j没有越界且当前位置为1</span></span><br><span class=\"line\">        m[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 感染上下左右四个位置</span></span><br><span class=\"line\">        infect(m, i + <span class=\"number\">1</span>, j, N, M);</span><br><span class=\"line\">        infect(m, i - <span class=\"number\">1</span>, j, N, M);</span><br><span class=\"line\">        infect(m, i, j + <span class=\"number\">1</span>, N, M);</span><br><span class=\"line\">        infect(m, i, j - <span class=\"number\">1</span>, N, M);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> UnionFind.Application;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnionFindTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">countIslandsTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] m1 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1000</span>][<span class=\"number\">1000</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span>[][] m2 = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1000</span>][<span class=\"number\">1000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) (Math.random() * <span class=\"number\">2</span>);</span><br><span class=\"line\">                m1[i][j] = temp;</span><br><span class=\"line\">                m2[i][j] = m1[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;递归感染过程（单线程）：&quot;</span> + Application.countIslands(m1));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;划分地图，多线程并行：&quot;</span> + Application.countIslandsUnionFind(m2));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">递归感染过程（单线程）：66575</span><br><span class=\"line\">划分地图，多线程并行：66575</span><br><span class=\"line\"></span><br><span class=\"line\">进程已结束,退出代码0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后划分矩阵分别使用递归，最后合并的代码写了好久。<br>对Java常用的数据结构还不是很熟悉，又不想改动已经写好的并查集结构。所以写了Node对象，使用nodes数组对矩阵进行复制。<br>（毕竟要保证并查集中的元素都不一样，虽然值可能一样。而Java中，不new一个Integer对象，而是直接赋值，会自动装箱。自动装箱会将-128~127的数的对象引用指向静态代码块中创建好的对象）<br>另外，要注意边界的条件。<br>coding能力有限，只实现了划分一次。<br>如果是根据矩阵大小动态地划分矩阵，分给多个cpu运算，最后进行合并。会是一个理想的解决方案。<br>这里就不实现了，练习结束！</p>\n<blockquote>\n<p>顺带一提，时间复杂度的证明比较复杂，所以这里只实现用法和了解大概的复杂度，不深究具体的复杂度及其证明。</p>\n</blockquote>\n<hr>\n<p>参考文章：<br><a class=\"link\"   href=\"https://www.runoob.com/data-structures/union-find-basic.html\" >并查集基础<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.cnblogs.com/MrSaver/p/9607552.html\" >算法：并查集<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://blog.csdn.net/qq_51070408/article/details/123411382\" >并查集(通俗易懂)<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://blog.csdn.net/the_zed/article/details/105126583\" >【算法与数据结构】—— 并查集<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://leetcode.cn/problems/number-of-provinces/solution/jie-zhe-ge-wen-ti-ke-pu-yi-xia-bing-cha-0unne/\" >借这个问题科普一下并查集各种情况下的时间复杂度<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://oi-wiki.org/ds/dsu/#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\" >并查集<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://oi-wiki.org/ds/dsu-complexity/\" >并查集复杂度<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"KMP和Manacher算法","date":"2022-10-02T05:47:53.000Z","_content":"\n## 字符串匹配（模式匹配）\n\n问题：\n给定一个主串（以 S 代替）和模式串（以 P 代替），要求找出 P 在 S 中出现的位置，此即串的模式匹配问题。\n\n### 暴力匹配（BF）\n\n暴力匹配即将主串每个元素都作为起点和模式串相比较，直至后续与模式串全部匹配则成功找到。\n\n~~~java\npublic class BF {\n    /**\n     * 暴力算法（Brute Force）\n     */\n    public static int BF(String S, String P) {\n        char[] s = S.toCharArray();\n        char[] p = P.toCharArray();\n        // 遍历主串所有元素，从每个元素作为起点和模式串比较\n        for (int i = 0; i < S.length(); i++) {\n            int j;\n            int temp = i;\n            // 从当前i作为起点比较，不等则break，相等则判断下一个。直至判断长度与模式串长度相等。即匹配成功\n            for (j = 0; j < P.length(); j++) {\n                if (s[temp] != p[j]) {\n                    break;\n                }\n                temp++;\n            }\n            if (j == P.length()) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n~~~\n\n### KMP\n\nKMP算法是一种改进的字符串匹配算法。\n从暴力算法中可以看出，每次匹配失败时，都会从主串的下一个字符重新开始与模式串一一比较。即每次失败，模式串只右移了一位。\nKMP算法的关键是**利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。** 即让模式串尽可能多的向右移。\n\n匹配失败后，模式串该向右移多少位。将会记录在next数组中，**next数组只与模式串本身有关，与主串无关**。\n下面来解释下next数组的含义以及求法。\n\n匹配失败时，主串与模式串失败位置的字符不同，但是模式串这个字符前所有字符与主串这个字符前的字符串是匹配的。\n如果模式串匹配失败字符串前的字串中，有与开头n个字符长度重复的公共元素。那么下一次比较从重复的地方开始即可。无需从模式串的起始开始，从而减少比较次数。\n比如：\n~~~text\n主串：      abcdabcdabd\n模式串：    abcdabd\n~~~\n当匹配到第七个元素时，主串c与模式串d不等。但d前有长度为2的重复公共元素（与开头开始的元素有2长度的重合）：ab\n所以可以将模式串向右移4位，即使**得从头开始的重复子串后一个元素与匹配失败的元素比较。** 因为前面的元素是匹配过的重复元素。\n~~~text\n主串：      abcdabcdabd\n模式串：        abcdabd\n~~~\n\n这个重复的公共元素长度叫 最大前缀后缀公共元素长度\n对于字符串 abcdabd 来说。它的各个子串的前缀后缀的公共元素的最大长度如下表格所示：\n\n| 字符           | a   | b   | c   | d   | a   | b   | d   |\n|--------------|-----|-----|-----|-----|-----|-----|-----|\n| 最大前缀后缀公共元素长度 | 0   | 0   | 0   | 0   | 1   | 2   | 0   |\n\nnext数组考虑的是除了当前字符串外的最长相同前缀后缀，所以去除当前字符，只看他前面的。\n将上表得到的值整体往后移一位即可。\n同时，模式串首位初值赋为-1。原因是标记开头，当开头不匹配时，模式串右移一位，而不是回到0位置，导致陷入循环。\n字符串 abcdabd 的 next 数组：\n\n| 字符           | a   | b   | c   | d   | a   | b   | d   |\n|--------------|-----|-----|-----|-----|-----|-----|-----|\n| 最大前缀后缀公共元素长度 | -1  | 0   | 0   | 0   | 0   | 1   | 2   |\n\nnext数组的实现：\n~~~java\npackage PatternMatching;\n\npublic class KMP {\n    public static int[] getNext(String P) {\n        char[] p = P.toCharArray();\n        int[] next = new int[P.length()];\n        // 起始位置为-1\n        next[0] = -1;\n        int j = 0;\n        int k = -1;\n        while (j < p.length - 1) {\n            // p[k]表示前缀，p[j]表示后缀\n            if (k == -1 || p[k] == p[j]) {\n                next[++j] = ++k;\n            } else {\n                // 不匹配，前缀则回到上一个最大重复的位置（next数组构造本身就用到了next数组的特性）\n                k = next[k];\n            }\n        }\n        return next;\n    }\n}\n~~~\n\nKMP中else部分，与求next数组中的else部分是一样的。\nKMP实现：\n~~~java\npackage PatternMatching;\n\npublic class KMP {\n    public static int KMP(String S, String P) {\n        char[] s = S.toCharArray();\n        char[] p = P.toCharArray();\n        int i = 0;\n        int j = 0;\n        int[] next = getNext(P);\n        while (i < s.length && j < p.length) {\n            if (j == -1 || s[i] == p[j]) {\n                i++;\n                j++;\n            } else {\n                j = next[j];\n            }\n        }\n        return j == p.length ? i - j : -1;\n    }\n}\n~~~\n\n## 求字符串的最长回文子串\n\n### 暴力（BF）\n\n照例先暴力实现\n时间复杂度 O(n^2)\n\n~~~java\npackage LongestPalindromicSubstring;\n\npublic class BF {\n    public static int BF(String str) {\n        char[] string = str.toCharArray();\n        int result = 0;\n        for (int i = 0; i < str.length(); i++) {\n            // 判断奇数长度回文\n            int l = i - 1;\n            int r = i + 1;\n            while (l >= 0 && r < str.length() && string[l] == string[r]) {\n                l--;\n                r++;\n            }\n            result = Math.max(result, r - l - 1);\n            // 判断偶数长度回文\n            l = i;\n            r = i + 1;\n            while (l >= 0 && r < str.length() && string[l] == string[r]) {\n                l--;\n                r++;\n            }\n            result = Math.max(result, r - l - 1);\n        }\n        return result;\n    }\n}\n~~~\n\n### Manacher算法\n\nManacher算法，也叫马拉车算法 ~~（翻译的信达雅呢）~~\n这个算法用于求字符串的最长回文子串。时间复杂度到了 O(n)\n\nManacher的核心就是回文半径的概念。\n由于回文串的奇偶不一样，处理也不同。所以在处理之前，在每个字符前后添加一个相同字符。这样左右的回文串都会变成奇回文串。\n比如 abba 通过处理变成 #a#b#b#a#\n\n回文半径和回文直径：因为处理后回文字符串的长度一定是奇数，所以回文半径是包括回文中心在内的回文子串的一半的长度，回文直径则是回文半径的2倍减1。比如对于字符串 \"aba\"，在字符 'b' 处的回文半径就是2，回文直径就是3。\n最右回文边界R：在遍历字符串时，每个字符遍历出的最长回文子串都会有个右边界，而R则是所有已知右边界中最靠右的位置，也就是说R的值是只增不减的。\n回文中心C：取得当前R的第一次更新时的回文中心。由此可见R和C时伴生的。\n半径数组：这个数组记录了原字符串中每一个字符对应的最长回文半径。\n\n过程：从i=0遍历字符串\n1. 当i>R 即i在R外，那直接暴力匹配以i为中心的回文子串\n2. 当i<=R 即i在R内。分为\n   1. i'的回文半径在R-L内，那么i的回文半径也和i'相同\n   ![回文模型1](../images/KMP和Manacher算法/回文模型1.png)\n   2. i'的回文半径在R-L上，i的回文半径和i'相同，但后面还要继续比较，i的回文半径可能会变大。\n   3. i'的回文半径在R-L外，和上面一样，也需要往后比。(图就不放了，可以参考上面的图，但红线得划到L和R外)\n\nManacher算法实际是利用了回文的特性，即**回文中的回文不需要再重复比较**，由回文的特性可以跳过已经比较过的（即跳过半径数组中的长度）\n\nManacher实现：\n~~~java\npackage LongestPalindromicSubstring;\n\npublic class Manacher {\n    public static int Manacher(String str) {\n        int len = str.length() * 2 + 1;\n        char[] string = new char[len];\n        char[] str1 = str.toCharArray();\n        int index = 0;\n        // 将字符串中添加特殊字符，让字符串只有奇回文\n        for (int i = 0; i < len; i++) {\n            string[i] = (i % 2) == 0 ? '#' : str1[index++];\n        }\n        // 记录回文半径的数组\n        int[] p = new int[len];\n        // r最右回文右边界，c对应的最左回文中心，maxn最大回文半径\n        int r = -1;\n        int c = -1;\n        int maxn = Integer.MIN_VALUE;\n        // 从左往右遍历\n        for (int i = 0; i < len; i++) {\n            // i>r 时，回文半径为1，否则回文半径就是 i对应i‘的回文半径 或者 i到r的距离\n            p[i] = r > i ? Math.min(r - i, p[2 * c - i]) : 1;\n            while (i + p[i] < len && i - p[i] > -1) {\n                if (string[i + p[i]] == string[i - p[i]]) {\n                    p[i]++;\n                } else {\n                    break;\n                }\n            }\n            // 判断r和c是否可以更新\n            if (i + p[i] > r) {\n                r = i + p[i];\n                c = i;\n            }\n            // 更新最大回文半径\n            maxn = Math.max(maxn, p[i]);\n        }\n        return maxn - 1;\n    }\n}\n~~~\n\n## 总结\n\n参考文章：\n\n[字符串匹配KMP算法详解](https://www.cnblogs.com/zhangboy/p/7635627.html)\n[四种最常见的字符串匹配算法概述](https://www.cnblogs.com/liuyangQAQ/p/12310720.html#:~:text=%E5%9B%9B%E7%A7%8D%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0%201%20BF%E7%AE%97%E6%B3%95%EF%BC%9A,BF%E7%AE%97%E6%B3%95%EF%BC%8C%E5%8D%B3%E6%9A%B4%E5%8A%9B%28Brute%20Force%29%E7%AE%97%E6%B3%95%EF%BC%8C%E6%98%AF%E6%99%AE%E9%80%9A%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%EF%BC%8CBF%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%9D%E6%83%B3%E5%B0%B1%E6%98%AF%E5%B0%86%E7%9B%AE%E6%A0%87%E4%B8%B2S%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%8E%E6%A8%A1%E5%BC%8F%E4%B8%B2T%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%EF%BC%8C%E8%8B%A5%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%88%99%E7%BB%A7%E7%BB%AD%E6%AF%94%E8%BE%83S%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%92%8C%20T%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%9B%E8%8B%A5%E4%B8%8D%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%88%99%E6%AF%94%E8%BE%83S%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%92%8CT%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%8C%E4%BE%9D%E6%AC%A1%E6%AF%94%E8%BE%83%E4%B8%8B%E5%8E%BB%EF%BC%8C%E7%9B%B4%E5%88%B0%E5%BE%97%E5%87%BA%E6%9C%80%E5%90%8E%E7%9A%84%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C%E3%80%82%20BF%E7%AE%97%E6%B3%95%E6%98%AF%E4%B8%80%E7%A7%8D%E8%9B%AE%E5%8A%9B%E7%AE%97%E6%B3%95%E3%80%82)\n[马拉车算法（Manacher's Algorithm）](https://www.jianshu.com/p/392172762e55)\n[最长回文子串的五种求法(暴力、中点扩散、DP、hash+二分、Manacher)](https://blog.csdn.net/qq_43851311/article/details/113928303)","source":"_posts/KMP和Manacher算法.md","raw":"---\ntitle: KMP和Manacher算法\ndate: 2022-10-02 13:47:53\ntags:\n- 字符串\n- 模式匹配\n- 回文\ncategories:\n- 算法练习\n---\n\n## 字符串匹配（模式匹配）\n\n问题：\n给定一个主串（以 S 代替）和模式串（以 P 代替），要求找出 P 在 S 中出现的位置，此即串的模式匹配问题。\n\n### 暴力匹配（BF）\n\n暴力匹配即将主串每个元素都作为起点和模式串相比较，直至后续与模式串全部匹配则成功找到。\n\n~~~java\npublic class BF {\n    /**\n     * 暴力算法（Brute Force）\n     */\n    public static int BF(String S, String P) {\n        char[] s = S.toCharArray();\n        char[] p = P.toCharArray();\n        // 遍历主串所有元素，从每个元素作为起点和模式串比较\n        for (int i = 0; i < S.length(); i++) {\n            int j;\n            int temp = i;\n            // 从当前i作为起点比较，不等则break，相等则判断下一个。直至判断长度与模式串长度相等。即匹配成功\n            for (j = 0; j < P.length(); j++) {\n                if (s[temp] != p[j]) {\n                    break;\n                }\n                temp++;\n            }\n            if (j == P.length()) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n~~~\n\n### KMP\n\nKMP算法是一种改进的字符串匹配算法。\n从暴力算法中可以看出，每次匹配失败时，都会从主串的下一个字符重新开始与模式串一一比较。即每次失败，模式串只右移了一位。\nKMP算法的关键是**利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。** 即让模式串尽可能多的向右移。\n\n匹配失败后，模式串该向右移多少位。将会记录在next数组中，**next数组只与模式串本身有关，与主串无关**。\n下面来解释下next数组的含义以及求法。\n\n匹配失败时，主串与模式串失败位置的字符不同，但是模式串这个字符前所有字符与主串这个字符前的字符串是匹配的。\n如果模式串匹配失败字符串前的字串中，有与开头n个字符长度重复的公共元素。那么下一次比较从重复的地方开始即可。无需从模式串的起始开始，从而减少比较次数。\n比如：\n~~~text\n主串：      abcdabcdabd\n模式串：    abcdabd\n~~~\n当匹配到第七个元素时，主串c与模式串d不等。但d前有长度为2的重复公共元素（与开头开始的元素有2长度的重合）：ab\n所以可以将模式串向右移4位，即使**得从头开始的重复子串后一个元素与匹配失败的元素比较。** 因为前面的元素是匹配过的重复元素。\n~~~text\n主串：      abcdabcdabd\n模式串：        abcdabd\n~~~\n\n这个重复的公共元素长度叫 最大前缀后缀公共元素长度\n对于字符串 abcdabd 来说。它的各个子串的前缀后缀的公共元素的最大长度如下表格所示：\n\n| 字符           | a   | b   | c   | d   | a   | b   | d   |\n|--------------|-----|-----|-----|-----|-----|-----|-----|\n| 最大前缀后缀公共元素长度 | 0   | 0   | 0   | 0   | 1   | 2   | 0   |\n\nnext数组考虑的是除了当前字符串外的最长相同前缀后缀，所以去除当前字符，只看他前面的。\n将上表得到的值整体往后移一位即可。\n同时，模式串首位初值赋为-1。原因是标记开头，当开头不匹配时，模式串右移一位，而不是回到0位置，导致陷入循环。\n字符串 abcdabd 的 next 数组：\n\n| 字符           | a   | b   | c   | d   | a   | b   | d   |\n|--------------|-----|-----|-----|-----|-----|-----|-----|\n| 最大前缀后缀公共元素长度 | -1  | 0   | 0   | 0   | 0   | 1   | 2   |\n\nnext数组的实现：\n~~~java\npackage PatternMatching;\n\npublic class KMP {\n    public static int[] getNext(String P) {\n        char[] p = P.toCharArray();\n        int[] next = new int[P.length()];\n        // 起始位置为-1\n        next[0] = -1;\n        int j = 0;\n        int k = -1;\n        while (j < p.length - 1) {\n            // p[k]表示前缀，p[j]表示后缀\n            if (k == -1 || p[k] == p[j]) {\n                next[++j] = ++k;\n            } else {\n                // 不匹配，前缀则回到上一个最大重复的位置（next数组构造本身就用到了next数组的特性）\n                k = next[k];\n            }\n        }\n        return next;\n    }\n}\n~~~\n\nKMP中else部分，与求next数组中的else部分是一样的。\nKMP实现：\n~~~java\npackage PatternMatching;\n\npublic class KMP {\n    public static int KMP(String S, String P) {\n        char[] s = S.toCharArray();\n        char[] p = P.toCharArray();\n        int i = 0;\n        int j = 0;\n        int[] next = getNext(P);\n        while (i < s.length && j < p.length) {\n            if (j == -1 || s[i] == p[j]) {\n                i++;\n                j++;\n            } else {\n                j = next[j];\n            }\n        }\n        return j == p.length ? i - j : -1;\n    }\n}\n~~~\n\n## 求字符串的最长回文子串\n\n### 暴力（BF）\n\n照例先暴力实现\n时间复杂度 O(n^2)\n\n~~~java\npackage LongestPalindromicSubstring;\n\npublic class BF {\n    public static int BF(String str) {\n        char[] string = str.toCharArray();\n        int result = 0;\n        for (int i = 0; i < str.length(); i++) {\n            // 判断奇数长度回文\n            int l = i - 1;\n            int r = i + 1;\n            while (l >= 0 && r < str.length() && string[l] == string[r]) {\n                l--;\n                r++;\n            }\n            result = Math.max(result, r - l - 1);\n            // 判断偶数长度回文\n            l = i;\n            r = i + 1;\n            while (l >= 0 && r < str.length() && string[l] == string[r]) {\n                l--;\n                r++;\n            }\n            result = Math.max(result, r - l - 1);\n        }\n        return result;\n    }\n}\n~~~\n\n### Manacher算法\n\nManacher算法，也叫马拉车算法 ~~（翻译的信达雅呢）~~\n这个算法用于求字符串的最长回文子串。时间复杂度到了 O(n)\n\nManacher的核心就是回文半径的概念。\n由于回文串的奇偶不一样，处理也不同。所以在处理之前，在每个字符前后添加一个相同字符。这样左右的回文串都会变成奇回文串。\n比如 abba 通过处理变成 #a#b#b#a#\n\n回文半径和回文直径：因为处理后回文字符串的长度一定是奇数，所以回文半径是包括回文中心在内的回文子串的一半的长度，回文直径则是回文半径的2倍减1。比如对于字符串 \"aba\"，在字符 'b' 处的回文半径就是2，回文直径就是3。\n最右回文边界R：在遍历字符串时，每个字符遍历出的最长回文子串都会有个右边界，而R则是所有已知右边界中最靠右的位置，也就是说R的值是只增不减的。\n回文中心C：取得当前R的第一次更新时的回文中心。由此可见R和C时伴生的。\n半径数组：这个数组记录了原字符串中每一个字符对应的最长回文半径。\n\n过程：从i=0遍历字符串\n1. 当i>R 即i在R外，那直接暴力匹配以i为中心的回文子串\n2. 当i<=R 即i在R内。分为\n   1. i'的回文半径在R-L内，那么i的回文半径也和i'相同\n   ![回文模型1](../images/KMP和Manacher算法/回文模型1.png)\n   2. i'的回文半径在R-L上，i的回文半径和i'相同，但后面还要继续比较，i的回文半径可能会变大。\n   3. i'的回文半径在R-L外，和上面一样，也需要往后比。(图就不放了，可以参考上面的图，但红线得划到L和R外)\n\nManacher算法实际是利用了回文的特性，即**回文中的回文不需要再重复比较**，由回文的特性可以跳过已经比较过的（即跳过半径数组中的长度）\n\nManacher实现：\n~~~java\npackage LongestPalindromicSubstring;\n\npublic class Manacher {\n    public static int Manacher(String str) {\n        int len = str.length() * 2 + 1;\n        char[] string = new char[len];\n        char[] str1 = str.toCharArray();\n        int index = 0;\n        // 将字符串中添加特殊字符，让字符串只有奇回文\n        for (int i = 0; i < len; i++) {\n            string[i] = (i % 2) == 0 ? '#' : str1[index++];\n        }\n        // 记录回文半径的数组\n        int[] p = new int[len];\n        // r最右回文右边界，c对应的最左回文中心，maxn最大回文半径\n        int r = -1;\n        int c = -1;\n        int maxn = Integer.MIN_VALUE;\n        // 从左往右遍历\n        for (int i = 0; i < len; i++) {\n            // i>r 时，回文半径为1，否则回文半径就是 i对应i‘的回文半径 或者 i到r的距离\n            p[i] = r > i ? Math.min(r - i, p[2 * c - i]) : 1;\n            while (i + p[i] < len && i - p[i] > -1) {\n                if (string[i + p[i]] == string[i - p[i]]) {\n                    p[i]++;\n                } else {\n                    break;\n                }\n            }\n            // 判断r和c是否可以更新\n            if (i + p[i] > r) {\n                r = i + p[i];\n                c = i;\n            }\n            // 更新最大回文半径\n            maxn = Math.max(maxn, p[i]);\n        }\n        return maxn - 1;\n    }\n}\n~~~\n\n## 总结\n\n参考文章：\n\n[字符串匹配KMP算法详解](https://www.cnblogs.com/zhangboy/p/7635627.html)\n[四种最常见的字符串匹配算法概述](https://www.cnblogs.com/liuyangQAQ/p/12310720.html#:~:text=%E5%9B%9B%E7%A7%8D%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0%201%20BF%E7%AE%97%E6%B3%95%EF%BC%9A,BF%E7%AE%97%E6%B3%95%EF%BC%8C%E5%8D%B3%E6%9A%B4%E5%8A%9B%28Brute%20Force%29%E7%AE%97%E6%B3%95%EF%BC%8C%E6%98%AF%E6%99%AE%E9%80%9A%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%EF%BC%8CBF%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%9D%E6%83%B3%E5%B0%B1%E6%98%AF%E5%B0%86%E7%9B%AE%E6%A0%87%E4%B8%B2S%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%8E%E6%A8%A1%E5%BC%8F%E4%B8%B2T%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%EF%BC%8C%E8%8B%A5%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%88%99%E7%BB%A7%E7%BB%AD%E6%AF%94%E8%BE%83S%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%92%8C%20T%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%9B%E8%8B%A5%E4%B8%8D%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%88%99%E6%AF%94%E8%BE%83S%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%92%8CT%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%8C%E4%BE%9D%E6%AC%A1%E6%AF%94%E8%BE%83%E4%B8%8B%E5%8E%BB%EF%BC%8C%E7%9B%B4%E5%88%B0%E5%BE%97%E5%87%BA%E6%9C%80%E5%90%8E%E7%9A%84%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C%E3%80%82%20BF%E7%AE%97%E6%B3%95%E6%98%AF%E4%B8%80%E7%A7%8D%E8%9B%AE%E5%8A%9B%E7%AE%97%E6%B3%95%E3%80%82)\n[马拉车算法（Manacher's Algorithm）](https://www.jianshu.com/p/392172762e55)\n[最长回文子串的五种求法(暴力、中点扩散、DP、hash+二分、Manacher)](https://blog.csdn.net/qq_43851311/article/details/113928303)","slug":"KMP和Manacher算法","published":1,"updated":"2022-10-02T14:21:08.366Z","_id":"cl8qyaf040000psttd4x48c0w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"字符串匹配（模式匹配）\"><a href=\"#字符串匹配（模式匹配）\" class=\"headerlink\" title=\"字符串匹配（模式匹配）\"></a>字符串匹配（模式匹配）</h2><p>问题：<br>给定一个主串（以 S 代替）和模式串（以 P 代替），要求找出 P 在 S 中出现的位置，此即串的模式匹配问题。</p>\n<h3 id=\"暴力匹配（BF）\"><a href=\"#暴力匹配（BF）\" class=\"headerlink\" title=\"暴力匹配（BF）\"></a>暴力匹配（BF）</h3><p>暴力匹配即将主串每个元素都作为起点和模式串相比较，直至后续与模式串全部匹配则成功找到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BF</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暴力算法（Brute Force）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">BF</span><span class=\"params\">(String S, String P)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] s = S.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] p = P.toCharArray();</span><br><span class=\"line\">        <span class=\"comment\">// 遍历主串所有元素，从每个元素作为起点和模式串比较</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"comment\">// 从当前i作为起点比较，不等则break，相等则判断下一个。直至判断长度与模式串长度相等。即匹配成功</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; P.length(); j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[temp] != p[j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == P.length()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h3><p>KMP算法是一种改进的字符串匹配算法。<br>从暴力算法中可以看出，每次匹配失败时，都会从主串的下一个字符重新开始与模式串一一比较。即每次失败，模式串只右移了一位。<br>KMP算法的关键是<strong>利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。</strong> 即让模式串尽可能多的向右移。</p>\n<p>匹配失败后，模式串该向右移多少位。将会记录在next数组中，<strong>next数组只与模式串本身有关，与主串无关</strong>。<br>下面来解释下next数组的含义以及求法。</p>\n<p>匹配失败时，主串与模式串失败位置的字符不同，但是模式串这个字符前所有字符与主串这个字符前的字符串是匹配的。<br>如果模式串匹配失败字符串前的字串中，有与开头n个字符长度重复的公共元素。那么下一次比较从重复的地方开始即可。无需从模式串的起始开始，从而减少比较次数。<br>比如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主串：      abcdabcdabd</span><br><span class=\"line\">模式串：    abcdabd</span><br></pre></td></tr></table></figure>\n<p>当匹配到第七个元素时，主串c与模式串d不等。但d前有长度为2的重复公共元素（与开头开始的元素有2长度的重合）：ab<br>所以可以将模式串向右移4位，即使<strong>得从头开始的重复子串后一个元素与匹配失败的元素比较。</strong> 因为前面的元素是匹配过的重复元素。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主串：      abcdabcdabd</span><br><span class=\"line\">模式串：        abcdabd</span><br></pre></td></tr></table></figure>\n\n<p>这个重复的公共元素长度叫 最大前缀后缀公共元素长度<br>对于字符串 abcdabd 来说。它的各个子串的前缀后缀的公共元素的最大长度如下表格所示：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>a</th>\n<th>b</th>\n<th>c</th>\n<th>d</th>\n<th>a</th>\n<th>b</th>\n<th>d</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>最大前缀后缀公共元素长度</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>next数组考虑的是除了当前字符串外的最长相同前缀后缀，所以去除当前字符，只看他前面的。<br>将上表得到的值整体往后移一位即可。<br>同时，模式串首位初值赋为-1。原因是标记开头，当开头不匹配时，模式串右移一位，而不是回到0位置，导致陷入循环。<br>字符串 abcdabd 的 next 数组：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>a</th>\n<th>b</th>\n<th>c</th>\n<th>d</th>\n<th>a</th>\n<th>b</th>\n<th>d</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>最大前缀后缀公共元素长度</td>\n<td>-1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<p>next数组的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> PatternMatching;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KMP</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] getNext(String P) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] p = P.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[P.length()];</span><br><span class=\"line\">        <span class=\"comment\">// 起始位置为-1</span></span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; p.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// p[k]表示前缀，p[j]表示后缀</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == -<span class=\"number\">1</span> || p[k] == p[j]) &#123;</span><br><span class=\"line\">                next[++j] = ++k;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 不匹配，前缀则回到上一个最大重复的位置（next数组构造本身就用到了next数组的特性）</span></span><br><span class=\"line\">                k = next[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>KMP中else部分，与求next数组中的else部分是一样的。<br>KMP实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> PatternMatching;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KMP</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">KMP</span><span class=\"params\">(String S, String P)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] s = S.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] p = P.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] next = getNext(P);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s.length &amp;&amp; j &lt; p.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || s[i] == p[j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">return</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span>= p.length ? i - j : -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求字符串的最长回文子串\"><a href=\"#求字符串的最长回文子串\" class=\"headerlink\" title=\"求字符串的最长回文子串\"></a>求字符串的最长回文子串</h2><h3 id=\"暴力（BF）\"><a href=\"#暴力（BF）\" class=\"headerlink\" title=\"暴力（BF）\"></a>暴力（BF）</h3><p>照例先暴力实现<br>时间复杂度 O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> LongestPalindromicSubstring;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BF</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">BF</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] string = str.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断奇数长度回文</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &gt;= <span class=\"number\">0</span> &amp;&amp; r &lt; str.length() &amp;&amp; string[l] == string[r]) &#123;</span><br><span class=\"line\">                l--;</span><br><span class=\"line\">                r++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result = Math.max(result, r - l - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 判断偶数长度回文</span></span><br><span class=\"line\">            l = i;</span><br><span class=\"line\">            r = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &gt;= <span class=\"number\">0</span> &amp;&amp; r &lt; str.length() &amp;&amp; string[l] == string[r]) &#123;</span><br><span class=\"line\">                l--;</span><br><span class=\"line\">                r++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result = Math.max(result, r - l - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Manacher算法\"><a href=\"#Manacher算法\" class=\"headerlink\" title=\"Manacher算法\"></a>Manacher算法</h3><p>Manacher算法，也叫马拉车算法 <del>（翻译的信达雅呢）</del><br>这个算法用于求字符串的最长回文子串。时间复杂度到了 O(n)</p>\n<p>Manacher的核心就是回文半径的概念。<br>由于回文串的奇偶不一样，处理也不同。所以在处理之前，在每个字符前后添加一个相同字符。这样左右的回文串都会变成奇回文串。<br>比如 abba 通过处理变成 #a#b#b#a#</p>\n<p>回文半径和回文直径：因为处理后回文字符串的长度一定是奇数，所以回文半径是包括回文中心在内的回文子串的一半的长度，回文直径则是回文半径的2倍减1。比如对于字符串 “aba”，在字符 ‘b’ 处的回文半径就是2，回文直径就是3。<br>最右回文边界R：在遍历字符串时，每个字符遍历出的最长回文子串都会有个右边界，而R则是所有已知右边界中最靠右的位置，也就是说R的值是只增不减的。<br>回文中心C：取得当前R的第一次更新时的回文中心。由此可见R和C时伴生的。<br>半径数组：这个数组记录了原字符串中每一个字符对应的最长回文半径。</p>\n<p>过程：从i=0遍历字符串</p>\n<ol>\n<li>当i&gt;R 即i在R外，那直接暴力匹配以i为中心的回文子串</li>\n<li>当i&lt;=R 即i在R内。分为<ol>\n<li>i’的回文半径在R-L内，那么i的回文半径也和i’相同<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/KMP%E5%92%8CManacher%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%96%87%E6%A8%A1%E5%9E%8B1.png\"\n                      alt=\"回文模型1\"\n                ></li>\n<li>i’的回文半径在R-L上，i的回文半径和i’相同，但后面还要继续比较，i的回文半径可能会变大。</li>\n<li>i’的回文半径在R-L外，和上面一样，也需要往后比。(图就不放了，可以参考上面的图，但红线得划到L和R外)</li>\n</ol>\n</li>\n</ol>\n<p>Manacher算法实际是利用了回文的特性，即<strong>回文中的回文不需要再重复比较</strong>，由回文的特性可以跳过已经比较过的（即跳过半径数组中的长度）</p>\n<p>Manacher实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> LongestPalindromicSubstring;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Manacher</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">Manacher</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> str.length() * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] string = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[len];</span><br><span class=\"line\">        <span class=\"type\">char</span>[] str1 = str.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 将字符串中添加特殊字符，让字符串只有奇回文</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            string[i] = (i % <span class=\"number\">2</span>) == <span class=\"number\">0</span> ? <span class=\"string\">&#x27;#&#x27;</span> : str1[index++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 记录回文半径的数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] p = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[len];</span><br><span class=\"line\">        <span class=\"comment\">// r最右回文右边界，c对应的最左回文中心，maxn最大回文半径</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxn</span> <span class=\"operator\">=</span> Integer.MIN_VALUE;</span><br><span class=\"line\">        <span class=\"comment\">// 从左往右遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// i&gt;r 时，回文半径为1，否则回文半径就是 i对应i‘的回文半径 或者 i到r的距离</span></span><br><span class=\"line\">            p[i] = r &gt; i ? Math.min(r - i, p[<span class=\"number\">2</span> * c - i]) : <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i + p[i] &lt; len &amp;&amp; i - p[i] &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (string[i + p[i]] == string[i - p[i]]) &#123;</span><br><span class=\"line\">                    p[i]++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 判断r和c是否可以更新</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + p[i] &gt; r) &#123;</span><br><span class=\"line\">                r = i + p[i];</span><br><span class=\"line\">                c = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 更新最大回文半径</span></span><br><span class=\"line\">            maxn = Math.max(maxn, p[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxn - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>参考文章：</p>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/zhangboy/p/7635627.html\" >字符串匹配KMP算法详解<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.cnblogs.com/liuyangQAQ/p/12310720.html#:~:text=%E5%9B%9B%E7%A7%8D%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0%201%20BF%E7%AE%97%E6%B3%95%EF%BC%9A,BF%E7%AE%97%E6%B3%95%EF%BC%8C%E5%8D%B3%E6%9A%B4%E5%8A%9B%28Brute%20Force%29%E7%AE%97%E6%B3%95%EF%BC%8C%E6%98%AF%E6%99%AE%E9%80%9A%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%EF%BC%8CBF%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%9D%E6%83%B3%E5%B0%B1%E6%98%AF%E5%B0%86%E7%9B%AE%E6%A0%87%E4%B8%B2S%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%8E%E6%A8%A1%E5%BC%8F%E4%B8%B2T%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%EF%BC%8C%E8%8B%A5%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%88%99%E7%BB%A7%E7%BB%AD%E6%AF%94%E8%BE%83S%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%92%8C%20T%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%9B%E8%8B%A5%E4%B8%8D%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%88%99%E6%AF%94%E8%BE%83S%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%92%8CT%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%8C%E4%BE%9D%E6%AC%A1%E6%AF%94%E8%BE%83%E4%B8%8B%E5%8E%BB%EF%BC%8C%E7%9B%B4%E5%88%B0%E5%BE%97%E5%87%BA%E6%9C%80%E5%90%8E%E7%9A%84%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C%E3%80%82%20BF%E7%AE%97%E6%B3%95%E6%98%AF%E4%B8%80%E7%A7%8D%E8%9B%AE%E5%8A%9B%E7%AE%97%E6%B3%95%E3%80%82\" >四种最常见的字符串匹配算法概述<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/392172762e55\" >马拉车算法（Manacher’s Algorithm）<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://blog.csdn.net/qq_43851311/article/details/113928303\" >最长回文子串的五种求法(暴力、中点扩散、DP、hash+二分、Manacher)<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"字符串匹配（模式匹配）\"><a href=\"#字符串匹配（模式匹配）\" class=\"headerlink\" title=\"字符串匹配（模式匹配）\"></a>字符串匹配（模式匹配）</h2><p>问题：<br>给定一个主串（以 S 代替）和模式串（以 P 代替），要求找出 P 在 S 中出现的位置，此即串的模式匹配问题。</p>\n<h3 id=\"暴力匹配（BF）\"><a href=\"#暴力匹配（BF）\" class=\"headerlink\" title=\"暴力匹配（BF）\"></a>暴力匹配（BF）</h3><p>暴力匹配即将主串每个元素都作为起点和模式串相比较，直至后续与模式串全部匹配则成功找到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BF</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暴力算法（Brute Force）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">BF</span><span class=\"params\">(String S, String P)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] s = S.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] p = P.toCharArray();</span><br><span class=\"line\">        <span class=\"comment\">// 遍历主串所有元素，从每个元素作为起点和模式串比较</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> j;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"comment\">// 从当前i作为起点比较，不等则break，相等则判断下一个。直至判断长度与模式串长度相等。即匹配成功</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; P.length(); j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[temp] != p[j]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                temp++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == P.length()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h3><p>KMP算法是一种改进的字符串匹配算法。<br>从暴力算法中可以看出，每次匹配失败时，都会从主串的下一个字符重新开始与模式串一一比较。即每次失败，模式串只右移了一位。<br>KMP算法的关键是<strong>利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。</strong> 即让模式串尽可能多的向右移。</p>\n<p>匹配失败后，模式串该向右移多少位。将会记录在next数组中，<strong>next数组只与模式串本身有关，与主串无关</strong>。<br>下面来解释下next数组的含义以及求法。</p>\n<p>匹配失败时，主串与模式串失败位置的字符不同，但是模式串这个字符前所有字符与主串这个字符前的字符串是匹配的。<br>如果模式串匹配失败字符串前的字串中，有与开头n个字符长度重复的公共元素。那么下一次比较从重复的地方开始即可。无需从模式串的起始开始，从而减少比较次数。<br>比如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主串：      abcdabcdabd</span><br><span class=\"line\">模式串：    abcdabd</span><br></pre></td></tr></table></figure>\n<p>当匹配到第七个元素时，主串c与模式串d不等。但d前有长度为2的重复公共元素（与开头开始的元素有2长度的重合）：ab<br>所以可以将模式串向右移4位，即使<strong>得从头开始的重复子串后一个元素与匹配失败的元素比较。</strong> 因为前面的元素是匹配过的重复元素。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主串：      abcdabcdabd</span><br><span class=\"line\">模式串：        abcdabd</span><br></pre></td></tr></table></figure>\n\n<p>这个重复的公共元素长度叫 最大前缀后缀公共元素长度<br>对于字符串 abcdabd 来说。它的各个子串的前缀后缀的公共元素的最大长度如下表格所示：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>a</th>\n<th>b</th>\n<th>c</th>\n<th>d</th>\n<th>a</th>\n<th>b</th>\n<th>d</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>最大前缀后缀公共元素长度</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>next数组考虑的是除了当前字符串外的最长相同前缀后缀，所以去除当前字符，只看他前面的。<br>将上表得到的值整体往后移一位即可。<br>同时，模式串首位初值赋为-1。原因是标记开头，当开头不匹配时，模式串右移一位，而不是回到0位置，导致陷入循环。<br>字符串 abcdabd 的 next 数组：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>a</th>\n<th>b</th>\n<th>c</th>\n<th>d</th>\n<th>a</th>\n<th>b</th>\n<th>d</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>最大前缀后缀公共元素长度</td>\n<td>-1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<p>next数组的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> PatternMatching;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KMP</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] getNext(String P) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] p = P.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[P.length()];</span><br><span class=\"line\">        <span class=\"comment\">// 起始位置为-1</span></span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt; p.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// p[k]表示前缀，p[j]表示后缀</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == -<span class=\"number\">1</span> || p[k] == p[j]) &#123;</span><br><span class=\"line\">                next[++j] = ++k;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 不匹配，前缀则回到上一个最大重复的位置（next数组构造本身就用到了next数组的特性）</span></span><br><span class=\"line\">                k = next[k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>KMP中else部分，与求next数组中的else部分是一样的。<br>KMP实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> PatternMatching;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KMP</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">KMP</span><span class=\"params\">(String S, String P)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] s = S.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">char</span>[] p = P.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] next = getNext(P);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; s.length &amp;&amp; j &lt; p.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || s[i] == p[j]) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">return</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span>= p.length ? i - j : -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"求字符串的最长回文子串\"><a href=\"#求字符串的最长回文子串\" class=\"headerlink\" title=\"求字符串的最长回文子串\"></a>求字符串的最长回文子串</h2><h3 id=\"暴力（BF）\"><a href=\"#暴力（BF）\" class=\"headerlink\" title=\"暴力（BF）\"></a>暴力（BF）</h3><p>照例先暴力实现<br>时间复杂度 O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> LongestPalindromicSubstring;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BF</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">BF</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] string = str.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断奇数长度回文</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &gt;= <span class=\"number\">0</span> &amp;&amp; r &lt; str.length() &amp;&amp; string[l] == string[r]) &#123;</span><br><span class=\"line\">                l--;</span><br><span class=\"line\">                r++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result = Math.max(result, r - l - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 判断偶数长度回文</span></span><br><span class=\"line\">            l = i;</span><br><span class=\"line\">            r = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &gt;= <span class=\"number\">0</span> &amp;&amp; r &lt; str.length() &amp;&amp; string[l] == string[r]) &#123;</span><br><span class=\"line\">                l--;</span><br><span class=\"line\">                r++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            result = Math.max(result, r - l - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Manacher算法\"><a href=\"#Manacher算法\" class=\"headerlink\" title=\"Manacher算法\"></a>Manacher算法</h3><p>Manacher算法，也叫马拉车算法 <del>（翻译的信达雅呢）</del><br>这个算法用于求字符串的最长回文子串。时间复杂度到了 O(n)</p>\n<p>Manacher的核心就是回文半径的概念。<br>由于回文串的奇偶不一样，处理也不同。所以在处理之前，在每个字符前后添加一个相同字符。这样左右的回文串都会变成奇回文串。<br>比如 abba 通过处理变成 #a#b#b#a#</p>\n<p>回文半径和回文直径：因为处理后回文字符串的长度一定是奇数，所以回文半径是包括回文中心在内的回文子串的一半的长度，回文直径则是回文半径的2倍减1。比如对于字符串 “aba”，在字符 ‘b’ 处的回文半径就是2，回文直径就是3。<br>最右回文边界R：在遍历字符串时，每个字符遍历出的最长回文子串都会有个右边界，而R则是所有已知右边界中最靠右的位置，也就是说R的值是只增不减的。<br>回文中心C：取得当前R的第一次更新时的回文中心。由此可见R和C时伴生的。<br>半径数组：这个数组记录了原字符串中每一个字符对应的最长回文半径。</p>\n<p>过程：从i=0遍历字符串</p>\n<ol>\n<li>当i&gt;R 即i在R外，那直接暴力匹配以i为中心的回文子串</li>\n<li>当i&lt;=R 即i在R内。分为<ol>\n<li>i’的回文半径在R-L内，那么i的回文半径也和i’相同<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/KMP%E5%92%8CManacher%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%96%87%E6%A8%A1%E5%9E%8B1.png\"\n                      alt=\"回文模型1\"\n                ></li>\n<li>i’的回文半径在R-L上，i的回文半径和i’相同，但后面还要继续比较，i的回文半径可能会变大。</li>\n<li>i’的回文半径在R-L外，和上面一样，也需要往后比。(图就不放了，可以参考上面的图，但红线得划到L和R外)</li>\n</ol>\n</li>\n</ol>\n<p>Manacher算法实际是利用了回文的特性，即<strong>回文中的回文不需要再重复比较</strong>，由回文的特性可以跳过已经比较过的（即跳过半径数组中的长度）</p>\n<p>Manacher实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> LongestPalindromicSubstring;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Manacher</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">Manacher</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> str.length() * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] string = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[len];</span><br><span class=\"line\">        <span class=\"type\">char</span>[] str1 = str.toCharArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 将字符串中添加特殊字符，让字符串只有奇回文</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            string[i] = (i % <span class=\"number\">2</span>) == <span class=\"number\">0</span> ? <span class=\"string\">&#x27;#&#x27;</span> : str1[index++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 记录回文半径的数组</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] p = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[len];</span><br><span class=\"line\">        <span class=\"comment\">// r最右回文右边界，c对应的最左回文中心，maxn最大回文半径</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxn</span> <span class=\"operator\">=</span> Integer.MIN_VALUE;</span><br><span class=\"line\">        <span class=\"comment\">// 从左往右遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// i&gt;r 时，回文半径为1，否则回文半径就是 i对应i‘的回文半径 或者 i到r的距离</span></span><br><span class=\"line\">            p[i] = r &gt; i ? Math.min(r - i, p[<span class=\"number\">2</span> * c - i]) : <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i + p[i] &lt; len &amp;&amp; i - p[i] &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (string[i + p[i]] == string[i - p[i]]) &#123;</span><br><span class=\"line\">                    p[i]++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 判断r和c是否可以更新</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + p[i] &gt; r) &#123;</span><br><span class=\"line\">                r = i + p[i];</span><br><span class=\"line\">                c = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 更新最大回文半径</span></span><br><span class=\"line\">            maxn = Math.max(maxn, p[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxn - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>参考文章：</p>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/zhangboy/p/7635627.html\" >字符串匹配KMP算法详解<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.cnblogs.com/liuyangQAQ/p/12310720.html#:~:text=%E5%9B%9B%E7%A7%8D%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0%201%20BF%E7%AE%97%E6%B3%95%EF%BC%9A,BF%E7%AE%97%E6%B3%95%EF%BC%8C%E5%8D%B3%E6%9A%B4%E5%8A%9B%28Brute%20Force%29%E7%AE%97%E6%B3%95%EF%BC%8C%E6%98%AF%E6%99%AE%E9%80%9A%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%EF%BC%8CBF%E7%AE%97%E6%B3%95%E7%9A%84%E6%80%9D%E6%83%B3%E5%B0%B1%E6%98%AF%E5%B0%86%E7%9B%AE%E6%A0%87%E4%B8%B2S%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%8E%E6%A8%A1%E5%BC%8F%E4%B8%B2T%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%EF%BC%8C%E8%8B%A5%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%88%99%E7%BB%A7%E7%BB%AD%E6%AF%94%E8%BE%83S%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%92%8C%20T%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%9B%E8%8B%A5%E4%B8%8D%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%88%99%E6%AF%94%E8%BE%83S%E7%9A%84%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%92%8CT%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%8C%E4%BE%9D%E6%AC%A1%E6%AF%94%E8%BE%83%E4%B8%8B%E5%8E%BB%EF%BC%8C%E7%9B%B4%E5%88%B0%E5%BE%97%E5%87%BA%E6%9C%80%E5%90%8E%E7%9A%84%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C%E3%80%82%20BF%E7%AE%97%E6%B3%95%E6%98%AF%E4%B8%80%E7%A7%8D%E8%9B%AE%E5%8A%9B%E7%AE%97%E6%B3%95%E3%80%82\" >四种最常见的字符串匹配算法概述<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://www.jianshu.com/p/392172762e55\" >马拉车算法（Manacher’s Algorithm）<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://blog.csdn.net/qq_43851311/article/details/113928303\" >最长回文子串的五种求法(暴力、中点扩散、DP、hash+二分、Manacher)<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"设计模式","date":"2022-10-10T11:38:48.000Z","_content":"\n## 设计模式概述\n\n### 产生背景\n\n\"设计模式\"最初并不是出现在软件设计中，而是被用于建筑领域的设计中。\n1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任克里斯守托夫·亚历山大(Christopher Alexander)在他的作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了253种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。\n1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995年，艾瑞克伽马(ErichGamma)、理查德-海尔姆(Richard Helm)、拉尔夫·约翰森(Ralph Johnson)、约翰威利斯迪斯(John Vlissides)等4位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了23个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这4位作者在软件开发领域里也以他们的\"四人组\"(Gang of Four,GoF)著称。\n\n### 软件设计模式概念\n\n软件设计模式(Software Design Pattern),又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。\n\n### 使用设计模式的必要性\n\n设计模式的本质是面向对设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。\n正确使用设计模式具有以下优点：\n* 使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。\n* 使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。\n\n### 设计模式分类\n\n* 创建型模式\n用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等5种创健型模式。\n* 结构型模式\n用于描述如何将类或对像按某种布局组成更大的结构，（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等7种结构型模式。\n* 行为型模式\n用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。(四人组)书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等11种行为型模式\n\n## UML\n\n统一建模语言(Unified Modeling Language,UML)是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。\nUML从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等9种图。\n\n### 类图概述\n\n类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。\n\n### 类图的作用\n\n* 在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解：\n* 类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。\n\n### 类图表示法\n\n#### 类的表示方式\n\nUML类图中，类使用包含类名、属性(field)和方法(method)且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个屈性，以及work()方法。\n![类的表示方式](../images/设计模式/类的表示方式.png)\n属性/方法名前加的加号和减号表示了这个属性/方法的可见性，UML图中表示可见性的符号有三种：\n* +:表示pub1ic\n* -:表示riv为l.片\n* #:表示rotectod\n属性的完整表示方式是：**可见性 名称：类型[ = 缺省值]**\n方法的完整表示方式是：**可见性 名称（参数列表）[ ： 返回类型]**\n\n#### 类和类之间的表示方式\n\n##### 关联关系\n\n关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。\n关联又可以分为单向关联，双向关联，自关联。\n\n1. 单向关联\n在UML类图中单向关联用一个带箭头的实线表示。\n2. 双向关联\n在UML类图中，双向关联用一个不带箭头的直线表示。\n3. 自关联\n自关联在UML类图中用一个带有箭头且指向自身的线表示。\n\n##### 聚合关系\n\n聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。\n聚关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。\n例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。\n在UML类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。\n\n##### 组合关系\n\n组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。\n在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部盼对象不能脱离整体对象而存在。\n例如，头和嘴的关系，没有了头，嘴也就不存在了。\n在UML类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。\n\n##### 依赖关系\n\n依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。\n在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。\n在UML类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/设计模式.md","raw":"---\ntitle: 设计模式\ndate: 2022-10-10 19:38:48\ntags:\n- 设计模式\n- java\n- UML\ncategories:\n- 学习笔记\n---\n\n## 设计模式概述\n\n### 产生背景\n\n\"设计模式\"最初并不是出现在软件设计中，而是被用于建筑领域的设计中。\n1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任克里斯守托夫·亚历山大(Christopher Alexander)在他的作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了253种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。\n1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995年，艾瑞克伽马(ErichGamma)、理查德-海尔姆(Richard Helm)、拉尔夫·约翰森(Ralph Johnson)、约翰威利斯迪斯(John Vlissides)等4位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了23个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这4位作者在软件开发领域里也以他们的\"四人组\"(Gang of Four,GoF)著称。\n\n### 软件设计模式概念\n\n软件设计模式(Software Design Pattern),又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。\n\n### 使用设计模式的必要性\n\n设计模式的本质是面向对设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。\n正确使用设计模式具有以下优点：\n* 使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。\n* 使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。\n\n### 设计模式分类\n\n* 创建型模式\n用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等5种创健型模式。\n* 结构型模式\n用于描述如何将类或对像按某种布局组成更大的结构，（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等7种结构型模式。\n* 行为型模式\n用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。(四人组)书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等11种行为型模式\n\n## UML\n\n统一建模语言(Unified Modeling Language,UML)是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。\nUML从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等9种图。\n\n### 类图概述\n\n类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。\n\n### 类图的作用\n\n* 在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解：\n* 类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。\n\n### 类图表示法\n\n#### 类的表示方式\n\nUML类图中，类使用包含类名、属性(field)和方法(method)且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个屈性，以及work()方法。\n![类的表示方式](../images/设计模式/类的表示方式.png)\n属性/方法名前加的加号和减号表示了这个属性/方法的可见性，UML图中表示可见性的符号有三种：\n* +:表示pub1ic\n* -:表示riv为l.片\n* #:表示rotectod\n属性的完整表示方式是：**可见性 名称：类型[ = 缺省值]**\n方法的完整表示方式是：**可见性 名称（参数列表）[ ： 返回类型]**\n\n#### 类和类之间的表示方式\n\n##### 关联关系\n\n关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。\n关联又可以分为单向关联，双向关联，自关联。\n\n1. 单向关联\n在UML类图中单向关联用一个带箭头的实线表示。\n2. 双向关联\n在UML类图中，双向关联用一个不带箭头的直线表示。\n3. 自关联\n自关联在UML类图中用一个带有箭头且指向自身的线表示。\n\n##### 聚合关系\n\n聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。\n聚关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。\n例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。\n在UML类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。\n\n##### 组合关系\n\n组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。\n在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部盼对象不能脱离整体对象而存在。\n例如，头和嘴的关系，没有了头，嘴也就不存在了。\n在UML类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。\n\n##### 依赖关系\n\n依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。\n在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。\n在UML类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"设计模式","published":1,"updated":"2022-10-11T13:53:01.162Z","_id":"cl92pxqyu0000cwttfdxh09bc","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"设计模式概述\"><a href=\"#设计模式概述\" class=\"headerlink\" title=\"设计模式概述\"></a>设计模式概述</h2><h3 id=\"产生背景\"><a href=\"#产生背景\" class=\"headerlink\" title=\"产生背景\"></a>产生背景</h3><p>“设计模式”最初并不是出现在软件设计中，而是被用于建筑领域的设计中。<br>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任克里斯守托夫·亚历山大(Christopher Alexander)在他的作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了253种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。<br>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995年，艾瑞克伽马(ErichGamma)、理查德-海尔姆(Richard Helm)、拉尔夫·约翰森(Ralph Johnson)、约翰威利斯迪斯(John Vlissides)等4位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了23个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这4位作者在软件开发领域里也以他们的”四人组”(Gang of Four,GoF)著称。</p>\n<h3 id=\"软件设计模式概念\"><a href=\"#软件设计模式概念\" class=\"headerlink\" title=\"软件设计模式概念\"></a>软件设计模式概念</h3><p>软件设计模式(Software Design Pattern),又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p>\n<h3 id=\"使用设计模式的必要性\"><a href=\"#使用设计模式的必要性\" class=\"headerlink\" title=\"使用设计模式的必要性\"></a>使用设计模式的必要性</h3><p>设计模式的本质是面向对设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。<br>正确使用设计模式具有以下优点：</p>\n<ul>\n<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li>\n<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li>\n</ul>\n<h3 id=\"设计模式分类\"><a href=\"#设计模式分类\" class=\"headerlink\" title=\"设计模式分类\"></a>设计模式分类</h3><ul>\n<li>创建型模式<br>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等5种创健型模式。</li>\n<li>结构型模式<br>用于描述如何将类或对像按某种布局组成更大的结构，（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等7种结构型模式。</li>\n<li>行为型模式<br>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。(四人组)书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等11种行为型模式</li>\n</ul>\n<h2 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h2><p>统一建模语言(Unified Modeling Language,UML)是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。<br>UML从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等9种图。</p>\n<h3 id=\"类图概述\"><a href=\"#类图概述\" class=\"headerlink\" title=\"类图概述\"></a>类图概述</h3><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p>\n<h3 id=\"类图的作用\"><a href=\"#类图的作用\" class=\"headerlink\" title=\"类图的作用\"></a>类图的作用</h3><ul>\n<li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解：</li>\n<li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li>\n</ul>\n<h3 id=\"类图表示法\"><a href=\"#类图表示法\" class=\"headerlink\" title=\"类图表示法\"></a>类图表示法</h3><h4 id=\"类的表示方式\"><a href=\"#类的表示方式\" class=\"headerlink\" title=\"类的表示方式\"></a>类的表示方式</h4><p>UML类图中，类使用包含类名、属性(field)和方法(method)且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个屈性，以及work()方法。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%B1%BB%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F.png\"\n                      alt=\"类的表示方式\"\n                ><br>属性/方法名前加的加号和减号表示了这个属性/方法的可见性，UML图中表示可见性的符号有三种：</p>\n<ul>\n<li>+:表示pub1ic</li>\n<li>-:表示riv为l.片</li>\n<li>#:表示rotectod<br>属性的完整表示方式是：<strong>可见性 名称：类型[ = 缺省值]</strong><br>方法的完整表示方式是：<strong>可见性 名称（参数列表）[ ： 返回类型]</strong></li>\n</ul>\n<h4 id=\"类和类之间的表示方式\"><a href=\"#类和类之间的表示方式\" class=\"headerlink\" title=\"类和类之间的表示方式\"></a>类和类之间的表示方式</h4><h5 id=\"关联关系\"><a href=\"#关联关系\" class=\"headerlink\" title=\"关联关系\"></a>关联关系</h5><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。<br>关联又可以分为单向关联，双向关联，自关联。</p>\n<ol>\n<li>单向关联<br>在UML类图中单向关联用一个带箭头的实线表示。</li>\n<li>双向关联<br>在UML类图中，双向关联用一个不带箭头的直线表示。</li>\n<li>自关联<br>自关联在UML类图中用一个带有箭头且指向自身的线表示。</li>\n</ol>\n<h5 id=\"聚合关系\"><a href=\"#聚合关系\" class=\"headerlink\" title=\"聚合关系\"></a>聚合关系</h5><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。<br>聚关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。<br>例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。<br>在UML类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。</p>\n<h5 id=\"组合关系\"><a href=\"#组合关系\" class=\"headerlink\" title=\"组合关系\"></a>组合关系</h5><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。<br>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部盼对象不能脱离整体对象而存在。<br>例如，头和嘴的关系，没有了头，嘴也就不存在了。<br>在UML类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。</p>\n<h5 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h5><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。<br>在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。<br>在UML类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。</p>\n","site":{"data":{"link":[{"class_name":"良师益友","class_desc":"是很厉害很厉害的大佬！","link_list":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","descr":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","descr":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","descr":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","descr":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","descr":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","descr":"这只是一个小破站而已！"}]},{"class_name":"我的信息","class_desc":"添加友链可以发送邮件，不定期添加。","link_list":[{"name":"咕咕咕","link":"https://cooooing.github.io/","avatar":"https://s1.ax1x.com/2022/03/13/bqyIpT.jpg","descr":"路漫漫其修远兮，吾将上下而求索。"}]}],"links":[{"name":"鼠鼠在碎觉","link":"https://www.sszsj.cc","avatar":"https://tmx.fishpi.cn/img/head.jpg","description":"我是不慎落入世界的一滴水墨"},{"name":"青虬","link":"https://reol077.github.io/","avatar":"https://s1.ax1x.com/2022/03/18/qF2YJ1.jpg","description":"囊中羞涩，不知世锦繁华"},{"name":"顾のEvery Day","link":"https://gufanstudy.github.io/","avatar":"https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/avatar.png","description":"冲和者，淡泊平和，谦冲守正"},{"name":"小于同学的异世界","link":"https://yby.zone","avatar":"https://source.yby.zone/tx.jpg","description":"为吾为枝，余地三尺，以己为棋，胜天半子。"},{"name":"Mlikiowa Home Village","link":"https://nanaeo.cn/","avatar":"https://q1.qlogo.cn/g?b=qq&nk=1627126029&s=100","description":"A litter Village With Mlikiowa"},{"name":"季节的雪","link":"https://yang5201314.cn","avatar":"https://gitee.com/zhen-wang-yang/drawing-bed/raw/master/imge/bUncuj.webp","description":"错过就真的错过了..."},{"name":"忘忧草","link":"https://owo.wyc.rest/","avatar":"https://owo.wyc.rest/img/%E4%B8%87%E5%8F%B6.jpg","description":"这只是一个小破站而已！"}]}},"excerpt":"","more":"<h2 id=\"设计模式概述\"><a href=\"#设计模式概述\" class=\"headerlink\" title=\"设计模式概述\"></a>设计模式概述</h2><h3 id=\"产生背景\"><a href=\"#产生背景\" class=\"headerlink\" title=\"产生背景\"></a>产生背景</h3><p>“设计模式”最初并不是出现在软件设计中，而是被用于建筑领域的设计中。<br>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任克里斯守托夫·亚历山大(Christopher Alexander)在他的作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了253种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。<br>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995年，艾瑞克伽马(ErichGamma)、理查德-海尔姆(Richard Helm)、拉尔夫·约翰森(Ralph Johnson)、约翰威利斯迪斯(John Vlissides)等4位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了23个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这4位作者在软件开发领域里也以他们的”四人组”(Gang of Four,GoF)著称。</p>\n<h3 id=\"软件设计模式概念\"><a href=\"#软件设计模式概念\" class=\"headerlink\" title=\"软件设计模式概念\"></a>软件设计模式概念</h3><p>软件设计模式(Software Design Pattern),又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p>\n<h3 id=\"使用设计模式的必要性\"><a href=\"#使用设计模式的必要性\" class=\"headerlink\" title=\"使用设计模式的必要性\"></a>使用设计模式的必要性</h3><p>设计模式的本质是面向对设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。<br>正确使用设计模式具有以下优点：</p>\n<ul>\n<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li>\n<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li>\n</ul>\n<h3 id=\"设计模式分类\"><a href=\"#设计模式分类\" class=\"headerlink\" title=\"设计模式分类\"></a>设计模式分类</h3><ul>\n<li>创建型模式<br>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等5种创健型模式。</li>\n<li>结构型模式<br>用于描述如何将类或对像按某种布局组成更大的结构，（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等7种结构型模式。</li>\n<li>行为型模式<br>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。(四人组)书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等11种行为型模式</li>\n</ul>\n<h2 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h2><p>统一建模语言(Unified Modeling Language,UML)是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。<br>UML从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等9种图。</p>\n<h3 id=\"类图概述\"><a href=\"#类图概述\" class=\"headerlink\" title=\"类图概述\"></a>类图概述</h3><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p>\n<h3 id=\"类图的作用\"><a href=\"#类图的作用\" class=\"headerlink\" title=\"类图的作用\"></a>类图的作用</h3><ul>\n<li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解：</li>\n<li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li>\n</ul>\n<h3 id=\"类图表示法\"><a href=\"#类图表示法\" class=\"headerlink\" title=\"类图表示法\"></a>类图表示法</h3><h4 id=\"类的表示方式\"><a href=\"#类的表示方式\" class=\"headerlink\" title=\"类的表示方式\"></a>类的表示方式</h4><p>UML类图中，类使用包含类名、属性(field)和方法(method)且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个屈性，以及work()方法。<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/../images/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%B1%BB%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F.png\"\n                      alt=\"类的表示方式\"\n                ><br>属性/方法名前加的加号和减号表示了这个属性/方法的可见性，UML图中表示可见性的符号有三种：</p>\n<ul>\n<li>+:表示pub1ic</li>\n<li>-:表示riv为l.片</li>\n<li>#:表示rotectod<br>属性的完整表示方式是：<strong>可见性 名称：类型[ = 缺省值]</strong><br>方法的完整表示方式是：<strong>可见性 名称（参数列表）[ ： 返回类型]</strong></li>\n</ul>\n<h4 id=\"类和类之间的表示方式\"><a href=\"#类和类之间的表示方式\" class=\"headerlink\" title=\"类和类之间的表示方式\"></a>类和类之间的表示方式</h4><h5 id=\"关联关系\"><a href=\"#关联关系\" class=\"headerlink\" title=\"关联关系\"></a>关联关系</h5><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。<br>关联又可以分为单向关联，双向关联，自关联。</p>\n<ol>\n<li>单向关联<br>在UML类图中单向关联用一个带箭头的实线表示。</li>\n<li>双向关联<br>在UML类图中，双向关联用一个不带箭头的直线表示。</li>\n<li>自关联<br>自关联在UML类图中用一个带有箭头且指向自身的线表示。</li>\n</ol>\n<h5 id=\"聚合关系\"><a href=\"#聚合关系\" class=\"headerlink\" title=\"聚合关系\"></a>聚合关系</h5><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。<br>聚关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。<br>例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。<br>在UML类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。</p>\n<h5 id=\"组合关系\"><a href=\"#组合关系\" class=\"headerlink\" title=\"组合关系\"></a>组合关系</h5><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。<br>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部盼对象不能脱离整体对象而存在。<br>例如，头和嘴的关系，没有了头，嘴也就不存在了。<br>在UML类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。</p>\n<h5 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h5><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。<br>在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。<br>在UML类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl7ketbdf0009o8tteg4bgsyd","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7ketbdk000ho8ttciusfvgs"},{"post_id":"cl7ketbd70001o8tt2aov6uqm","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7ketbdm000lo8ttbliz1qpe"},{"post_id":"cl7ketbdg000bo8tt78na116l","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7ketbdn000no8tt9211d1av"},{"post_id":"cl7ketbdh000fo8tt8mcb48ms","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7ketbdn000po8ttdpfo5r85"},{"post_id":"cl7ketbdb0003o8tt4kxkfwki","category_id":"cl7ketbdh000co8tt258j00cs","_id":"cl7ketbdo000so8tth0uhg67v"},{"post_id":"cl7ketbdl000ko8tte7ui9ant","category_id":"cl7ketbdh000co8tt258j00cs","_id":"cl7ketbdo000vo8ttcmw558tu"},{"post_id":"cl7ketbde0007o8tt4lloe0rf","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7ketbdo000xo8ttcw3y0c0w"},{"post_id":"cl7ketbdm000mo8tt5h8q2moo","category_id":"cl7ketbdo000ro8tt60wsbnu0","_id":"cl7ketbdp0010o8ttfbu4e5z9"},{"post_id":"cl7ketbdu001mo8ttei7hgrtw","category_id":"cl7ketbdo000ro8tt60wsbnu0","_id":"cl7ketbdw001so8tt18f75ol2"},{"post_id":"cl7ketbdw001ro8tt255jg6h4","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7ketbdz0020o8ttf961hopm"},{"post_id":"cl7ketbdu001no8tt3tml6qb9","category_id":"cl7ketbdw001qo8ttheg567a8","_id":"cl7ketbe00022o8tt5land7ab"},{"post_id":"cl7ketbdx001wo8tte5x87ax1","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7ketbe00024o8tt88owaqhc"},{"post_id":"cl7ketbdy001zo8tt0qirgj85","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7ketbe10026o8tt4v2hav15"},{"post_id":"cl7ketbdv001po8tt1axy1cdd","category_id":"cl7ketbdy001xo8ttgxvh4fg7","_id":"cl7ketbe10027o8ttd64n7zat"},{"post_id":"cl7ketbdw001to8tt7xy8a3kr","category_id":"cl7ketbdy001xo8ttgxvh4fg7","_id":"cl7ketbe10029o8tt22eeepkq"},{"post_id":"cl7ketbe8002qo8ttbac3g6kr","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7ketbe9002so8tt04l4dfyv"},{"post_id":"cl7ketbec002wo8tth8em951r","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7ketbed002zo8ttgnlu1se9"},{"post_id":"cl7x0xnhb00005ktt6nhlg1o8","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl7x0xnhj00025ktt7grq5oa9"},{"post_id":"cl83qro8l0001g0tt0qb32x80","category_id":"cl7ketbdy001xo8ttgxvh4fg7","_id":"cl83qro8s0004g0ttcmoc9edw"},{"post_id":"cl841lfpi000ag0tte7zmdyaf","category_id":"cl7ketbdy001xo8ttgxvh4fg7","_id":"cl842cz4e0001tctt20xn4w0e"},{"post_id":"cl8g01tbs0000qgtt03g2dowg","category_id":"cl7ketbdy001xo8ttgxvh4fg7","_id":"cl8g01tc40002qgttb0jwcwgw"},{"post_id":"cl8h3ibcr0000wkttfrmwcvnv","category_id":"cl7ketbdy001xo8ttgxvh4fg7","_id":"cl8h3ibdv0002wktta87lcvhi"},{"post_id":"cl8qyaf040000psttd4x48c0w","category_id":"cl7ketbdy001xo8ttgxvh4fg7","_id":"cl8qyaf0e0002pstt30x55bro"},{"post_id":"cl92pxqyu0000cwttfdxh09bc","category_id":"cl7ketbdc0004o8ttf47f5rct","_id":"cl92pxqz30002cwtt82t35vwu"}],"PostTag":[{"post_id":"cl7ketbd70001o8tt2aov6uqm","tag_id":"cl7ketbdd0005o8tt38m3fkt5","_id":"cl7ketbdh000eo8tt3wke5ury"},{"post_id":"cl7ketbdb0003o8tt4kxkfwki","tag_id":"cl7ketbdh000do8tt6tofgnw3","_id":"cl7ketbdn000qo8ttbxpnambj"},{"post_id":"cl7ketbdb0003o8tt4kxkfwki","tag_id":"cl7ketbdk000jo8ttehjb8mvn","_id":"cl7ketbdo000to8tt7jvy8glq"},{"post_id":"cl7ketbde0007o8tt4lloe0rf","tag_id":"cl7ketbdn000oo8tth9vq2p9d","_id":"cl7ketbdo000wo8ttd40g261k"},{"post_id":"cl7ketbdf0009o8tteg4bgsyd","tag_id":"cl7ketbdo000uo8ttd8m7dtz7","_id":"cl7ketbdp000zo8tth02p441h"},{"post_id":"cl7ketbdg000bo8tt78na116l","tag_id":"cl7ketbdo000yo8tt5r5v4m6o","_id":"cl7ketbdp0012o8ttbswzgmuq"},{"post_id":"cl7ketbdh000fo8tt8mcb48ms","tag_id":"cl7ketbdp0011o8ttfzoo1jxx","_id":"cl7ketbdq0015o8ttd8ik7k0b"},{"post_id":"cl7ketbdh000fo8tt8mcb48ms","tag_id":"cl7ketbdp0013o8ttgsbq9aag","_id":"cl7ketbdq0016o8tt4zix5bu9"},{"post_id":"cl7ketbdl000ko8tte7ui9ant","tag_id":"cl7ketbdp0014o8tt1nou3tns","_id":"cl7ketbdq0018o8tt1djfh7i1"},{"post_id":"cl7ketbdm000mo8tt5h8q2moo","tag_id":"cl7ketbdq0017o8tt0tmy86cw","_id":"cl7ketbds001fo8ttgrw32s4c"},{"post_id":"cl7ketbdm000mo8tt5h8q2moo","tag_id":"cl7ketbdq0019o8ttg57gei7f","_id":"cl7ketbds001go8tt861ve8je"},{"post_id":"cl7ketbdm000mo8tt5h8q2moo","tag_id":"cl7ketbdq001ao8tta1t9519x","_id":"cl7ketbds001ho8ttardr0xtn"},{"post_id":"cl7ketbdm000mo8tt5h8q2moo","tag_id":"cl7ketbdr001bo8tt7bud4v4q","_id":"cl7ketbds001io8tt8w7u3n4s"},{"post_id":"cl7ketbdm000mo8tt5h8q2moo","tag_id":"cl7ketbdp0013o8ttgsbq9aag","_id":"cl7ketbds001jo8tt7juhhkdj"},{"post_id":"cl7ketbdm000mo8tt5h8q2moo","tag_id":"cl7ketbdr001do8tt1xuofe2d","_id":"cl7ketbds001ko8ttddhyduja"},{"post_id":"cl7ketbdm000mo8tt5h8q2moo","tag_id":"cl7ketbdr001eo8tt8vtdd22j","_id":"cl7ketbds001lo8ttd5rp9tad"},{"post_id":"cl7ketbdu001mo8ttei7hgrtw","tag_id":"cl7ketbdv001oo8tt57j7g27h","_id":"cl7ketbdx001vo8tt6utrakwx"},{"post_id":"cl7ketbdu001mo8ttei7hgrtw","tag_id":"cl7ketbdq0019o8ttg57gei7f","_id":"cl7ketbdy001yo8ttbvk3e7mz"},{"post_id":"cl7ketbdu001no8tt3tml6qb9","tag_id":"cl7ketbdx001uo8tt2p8jb6zg","_id":"cl7ketbe1002ao8tt3pl3dava"},{"post_id":"cl7ketbdu001no8tt3tml6qb9","tag_id":"cl7ketbdz0021o8ttenmyg591","_id":"cl7ketbe1002bo8tte0775upc"},{"post_id":"cl7ketbdu001no8tt3tml6qb9","tag_id":"cl7ketbe00025o8tt42b03o5h","_id":"cl7ketbe2002do8tt6jwe9mvl"},{"post_id":"cl7ketbdv001po8tt1axy1cdd","tag_id":"cl7ketbdq0019o8ttg57gei7f","_id":"cl7ketbe3002eo8tt44nm20v3"},{"post_id":"cl7ketbdv001po8tt1axy1cdd","tag_id":"cl7ketbe10028o8tt071n5rt5","_id":"cl7ketbe3002go8tt8avg8c1p"},{"post_id":"cl7ketbdw001ro8tt255jg6h4","tag_id":"cl7ketbe1002co8ttd8i8ggo6","_id":"cl7ketbe3002ho8ttgwwp1clh"},{"post_id":"cl7ketbdw001to8tt7xy8a3kr","tag_id":"cl7ketbdq0019o8ttg57gei7f","_id":"cl7ketbe3002jo8tt2b66folc"},{"post_id":"cl7ketbdw001to8tt7xy8a3kr","tag_id":"cl7ketbe10028o8tt071n5rt5","_id":"cl7ketbe4002ko8tt7lpygx9i"},{"post_id":"cl7ketbdx001wo8tte5x87ax1","tag_id":"cl7ketbe3002io8ttd7ep8fgb","_id":"cl7ketbe6002no8tth1ejh03a"},{"post_id":"cl7ketbdx001wo8tte5x87ax1","tag_id":"cl7ketbe4002lo8ttb0hu6coe","_id":"cl7ketbe6002oo8ttae8b3pj4"},{"post_id":"cl7ketbdy001zo8tt0qirgj85","tag_id":"cl7ketbe4002mo8ttcty9f0cx","_id":"cl7ketbe7002po8tt9bj801yj"},{"post_id":"cl7ketbe8002qo8ttbac3g6kr","tag_id":"cl7ketbe8002ro8ttgw5o7v26","_id":"cl7ketbe9002uo8tt65mh2haf"},{"post_id":"cl7ketbe8002qo8ttbac3g6kr","tag_id":"cl7ketbe9002to8tt5uq15hms","_id":"cl7ketbe9002vo8ttcpb78mih"},{"post_id":"cl7ketbec002wo8tth8em951r","tag_id":"cl7ketbdv001oo8tt57j7g27h","_id":"cl7ketbed002xo8ttd51rdllr"},{"post_id":"cl7ketbec002wo8tth8em951r","tag_id":"cl7ketbdq0019o8ttg57gei7f","_id":"cl7ketbed002yo8ttef3s2ikj"},{"post_id":"cl7x0xnhb00005ktt6nhlg1o8","tag_id":"cl7ketbdp0011o8ttfzoo1jxx","_id":"cl7x0xnhj00045ktt4914786u"},{"post_id":"cl7x0xnhb00005ktt6nhlg1o8","tag_id":"cl7x0xnhe00015ktt8n7zgbhz","_id":"cl7x0xnhk00055kttejy015g6"},{"post_id":"cl7x0xnhb00005ktt6nhlg1o8","tag_id":"cl7x0xnhj00035ktthvyx1xev","_id":"cl7x0xnhk00065ktt2l359o70"},{"post_id":"cl7ketbdw001to8tt7xy8a3kr","tag_id":"cl83qro8b0000g0ttciz040iw","_id":"cl83qro8s0003g0ttbq77hr7e"},{"post_id":"cl7ketbdv001po8tt1axy1cdd","tag_id":"cl83qro8b0000g0ttciz040iw","_id":"cl83qro8u0006g0tt9zczff4k"},{"post_id":"cl83qro8l0001g0tt0qb32x80","tag_id":"cl7ketbdq0019o8ttg57gei7f","_id":"cl83qro8u0007g0tthdlmgrlr"},{"post_id":"cl83qro8l0001g0tt0qb32x80","tag_id":"cl7ketbe10028o8tt071n5rt5","_id":"cl83qro8u0008g0tt55c5gll9"},{"post_id":"cl83qro8l0001g0tt0qb32x80","tag_id":"cl83qro8b0000g0ttciz040iw","_id":"cl83qro8v0009g0tt5yvw8o5w"},{"post_id":"cl841lfpi000ag0tte7zmdyaf","tag_id":"cl7ketbdq0019o8ttg57gei7f","_id":"cl842cz4f0003tctt5imaf5ux"},{"post_id":"cl841lfpi000ag0tte7zmdyaf","tag_id":"cl7ketbe10028o8tt071n5rt5","_id":"cl842cz4f0004tctt5tjf1q84"},{"post_id":"cl841lfpi000ag0tte7zmdyaf","tag_id":"cl842cz4c0000tcttaopcgta2","_id":"cl842cz4f0005tctt7uf7coxv"},{"post_id":"cl841lfpi000ag0tte7zmdyaf","tag_id":"cl842cz4e0002tcttdju8bwus","_id":"cl842cz4f0006tctt4siq23sg"},{"post_id":"cl8g01tbs0000qgtt03g2dowg","tag_id":"cl8g01tbw0001qgtt9ylo48gr","_id":"cl8g01tc60005qgttbvc34cqg"},{"post_id":"cl8g01tbs0000qgtt03g2dowg","tag_id":"cl8g01tc50003qgttf0s5d0ec","_id":"cl8g01tc60006qgttc8h40q0j"},{"post_id":"cl8g01tbs0000qgtt03g2dowg","tag_id":"cl8g01tc50004qgtt8pad1kpg","_id":"cl8g01tc60007qgttdkxldtvp"},{"post_id":"cl8h3ibcr0000wkttfrmwcvnv","tag_id":"cl8g01tbw0001qgtt9ylo48gr","_id":"cl8h3ibdw0003wkttacvn0rvf"},{"post_id":"cl8h3ibcr0000wkttfrmwcvnv","tag_id":"cl8h3ibd90001wktt50m11bba","_id":"cl8h3ibdx0004wkttetlqb6kk"},{"post_id":"cl8qyaf040000psttd4x48c0w","tag_id":"cl8qyaf070001psttb7411849","_id":"cl8qyaf0f0005pstth947bcxx"},{"post_id":"cl8qyaf040000psttd4x48c0w","tag_id":"cl8qyaf0e0003psttemxrgme0","_id":"cl8qyaf0f0006pstth1ga7r4j"},{"post_id":"cl8qyaf040000psttd4x48c0w","tag_id":"cl8qyaf0e0004pstt6hz26qqk","_id":"cl8qyaf0f0007pstta0p7eprv"},{"post_id":"cl92pxqyu0000cwttfdxh09bc","tag_id":"cl92pxqyw0001cwttfzqcf3vr","_id":"cl92pxqz30003cwttbhs1hh2u"},{"post_id":"cl92pxqyu0000cwttfdxh09bc","tag_id":"cl7ketbdq0019o8ttg57gei7f","_id":"cl92pxqz30004cwttfcm1g0m0"},{"post_id":"cl92pxqyu0000cwttfdxh09bc","tag_id":"cl949a3no0000lktt931z16o2","_id":"cl949a3nw0001lkttdbi71x12"}],"Tag":[{"name":"docker","_id":"cl7ketbdd0005o8tt38m3fkt5"},{"name":"APlayer","_id":"cl7ketbdh000do8tt6tofgnw3"},{"name":"MetingJS","_id":"cl7ketbdk000jo8ttehjb8mvn"},{"name":"FastDFS","_id":"cl7ketbdn000oo8tth9vq2p9d"},{"name":"markdown","_id":"cl7ketbdo000uo8ttd8m7dtz7"},{"name":"Nginx","_id":"cl7ketbdo000yo8tt5r5v4m6o"},{"name":"spring","_id":"cl7ketbdp0011o8ttfzoo1jxx"},{"name":"session","_id":"cl7ketbdp0013o8ttgsbq9aag"},{"name":"hexo","_id":"cl7ketbdp0014o8tt1nou3tns"},{"name":"bug","_id":"cl7ketbdq0017o8tt0tmy86cw"},{"name":"java","_id":"cl7ketbdq0019o8ttg57gei7f"},{"name":"MD5","_id":"cl7ketbdq001ao8tta1t9519x"},{"name":"ip","_id":"cl7ketbdr001bo8tt7bud4v4q"},{"name":"mail","_id":"cl7ketbdr001do8tt1xuofe2d"},{"name":"数据库连接池","_id":"cl7ketbdr001eo8tt8vtdd22j"},{"name":"SpringBoot","_id":"cl7ketbdv001oo8tt57j7g27h"},{"name":"游","_id":"cl7ketbdx001uo8tt2p8jb6zg"},{"name":"南京","_id":"cl7ketbdz0021o8ttenmyg591"},{"name":"多图","_id":"cl7ketbe00025o8tt42b03o5h"},{"name":"算法","_id":"cl7ketbe10028o8tt071n5rt5"},{"name":"计组","_id":"cl7ketbe1002co8ttd8i8ggo6"},{"name":"Redis","_id":"cl7ketbe3002io8ttd7ep8fgb"},{"name":"数据库","_id":"cl7ketbe4002lo8ttb0hu6coe"},{"name":"Vue","_id":"cl7ketbe4002mo8ttcty9f0cx"},{"name":"RabbitMQ","_id":"cl7ketbe8002ro8ttgw5o7v26"},{"name":"消息队列","_id":"cl7ketbe9002to8tt5uq15hms"},{"name":"mybatis","_id":"cl7x0xnhe00015ktt8n7zgbhz"},{"name":"springMVC","_id":"cl7x0xnhj00035ktthvyx1xev"},{"name":"排序","_id":"cl83qro8b0000g0ttciz040iw"},{"name":"链表","_id":"cl842cz4c0000tcttaopcgta2"},{"name":"环","_id":"cl842cz4e0002tcttdju8bwus"},{"name":"数据结构","_id":"cl8g01tbw0001qgtt9ylo48gr"},{"name":"哈希","_id":"cl8g01tc50003qgttf0s5d0ec"},{"name":"过滤","_id":"cl8g01tc50004qgtt8pad1kpg"},{"name":"并查集","_id":"cl8h3ibd90001wktt50m11bba"},{"name":"字符串","_id":"cl8qyaf070001psttb7411849"},{"name":"模式匹配","_id":"cl8qyaf0e0003psttemxrgme0"},{"name":"回文","_id":"cl8qyaf0e0004pstt6hz26qqk"},{"name":"设计模式","_id":"cl92pxqyw0001cwttfzqcf3vr"},{"name":"UML","_id":"cl949a3no0000lktt931z16o2"}]}}